
DIG_F7_RTUCTRL7_V12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  080119b0  080119b0  000219b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ef8  08011ef8  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08011ef8  08011ef8  00021ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f00  08011f00  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f00  08011f00  00021f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f04  08011f04  00021f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08011f08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c670  20000090  08011f94  00030090  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  2000c700  08011f94  0003c700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4c8  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b5a  00000000  00000000  0004b584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0004f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d8  00000000  00000000  00050870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a418  00000000  00000000  00051e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f9ab  00000000  00000000  0007c260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102875  00000000  00000000  0009bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e480  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dc0  00000000  00000000  0019e4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011994 	.word	0x08011994

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08011994 	.word	0x08011994

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <computeCRC>:
  */

#include <CRC_dnp_modbus.h>

void computeCRC(uint16_t *crcAccum, unsigned char dataOctet)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
//y negar crc después de computar todos los datos (crc=~crc;).

	unsigned char i;
	//unsigned int temp;
	uint16_t temp;
	for(i=0; i<8; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e01e      	b.n	8000f1c <computeCRC+0x50>
	{
		temp=(*crcAccum ^ dataOctet) & 1;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	881a      	ldrh	r2, [r3, #0]
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	4053      	eors	r3, r2
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	81bb      	strh	r3, [r7, #12]
		*crcAccum>>=1;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	801a      	strh	r2, [r3, #0]
		dataOctet>>=1;
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	085b      	lsrs	r3, r3, #1
 8000f00:	70fb      	strb	r3, [r7, #3]
		if(temp)*crcAccum ^= 0xA6BC;  //Semilla Reversed
 8000f02:	89bb      	ldrh	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <computeCRC+0x4a>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <computeCRC+0x64>)
 8000f0e:	4053      	eors	r3, r2
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	801a      	strh	r2, [r3, #0]
	for(i=0; i<8; i++)
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	d9dd      	bls.n	8000ede <computeCRC+0x12>
	}
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	ffffa6bc 	.word	0xffffa6bc

08000f34 <cmpt_crcMODBUS>:

void cmpt_crcMODBUS(uint16_t *crcAccum, unsigned char dataOctet)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
	//iniciar crcMODBUS=0xFFFF antes de llamar a esta función
	//y NO negar crcMODBUS después de computar los datos.
		unsigned char i;
		uint16_t temp;
		for(i=0;i<8;i++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e01e      	b.n	8000f84 <cmpt_crcMODBUS+0x50>
		{
			temp=(*crcAccum ^ dataOctet)&1;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	881a      	ldrh	r2, [r3, #0]
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	4053      	eors	r3, r2
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	81bb      	strh	r3, [r7, #12]
			*crcAccum>>=1;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	085b      	lsrs	r3, r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	801a      	strh	r2, [r3, #0]
			dataOctet>>=1;
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	085b      	lsrs	r3, r3, #1
 8000f68:	70fb      	strb	r3, [r7, #3]
			if(temp)*crcAccum ^= 0xA001;  //Semilla Reversed
 8000f6a:	89bb      	ldrh	r3, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <cmpt_crcMODBUS+0x4a>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	881a      	ldrh	r2, [r3, #0]
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <cmpt_crcMODBUS+0x64>)
 8000f76:	4053      	eors	r3, r2
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	801a      	strh	r2, [r3, #0]
		for(i=0;i<8;i++)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	3301      	adds	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	d9dd      	bls.n	8000f46 <cmpt_crcMODBUS+0x12>
		}

}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	ffffa001 	.word	0xffffa001

08000f9c <Set_Pin_Output>:
//==========================================================================================
//  DS18B20 (Temperatura)
//==========================================================================================

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f00a fe36 	bl	800bc3c <HAL_GPIO_Init>
}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;    // PULLUP -> NOPULL
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f00a fe18 	bl	800bc3c <HAL_GPIO_Init>
}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);   // set the pin as output
 800101e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001022:	4815      	ldr	r0, [pc, #84]	; (8001078 <DS18B20_Start+0x64>)
 8001024:	f7ff ffba 	bl	8000f9c <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin low
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <DS18B20_Start+0x64>)
 8001030:	f00a ffc8 	bl	800bfc4 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8001034:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001038:	f005 f99a 	bl	8006370 <delay>
	Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);    // set the pin as input
 800103c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <DS18B20_Start+0x64>)
 8001042:	f7ff ffc9 	bl	8000fd8 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8001046:	2050      	movs	r0, #80	; 0x50
 8001048:	f005 f992 	bl	8006370 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_GPIO_Port, DS18B20_Pin))) response = 1;  //if the pin is low i.e the presence pulse is detected
 800104c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <DS18B20_Start+0x64>)
 8001052:	f00a ff9f 	bl	800bf94 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <DS18B20_Start+0x4e>
 800105c:	2301      	movs	r3, #1
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	e001      	b.n	8001066 <DS18B20_Start+0x52>
	else response = -1;
 8001062:	23ff      	movs	r3, #255	; 0xff
 8001064:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 8001066:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800106a:	f005 f981 	bl	8006370 <delay>

	return response;
 800106e:	79fb      	ldrb	r3, [r7, #7]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020c00 	.word	0x40020c00

0800107c <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);  // set as output
 8001086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108a:	4821      	ldr	r0, [pc, #132]	; (8001110 <DS18B20_Write+0x94>)
 800108c:	f7ff ff86 	bl	8000f9c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e034      	b.n	8001100 <DS18B20_Write+0x84>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	fa42 f303 	asr.w	r3, r2, r3
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d016      	beq.n	80010d4 <DS18B20_Write+0x58>
		{
			// write 1
			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);  // set as output
 80010a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010aa:	4819      	ldr	r0, [pc, #100]	; (8001110 <DS18B20_Write+0x94>)
 80010ac:	f7ff ff76 	bl	8000f9c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin LOW
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b6:	4816      	ldr	r0, [pc, #88]	; (8001110 <DS18B20_Write+0x94>)
 80010b8:	f00a ff84 	bl	800bfc4 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80010bc:	2001      	movs	r0, #1
 80010be:	f005 f957 	bl	8006370 <delay>

			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);  // set as input
 80010c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c6:	4812      	ldr	r0, [pc, #72]	; (8001110 <DS18B20_Write+0x94>)
 80010c8:	f7ff ff86 	bl	8000fd8 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 80010cc:	2032      	movs	r0, #50	; 0x32
 80010ce:	f005 f94f 	bl	8006370 <delay>
 80010d2:	e012      	b.n	80010fa <DS18B20_Write+0x7e>
		}
		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 80010d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <DS18B20_Write+0x94>)
 80010da:	f7ff ff5f 	bl	8000f9c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin LOW
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <DS18B20_Write+0x94>)
 80010e6:	f00a ff6d 	bl	800bfc4 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 80010ea:	2032      	movs	r0, #50	; 0x32
 80010ec:	f005 f940 	bl	8006370 <delay>

			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 80010f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f4:	4806      	ldr	r0, [pc, #24]	; (8001110 <DS18B20_Write+0x94>)
 80010f6:	f7ff ff6f 	bl	8000fd8 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3301      	adds	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b07      	cmp	r3, #7
 8001104:	ddc7      	ble.n	8001096 <DS18B20_Write+0x1a>
		}
	}
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40020c00 	.word	0x40020c00

08001114 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800111a:	2300      	movs	r3, #0
 800111c:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 800111e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001122:	481c      	ldr	r0, [pc, #112]	; (8001194 <DS18B20_Read+0x80>)
 8001124:	f7ff ff58 	bl	8000fd8 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	e02a      	b.n	8001184 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);   // set as output
 800112e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001132:	4818      	ldr	r0, [pc, #96]	; (8001194 <DS18B20_Read+0x80>)
 8001134:	f7ff ff32 	bl	8000f9c <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the data pin LOW
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113e:	4815      	ldr	r0, [pc, #84]	; (8001194 <DS18B20_Read+0x80>)
 8001140:	f00a ff40 	bl	800bfc4 <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 8001144:	2001      	movs	r0, #1
 8001146:	f005 f913 	bl	8006370 <delay>

		Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);  // set as input
 800114a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <DS18B20_Read+0x80>)
 8001150:	f7ff ff42 	bl	8000fd8 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_GPIO_Port, DS18B20_Pin))  // if the pin is HIGH
 8001154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001158:	480e      	ldr	r0, [pc, #56]	; (8001194 <DS18B20_Read+0x80>)
 800115a:	f00a ff1b 	bl	800bf94 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d009      	beq.n	8001178 <DS18B20_Read+0x64>
		{
			value |= 1<<i;  // read = 1
 8001164:	2201      	movs	r2, #1
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	b25a      	sxtb	r2, r3
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	4313      	orrs	r3, r2
 8001174:	b25b      	sxtb	r3, r3
 8001176:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 8001178:	2032      	movs	r0, #50	; 0x32
 800117a:	f005 f8f9 	bl	8006370 <delay>
	for (int i=0;i<8;i++)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b07      	cmp	r3, #7
 8001188:	ddd1      	ble.n	800112e <DS18B20_Read+0x1a>
	}
	return value;
 800118a:	79fb      	ldrb	r3, [r7, #7]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020c00 	.word	0x40020c00

08001198 <MY_FLASH_EraseSector>:

//functions definitions
//1. Erase Sector
void MY_FLASH_EraseSector(void)
//static void MY_FLASH_EraseSector(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800119c:	f00a fba0 	bl	800b8e0 <HAL_FLASH_Unlock>
	//Erase the required Flash sector // [range is 2.7V to 3.6V = FLASH_VOLTAGE_RANGE_3]
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <MY_FLASH_EraseSector+0x1c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2102      	movs	r1, #2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f00a fcfc 	bl	800bba4 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 80011ac:	f00a fbba 	bl	800b924 <HAL_FLASH_Lock>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200000b0 	.word	0x200000b0

080011b8 <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 80011c4:	4a05      	ldr	r2, [pc, #20]	; (80011dc <MY_FLASH_SetSectorAddrs+0x24>)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <MY_FLASH_SetSectorAddrs+0x28>)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	200000b0 	.word	0x200000b0
 80011e0:	200000ac 	.word	0x200000ac

080011e4 <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 80011e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011e8:	b088      	sub	sp, #32
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <MY_FLASH_WriteN+0xf0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	61fb      	str	r3, [r7, #28]
	
	//Erase sector before write
	MY_FLASH_EraseSector();
 80011fe:	f7ff ffcb 	bl	8001198 <MY_FLASH_EraseSector>
	
	//Unlock Flash
	HAL_FLASH_Unlock();
 8001202:	f00a fb6d 	bl	800b8e0 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d03f      	beq.n	800128c <MY_FLASH_WriteN+0xa8>
 800120c:	2b02      	cmp	r3, #2
 800120e:	dc59      	bgt.n	80012c4 <MY_FLASH_WriteN+0xe0>
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <MY_FLASH_WriteN+0x36>
 8001214:	2b01      	cmp	r3, #1
 8001216:	d01c      	beq.n	8001252 <MY_FLASH_WriteN+0x6e>
 8001218:	e054      	b.n	80012c4 <MY_FLASH_WriteN+0xe0>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	e013      	b.n	8001248 <MY_FLASH_WriteN+0x64>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2200      	movs	r2, #0
 800122c:	469a      	mov	sl, r3
 800122e:	4693      	mov	fp, r2
 8001230:	4652      	mov	r2, sl
 8001232:	465b      	mov	r3, fp
 8001234:	69f9      	ldr	r1, [r7, #28]
 8001236:	2000      	movs	r0, #0
 8001238:	f00a faf6 	bl	800b828 <HAL_FLASH_Program>
					flashAddress++;
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	3301      	adds	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	3301      	adds	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	d3e7      	bcc.n	8001220 <MY_FLASH_WriteN+0x3c>
				}
			break;
 8001250:	e038      	b.n	80012c4 <MY_FLASH_WriteN+0xe0>
		
		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e014      	b.n	8001282 <MY_FLASH_WriteN+0x9e>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	4413      	add	r3, r2
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	2200      	movs	r2, #0
 8001266:	4698      	mov	r8, r3
 8001268:	4691      	mov	r9, r2
 800126a:	4642      	mov	r2, r8
 800126c:	464b      	mov	r3, r9
 800126e:	69f9      	ldr	r1, [r7, #28]
 8001270:	2001      	movs	r0, #1
 8001272:	f00a fad9 	bl	800b828 <HAL_FLASH_Program>
					flashAddress+=2;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3302      	adds	r3, #2
 800127a:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d3e6      	bcc.n	8001258 <MY_FLASH_WriteN+0x74>
				}
			break;
 800128a:	e01b      	b.n	80012c4 <MY_FLASH_WriteN+0xe0>
		
		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	e013      	b.n	80012ba <MY_FLASH_WriteN+0xd6>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	4413      	add	r3, r2
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	461c      	mov	r4, r3
 80012a0:	4615      	mov	r5, r2
 80012a2:	4622      	mov	r2, r4
 80012a4:	462b      	mov	r3, r5
 80012a6:	69f9      	ldr	r1, [r7, #28]
 80012a8:	2002      	movs	r0, #2
 80012aa:	f00a fabd 	bl	800b828 <HAL_FLASH_Program>
					flashAddress+=4;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	3301      	adds	r3, #1
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d3e7      	bcc.n	8001292 <MY_FLASH_WriteN+0xae>
				}
			break;
 80012c2:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 80012c4:	f00a fb2e 	bl	800b924 <HAL_FLASH_Lock>
}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012d2:	bf00      	nop
 80012d4:	200000ac 	.word	0x200000ac

080012d8 <MY_FLASH_ReadN>:
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <MY_FLASH_ReadN+0xb4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	61fb      	str	r3, [r7, #28]
	
	switch(dataType)
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d02f      	beq.n	8001356 <MY_FLASH_ReadN+0x7e>
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	dc42      	bgt.n	8001380 <MY_FLASH_ReadN+0xa8>
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <MY_FLASH_ReadN+0x2c>
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d014      	beq.n	800132c <MY_FLASH_ReadN+0x54>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8001302:	e03d      	b.n	8001380 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e00b      	b.n	8001322 <MY_FLASH_ReadN+0x4a>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	440b      	add	r3, r1
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3301      	adds	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	3301      	adds	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3ef      	bcc.n	800130a <MY_FLASH_ReadN+0x32>
			break;
 800132a:	e029      	b.n	8001380 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e00c      	b.n	800134c <MY_FLASH_ReadN+0x74>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	440b      	add	r3, r1
 800133c:	8812      	ldrh	r2, [r2, #0]
 800133e:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	3302      	adds	r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	d3ee      	bcc.n	8001332 <MY_FLASH_ReadN+0x5a>
			break;
 8001354:	e014      	b.n	8001380 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	e00c      	b.n	8001376 <MY_FLASH_ReadN+0x9e>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	440b      	add	r3, r1
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3304      	adds	r3, #4
 800136e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	3301      	adds	r3, #1
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	d3ee      	bcc.n	800135c <MY_FLASH_ReadN+0x84>
			break;
 800137e:	bf00      	nop
}
 8001380:	bf00      	nop
 8001382:	3724      	adds	r7, #36	; 0x24
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	200000ac 	.word	0x200000ac

08001390 <GPS_Config>:

//======================== GPS ===========================================
// GPS_Config();  //Como usar la funcion desde el main
//========================================================================

void GPS_Config(void){
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b0a6      	sub	sp, #152	; 0x98
 8001394:	af00      	add	r7, sp, #0
//
//	0xF0,0x04,0x00,0x01,0x00,0x00,0x00,0x00, // Payload
//
//	0x04,0x44}; // Checksum

uint8_t ubxcfgmsg_gpggl[] = {//UBX-CFG-MSG-NMEA GxGGL
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <GPS_Config+0xe4>)
 8001398:	f107 0488 	add.w	r4, r7, #136	; 0x88
 800139c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x01, // Payload

	0x01,0x2B}; // Checksum

uint8_t ubxcfgmsg_gpgga[] = {//UBX-CFG-MSG-NMEA - RESET ALL COM
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <GPS_Config+0xe8>)
 80013a4:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80013a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x01, // Payload

	0x00,0x24}; // Checksum

uint8_t ubxcfgmsg_gpgsa[] = {//UBX-CFG-MSG-NMEA - RESET ALL COM
 80013ae:	4b33      	ldr	r3, [pc, #204]	; (800147c <GPS_Config+0xec>)
 80013b0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80013b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	0xF0,0x02,0x00,0x00,0x00,0x00,0x00,0x01, // Payload

	0x02,0x32}; // Checksum

uint8_t ubxcfgmsg_gpgsv[] = {//UBX-CFG-MSG-NMEA - RESET ALL COM
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <GPS_Config+0xf0>)
 80013bc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80013c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	0xF0,0x03,0x00,0x00,0x00,0x00,0x00,0x01, // Payload

	0x03,0x39}; // Checksum

uint8_t ubxcfgmsg_gpvtg[] = {//UBX-CFG-MSG-NMEA- RESET ALL COM
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <GPS_Config+0xf4>)
 80013c8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80013cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	0x08,0x62}; // Checksum


//Configuration Pedestrian Mode

uint8_t ubxcfgmsg_nav5[] = {//UBX-CFG-NAV5
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <GPS_Config+0xf8>)
 80013d4:	f107 041c 	add.w	r4, r7, #28
 80013d8:	461d      	mov	r5, r3
 80013da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	0x4A,0x75}; // Checksum


uint8_t ubxcfgcfg_save[] = {//UBX-CFG-CFG Save Current Configuration in Battery BackUp
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <GPS_Config+0xfc>)
 80013ec:	1d3c      	adds	r4, r7, #4
 80013ee:	461d      	mov	r5, r3
 80013f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013f8:	6020      	str	r0, [r4, #0]
 80013fa:	3404      	adds	r4, #4
 80013fc:	7021      	strb	r1, [r4, #0]

	0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x01, // Payload

	0x1B,0xA9}; // Checksum

	HAL_UART_Transmit(&huart2, ubxcfgmsg_gpgga, sizeof(ubxcfgmsg_gpgga)/sizeof(uint8_t), 5000);
 80013fe:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001402:	f241 3388 	movw	r3, #5000	; 0x1388
 8001406:	2210      	movs	r2, #16
 8001408:	4821      	ldr	r0, [pc, #132]	; (8001490 <GPS_Config+0x100>)
 800140a:	f00d f84f 	bl	800e4ac <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, ubxcfgmsg_gpggl, sizeof(ubxcfgmsg_gpggl)/sizeof(uint8_t), 5000);
 800140e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001412:	f241 3388 	movw	r3, #5000	; 0x1388
 8001416:	2210      	movs	r2, #16
 8001418:	481d      	ldr	r0, [pc, #116]	; (8001490 <GPS_Config+0x100>)
 800141a:	f00d f847 	bl	800e4ac <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, ubxcfgmsg_gpgsa, sizeof(ubxcfgmsg_gpgsa)/sizeof(uint8_t), 5000);
 800141e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001422:	f241 3388 	movw	r3, #5000	; 0x1388
 8001426:	2210      	movs	r2, #16
 8001428:	4819      	ldr	r0, [pc, #100]	; (8001490 <GPS_Config+0x100>)
 800142a:	f00d f83f 	bl	800e4ac <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, ubxcfgmsg_gpgsv, sizeof(ubxcfgmsg_gpgsv)/sizeof(uint8_t), 5000);
 800142e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001432:	f241 3388 	movw	r3, #5000	; 0x1388
 8001436:	2210      	movs	r2, #16
 8001438:	4815      	ldr	r0, [pc, #84]	; (8001490 <GPS_Config+0x100>)
 800143a:	f00d f837 	bl	800e4ac <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, ubxcfgmsg_gpvtg, sizeof(ubxcfgmsg_gpvtg)/sizeof(uint8_t), 5000);
 800143e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001442:	f241 3388 	movw	r3, #5000	; 0x1388
 8001446:	2210      	movs	r2, #16
 8001448:	4811      	ldr	r0, [pc, #68]	; (8001490 <GPS_Config+0x100>)
 800144a:	f00d f82f 	bl	800e4ac <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, ubxcfgmsg_nav5, sizeof(ubxcfgmsg_nav5)/sizeof(uint8_t), 5000);
 800144e:	f107 011c 	add.w	r1, r7, #28
 8001452:	f241 3388 	movw	r3, #5000	; 0x1388
 8001456:	222c      	movs	r2, #44	; 0x2c
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <GPS_Config+0x100>)
 800145a:	f00d f827 	bl	800e4ac <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, ubxcfgcfg_save, sizeof(ubxcfgcfg_save)/sizeof(uint8_t), 5000);
 800145e:	1d39      	adds	r1, r7, #4
 8001460:	f241 3388 	movw	r3, #5000	; 0x1388
 8001464:	2215      	movs	r2, #21
 8001466:	480a      	ldr	r0, [pc, #40]	; (8001490 <GPS_Config+0x100>)
 8001468:	f00d f820 	bl	800e4ac <HAL_UART_Transmit>

}
 800146c:	bf00      	nop
 800146e:	3798      	adds	r7, #152	; 0x98
 8001470:	46bd      	mov	sp, r7
 8001472:	bdb0      	pop	{r4, r5, r7, pc}
 8001474:	080119b0 	.word	0x080119b0
 8001478:	080119c0 	.word	0x080119c0
 800147c:	080119d0 	.word	0x080119d0
 8001480:	080119e0 	.word	0x080119e0
 8001484:	080119f0 	.word	0x080119f0
 8001488:	08011a00 	.word	0x08011a00
 800148c:	08011a2c 	.word	0x08011a2c
 8001490:	20000418 	.word	0x20000418
 8001494:	00000000 	.word	0x00000000

08001498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f008 ffc1 	bl	800a422 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a0:	f000 fbc8 	bl	8001c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a4:	f000 ff6c 	bl	8002380 <MX_GPIO_Init>
  MX_DMA_Init();
 80014a8:	f000 ff00 	bl	80022ac <MX_DMA_Init>
  MX_UART4_Init();
 80014ac:	f000 fddc 	bl	8002068 <MX_UART4_Init>
  MX_UART7_Init();
 80014b0:	f000 fe0c 	bl	80020cc <MX_UART7_Init>
  MX_UART8_Init();
 80014b4:	f000 fe3a 	bl	800212c <MX_UART8_Init>
  MX_USART2_UART_Init();
 80014b8:	f000 fe68 	bl	800218c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014bc:	f000 fe96 	bl	80021ec <MX_USART3_UART_Init>
  MX_RTC_Init();
 80014c0:	f000 fcc4 	bl	8001e4c <MX_RTC_Init>
  MX_CRC_Init();
 80014c4:	f000 fc82 	bl	8001dcc <MX_CRC_Init>
  MX_ADC1_Init();
 80014c8:	f000 fc2e 	bl	8001d28 <MX_ADC1_Init>
  MX_TIM1_Init();
 80014cc:	f000 fce4 	bl	8001e98 <MX_TIM1_Init>
  MX_TIM6_Init();
 80014d0:	f000 fd36 	bl	8001f40 <MX_TIM6_Init>
  MX_TIM7_Init();
 80014d4:	f000 fd6c 	bl	8001fb0 <MX_TIM7_Init>
  MX_RNG_Init();
 80014d8:	f000 fca4 	bl	8001e24 <MX_RNG_Init>
  MX_USART6_UART_Init();
 80014dc:	f000 feb6 	bl	800224c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80014e0:	f000 fd9e 	bl	8002020 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  //======================== RTC ===========================================
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 80014e4:	2101      	movs	r1, #1
 80014e6:	489b      	ldr	r0, [pc, #620]	; (8001754 <main+0x2bc>)
 80014e8:	f00c fa42 	bl	800d970 <HAL_RTCEx_BKUPRead>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d001      	beq.n	80014fa <main+0x62>
    {
  	  set_time_date ();
 80014f6:	f001 f8a3 	bl	8002640 <set_time_date>
    }

  //======================== GPS ===========================================
  GPS_Config();  // Funcion desde el "GPS_NEO_06.c" | "GPS_NEO_06.h"
 80014fa:	f7ff ff49 	bl	8001390 <GPS_Config>

  //======================== BUZZER ========================================
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);    // Señales Buzzer
 80014fe:	2201      	movs	r2, #1
 8001500:	2104      	movs	r1, #4
 8001502:	4895      	ldr	r0, [pc, #596]	; (8001758 <main+0x2c0>)
 8001504:	f00a fd5e 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150c:	f008 ffe6 	bl	800a4dc <HAL_Delay>
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);  // Señales Buzzer
 8001510:	2200      	movs	r2, #0
 8001512:	2104      	movs	r1, #4
 8001514:	4890      	ldr	r0, [pc, #576]	; (8001758 <main+0x2c0>)
 8001516:	f00a fd55 	bl	800bfc4 <HAL_GPIO_WritePin>

  //======================== UART 8 ===========================================
  __HAL_UART_ENABLE_IT(&huart8, UART_IT_IDLE);
 800151a:	4b90      	ldr	r3, [pc, #576]	; (800175c <main+0x2c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b8e      	ldr	r3, [pc, #568]	; (800175c <main+0x2c4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 0210 	orr.w	r2, r2, #16
 8001528:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart8, Buffer_08_Rx, BUFFER_RX_08_SIZE);
 800152a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152e:	498c      	ldr	r1, [pc, #560]	; (8001760 <main+0x2c8>)
 8001530:	488a      	ldr	r0, [pc, #552]	; (800175c <main+0x2c4>)
 8001532:	f00d f83e 	bl	800e5b2 <HAL_UART_Receive_DMA>
  ////HAL_GPIO_WritePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin, GPIO_PIN_SET);

  //======================== UART 3 ===========================================
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8001536:	4b8b      	ldr	r3, [pc, #556]	; (8001764 <main+0x2cc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b89      	ldr	r3, [pc, #548]	; (8001764 <main+0x2cc>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0210 	orr.w	r2, r2, #16
 8001544:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart3, Buffer_03_Rx, BUFFER_RX_03_SIZE);
 8001546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154a:	4987      	ldr	r1, [pc, #540]	; (8001768 <main+0x2d0>)
 800154c:	4885      	ldr	r0, [pc, #532]	; (8001764 <main+0x2cc>)
 800154e:	f00d f830 	bl	800e5b2 <HAL_UART_Receive_DMA>
  //HAL_GPIO_WritePin(Led_Verde_GPIO_Port, Led_Verde_Pin, GPIO_PIN_SET);

  //======================== UART 4 ===========================================
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8001552:	4b86      	ldr	r3, [pc, #536]	; (800176c <main+0x2d4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b84      	ldr	r3, [pc, #528]	; (800176c <main+0x2d4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0210 	orr.w	r2, r2, #16
 8001560:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart4, Buffer_04_Rx, BUFFER_RX_04_SIZE);
 8001562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001566:	4982      	ldr	r1, [pc, #520]	; (8001770 <main+0x2d8>)
 8001568:	4880      	ldr	r0, [pc, #512]	; (800176c <main+0x2d4>)
 800156a:	f00d f822 	bl	800e5b2 <HAL_UART_Receive_DMA>

  //======================== USART 2 ==========================================
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 800156e:	4b81      	ldr	r3, [pc, #516]	; (8001774 <main+0x2dc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b7f      	ldr	r3, [pc, #508]	; (8001774 <main+0x2dc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0210 	orr.w	r2, r2, #16
 800157c:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart2, Buffer_02_Rx, BUFFER_RX_02_SIZE);
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	497d      	ldr	r1, [pc, #500]	; (8001778 <main+0x2e0>)
 8001582:	487c      	ldr	r0, [pc, #496]	; (8001774 <main+0x2dc>)
 8001584:	f00d f815 	bl	800e5b2 <HAL_UART_Receive_DMA>
  //HAL_GPIO_WritePin(Led_Verde_GPIO_Port, Led_Verde_Pin, GPIO_PIN_SET);

  //======================== UART 6 ===========================================
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001588:	4b7c      	ldr	r3, [pc, #496]	; (800177c <main+0x2e4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b7b      	ldr	r3, [pc, #492]	; (800177c <main+0x2e4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0210 	orr.w	r2, r2, #16
 8001596:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart6, Buffer_06_Rx, BUFFER_RX_06_SIZE);
 8001598:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159c:	4978      	ldr	r1, [pc, #480]	; (8001780 <main+0x2e8>)
 800159e:	4877      	ldr	r0, [pc, #476]	; (800177c <main+0x2e4>)
 80015a0:	f00d f807 	bl	800e5b2 <HAL_UART_Receive_DMA>
  //HAL_ADC_Start_DMA (&hadc1, adc_valor, 3);  // iniciar adc en modo DMA

  //===========================================================================
  //===== BUSCAR LO DATOS desde FLASH a RAM CONFIG  ===========================

  MY_FLASH_SetSectorAddrs (6, 0x08080000);  // [0x08080000 - 0x080BFFF] --> 256 Kbytes
 80015a4:	4977      	ldr	r1, [pc, #476]	; (8001784 <main+0x2ec>)
 80015a6:	2006      	movs	r0, #6
 80015a8:	f7ff fe06 	bl	80011b8 <MY_FLASH_SetSectorAddrs>
  MY_FLASH_ReadN(0, Buffer_Config, sizeof(Buffer_Config), DATA_TYPE_8);
 80015ac:	2300      	movs	r3, #0
 80015ae:	220d      	movs	r2, #13
 80015b0:	4975      	ldr	r1, [pc, #468]	; (8001788 <main+0x2f0>)
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fe90 	bl	80012d8 <MY_FLASH_ReadN>

  ID = Buffer_Config [0] + 256 * Buffer_Config [1];
 80015b8:	4b73      	ldr	r3, [pc, #460]	; (8001788 <main+0x2f0>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b72      	ldr	r3, [pc, #456]	; (8001788 <main+0x2f0>)
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b6f      	ldr	r3, [pc, #444]	; (800178c <main+0x2f4>)
 80015ce:	801a      	strh	r2, [r3, #0]
  MASTER = Buffer_Config [2] + 256 * Buffer_Config [3];
 80015d0:	4b6d      	ldr	r3, [pc, #436]	; (8001788 <main+0x2f0>)
 80015d2:	789b      	ldrb	r3, [r3, #2]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	4b6c      	ldr	r3, [pc, #432]	; (8001788 <main+0x2f0>)
 80015d8:	78db      	ldrb	r3, [r3, #3]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b6a      	ldr	r3, [pc, #424]	; (8001790 <main+0x2f8>)
 80015e6:	801a      	strh	r2, [r3, #0]
  BAUD_SCADA = Buffer_Config [4];
 80015e8:	4b67      	ldr	r3, [pc, #412]	; (8001788 <main+0x2f0>)
 80015ea:	791a      	ldrb	r2, [r3, #4]
 80015ec:	4b69      	ldr	r3, [pc, #420]	; (8001794 <main+0x2fc>)
 80015ee:	701a      	strb	r2, [r3, #0]
  BAUD_REC_MED = Buffer_Config [5];
 80015f0:	4b65      	ldr	r3, [pc, #404]	; (8001788 <main+0x2f0>)
 80015f2:	795a      	ldrb	r2, [r3, #5]
 80015f4:	4b68      	ldr	r3, [pc, #416]	; (8001798 <main+0x300>)
 80015f6:	701a      	strb	r2, [r3, #0]
  CANT_DISP_R = Buffer_Config [6];
 80015f8:	4b63      	ldr	r3, [pc, #396]	; (8001788 <main+0x2f0>)
 80015fa:	799a      	ldrb	r2, [r3, #6]
 80015fc:	4b67      	ldr	r3, [pc, #412]	; (800179c <main+0x304>)
 80015fe:	701a      	strb	r2, [r3, #0]
  CANT_DISP_M = Buffer_Config [7];
 8001600:	4b61      	ldr	r3, [pc, #388]	; (8001788 <main+0x2f0>)
 8001602:	79da      	ldrb	r2, [r3, #7]
 8001604:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <main+0x308>)
 8001606:	701a      	strb	r2, [r3, #0]
  UR = Buffer_Config [8];
 8001608:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <main+0x2f0>)
 800160a:	7a1a      	ldrb	r2, [r3, #8]
 800160c:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <main+0x30c>)
 800160e:	701a      	strb	r2, [r3, #0]
  REINT = Buffer_Config [9];
 8001610:	4b5d      	ldr	r3, [pc, #372]	; (8001788 <main+0x2f0>)
 8001612:	7a5a      	ldrb	r2, [r3, #9]
 8001614:	4b64      	ldr	r3, [pc, #400]	; (80017a8 <main+0x310>)
 8001616:	701a      	strb	r2, [r3, #0]
  TPO_REINT = Buffer_Config[10] + 256 * Buffer_Config[11];
 8001618:	4b5b      	ldr	r3, [pc, #364]	; (8001788 <main+0x2f0>)
 800161a:	7a9b      	ldrb	r3, [r3, #10]
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b5a      	ldr	r3, [pc, #360]	; (8001788 <main+0x2f0>)
 8001620:	7adb      	ldrb	r3, [r3, #11]
 8001622:	b29b      	uxth	r3, r3
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b29b      	uxth	r3, r3
 8001628:	4413      	add	r3, r2
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <main+0x314>)
 800162e:	801a      	strh	r2, [r3, #0]

  //======================== SPIV2_CTRL_49 ====================================
  spiv2_ctrl_49_init ();
 8001630:	f004 f8c2 	bl	80057b8 <spiv2_ctrl_49_init>

  //======================== GPIO LEDS ========================================
  HAL_GPIO_WritePin(UART8_RXD_GPIO_Port, UART8_RXD_Pin, GPIO_PIN_SET);       // Amarillo del USART3
 8001634:	2201      	movs	r2, #1
 8001636:	2110      	movs	r1, #16
 8001638:	485d      	ldr	r0, [pc, #372]	; (80017b0 <main+0x318>)
 800163a:	f00a fcc3 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPIV2_V5LED_GPIO_Port, SPIV2_V5LED_Pin, GPIO_PIN_RESET); // P-S - Control
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001644:	485a      	ldr	r0, [pc, #360]	; (80017b0 <main+0x318>)
 8001646:	f00a fcbd 	bl	800bfc4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_RESET); // CODE _-------->
  HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_RESET);             // LATCH Leds 64
 800164a:	2200      	movs	r2, #0
 800164c:	2102      	movs	r1, #2
 800164e:	4858      	ldr	r0, [pc, #352]	; (80017b0 <main+0x318>)
 8001650:	f00a fcb8 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SERIAL_OUT_GPIO_Port, SERIAL_OUT_Pin, GPIO_PIN_RESET);   // SERIAL_OUT Leds 64
 8001654:	2200      	movs	r2, #0
 8001656:	2101      	movs	r1, #1
 8001658:	4855      	ldr	r0, [pc, #340]	; (80017b0 <main+0x318>)
 800165a:	f00a fcb3 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);           // ENABLE Leds 64
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001664:	4853      	ldr	r0, [pc, #332]	; (80017b4 <main+0x31c>)
 8001666:	f00a fcad 	bl	800bfc4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_RESET);     // USART3_DE (RS485)
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001670:	4851      	ldr	r0, [pc, #324]	; (80017b8 <main+0x320>)
 8001672:	f00a fca7 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Led_Rojo_GPIO_Port, Led_Rojo_Pin, GPIO_PIN_SET);         // Panel de los LEDs
 8001676:	2201      	movs	r2, #1
 8001678:	2108      	movs	r1, #8
 800167a:	484e      	ldr	r0, [pc, #312]	; (80017b4 <main+0x31c>)
 800167c:	f00a fca2 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Led_Verde_GPIO_Port, Led_Verde_Pin, GPIO_PIN_SET);       // Panel de los LEDs
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001686:	484a      	ldr	r0, [pc, #296]	; (80017b0 <main+0x318>)
 8001688:	f00a fc9c 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin, GPIO_PIN_SET); // Panel de los LEDs
 800168c:	2201      	movs	r2, #1
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	4847      	ldr	r0, [pc, #284]	; (80017b0 <main+0x318>)
 8001692:	f00a fc97 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Led_Azul_GPIO_Port, Led_Azul_Pin, GPIO_PIN_SET);         // Panel de los LEDs
 8001696:	2201      	movs	r2, #1
 8001698:	2120      	movs	r1, #32
 800169a:	4845      	ldr	r0, [pc, #276]	; (80017b0 <main+0x318>)
 800169c:	f00a fc92 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);           // Señales Buzzer
 80016a0:	2200      	movs	r2, #0
 80016a2:	2104      	movs	r1, #4
 80016a4:	482c      	ldr	r0, [pc, #176]	; (8001758 <main+0x2c0>)
 80016a6:	f00a fc8d 	bl	800bfc4 <HAL_GPIO_WritePin>

  Flag_08_Rx = 0;
 80016aa:	4b44      	ldr	r3, [pc, #272]	; (80017bc <main+0x324>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
  Flag_03_Rx = 0;
 80016b0:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <main+0x328>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
  Flag_04_Rx = 0;
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <main+0x32c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
  Flag_06_Rx = 0;
 80016bc:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <main+0x330>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]

  //======================== TIM 1 ============================================
  HAL_TIM_Base_Start(&htim1);
 80016c2:	4842      	ldr	r0, [pc, #264]	; (80017cc <main+0x334>)
 80016c4:	f00c f9c4 	bl	800da50 <HAL_TIM_Base_Start>

  //======================== TIM 6 ============================================
  HAL_TIM_Base_Start_IT(&htim6); //Tiempo de x seg para temp, tension, etc
 80016c8:	4841      	ldr	r0, [pc, #260]	; (80017d0 <main+0x338>)
 80016ca:	f00c fa31 	bl	800db30 <HAL_TIM_Base_Start_IT>

  //======================== TIM 7 ============================================
  HAL_TIM_Base_Start_IT(&htim7); //Tiempo de x seg para temp, tension, etc
 80016ce:	4841      	ldr	r0, [pc, #260]	; (80017d4 <main+0x33c>)
 80016d0:	f00c fa2e 	bl	800db30 <HAL_TIM_Base_Start_IT>

  //======================== TIM 10 ============================================
  HAL_TIM_Base_Start_IT(&htim10); //Tiempo de 1 seg para temp, tension, etc
 80016d4:	4840      	ldr	r0, [pc, #256]	; (80017d8 <main+0x340>)
 80016d6:	f00c fa2b 	bl	800db30 <HAL_TIM_Base_Start_IT>

  //======================== ERRORES p/Digital ================================
  memset(Buffer_error_R, 0x00 ,sizeof(Buffer_error_R));
 80016da:	2220      	movs	r2, #32
 80016dc:	2100      	movs	r1, #0
 80016de:	483f      	ldr	r0, [pc, #252]	; (80017dc <main+0x344>)
 80016e0:	f00e fa30 	bl	800fb44 <memset>
  memset(Buffer_error_M, 0x00 ,sizeof(Buffer_error_M));
 80016e4:	2220      	movs	r2, #32
 80016e6:	2100      	movs	r1, #0
 80016e8:	483d      	ldr	r0, [pc, #244]	; (80017e0 <main+0x348>)
 80016ea:	f00e fa2b 	bl	800fb44 <memset>

  //==================================================================================
  //===== PROGRAMACION DEL PEDIDO [UART 6] MEM FLASH (SW_01) =========================

  //HAL_GPIO_ReadPin(SW_01_GPIO_Port, SW_01_Pin);
  Flag_06_Rx = 0;
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <main+0x330>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
  if(HAL_GPIO_ReadPin(SW_01_GPIO_Port, SW_01_Pin) == 0)
 80016f4:	2110      	movs	r1, #16
 80016f6:	482f      	ldr	r0, [pc, #188]	; (80017b4 <main+0x31c>)
 80016f8:	f00a fc4c 	bl	800bf94 <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d176      	bne.n	80017f0 <main+0x358>
  {
  	  RxTotal06=0;
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <main+0x34c>)
 8001704:	2200      	movs	r2, #0
 8001706:	801a      	strh	r2, [r3, #0]
	  Flag_06_Rx = 0;
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <main+0x330>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
	  for (;;)
	  {
		  if (Flag_06_Rx == 1)
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <main+0x330>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d118      	bne.n	8001748 <main+0x2b0>
		  {
			  //Esperar la Rx desde el Uart 06 (Datos del Pedido)
			  HAL_GPIO_WritePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	4825      	ldr	r0, [pc, #148]	; (80017b0 <main+0x318>)
 800171c:	f00a fc52 	bl	800bfc4 <HAL_GPIO_WritePin>

			  // Sector = 7 [0x080C0000] para uC STM32F756xx, STM32F745xx y STM32F746xx
			  MY_FLASH_SetSectorAddrs (7, 0x080C0000);  // [0x080C0000 - 0x080CFFFF] --> 256 Kbytes
 8001720:	4931      	ldr	r1, [pc, #196]	; (80017e8 <main+0x350>)
 8001722:	2007      	movs	r0, #7
 8001724:	f7ff fd48 	bl	80011b8 <MY_FLASH_SetSectorAddrs>

			  // MY_FLASH_WriteN(0, myTestWrite, 10, DATA_TYPE_8);  //Bytes
			  MY_FLASH_WriteN(0, Buffer_06_Rx_W, sizeof(Buffer_06_Rx_W), DATA_TYPE_8);  //Bytes
 8001728:	2300      	movs	r3, #0
 800172a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172e:	492f      	ldr	r1, [pc, #188]	; (80017ec <main+0x354>)
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff fd57 	bl	80011e4 <MY_FLASH_WriteN>

			  HAL_GPIO_WritePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin, GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	481d      	ldr	r0, [pc, #116]	; (80017b0 <main+0x318>)
 800173c:	f00a fc42 	bl	800bfc4 <HAL_GPIO_WritePin>
			  //analizar_Rx_04_local();  //
			  Flag_06_Rx = 0;
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <main+0x330>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e7e2      	b.n	800170e <main+0x276>
		  }
		  else
		  {
			  //Salir desde el Monitor (Uart 06) -> Fin
			  HAL_GPIO_WritePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	4818      	ldr	r0, [pc, #96]	; (80017b0 <main+0x318>)
 800174e:	f00a fc39 	bl	800bfc4 <HAL_GPIO_WritePin>
		  if (Flag_06_Rx == 1)
 8001752:	e7dc      	b.n	800170e <main+0x276>
 8001754:	20000130 	.word	0x20000130
 8001758:	40020800 	.word	0x40020800
 800175c:	20000390 	.word	0x20000390
 8001760:	20003d00 	.word	0x20003d00
 8001764:	200004a0 	.word	0x200004a0
 8001768:	2000c138 	.word	0x2000c138
 800176c:	20000280 	.word	0x20000280
 8001770:	2000c358 	.word	0x2000c358
 8001774:	20000418 	.word	0x20000418
 8001778:	2000c570 	.word	0x2000c570
 800177c:	20000528 	.word	0x20000528
 8001780:	2000412c 	.word	0x2000412c
 8001784:	08080000 	.word	0x08080000
 8001788:	20000910 	.word	0x20000910
 800178c:	2000091e 	.word	0x2000091e
 8001790:	20000920 	.word	0x20000920
 8001794:	20000922 	.word	0x20000922
 8001798:	20000923 	.word	0x20000923
 800179c:	20000924 	.word	0x20000924
 80017a0:	20000925 	.word	0x20000925
 80017a4:	20000926 	.word	0x20000926
 80017a8:	20000927 	.word	0x20000927
 80017ac:	20000928 	.word	0x20000928
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40020c00 	.word	0x40020c00
 80017bc:	20003f04 	.word	0x20003f04
 80017c0:	2000c33c 	.word	0x2000c33c
 80017c4:	2000c55c 	.word	0x2000c55c
 80017c8:	2000c130 	.word	0x2000c130
 80017cc:	20000150 	.word	0x20000150
 80017d0:	2000019c 	.word	0x2000019c
 80017d4:	200001e8 	.word	0x200001e8
 80017d8:	20000234 	.word	0x20000234
 80017dc:	20003218 	.word	0x20003218
 80017e0:	20003258 	.word	0x20003258
 80017e4:	2000412a 	.word	0x2000412a
 80017e8:	080c0000 	.word	0x080c0000
 80017ec:	20008130 	.word	0x20008130
  }

  //==================================================================================
  //===== PROGRAMACION DE LA CONFIGURACION [UART 6] CONFIG (SW_03) ===================

  Flag_06_Rx = 0;
 80017f0:	4b61      	ldr	r3, [pc, #388]	; (8001978 <main+0x4e0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]

  if(HAL_GPIO_ReadPin(SW_03_GPIO_Port, SW_03_Pin) == 0)
 80017f6:	2140      	movs	r1, #64	; 0x40
 80017f8:	4860      	ldr	r0, [pc, #384]	; (800197c <main+0x4e4>)
 80017fa:	f00a fbcb 	bl	800bf94 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <main+0x370>
  {
	  Prog_Config();
 8001804:	f007 f92a 	bl	8008a5c <Prog_Config>

  //==================================================================================
  //============ PROGRAMACION DEL ID [UART 6] (Espera 5 Seg)==========================
  //  Flag_06_Rx = 0;

  if(HAL_GPIO_ReadPin(SW_02_GPIO_Port, SW_02_Pin) == 0)
 8001808:	2120      	movs	r1, #32
 800180a:	485c      	ldr	r0, [pc, #368]	; (800197c <main+0x4e4>)
 800180c:	f00a fbc2 	bl	800bf94 <HAL_GPIO_ReadPin>
  //Esperar la Rx desde el Uart 06 (Monitor)
  //HAL_GPIO_WritePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin, GPIO_PIN_RESET);

  //======================== DS18B20 Temperatura ===========================================
  /***** DS18B20 TEMPERATURA - Configuracion/Grabar los datos hacia el SCRATCHPAD ********/
  		  presence = DS18B20_Start ();
 8001810:	f7ff fc00 	bl	8001014 <DS18B20_Start>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	4b59      	ldr	r3, [pc, #356]	; (8001980 <main+0x4e8>)
 800181a:	701a      	strb	r2, [r3, #0]
  		  HAL_Delay (1);
 800181c:	2001      	movs	r0, #1
 800181e:	f008 fe5d 	bl	800a4dc <HAL_Delay>
  		  DS18B20_Write (0xCC);  // skip ROM
 8001822:	20cc      	movs	r0, #204	; 0xcc
 8001824:	f7ff fc2a 	bl	800107c <DS18B20_Write>
  		  DS18B20_Write (0x4E);  // convert t
 8001828:	204e      	movs	r0, #78	; 0x4e
 800182a:	f7ff fc27 	bl	800107c <DS18B20_Write>
  		  //----------------------------------
  		  DS18B20_Write (0x00);  // Th
 800182e:	2000      	movs	r0, #0
 8001830:	f7ff fc24 	bl	800107c <DS18B20_Write>
  		  DS18B20_Write (0x00);  // Tl
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fc21 	bl	800107c <DS18B20_Write>

 		  //DS18B20_Write (0x7F);  // Configuracion x 12 Bits
  		  //DS18B20_Write (0x5F);  // Configuracion x 11 Bits
  		  //DS18B20_Write (0x3F);  // Configuracion x 10 Bits
  		  DS18B20_Write (0x1F);  // Configuracion x 9 Bits
 800183a:	201f      	movs	r0, #31
 800183c:	f7ff fc1e 	bl	800107c <DS18B20_Write>

  		  HAL_Delay (200);    //Grabando  SCRATCHPAD
 8001840:	20c8      	movs	r0, #200	; 0xc8
 8001842:	f008 fe4b 	bl	800a4dc <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //--------- RTC -------------------------------------------------
	  get_time_date ();				//Actualizar Time-Date RTC->Buffer
 8001846:	f000 ffe5 	bl	8002814 <get_time_date>

	  //--------- GPS - USART 02 ---------------------------------------
	  update_time_date_GPS();		//Actualizar Time-Date GPS->RTC
 800184a:	f001 f815 	bl	8002878 <update_time_date_GPS>

	  //--------- TIM 10 (1000mseg) / ADC[12V] + DS18B20 [Temperatura]-----------------------------------------
	  if (tim10_temp == 1)
 800184e:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <main+0x4ec>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d104      	bne.n	8001860 <main+0x3c8>
	  {
		  adc_ds18b20();	// ADC + Temperatura // +/- 125ms
 8001856:	f003 ff1f 	bl	8005698 <adc_ds18b20>
		  tim10_temp = 0;		//Final del Flag del  TIM10
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <main+0x4ec>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
	  }

	  //--------- Pedidos para RTU/MED-----------------------------------------------------------------------------
	  if(HAL_GPIO_ReadPin(SW_02_GPIO_Port, SW_02_Pin) == 0)
 8001860:	2120      	movs	r1, #32
 8001862:	4846      	ldr	r0, [pc, #280]	; (800197c <main+0x4e4>)
 8001864:	f00a fb96 	bl	800bf94 <HAL_GPIO_ReadPin>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <main+0x3dc>
	  {
		  pedidos_reco_medi();
 800186e:	f006 f9ad 	bl	8007bcc <pedidos_reco_medi>
 8001872:	e001      	b.n	8001878 <main+0x3e0>
		  //HAL_Delay(500);     		//Tiempo entre inicio de Tx y final de Rx. (Mínimo estimado de 200 mS)
	  }
	  else
	  {
		  pedidos_reconectadores();
 8001874:	f004 fdb8 	bl	80063e8 <pedidos_reconectadores>
// // // // pedidos_medidores();
		  //HAL_Delay(350);     		//Tiempo entre inicio de Tx y final de Rx. (Mínimo estimado de 200 mS)
	  }

	  for (loop_main = 0; loop_main < 4; loop_main++)
 8001878:	4b43      	ldr	r3, [pc, #268]	; (8001988 <main+0x4f0>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	e1a9      	b.n	8001bd4 <main+0x73c>
	  {

		  //--------- TIM 7 (500mseg) /CTRL + ADC[12V] + DS18B20 [Temperatura]-----------------------------------------
		  //if (tim7_ctrl == 1)
		  //{
			  leds_64 ();			// Panel de Leds 64                                  &&&&& Desconectado a LEDS
 8001880:	f007 f824 	bl	80088cc <leds_64>

			  ctrl_relay ();	// Control / +/- 12ms
 8001884:	f003 feac 	bl	80055e0 <ctrl_relay>
		  //  tim7_ctrl = 0;		//Final del Flag del CNTRL -> TIM7
		  //}

		  //--- [SCADA] --- Analizar los datos desde UART_08 ----------------------------------------------------------

			  if (Flag_08_Rx)
 8001888:	4b40      	ldr	r3, [pc, #256]	; (800198c <main+0x4f4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <main+0x402>
		  {
			  analizar_Rx_08_local();
 8001890:	f001 fa04 	bl	8002c9c <analizar_Rx_08_local>
			  Flag_08_Rx = 0;
 8001894:	4b3d      	ldr	r3, [pc, #244]	; (800198c <main+0x4f4>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
		  }
		  //HAL_UART_Transmit(&huart7, (uint8_t*)&Buffer_06_Tx_RT, 2,100);

		  //--- [RECONECTADORES y MEDIDORES] -- Analizar los datos desde UART_06 --------------------------------------
		  if (Flag_06_Rx)
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <main+0x4e0>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d027      	beq.n	80018f2 <main+0x45a>
		  {
			  if (Buffer_06_Rx_W [1] == 100)
 80018a2:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <main+0x4f8>)
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d112      	bne.n	80018d0 <main+0x438>
			  {
				 if (Buffer_06_Rx_W [0] == 5)
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <main+0x4f8>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d11c      	bne.n	80018ec <main+0x454>
				 {
					// Paso Buffer a otro
					memcpy(Buffer_03_Rx_W, Buffer_06_Rx_W, sizeof(Buffer_06_Rx_W));
 80018b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b6:	4936      	ldr	r1, [pc, #216]	; (8001990 <main+0x4f8>)
 80018b8:	4836      	ldr	r0, [pc, #216]	; (8001994 <main+0x4fc>)
 80018ba:	f00e f935 	bl	800fb28 <memcpy>
					RxTotal03_W = RxTotal06_W;
 80018be:	4b36      	ldr	r3, [pc, #216]	; (8001998 <main+0x500>)
 80018c0:	881a      	ldrh	r2, [r3, #0]
 80018c2:	4b36      	ldr	r3, [pc, #216]	; (800199c <main+0x504>)
 80018c4:	801a      	strh	r2, [r3, #0]
					Flag_03_Rx = Flag_06_Rx; /////>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 80018c6:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <main+0x4e0>)
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <main+0x508>)
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	e00d      	b.n	80018ec <main+0x454>
				 }
			  }
			  else
			  {
				  // Paso Buffer a otro
				  memcpy(Buffer_04_Rx_W, Buffer_06_Rx_W, sizeof(Buffer_06_Rx_W));
 80018d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d4:	492e      	ldr	r1, [pc, #184]	; (8001990 <main+0x4f8>)
 80018d6:	4833      	ldr	r0, [pc, #204]	; (80019a4 <main+0x50c>)
 80018d8:	f00e f926 	bl	800fb28 <memcpy>
				  RxTotal04_W = RxTotal06_W;
 80018dc:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <main+0x500>)
 80018de:	881a      	ldrh	r2, [r3, #0]
 80018e0:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <main+0x510>)
 80018e2:	801a      	strh	r2, [r3, #0]
				  Flag_04_Rx = Flag_06_Rx; /////>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <main+0x4e0>)
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <main+0x514>)
 80018ea:	701a      	strb	r2, [r3, #0]
			  }
			  Flag_06_Rx = 0;
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <main+0x4e0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
		  }

		  //--- [RECONECTADORES] -- Analizar los datos desde UART_03 ---------------------------------------------------
		  if (Flag_03_Rx)
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <main+0x508>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d064      	beq.n	80019c4 <main+0x52c>
		  {
			  analizar_Rx_03_local();
 80018fa:	f004 ffc3 	bl	8006884 <analizar_Rx_03_local>
			  Flag_03_Rx = 0;
 80018fe:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <main+0x508>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
			  Buffer_env_R [dispositivos_r-1] = 0;
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <main+0x518>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	3b01      	subs	r3, #1
 800190a:	4a2a      	ldr	r2, [pc, #168]	; (80019b4 <main+0x51c>)
 800190c:	2100      	movs	r1, #0
 800190e:	54d1      	strb	r1, [r2, r3]
			  Buffer_error_R [dispositivos_r-1] = 0;
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <main+0x518>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	3b01      	subs	r3, #1
 8001916:	4a28      	ldr	r2, [pc, #160]	; (80019b8 <main+0x520>)
 8001918:	2100      	movs	r1, #0
 800191a:	54d1      	strb	r1, [r2, r3]
			  bit_error_03R = 4294967295 - pow(2,dispositivos_r-1);
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <main+0x518>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	3b01      	subs	r3, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe16 	bl	8000554 <__aeabi_i2d>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	ec43 2b11 	vmov	d1, r2, r3
 8001930:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8001968 <main+0x4d0>
 8001934:	f00f f912 	bl	8010b5c <pow>
 8001938:	ec53 2b10 	vmov	r2, r3, d0
 800193c:	a10c      	add	r1, pc, #48	; (adr r1, 8001970 <main+0x4d8>)
 800193e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001942:	f7fe fcb9 	bl	80002b8 <__aeabi_dsub>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7ff f91b 	bl	8000b88 <__aeabi_d2uiz>
 8001952:	4603      	mov	r3, r0
 8001954:	4a19      	ldr	r2, [pc, #100]	; (80019bc <main+0x524>)
 8001956:	6013      	str	r3, [r2, #0]
			  error_com_R = error_com_R & bit_error_03R;
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <main+0x528>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <main+0x524>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4013      	ands	r3, r2
 8001962:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <main+0x528>)
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e08f      	b.n	8001a88 <main+0x5f0>
 8001968:	00000000 	.word	0x00000000
 800196c:	40000000 	.word	0x40000000
 8001970:	ffe00000 	.word	0xffe00000
 8001974:	41efffff 	.word	0x41efffff
 8001978:	2000c130 	.word	0x2000c130
 800197c:	40021000 	.word	0x40021000
 8001980:	20003cfc 	.word	0x20003cfc
 8001984:	2000c67d 	.word	0x2000c67d
 8001988:	20003caa 	.word	0x20003caa
 800198c:	20003f04 	.word	0x20003f04
 8001990:	20008130 	.word	0x20008130
 8001994:	2000c23c 	.word	0x2000c23c
 8001998:	2000812c 	.word	0x2000812c
 800199c:	2000c238 	.word	0x2000c238
 80019a0:	2000c33c 	.word	0x2000c33c
 80019a4:	2000c45c 	.word	0x2000c45c
 80019a8:	2000c458 	.word	0x2000c458
 80019ac:	2000c55c 	.word	0x2000c55c
 80019b0:	20003294 	.word	0x20003294
 80019b4:	200031f8 	.word	0x200031f8
 80019b8:	20003218 	.word	0x20003218
 80019bc:	20003284 	.word	0x20003284
 80019c0:	2000327c 	.word	0x2000327c
		  }
		  else
		  {
			  Buffer_error_R [dispositivos_r-1]++;
 80019c4:	4b8c      	ldr	r3, [pc, #560]	; (8001bf8 <main+0x760>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	4a8c      	ldr	r2, [pc, #560]	; (8001bfc <main+0x764>)
 80019cc:	5cd2      	ldrb	r2, [r2, r3]
 80019ce:	3201      	adds	r2, #1
 80019d0:	b2d1      	uxtb	r1, r2
 80019d2:	4a8a      	ldr	r2, [pc, #552]	; (8001bfc <main+0x764>)
 80019d4:	54d1      	strb	r1, [r2, r3]
			  if (Buffer_error_R [dispositivos_r-1] == CANT_ERROR_R)
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <main+0x760>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	3b01      	subs	r3, #1
 80019dc:	4a87      	ldr	r2, [pc, #540]	; (8001bfc <main+0x764>)
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d126      	bne.n	8001a32 <main+0x59a>
			  {
				  bit_error_03R = pow(2,dispositivos_r-1);
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <main+0x760>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdb2 	bl	8000554 <__aeabi_i2d>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	ec43 2b11 	vmov	d1, r2, r3
 80019f8:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8001be8 <main+0x750>
 80019fc:	f00f f8ae 	bl	8010b5c <pow>
 8001a00:	ec53 2b10 	vmov	r2, r3, d0
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7ff f8be 	bl	8000b88 <__aeabi_d2uiz>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a7c      	ldr	r2, [pc, #496]	; (8001c00 <main+0x768>)
 8001a10:	6013      	str	r3, [r2, #0]
				  error_com_R = error_com_R | bit_error_03R;
 8001a12:	4b7c      	ldr	r3, [pc, #496]	; (8001c04 <main+0x76c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4b7a      	ldr	r3, [pc, #488]	; (8001c00 <main+0x768>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	4a79      	ldr	r2, [pc, #484]	; (8001c04 <main+0x76c>)
 8001a1e:	6013      	str	r3, [r2, #0]
				  Buffer_error_R [dispositivos_r-1]--;
 8001a20:	4b75      	ldr	r3, [pc, #468]	; (8001bf8 <main+0x760>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	4a75      	ldr	r2, [pc, #468]	; (8001bfc <main+0x764>)
 8001a28:	5cd2      	ldrb	r2, [r2, r3]
 8001a2a:	3a01      	subs	r2, #1
 8001a2c:	b2d1      	uxtb	r1, r2
 8001a2e:	4a73      	ldr	r2, [pc, #460]	; (8001bfc <main+0x764>)
 8001a30:	54d1      	strb	r1, [r2, r3]
			  }
			  aux_error_com_R = error_com_R;
 8001a32:	4b74      	ldr	r3, [pc, #464]	; (8001c04 <main+0x76c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a74      	ldr	r2, [pc, #464]	; (8001c08 <main+0x770>)
 8001a38:	6013      	str	r3, [r2, #0]
			  Buffer_mem_D [60] = aux_error_com_R;
 8001a3a:	4b73      	ldr	r3, [pc, #460]	; (8001c08 <main+0x770>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b72      	ldr	r3, [pc, #456]	; (8001c0c <main+0x774>)
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			  aux_error_com_R = aux_error_com_R/256;
 8001a46:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <main+0x770>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <main+0x770>)
 8001a4e:	6013      	str	r3, [r2, #0]
			  Buffer_mem_D [61] = aux_error_com_R;
 8001a50:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <main+0x770>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <main+0x774>)
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			  aux_error_com_R = aux_error_com_R/256;
 8001a5c:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <main+0x770>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <main+0x770>)
 8001a64:	6013      	str	r3, [r2, #0]
			  Buffer_mem_D [62] = aux_error_com_R;
 8001a66:	4b68      	ldr	r3, [pc, #416]	; (8001c08 <main+0x770>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <main+0x774>)
 8001a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			  aux_error_com_R = aux_error_com_R/256;
 8001a72:	4b65      	ldr	r3, [pc, #404]	; (8001c08 <main+0x770>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	4a63      	ldr	r2, [pc, #396]	; (8001c08 <main+0x770>)
 8001a7a:	6013      	str	r3, [r2, #0]
			  Buffer_mem_D [63] = aux_error_com_R;
 8001a7c:	4b62      	ldr	r3, [pc, #392]	; (8001c08 <main+0x770>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b62      	ldr	r3, [pc, #392]	; (8001c0c <main+0x774>)
 8001a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		  }
		  //--- [MEDIDORES] -- Analizar los datos desde UART_04 ---------------------
		  if (Flag_04_Rx)
 8001a88:	4b61      	ldr	r3, [pc, #388]	; (8001c10 <main+0x778>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d036      	beq.n	8001afe <main+0x666>
		  {
			  analizar_Rx_04_local();  //
 8001a90:	f005 ffd6 	bl	8007a40 <analizar_Rx_04_local>
			  Flag_04_Rx = 0;
 8001a94:	4b5e      	ldr	r3, [pc, #376]	; (8001c10 <main+0x778>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]

			  Buffer_env_M [dispositivos_m-1] = 0;
 8001a9a:	4b5e      	ldr	r3, [pc, #376]	; (8001c14 <main+0x77c>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	4a5d      	ldr	r2, [pc, #372]	; (8001c18 <main+0x780>)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	54d1      	strb	r1, [r2, r3]
			  Buffer_error_M [dispositivos_m-1] = 0;
 8001aa6:	4b5b      	ldr	r3, [pc, #364]	; (8001c14 <main+0x77c>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	4a5b      	ldr	r2, [pc, #364]	; (8001c1c <main+0x784>)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	54d1      	strb	r1, [r2, r3]
			  bit_error_04M = 4294967295 - pow(2,dispositivos_m-1);
 8001ab2:	4b58      	ldr	r3, [pc, #352]	; (8001c14 <main+0x77c>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd4b 	bl	8000554 <__aeabi_i2d>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	ec43 2b11 	vmov	d1, r2, r3
 8001ac6:	ed9f 0b48 	vldr	d0, [pc, #288]	; 8001be8 <main+0x750>
 8001aca:	f00f f847 	bl	8010b5c <pow>
 8001ace:	ec53 2b10 	vmov	r2, r3, d0
 8001ad2:	a147      	add	r1, pc, #284	; (adr r1, 8001bf0 <main+0x758>)
 8001ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ad8:	f7fe fbee 	bl	80002b8 <__aeabi_dsub>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f850 	bl	8000b88 <__aeabi_d2uiz>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a4d      	ldr	r2, [pc, #308]	; (8001c20 <main+0x788>)
 8001aec:	6013      	str	r3, [r2, #0]
			  error_com_M = error_com_M & bit_error_04M;
 8001aee:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <main+0x78c>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <main+0x788>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4013      	ands	r3, r2
 8001af8:	4a4a      	ldr	r2, [pc, #296]	; (8001c24 <main+0x78c>)
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e036      	b.n	8001b6c <main+0x6d4>
		  }
		  else
		  {
			  Buffer_error_M [dispositivos_m-1]++;
 8001afe:	4b45      	ldr	r3, [pc, #276]	; (8001c14 <main+0x77c>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	4a45      	ldr	r2, [pc, #276]	; (8001c1c <main+0x784>)
 8001b06:	5cd2      	ldrb	r2, [r2, r3]
 8001b08:	3201      	adds	r2, #1
 8001b0a:	b2d1      	uxtb	r1, r2
 8001b0c:	4a43      	ldr	r2, [pc, #268]	; (8001c1c <main+0x784>)
 8001b0e:	54d1      	strb	r1, [r2, r3]
			  if (Buffer_error_M [dispositivos_m-1] == CANT_ERROR_M)
 8001b10:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <main+0x77c>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	4a41      	ldr	r2, [pc, #260]	; (8001c1c <main+0x784>)
 8001b18:	5cd3      	ldrb	r3, [r2, r3]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d126      	bne.n	8001b6c <main+0x6d4>
			  {
				  bit_error_04M = pow(2,dispositivos_m-1);
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <main+0x77c>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd15 	bl	8000554 <__aeabi_i2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	ec43 2b11 	vmov	d1, r2, r3
 8001b32:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8001be8 <main+0x750>
 8001b36:	f00f f811 	bl	8010b5c <pow>
 8001b3a:	ec53 2b10 	vmov	r2, r3, d0
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff f821 	bl	8000b88 <__aeabi_d2uiz>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a35      	ldr	r2, [pc, #212]	; (8001c20 <main+0x788>)
 8001b4a:	6013      	str	r3, [r2, #0]
				  error_com_M = error_com_M | bit_error_04M;
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <main+0x78c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b33      	ldr	r3, [pc, #204]	; (8001c20 <main+0x788>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	4a33      	ldr	r2, [pc, #204]	; (8001c24 <main+0x78c>)
 8001b58:	6013      	str	r3, [r2, #0]
				  Buffer_error_M [dispositivos_m-1]--;
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <main+0x77c>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	4a2e      	ldr	r2, [pc, #184]	; (8001c1c <main+0x784>)
 8001b62:	5cd2      	ldrb	r2, [r2, r3]
 8001b64:	3a01      	subs	r2, #1
 8001b66:	b2d1      	uxtb	r1, r2
 8001b68:	4a2c      	ldr	r2, [pc, #176]	; (8001c1c <main+0x784>)
 8001b6a:	54d1      	strb	r1, [r2, r3]
			  }
		  }
			  aux_error_com_M = error_com_M;
 8001b6c:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <main+0x78c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2d      	ldr	r2, [pc, #180]	; (8001c28 <main+0x790>)
 8001b72:	6013      	str	r3, [r2, #0]
			  Buffer_mem_D [64] = aux_error_com_M;
 8001b74:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <main+0x790>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <main+0x774>)
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			  aux_error_com_M = aux_error_com_M/256;
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <main+0x790>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	4a28      	ldr	r2, [pc, #160]	; (8001c28 <main+0x790>)
 8001b88:	6013      	str	r3, [r2, #0]
			  Buffer_mem_D [65] = aux_error_com_M;
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <main+0x790>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <main+0x774>)
 8001b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			  aux_error_com_M = aux_error_com_M/256;
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <main+0x790>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <main+0x790>)
 8001b9e:	6013      	str	r3, [r2, #0]
			  Buffer_mem_D [66] = aux_error_com_M;
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <main+0x790>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <main+0x774>)
 8001ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			  aux_error_com_M = aux_error_com_M/256;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <main+0x790>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <main+0x790>)
 8001bb4:	6013      	str	r3, [r2, #0]
			  Buffer_mem_D [67] = aux_error_com_M;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <main+0x790>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <main+0x774>)
 8001bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	  HAL_Delay(100);     		//Tiempo de la control
 8001bc2:	2064      	movs	r0, #100	; 0x64
 8001bc4:	f008 fc8a 	bl	800a4dc <HAL_Delay>
	  for (loop_main = 0; loop_main < 4; loop_main++)
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <main+0x794>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <main+0x794>)
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <main+0x794>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	f67f ae51 	bls.w	8001880 <main+0x3e8>

	  //HAL_GPIO_WritePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin, GPIO_PIN_RESET); //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


	  //============= While FIN =============================
	  HAL_GPIO_TogglePin(Led_Rojo_GPIO_Port, Led_Rojo_Pin);
 8001bde:	2108      	movs	r1, #8
 8001be0:	4813      	ldr	r0, [pc, #76]	; (8001c30 <main+0x798>)
 8001be2:	f00a fa08 	bl	800bff6 <HAL_GPIO_TogglePin>
	  get_time_date ();				//Actualizar Time-Date RTC->Buffer
 8001be6:	e62e      	b.n	8001846 <main+0x3ae>
 8001be8:	00000000 	.word	0x00000000
 8001bec:	40000000 	.word	0x40000000
 8001bf0:	ffe00000 	.word	0xffe00000
 8001bf4:	41efffff 	.word	0x41efffff
 8001bf8:	20003294 	.word	0x20003294
 8001bfc:	20003218 	.word	0x20003218
 8001c00:	20003284 	.word	0x20003284
 8001c04:	2000327c 	.word	0x2000327c
 8001c08:	2000328c 	.word	0x2000328c
 8001c0c:	20000930 	.word	0x20000930
 8001c10:	2000c55c 	.word	0x2000c55c
 8001c14:	20003296 	.word	0x20003296
 8001c18:	20003238 	.word	0x20003238
 8001c1c:	20003258 	.word	0x20003258
 8001c20:	20003288 	.word	0x20003288
 8001c24:	20003280 	.word	0x20003280
 8001c28:	20003290 	.word	0x20003290
 8001c2c:	20003caa 	.word	0x20003caa
 8001c30:	40021000 	.word	0x40021000

08001c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b094      	sub	sp, #80	; 0x50
 8001c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	2230      	movs	r2, #48	; 0x30
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f00d ff7e 	bl	800fb44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c58:	f00a f9e8 	bl	800c02c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <SystemClock_Config+0xec>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	f023 0318 	bic.w	r3, r3, #24
 8001c64:	4a2e      	ldr	r2, [pc, #184]	; (8001d20 <SystemClock_Config+0xec>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	6713      	str	r3, [r2, #112]	; 0x70

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <SystemClock_Config+0xec>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <SystemClock_Config+0xec>)
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40
 8001c78:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <SystemClock_Config+0xec>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <SystemClock_Config+0xf0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <SystemClock_Config+0xf0>)
 8001c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <SystemClock_Config+0xf0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001c9c:	2305      	movs	r3, #5
 8001c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ca0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001caa:	2302      	movs	r3, #2
 8001cac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001cb8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001cbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc6:	f107 0320 	add.w	r3, r7, #32
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f00a fa0e 	bl	800c0ec <HAL_RCC_OscConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001cd6:	f007 fc6d 	bl	80095b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cda:	f00a f9b7 	bl	800c04c <HAL_PWREx_EnableOverDrive>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001ce4:	f007 fc66 	bl	80095b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce8:	230f      	movs	r3, #15
 8001cea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cec:	2302      	movs	r3, #2
 8001cee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cf4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001cfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2106      	movs	r1, #6
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00a fc94 	bl	800c634 <HAL_RCC_ClockConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001d12:	f007 fc4f 	bl	80095b4 <Error_Handler>
  }
}
 8001d16:	bf00      	nop
 8001d18:	3750      	adds	r7, #80	; 0x50
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40007000 	.word	0x40007000

08001d28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d3c:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <MX_ADC1_Init+0x9c>)
 8001d3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <MX_ADC1_Init+0xa0>)
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d88:	480d      	ldr	r0, [pc, #52]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d8a:	f008 fbcb 	bl	800a524 <HAL_ADC_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d94:	f007 fc0e 	bl	80095b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001da0:	2304      	movs	r3, #4
 8001da2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da4:	463b      	mov	r3, r7
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001daa:	f008 fcdb 	bl	800a764 <HAL_ADC_ConfigChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001db4:	f007 fbfe 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200000b4 	.word	0x200000b4
 8001dc4:	40012000 	.word	0x40012000
 8001dc8:	0f000001 	.word	0x0f000001

08001dcc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <MX_CRC_Init+0x50>)
 8001dd2:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <MX_CRC_Init+0x54>)
 8001dd4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_CRC_Init+0x50>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <MX_CRC_Init+0x50>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 15717;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_CRC_Init+0x50>)
 8001de4:	f643 5265 	movw	r2, #15717	; 0x3d65
 8001de8:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_CRC_Init+0x50>)
 8001dec:	2208      	movs	r2, #8
 8001dee:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <MX_CRC_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_CRC_Init+0x50>)
 8001df8:	2220      	movs	r2, #32
 8001dfa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <MX_CRC_Init+0x50>)
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_CRC_Init+0x50>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e08:	4804      	ldr	r0, [pc, #16]	; (8001e1c <MX_CRC_Init+0x50>)
 8001e0a:	f009 f80d 	bl	800ae28 <HAL_CRC_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8001e14:	f007 fbce 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200000fc 	.word	0x200000fc
 8001e20:	40023000 	.word	0x40023000

08001e24 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <MX_RNG_Init+0x20>)
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <MX_RNG_Init+0x24>)
 8001e2c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_RNG_Init+0x20>)
 8001e30:	f00b f9de 	bl	800d1f0 <HAL_RNG_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001e3a:	f007 fbbb 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000120 	.word	0x20000120
 8001e48:	50060800 	.word	0x50060800

08001e4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_RTC_Init+0x44>)
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <MX_RTC_Init+0x48>)
 8001e54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_RTC_Init+0x44>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_RTC_Init+0x44>)
 8001e5e:	227f      	movs	r2, #127	; 0x7f
 8001e60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_RTC_Init+0x44>)
 8001e64:	22ff      	movs	r2, #255	; 0xff
 8001e66:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_RTC_Init+0x44>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <MX_RTC_Init+0x44>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_RTC_Init+0x44>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_RTC_Init+0x44>)
 8001e7c:	f00b fa4e 	bl	800d31c <HAL_RTC_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001e86:	f007 fb95 	bl	80095b4 <Error_Handler>
  /* USER CODE BEGIN Check_RTC_BKUP */

  /* USER CODE END Check_RTC_BKUP */


}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000130 	.word	0x20000130
 8001e94:	40002800 	.word	0x40002800

08001e98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <MX_TIM1_Init+0xa0>)
 8001eb8:	4a20      	ldr	r2, [pc, #128]	; (8001f3c <MX_TIM1_Init+0xa4>)
 8001eba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <MX_TIM1_Init+0xa0>)
 8001ebe:	2263      	movs	r2, #99	; 0x63
 8001ec0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <MX_TIM1_Init+0xa0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <MX_TIM1_Init+0xa0>)
 8001eca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ece:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <MX_TIM1_Init+0xa0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MX_TIM1_Init+0xa0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_TIM1_Init+0xa0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ee2:	4815      	ldr	r0, [pc, #84]	; (8001f38 <MX_TIM1_Init+0xa0>)
 8001ee4:	f00b fd5c 	bl	800d9a0 <HAL_TIM_Base_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001eee:	f007 fb61 	bl	80095b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	4619      	mov	r1, r3
 8001efe:	480e      	ldr	r0, [pc, #56]	; (8001f38 <MX_TIM1_Init+0xa0>)
 8001f00:	f00b ffae 	bl	800de60 <HAL_TIM_ConfigClockSource>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001f0a:	f007 fb53 	bl	80095b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4806      	ldr	r0, [pc, #24]	; (8001f38 <MX_TIM1_Init+0xa0>)
 8001f20:	f00c f9ca 	bl	800e2b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f2a:	f007 fb43 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000150 	.word	0x20000150
 8001f3c:	40010000 	.word	0x40010000

08001f40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <MX_TIM6_Init+0x68>)
 8001f52:	4a16      	ldr	r2, [pc, #88]	; (8001fac <MX_TIM6_Init+0x6c>)
 8001f54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000-1;
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <MX_TIM6_Init+0x68>)
 8001f58:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f5c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <MX_TIM6_Init+0x68>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <MX_TIM6_Init+0x68>)
 8001f66:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <MX_TIM6_Init+0x68>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f72:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <MX_TIM6_Init+0x68>)
 8001f74:	f00b fd14 	bl	800d9a0 <HAL_TIM_Base_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001f7e:	f007 fb19 	bl	80095b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4806      	ldr	r0, [pc, #24]	; (8001fa8 <MX_TIM6_Init+0x68>)
 8001f90:	f00c f992 	bl	800e2b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001f9a:	f007 fb0b 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000019c 	.word	0x2000019c
 8001fac:	40001000 	.word	0x40001000

08001fb0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001fc0:	4b15      	ldr	r3, [pc, #84]	; (8002018 <MX_TIM7_Init+0x68>)
 8001fc2:	4a16      	ldr	r2, [pc, #88]	; (800201c <MX_TIM7_Init+0x6c>)
 8001fc4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_TIM7_Init+0x68>)
 8001fc8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fcc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <MX_TIM7_Init+0x68>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <MX_TIM7_Init+0x68>)
 8001fd6:	f241 3287 	movw	r2, #4999	; 0x1387
 8001fda:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_TIM7_Init+0x68>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001fe2:	480d      	ldr	r0, [pc, #52]	; (8002018 <MX_TIM7_Init+0x68>)
 8001fe4:	f00b fcdc 	bl	800d9a0 <HAL_TIM_Base_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001fee:	f007 fae1 	bl	80095b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <MX_TIM7_Init+0x68>)
 8002000:	f00c f95a 	bl	800e2b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800200a:	f007 fad3 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200001e8 	.word	0x200001e8
 800201c:	40001400 	.word	0x40001400

08002020 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_TIM10_Init+0x40>)
 8002026:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <MX_TIM10_Init+0x44>)
 8002028:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000-1;
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <MX_TIM10_Init+0x40>)
 800202c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002030:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <MX_TIM10_Init+0x40>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_TIM10_Init+0x40>)
 800203a:	f241 3287 	movw	r2, #4999	; 0x1387
 800203e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <MX_TIM10_Init+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_TIM10_Init+0x40>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <MX_TIM10_Init+0x40>)
 800204e:	f00b fca7 	bl	800d9a0 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002058:	f007 faac 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000234 	.word	0x20000234
 8002064:	40014400 	.word	0x40014400

08002068 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <MX_UART4_Init+0x5c>)
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <MX_UART4_Init+0x60>)
 8002070:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_UART4_Init+0x5c>)
 8002074:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002078:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_UART4_Init+0x5c>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <MX_UART4_Init+0x5c>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_UART4_Init+0x5c>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <MX_UART4_Init+0x5c>)
 800208e:	220c      	movs	r2, #12
 8002090:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_UART4_Init+0x5c>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <MX_UART4_Init+0x5c>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_UART4_Init+0x5c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_UART4_Init+0x5c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80020aa:	2300      	movs	r3, #0
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_UART4_Init+0x5c>)
 80020b2:	f00d fca7 	bl	800fa04 <HAL_RS485Ex_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80020bc:	f007 fa7a 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000280 	.word	0x20000280
 80020c8:	40004c00 	.word	0x40004c00

080020cc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <MX_UART7_Init+0x58>)
 80020d2:	4a15      	ldr	r2, [pc, #84]	; (8002128 <MX_UART7_Init+0x5c>)
 80020d4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <MX_UART7_Init+0x58>)
 80020d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020dc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_UART7_Init+0x58>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <MX_UART7_Init+0x58>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <MX_UART7_Init+0x58>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MX_UART7_Init+0x58>)
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <MX_UART7_Init+0x58>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <MX_UART7_Init+0x58>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <MX_UART7_Init+0x58>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <MX_UART7_Init+0x58>)
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_UART7_Init+0x58>)
 8002110:	f00c f97e 	bl	800e410 <HAL_UART_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800211a:	f007 fa4b 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000308 	.word	0x20000308
 8002128:	40007800 	.word	0x40007800

0800212c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <MX_UART8_Init+0x58>)
 8002132:	4a15      	ldr	r2, [pc, #84]	; (8002188 <MX_UART8_Init+0x5c>)
 8002134:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MX_UART8_Init+0x58>)
 8002138:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800213c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_UART8_Init+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MX_UART8_Init+0x58>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_UART8_Init+0x58>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_UART8_Init+0x58>)
 8002152:	220c      	movs	r2, #12
 8002154:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MX_UART8_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_UART8_Init+0x58>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_UART8_Init+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_UART8_Init+0x58>)
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_UART8_Init+0x58>)
 8002170:	f00c f94e 	bl	800e410 <HAL_UART_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_UART8_Init+0x52>
  {
    Error_Handler();
 800217a:	f007 fa1b 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000390 	.word	0x20000390
 8002188:	40007c00 	.word	0x40007c00

0800218c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <MX_USART2_UART_Init+0x58>)
 8002192:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <MX_USART2_UART_Init+0x5c>)
 8002194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <MX_USART2_UART_Init+0x58>)
 8002198:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800219c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_USART2_UART_Init+0x58>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_USART2_UART_Init+0x58>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_USART2_UART_Init+0x58>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_USART2_UART_Init+0x58>)
 80021b2:	220c      	movs	r2, #12
 80021b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <MX_USART2_UART_Init+0x58>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_USART2_UART_Init+0x58>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <MX_USART2_UART_Init+0x58>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_USART2_UART_Init+0x58>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_USART2_UART_Init+0x58>)
 80021d0:	f00c f91e 	bl	800e410 <HAL_UART_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021da:	f007 f9eb 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000418 	.word	0x20000418
 80021e8:	40004400 	.word	0x40004400

080021ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_USART3_UART_Init+0x58>)
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <MX_USART3_UART_Init+0x5c>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MX_USART3_UART_Init+0x58>)
 80021f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_USART3_UART_Init+0x58>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_USART3_UART_Init+0x58>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_USART3_UART_Init+0x58>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_USART3_UART_Init+0x58>)
 8002212:	220c      	movs	r2, #12
 8002214:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_USART3_UART_Init+0x58>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_USART3_UART_Init+0x58>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_USART3_UART_Init+0x58>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_USART3_UART_Init+0x58>)
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_USART3_UART_Init+0x58>)
 8002230:	f00c f8ee 	bl	800e410 <HAL_UART_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800223a:	f007 f9bb 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200004a0 	.word	0x200004a0
 8002248:	40004800 	.word	0x40004800

0800224c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MX_USART6_UART_Init+0x58>)
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <MX_USART6_UART_Init+0x5c>)
 8002254:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <MX_USART6_UART_Init+0x58>)
 8002258:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800225c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_USART6_UART_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_USART6_UART_Init+0x58>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_USART6_UART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_USART6_UART_Init+0x58>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <MX_USART6_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_USART6_UART_Init+0x58>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <MX_USART6_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_USART6_UART_Init+0x58>)
 800228a:	2200      	movs	r2, #0
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800228e:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_USART6_UART_Init+0x58>)
 8002290:	f00c f8be 	bl	800e410 <HAL_UART_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800229a:	f007 f98b 	bl	80095b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000528 	.word	0x20000528
 80022a8:	40011400 	.word	0x40011400

080022ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022b2:	4b32      	ldr	r3, [pc, #200]	; (800237c <MX_DMA_Init+0xd0>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a31      	ldr	r2, [pc, #196]	; (800237c <MX_DMA_Init+0xd0>)
 80022b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b2f      	ldr	r3, [pc, #188]	; (800237c <MX_DMA_Init+0xd0>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ca:	4b2c      	ldr	r3, [pc, #176]	; (800237c <MX_DMA_Init+0xd0>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a2b      	ldr	r2, [pc, #172]	; (800237c <MX_DMA_Init+0xd0>)
 80022d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <MX_DMA_Init+0xd0>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	200b      	movs	r0, #11
 80022e8:	f008 fd67 	bl	800adba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80022ec:	200b      	movs	r0, #11
 80022ee:	f008 fd80 	bl	800adf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	200c      	movs	r0, #12
 80022f8:	f008 fd5f 	bl	800adba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80022fc:	200c      	movs	r0, #12
 80022fe:	f008 fd78 	bl	800adf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	200d      	movs	r0, #13
 8002308:	f008 fd57 	bl	800adba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800230c:	200d      	movs	r0, #13
 800230e:	f008 fd70 	bl	800adf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	200e      	movs	r0, #14
 8002318:	f008 fd4f 	bl	800adba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800231c:	200e      	movs	r0, #14
 800231e:	f008 fd68 	bl	800adf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	200f      	movs	r0, #15
 8002328:	f008 fd47 	bl	800adba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800232c:	200f      	movs	r0, #15
 800232e:	f008 fd60 	bl	800adf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2010      	movs	r0, #16
 8002338:	f008 fd3f 	bl	800adba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800233c:	2010      	movs	r0, #16
 800233e:	f008 fd58 	bl	800adf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	2011      	movs	r0, #17
 8002348:	f008 fd37 	bl	800adba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800234c:	2011      	movs	r0, #17
 800234e:	f008 fd50 	bl	800adf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2039      	movs	r0, #57	; 0x39
 8002358:	f008 fd2f 	bl	800adba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800235c:	2039      	movs	r0, #57	; 0x39
 800235e:	f008 fd48 	bl	800adf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	2045      	movs	r0, #69	; 0x45
 8002368:	f008 fd27 	bl	800adba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800236c:	2045      	movs	r0, #69	; 0x45
 800236e:	f008 fd40 	bl	800adf2 <HAL_NVIC_EnableIRQ>

}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800

08002380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002396:	4ba4      	ldr	r3, [pc, #656]	; (8002628 <MX_GPIO_Init+0x2a8>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4aa3      	ldr	r2, [pc, #652]	; (8002628 <MX_GPIO_Init+0x2a8>)
 800239c:	f043 0310 	orr.w	r3, r3, #16
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4ba1      	ldr	r3, [pc, #644]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	4b9e      	ldr	r3, [pc, #632]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a9d      	ldr	r2, [pc, #628]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b9b      	ldr	r3, [pc, #620]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023c6:	4b98      	ldr	r3, [pc, #608]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a97      	ldr	r2, [pc, #604]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b95      	ldr	r3, [pc, #596]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b92      	ldr	r3, [pc, #584]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a91      	ldr	r2, [pc, #580]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	4b8c      	ldr	r3, [pc, #560]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a8b      	ldr	r2, [pc, #556]	; (8002628 <MX_GPIO_Init+0x2a8>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b89      	ldr	r3, [pc, #548]	; (8002628 <MX_GPIO_Init+0x2a8>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800240e:	4b86      	ldr	r3, [pc, #536]	; (8002628 <MX_GPIO_Init+0x2a8>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a85      	ldr	r2, [pc, #532]	; (8002628 <MX_GPIO_Init+0x2a8>)
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b83      	ldr	r3, [pc, #524]	; (8002628 <MX_GPIO_Init+0x2a8>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_Rojo_Pin|UART7_RXD_Pin|SPIV2_P_S_Pin|SPIV2_CLK_Pin
 8002426:	2200      	movs	r2, #0
 8002428:	f649 4108 	movw	r1, #39944	; 0x9c08
 800242c:	487f      	ldr	r0, [pc, #508]	; (800262c <MX_GPIO_Init+0x2ac>)
 800242e:	f009 fdc9 	bl	800bfc4 <HAL_GPIO_WritePin>
                          |ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	2104      	movs	r1, #4
 8002436:	487e      	ldr	r0, [pc, #504]	; (8002630 <MX_GPIO_Init+0x2b0>)
 8002438:	f009 fdc4 	bl	800bfc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERIAL_OUT_Pin|LATCH_Pin|SPIV2_V5LED_Pin|UART8_RXD_Pin
 800243c:	2200      	movs	r2, #0
 800243e:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8002442:	487c      	ldr	r0, [pc, #496]	; (8002634 <MX_GPIO_Init+0x2b4>)
 8002444:	f009 fdbe 	bl	800bfc4 <HAL_GPIO_WritePin>
                          |Led_Azul_Pin|Led_Amarillo_Pin|Led_Verde_Pin|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPIV2_CODE_Pin|DO_AN_Pin, GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800244e:	4877      	ldr	r0, [pc, #476]	; (800262c <MX_GPIO_Init+0x2ac>)
 8002450:	f009 fdb8 	bl	800bfc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_PWR_ON_Pin|USART3_DE_Pin|DS18B20_Pin|UART4_RXD_Pin
 8002454:	2200      	movs	r2, #0
 8002456:	f24c 4181 	movw	r1, #50305	; 0xc481
 800245a:	4877      	ldr	r0, [pc, #476]	; (8002638 <MX_GPIO_Init+0x2b8>)
 800245c:	f009 fdb2 	bl	800bfc4 <HAL_GPIO_WritePin>
                          |USART2_RXD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002460:	2304      	movs	r3, #4
 8002462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246c:	2303      	movs	r3, #3
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002470:	2309      	movs	r3, #9
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	4619      	mov	r1, r3
 800247a:	486c      	ldr	r0, [pc, #432]	; (800262c <MX_GPIO_Init+0x2ac>)
 800247c:	f009 fbde 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_Rojo_Pin UART7_RXD_Pin */
  GPIO_InitStruct.Pin = Led_Rojo_Pin|UART7_RXD_Pin;
 8002480:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002486:	2301      	movs	r3, #1
 8002488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002492:	f107 031c 	add.w	r3, r7, #28
 8002496:	4619      	mov	r1, r3
 8002498:	4864      	ldr	r0, [pc, #400]	; (800262c <MX_GPIO_Init+0x2ac>)
 800249a:	f009 fbcf 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_01_Pin SW_02_Pin SW_03_Pin */
  GPIO_InitStruct.Pin = SW_01_Pin|SW_02_Pin|SW_03_Pin;
 800249e:	2370      	movs	r3, #112	; 0x70
 80024a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	4619      	mov	r1, r3
 80024b0:	485e      	ldr	r0, [pc, #376]	; (800262c <MX_GPIO_Init+0x2ac>)
 80024b2:	f009 fbc3 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_04_Pin EA1_Pin */
  GPIO_InitStruct.Pin = SW_04_Pin|EA1_Pin;
 80024b6:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80024ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c4:	f107 031c 	add.w	r3, r7, #28
 80024c8:	4619      	mov	r1, r3
 80024ca:	4859      	ldr	r0, [pc, #356]	; (8002630 <MX_GPIO_Init+0x2b0>)
 80024cc:	f009 fbb6 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80024d0:	2304      	movs	r3, #4
 80024d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	4619      	mov	r1, r3
 80024e6:	4852      	ldr	r0, [pc, #328]	; (8002630 <MX_GPIO_Init+0x2b0>)
 80024e8:	f009 fba8 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_AN_Pin SPIV2_ENT_Pin EA2_Pin EA3_Pin */
  GPIO_InitStruct.Pin = DI_AN_Pin|SPIV2_ENT_Pin|EA2_Pin|EA3_Pin;
 80024ec:	f44f 63aa 	mov.w	r3, #1360	; 0x550
 80024f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fa:	f107 031c 	add.w	r3, r7, #28
 80024fe:	4619      	mov	r1, r3
 8002500:	484e      	ldr	r0, [pc, #312]	; (800263c <MX_GPIO_Init+0x2bc>)
 8002502:	f009 fb9b 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SERIAL_OUT_Pin LATCH_Pin */
  GPIO_InitStruct.Pin = SERIAL_OUT_Pin|LATCH_Pin;
 8002506:	2303      	movs	r3, #3
 8002508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250a:	2301      	movs	r3, #1
 800250c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 031c 	add.w	r3, r7, #28
 800251a:	4619      	mov	r1, r3
 800251c:	4845      	ldr	r0, [pc, #276]	; (8002634 <MX_GPIO_Init+0x2b4>)
 800251e:	f009 fb8d 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002522:	2304      	movs	r3, #4
 8002524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002532:	2309      	movs	r3, #9
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	483d      	ldr	r0, [pc, #244]	; (8002634 <MX_GPIO_Init+0x2b4>)
 800253e:	f009 fb7d 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPIV2_P_S_Pin SPIV2_CLK_Pin SPIV2_CODE_Pin DO_AN_Pin
                           ENABLE_Pin */
  GPIO_InitStruct.Pin = SPIV2_P_S_Pin|SPIV2_CLK_Pin|SPIV2_CODE_Pin|DO_AN_Pin
 8002542:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002546:	61fb      	str	r3, [r7, #28]
                          |ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002548:	2301      	movs	r3, #1
 800254a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	4619      	mov	r1, r3
 800255a:	4834      	ldr	r0, [pc, #208]	; (800262c <MX_GPIO_Init+0x2ac>)
 800255c:	f009 fb6e 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPIV2_V5LED_Pin UART8_RXD_Pin Led_Azul_Pin Led_Amarillo_Pin
                           Led_Verde_Pin PB9 */
  GPIO_InitStruct.Pin = SPIV2_V5LED_Pin|UART8_RXD_Pin|Led_Azul_Pin|Led_Amarillo_Pin
 8002560:	f44f 63f6 	mov.w	r3, #1968	; 0x7b0
 8002564:	61fb      	str	r3, [r7, #28]
                          |Led_Verde_Pin|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002566:	2301      	movs	r3, #1
 8002568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002572:	f107 031c 	add.w	r3, r7, #28
 8002576:	4619      	mov	r1, r3
 8002578:	482e      	ldr	r0, [pc, #184]	; (8002634 <MX_GPIO_Init+0x2b4>)
 800257a:	f009 fb5f 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PWR_ON_Pin USART3_DE_Pin DS18B20_Pin UART4_RXD_Pin
                           USART2_RXD_Pin */
  GPIO_InitStruct.Pin = USB_PWR_ON_Pin|USART3_DE_Pin|DS18B20_Pin|UART4_RXD_Pin
 800257e:	f24c 4381 	movw	r3, #50305	; 0xc481
 8002582:	61fb      	str	r3, [r7, #28]
                          |USART2_RXD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002584:	2301      	movs	r3, #1
 8002586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	4619      	mov	r1, r3
 8002596:	4828      	ldr	r0, [pc, #160]	; (8002638 <MX_GPIO_Init+0x2b8>)
 8002598:	f009 fb50 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800259c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80025a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025ae:	2309      	movs	r3, #9
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b2:	f107 031c 	add.w	r3, r7, #28
 80025b6:	4619      	mov	r1, r3
 80025b8:	481f      	ldr	r0, [pc, #124]	; (8002638 <MX_GPIO_Init+0x2b8>)
 80025ba:	f009 fb3f 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80025be:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80025c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80025d0:	230c      	movs	r3, #12
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d4:	f107 031c 	add.w	r3, r7, #28
 80025d8:	4619      	mov	r1, r3
 80025da:	4815      	ldr	r0, [pc, #84]	; (8002630 <MX_GPIO_Init+0x2b0>)
 80025dc:	f009 fb2e 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025e0:	2304      	movs	r3, #4
 80025e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80025f0:	230c      	movs	r3, #12
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	480f      	ldr	r0, [pc, #60]	; (8002638 <MX_GPIO_Init+0x2b8>)
 80025fc:	f009 fb1e 	bl	800bc3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002600:	2340      	movs	r3, #64	; 0x40
 8002602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002610:	230a      	movs	r3, #10
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	4806      	ldr	r0, [pc, #24]	; (8002634 <MX_GPIO_Init+0x2b4>)
 800261c:	f009 fb0e 	bl	800bc3c <HAL_GPIO_Init>

}
 8002620:	bf00      	nop
 8002622:	3730      	adds	r7, #48	; 0x30
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	40021000 	.word	0x40021000
 8002630:	40020800 	.word	0x40020800
 8002634:	40020400 	.word	0x40020400
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40020000 	.word	0x40020000

08002640 <set_time_date>:

//==========================================================================================
//  RTC
//==========================================================================================
void set_time_date (void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8002654:	2300      	movs	r3, #0
 8002656:	603b      	str	r3, [r7, #0]

	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 00;
 800265c:	2300      	movs	r3, #0
 800265e:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 00;
 8002660:	2300      	movs	r3, #0
 8002662:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2200      	movs	r2, #0
 8002670:	4619      	mov	r1, r3
 8002672:	4812      	ldr	r0, [pc, #72]	; (80026bc <set_time_date+0x7c>)
 8002674:	f00a fed6 	bl	800d424 <HAL_RTC_SetTime>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <set_time_date+0x42>
	  {
	    Error_Handler();
 800267e:	f006 ff99 	bl	80095b4 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8002682:	2304      	movs	r3, #4
 8002684:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_APRIL;
 8002686:	2304      	movs	r3, #4
 8002688:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 22;
 800268e:	2316      	movs	r3, #22
 8002690:	70fb      	strb	r3, [r7, #3]
	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002692:	463b      	mov	r3, r7
 8002694:	2200      	movs	r2, #0
 8002696:	4619      	mov	r1, r3
 8002698:	4808      	ldr	r0, [pc, #32]	; (80026bc <set_time_date+0x7c>)
 800269a:	f00a ffbb 	bl	800d614 <HAL_RTC_SetDate>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <set_time_date+0x68>
	  {
	    Error_Handler();
 80026a4:	f006 ff86 	bl	80095b4 <Error_Handler>
	  }

	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1,0x32F2);  // BACKUP BATERIA !!!!!!
 80026a8:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80026ac:	2101      	movs	r1, #1
 80026ae:	4803      	ldr	r0, [pc, #12]	; (80026bc <set_time_date+0x7c>)
 80026b0:	f00b f944 	bl	800d93c <HAL_RTCEx_BKUPWrite>
	  /* USER CODE END RTC_Init 2 */
}
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000130 	.word	0x20000130

080026c0 <set_time_date_GPS>:

void set_time_date_GPS (void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0

	  RTC_TimeTypeDef sTime = {0};
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 80026d4:	2300      	movs	r3, #0
 80026d6:	603b      	str	r3, [r7, #0]

	  /** Initialize RTC and set the Time and Date
	  */
	  Valor_RTC = (Buffer_02_Rx_W[8] - 48) + ((Buffer_02_Rx_W[7] - 0x30) * 10);
 80026d8:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <set_time_date_GPS+0x148>)
 80026da:	7a1a      	ldrb	r2, [r3, #8]
 80026dc:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <set_time_date_GPS+0x148>)
 80026de:	79db      	ldrb	r3, [r3, #7]
 80026e0:	4619      	mov	r1, r3
 80026e2:	0089      	lsls	r1, r1, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3b10      	subs	r3, #16
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b46      	ldr	r3, [pc, #280]	; (800280c <set_time_date_GPS+0x14c>)
 80026f4:	701a      	strb	r2, [r3, #0]
	  sTime.Hours = Valor_RTC;  //16;
 80026f6:	4b45      	ldr	r3, [pc, #276]	; (800280c <set_time_date_GPS+0x14c>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	713b      	strb	r3, [r7, #4]
	  Valor_RTC = (Buffer_02_Rx_W[10] - 48) + ((Buffer_02_Rx_W[9] - 0x30) * 10);
 80026fc:	4b42      	ldr	r3, [pc, #264]	; (8002808 <set_time_date_GPS+0x148>)
 80026fe:	7a9a      	ldrb	r2, [r3, #10]
 8002700:	4b41      	ldr	r3, [pc, #260]	; (8002808 <set_time_date_GPS+0x148>)
 8002702:	7a5b      	ldrb	r3, [r3, #9]
 8002704:	4619      	mov	r1, r3
 8002706:	0089      	lsls	r1, r1, #2
 8002708:	440b      	add	r3, r1
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4413      	add	r3, r2
 8002710:	b2db      	uxtb	r3, r3
 8002712:	3b10      	subs	r3, #16
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <set_time_date_GPS+0x14c>)
 8002718:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = Valor_RTC;  //37;
 800271a:	4b3c      	ldr	r3, [pc, #240]	; (800280c <set_time_date_GPS+0x14c>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	717b      	strb	r3, [r7, #5]
	  Valor_RTC = (Buffer_02_Rx_W[12] - 48) + ((Buffer_02_Rx_W[11] - 0x30) * 10);
 8002720:	4b39      	ldr	r3, [pc, #228]	; (8002808 <set_time_date_GPS+0x148>)
 8002722:	7b1a      	ldrb	r2, [r3, #12]
 8002724:	4b38      	ldr	r3, [pc, #224]	; (8002808 <set_time_date_GPS+0x148>)
 8002726:	7adb      	ldrb	r3, [r3, #11]
 8002728:	4619      	mov	r1, r3
 800272a:	0089      	lsls	r1, r1, #2
 800272c:	440b      	add	r3, r1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4413      	add	r3, r2
 8002734:	b2db      	uxtb	r3, r3
 8002736:	3b10      	subs	r3, #16
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b34      	ldr	r3, [pc, #208]	; (800280c <set_time_date_GPS+0x14c>)
 800273c:	701a      	strb	r2, [r3, #0]
	  sTime.Seconds = Valor_RTC;  //00;
 800273e:	4b33      	ldr	r3, [pc, #204]	; (800280c <set_time_date_GPS+0x14c>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	2200      	movs	r2, #0
 8002750:	4619      	mov	r1, r3
 8002752:	482f      	ldr	r0, [pc, #188]	; (8002810 <set_time_date_GPS+0x150>)
 8002754:	f00a fe66 	bl	800d424 <HAL_RTC_SetTime>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <set_time_date_GPS+0xa2>
	  {
	    Error_Handler();
 800275e:	f006 ff29 	bl	80095b4 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002762:	2301      	movs	r3, #1
 8002764:	703b      	strb	r3, [r7, #0]
	  Valor_RTC = (Buffer_02_Rx_W[56] - 0x30) + ((Buffer_02_Rx_W[55] - 0x30) * 10);
 8002766:	4b28      	ldr	r3, [pc, #160]	; (8002808 <set_time_date_GPS+0x148>)
 8002768:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800276c:	4b26      	ldr	r3, [pc, #152]	; (8002808 <set_time_date_GPS+0x148>)
 800276e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002772:	4619      	mov	r1, r3
 8002774:	0089      	lsls	r1, r1, #2
 8002776:	440b      	add	r3, r1
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4413      	add	r3, r2
 800277e:	b2db      	uxtb	r3, r3
 8002780:	3b10      	subs	r3, #16
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b21      	ldr	r3, [pc, #132]	; (800280c <set_time_date_GPS+0x14c>)
 8002786:	701a      	strb	r2, [r3, #0]
	  sDate.Month = Valor_RTC;     //RTC_MONTH_AUGUST;
 8002788:	4b20      	ldr	r3, [pc, #128]	; (800280c <set_time_date_GPS+0x14c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	707b      	strb	r3, [r7, #1]
	  Valor_RTC = (Buffer_02_Rx_W[54] - 0x30) + ((Buffer_02_Rx_W[53] - 0x30) * 10);
 800278e:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <set_time_date_GPS+0x148>)
 8002790:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <set_time_date_GPS+0x148>)
 8002796:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800279a:	4619      	mov	r1, r3
 800279c:	0089      	lsls	r1, r1, #2
 800279e:	440b      	add	r3, r1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	3b10      	subs	r3, #16
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b17      	ldr	r3, [pc, #92]	; (800280c <set_time_date_GPS+0x14c>)
 80027ae:	701a      	strb	r2, [r3, #0]
	  sDate.Date = Valor_RTC;      //21
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <set_time_date_GPS+0x14c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	70bb      	strb	r3, [r7, #2]
	  Valor_RTC = (Buffer_02_Rx_W[58] - 0x30) + ((Buffer_02_Rx_W[57] - 0x30) * 10);
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <set_time_date_GPS+0x148>)
 80027b8:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <set_time_date_GPS+0x148>)
 80027be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027c2:	4619      	mov	r1, r3
 80027c4:	0089      	lsls	r1, r1, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	3b10      	subs	r3, #16
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <set_time_date_GPS+0x14c>)
 80027d6:	701a      	strb	r2, [r3, #0]
	  sDate.Year = Valor_RTC;      //21;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <set_time_date_GPS+0x14c>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80027de:	463b      	mov	r3, r7
 80027e0:	2200      	movs	r2, #0
 80027e2:	4619      	mov	r1, r3
 80027e4:	480a      	ldr	r0, [pc, #40]	; (8002810 <set_time_date_GPS+0x150>)
 80027e6:	f00a ff15 	bl	800d614 <HAL_RTC_SetDate>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <set_time_date_GPS+0x134>
	  {
	    Error_Handler();
 80027f0:	f006 fee0 	bl	80095b4 <Error_Handler>
	  }

	  /* USER CODE BEGIN RTC_Init 2 */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1,0x32F2);  // BACKUP BATERIA !!!!!!
 80027f4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80027f8:	2101      	movs	r1, #1
 80027fa:	4805      	ldr	r0, [pc, #20]	; (8002810 <set_time_date_GPS+0x150>)
 80027fc:	f00b f89e 	bl	800d93c <HAL_RTCEx_BKUPWrite>
	  /* USER CODE END RTC_Init 2 */
}
 8002800:	bf00      	nop
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	2000c5f4 	.word	0x2000c5f4
 800280c:	2000c676 	.word	0x2000c676
 8002810:	20000130 	.word	0x20000130

08002814 <get_time_date>:

void get_time_date (void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800281a:	463b      	mov	r3, r7
 800281c:	2200      	movs	r2, #0
 800281e:	4619      	mov	r1, r3
 8002820:	4813      	ldr	r0, [pc, #76]	; (8002870 <get_time_date+0x5c>)
 8002822:	f00a fe99 	bl	800d558 <HAL_RTC_GetTime>

	  /* Get the RTC current Date */
	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	2200      	movs	r2, #0
 800282c:	4619      	mov	r1, r3
 800282e:	4810      	ldr	r0, [pc, #64]	; (8002870 <get_time_date+0x5c>)
 8002830:	f00a ff74 	bl	800d71c <HAL_RTC_GetDate>

	  calendario [0] = gTime.Hours;
 8002834:	783a      	ldrb	r2, [r7, #0]
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <get_time_date+0x60>)
 8002838:	701a      	strb	r2, [r3, #0]
	  calendario [1] = gTime.Minutes;
 800283a:	787a      	ldrb	r2, [r7, #1]
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <get_time_date+0x60>)
 800283e:	705a      	strb	r2, [r3, #1]
	  calendario [2] = gTime.Seconds;
 8002840:	78ba      	ldrb	r2, [r7, #2]
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <get_time_date+0x60>)
 8002844:	709a      	strb	r2, [r3, #2]
	  calendario [3] = gTime.SubSeconds;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <get_time_date+0x60>)
 800284c:	70da      	strb	r2, [r3, #3]
	  calendario [4] = gDate.Date;
 800284e:	7dba      	ldrb	r2, [r7, #22]
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <get_time_date+0x60>)
 8002852:	711a      	strb	r2, [r3, #4]
	  calendario [5] = gDate.Month;
 8002854:	7d7a      	ldrb	r2, [r7, #21]
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <get_time_date+0x60>)
 8002858:	715a      	strb	r2, [r3, #5]
	  calendario [6] = gDate.Year;
 800285a:	7dfa      	ldrb	r2, [r7, #23]
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <get_time_date+0x60>)
 800285e:	719a      	strb	r2, [r3, #6]
	  calendario [7] = gDate.WeekDay;
 8002860:	7d3a      	ldrb	r2, [r7, #20]
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <get_time_date+0x60>)
 8002864:	71da      	strb	r2, [r3, #7]
	  //HAL_UART_Transmit(&huart7, calendario, 8, 100);
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000130 	.word	0x20000130
 8002874:	20003cac 	.word	0x20003cac

08002878 <update_time_date_GPS>:

void update_time_date_GPS (void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	  if (Flag_02_Rx)
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <update_time_date_GPS+0x44>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d019      	beq.n	80028b8 <update_time_date_GPS+0x40>
	  {
		  if (Buffer_02_Rx_W[17] == 0x41)  //(A) $GPRMC,
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <update_time_date_GPS+0x48>)
 8002886:	7c5b      	ldrb	r3, [r3, #17]
 8002888:	2b41      	cmp	r3, #65	; 0x41
 800288a:	d10a      	bne.n	80028a2 <update_time_date_GPS+0x2a>
		  {
		  	  HAL_GPIO_WritePin(Led_Azul_GPIO_Port, Led_Azul_Pin, GPIO_PIN_RESET);
 800288c:	2200      	movs	r2, #0
 800288e:	2120      	movs	r1, #32
 8002890:	480c      	ldr	r0, [pc, #48]	; (80028c4 <update_time_date_GPS+0x4c>)
 8002892:	f009 fb97 	bl	800bfc4 <HAL_GPIO_WritePin>
			  set_time_date_GPS ();
 8002896:	f7ff ff13 	bl	80026c0 <set_time_date_GPS>
			  RxTotal02_W_Debugger = 0;
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <update_time_date_GPS+0x50>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e004      	b.n	80028ac <update_time_date_GPS+0x34>
		  }
		  else
		  {
		  	  HAL_GPIO_WritePin(Led_Azul_GPIO_Port, Led_Azul_Pin, GPIO_PIN_SET);
 80028a2:	2201      	movs	r2, #1
 80028a4:	2120      	movs	r1, #32
 80028a6:	4807      	ldr	r0, [pc, #28]	; (80028c4 <update_time_date_GPS+0x4c>)
 80028a8:	f009 fb8c 	bl	800bfc4 <HAL_GPIO_WritePin>
		  }
		  Flag_02_Rx = 0;
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <update_time_date_GPS+0x44>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
		  RxTotal02_W = 0;
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <update_time_date_GPS+0x54>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	801a      	strh	r2, [r3, #0]
	  }

}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	2000c674 	.word	0x2000c674
 80028c0:	2000c5f4 	.word	0x2000c5f4
 80028c4:	40020400 	.word	0x40020400
 80028c8:	2000c675 	.word	0x2000c675
 80028cc:	2000c5f0 	.word	0x2000c5f0

080028d0 <HAL_UART_RxCpltCallback>:

//==========================================================================================
//  INTERRUPCIONES /UART 8, 6, 4, 2, 3 /TIM 1, 6, 7
//==========================================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)  //UART Rx Complete Callback;
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart8.Instance)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b9f      	ldr	r3, [pc, #636]	; (8002b5c <HAL_UART_RxCpltCallback+0x28c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d148      	bne.n	8002976 <HAL_UART_RxCpltCallback+0xa6>
	{
		if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))  	 // Check if it is an "Idle Interrupt"
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d141      	bne.n	8002976 <HAL_UART_RxCpltCallback+0xa6>
		{
			// ============== Led ==============================================
			HAL_GPIO_TogglePin(Led_Verde_GPIO_Port, Led_Verde_Pin);
 80028f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028f6:	489a      	ldr	r0, [pc, #616]	; (8002b60 <HAL_UART_RxCpltCallback+0x290>)
 80028f8:	f009 fb7d 	bl	800bff6 <HAL_GPIO_TogglePin>

			// Borra la Interrupt
			__HAL_UART_CLEAR_IDLEFLAG(&huart8);  // Borra la Interrupt
 80028fc:	4b97      	ldr	r3, [pc, #604]	; (8002b5c <HAL_UART_RxCpltCallback+0x28c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2210      	movs	r2, #16
 8002902:	621a      	str	r2, [r3, #32]

			// determine actual buffer position  /CNDTR::::
			RxTotal08 = BUFFER_RX_08_SIZE - (uint16_t)huart->hdmarx->Instance->NDTR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b93      	ldr	r3, [pc, #588]	; (8002b64 <HAL_UART_RxCpltCallback+0x294>)
 8002916:	801a      	strh	r2, [r3, #0]

			// Paso Buffer a otro
			memcpy(Buffer_08_Rx_W, Buffer_08_Rx, sizeof(Buffer_08_Rx));
 8002918:	4a93      	ldr	r2, [pc, #588]	; (8002b68 <HAL_UART_RxCpltCallback+0x298>)
 800291a:	4b94      	ldr	r3, [pc, #592]	; (8002b6c <HAL_UART_RxCpltCallback+0x29c>)
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002924:	461a      	mov	r2, r3
 8002926:	f00d f8ff 	bl	800fb28 <memcpy>
			RxTotal08_W = RxTotal08;
 800292a:	4b8e      	ldr	r3, [pc, #568]	; (8002b64 <HAL_UART_RxCpltCallback+0x294>)
 800292c:	881a      	ldrh	r2, [r3, #0]
 800292e:	4b90      	ldr	r3, [pc, #576]	; (8002b70 <HAL_UART_RxCpltCallback+0x2a0>)
 8002930:	801a      	strh	r2, [r3, #0]
			RxTotal08_W_Debug = RxTotal08;  //DEBUGGER
 8002932:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <HAL_UART_RxCpltCallback+0x294>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	4b8e      	ldr	r3, [pc, #568]	; (8002b74 <HAL_UART_RxCpltCallback+0x2a4>)
 800293a:	701a      	strb	r2, [r3, #0]

			//TERMINAL UART 7
			//HAL_UART_Transmit(&huart7, (uint8_t*)Buffer_08_Rx, RxTotal08,300);

			// Stop DMA, Borrar el DMA!!
			HAL_UART_DMAStop(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f00b fe7c 	bl	800e63a <HAL_UART_DMAStop>
			__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0210 	orr.w	r2, r2, #16
 8002950:	601a      	str	r2, [r3, #0]
			memset(Buffer_08_Rx, 0x00, sizeof(Buffer_08_Rx));
 8002952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002956:	2100      	movs	r1, #0
 8002958:	4884      	ldr	r0, [pc, #528]	; (8002b6c <HAL_UART_RxCpltCallback+0x29c>)
 800295a:	f00d f8f3 	bl	800fb44 <memset>
			RxTotal08=0;
 800295e:	4b81      	ldr	r3, [pc, #516]	; (8002b64 <HAL_UART_RxCpltCallback+0x294>)
 8002960:	2200      	movs	r2, #0
 8002962:	801a      	strh	r2, [r3, #0]

		    Flag_08_Rx = 1;
 8002964:	4b84      	ldr	r3, [pc, #528]	; (8002b78 <HAL_UART_RxCpltCallback+0x2a8>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_DMA(huart, Buffer_08_Rx, BUFFER_RX_08_SIZE);
 800296a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296e:	497f      	ldr	r1, [pc, #508]	; (8002b6c <HAL_UART_RxCpltCallback+0x29c>)
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f00b fe1e 	bl	800e5b2 <HAL_UART_Receive_DMA>
		}
	}
	if(huart->Instance==huart3.Instance)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b80      	ldr	r3, [pc, #512]	; (8002b7c <HAL_UART_RxCpltCallback+0x2ac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d147      	bne.n	8002a12 <HAL_UART_RxCpltCallback+0x142>
	{
		if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))  	 // Check if it is an "Idle Interrupt"
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b10      	cmp	r3, #16
 800298e:	d140      	bne.n	8002a12 <HAL_UART_RxCpltCallback+0x142>
		{
			// ============== Led ==============================================
			HAL_GPIO_TogglePin(Led_Verde_GPIO_Port, Led_Verde_Pin);
 8002990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002994:	4872      	ldr	r0, [pc, #456]	; (8002b60 <HAL_UART_RxCpltCallback+0x290>)
 8002996:	f009 fb2e 	bl	800bff6 <HAL_GPIO_TogglePin>

			__HAL_UART_CLEAR_IDLEFLAG(&huart3);				 // Borra la Interrupt
 800299a:	4b78      	ldr	r3, [pc, #480]	; (8002b7c <HAL_UART_RxCpltCallback+0x2ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2210      	movs	r2, #16
 80029a0:	621a      	str	r2, [r3, #32]
			// determine actual buffer position  /CNDTR::::
			RxTotal03 = BUFFER_RX_03_SIZE - (uint16_t)huart->hdmarx->Instance->NDTR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <HAL_UART_RxCpltCallback+0x2b0>)
 80029b4:	801a      	strh	r2, [r3, #0]

			// Paso Buffer a otro
			memcpy(Buffer_03_Rx_W, Buffer_03_Rx, sizeof(Buffer_03_Rx));
 80029b6:	4a73      	ldr	r2, [pc, #460]	; (8002b84 <HAL_UART_RxCpltCallback+0x2b4>)
 80029b8:	4b73      	ldr	r3, [pc, #460]	; (8002b88 <HAL_UART_RxCpltCallback+0x2b8>)
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c2:	461a      	mov	r2, r3
 80029c4:	f00d f8b0 	bl	800fb28 <memcpy>
			RxTotal03_W = RxTotal03;
 80029c8:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <HAL_UART_RxCpltCallback+0x2b0>)
 80029ca:	881a      	ldrh	r2, [r3, #0]
 80029cc:	4b6f      	ldr	r3, [pc, #444]	; (8002b8c <HAL_UART_RxCpltCallback+0x2bc>)
 80029ce:	801a      	strh	r2, [r3, #0]
			RxTotal03_W_Debugger = RxTotal03_W; // Debugger >>>>>>>>>>>>>>>>>>>>>>>
 80029d0:	4b6e      	ldr	r3, [pc, #440]	; (8002b8c <HAL_UART_RxCpltCallback+0x2bc>)
 80029d2:	881a      	ldrh	r2, [r3, #0]
 80029d4:	4b6e      	ldr	r3, [pc, #440]	; (8002b90 <HAL_UART_RxCpltCallback+0x2c0>)
 80029d6:	801a      	strh	r2, [r3, #0]
	//		Usart_XX_Rx = 0x08;

			// Stop DMA, Borrar el DMA!!
			HAL_UART_DMAStop(huart);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f00b fe2e 	bl	800e63a <HAL_UART_DMAStop>
			__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0210 	orr.w	r2, r2, #16
 80029ec:	601a      	str	r2, [r3, #0]
			memset(Buffer_03_Rx, 0x00, sizeof(Buffer_03_Rx));
 80029ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f2:	2100      	movs	r1, #0
 80029f4:	4864      	ldr	r0, [pc, #400]	; (8002b88 <HAL_UART_RxCpltCallback+0x2b8>)
 80029f6:	f00d f8a5 	bl	800fb44 <memset>
			RxTotal03=0;
 80029fa:	4b61      	ldr	r3, [pc, #388]	; (8002b80 <HAL_UART_RxCpltCallback+0x2b0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	801a      	strh	r2, [r3, #0]

			Flag_03_Rx = 1; //
 8002a00:	4b64      	ldr	r3, [pc, #400]	; (8002b94 <HAL_UART_RxCpltCallback+0x2c4>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(huart, Buffer_03_Rx, BUFFER_RX_03_SIZE);
 8002a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a0a:	495f      	ldr	r1, [pc, #380]	; (8002b88 <HAL_UART_RxCpltCallback+0x2b8>)
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f00b fdd0 	bl	800e5b2 <HAL_UART_Receive_DMA>
		}
	}

	if(huart->Instance==huart4.Instance)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b60      	ldr	r3, [pc, #384]	; (8002b98 <HAL_UART_RxCpltCallback+0x2c8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d147      	bne.n	8002aae <HAL_UART_RxCpltCallback+0x1de>
	{
		if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))  	 // Check if it is an "Idle Interrupt"
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d140      	bne.n	8002aae <HAL_UART_RxCpltCallback+0x1de>
		{
			// ============== Led ==============================================
			HAL_GPIO_TogglePin(Led_Verde_GPIO_Port, Led_Verde_Pin);
 8002a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a30:	484b      	ldr	r0, [pc, #300]	; (8002b60 <HAL_UART_RxCpltCallback+0x290>)
 8002a32:	f009 fae0 	bl	800bff6 <HAL_GPIO_TogglePin>

			__HAL_UART_CLEAR_IDLEFLAG(&huart4);				 // clear the interrupt //Borra la Interrupt
 8002a36:	4b58      	ldr	r3, [pc, #352]	; (8002b98 <HAL_UART_RxCpltCallback+0x2c8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	621a      	str	r2, [r3, #32]
			// determine actual buffer position  /CNDTR::::
			RxTotal04 = BUFFER_RX_04_SIZE - (uint16_t)huart->hdmarx->Instance->NDTR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_UART_RxCpltCallback+0x2cc>)
 8002a50:	801a      	strh	r2, [r3, #0]

			// Paso Buffer a otro
			memcpy(Buffer_04_Rx_W, Buffer_04_Rx, sizeof(Buffer_04_Rx));
 8002a52:	4a53      	ldr	r2, [pc, #332]	; (8002ba0 <HAL_UART_RxCpltCallback+0x2d0>)
 8002a54:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <HAL_UART_RxCpltCallback+0x2d4>)
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f00d f862 	bl	800fb28 <memcpy>
			RxTotal04_W = RxTotal04;
 8002a64:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <HAL_UART_RxCpltCallback+0x2cc>)
 8002a66:	881a      	ldrh	r2, [r3, #0]
 8002a68:	4b4f      	ldr	r3, [pc, #316]	; (8002ba8 <HAL_UART_RxCpltCallback+0x2d8>)
 8002a6a:	801a      	strh	r2, [r3, #0]
			RxTotal04_W_Debugger = RxTotal04;  // DEBUGGER >>>>>>>>>>>>>>>>>>
 8002a6c:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <HAL_UART_RxCpltCallback+0x2cc>)
 8002a6e:	881a      	ldrh	r2, [r3, #0]
 8002a70:	4b4e      	ldr	r3, [pc, #312]	; (8002bac <HAL_UART_RxCpltCallback+0x2dc>)
 8002a72:	801a      	strh	r2, [r3, #0]

			//Usart_XX_Rx = 0x03;

			// Stop DMA, Borrar el DMA!!
			HAL_UART_DMAStop(huart);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f00b fde0 	bl	800e63a <HAL_UART_DMAStop>
			__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0210 	orr.w	r2, r2, #16
 8002a88:	601a      	str	r2, [r3, #0]
			memset(Buffer_04_Rx, 0x00, sizeof(Buffer_04_Rx));
 8002a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4844      	ldr	r0, [pc, #272]	; (8002ba4 <HAL_UART_RxCpltCallback+0x2d4>)
 8002a92:	f00d f857 	bl	800fb44 <memset>
			RxTotal04=0;
 8002a96:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <HAL_UART_RxCpltCallback+0x2cc>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	801a      	strh	r2, [r3, #0]

		    Flag_04_Rx = 1;
 8002a9c:	4b44      	ldr	r3, [pc, #272]	; (8002bb0 <HAL_UART_RxCpltCallback+0x2e0>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(huart, Buffer_04_Rx, BUFFER_RX_04_SIZE);
 8002aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa6:	493f      	ldr	r1, [pc, #252]	; (8002ba4 <HAL_UART_RxCpltCallback+0x2d4>)
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f00b fd82 	bl	800e5b2 <HAL_UART_Receive_DMA>
		}
	}

	if(huart->Instance==huart6.Instance)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b40      	ldr	r3, [pc, #256]	; (8002bb4 <HAL_UART_RxCpltCallback+0x2e4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d147      	bne.n	8002b4a <HAL_UART_RxCpltCallback+0x27a>
	{
		if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))  	 // Check if it is an "Idle Interrupt"
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d140      	bne.n	8002b4a <HAL_UART_RxCpltCallback+0x27a>
		{
			// ============== Led ==============================================
			HAL_GPIO_TogglePin(Led_Verde_GPIO_Port, Led_Verde_Pin);
 8002ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002acc:	4824      	ldr	r0, [pc, #144]	; (8002b60 <HAL_UART_RxCpltCallback+0x290>)
 8002ace:	f009 fa92 	bl	800bff6 <HAL_GPIO_TogglePin>

			// Borra la Interrupt
			__HAL_UART_CLEAR_IDLEFLAG(&huart6);  // Borra la Interrupt
 8002ad2:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_UART_RxCpltCallback+0x2e4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	621a      	str	r2, [r3, #32]

			// determine actual buffer position  /CNDTR::::
			RxTotal06 = BUFFER_RX_06_SIZE - (uint16_t)huart->hdmarx->Instance->NDTR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_UART_RxCpltCallback+0x2e8>)
 8002aec:	801a      	strh	r2, [r3, #0]

			// Paso Buffer a otro
			memcpy(Buffer_06_Rx_W, Buffer_06_Rx, sizeof(Buffer_06_Rx));
 8002aee:	4a33      	ldr	r2, [pc, #204]	; (8002bbc <HAL_UART_RxCpltCallback+0x2ec>)
 8002af0:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_UART_RxCpltCallback+0x2f0>)
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002afa:	461a      	mov	r2, r3
 8002afc:	f00d f814 	bl	800fb28 <memcpy>
			RxTotal06_W = RxTotal06;
 8002b00:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <HAL_UART_RxCpltCallback+0x2e8>)
 8002b02:	881a      	ldrh	r2, [r3, #0]
 8002b04:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002b06:	801a      	strh	r2, [r3, #0]
			RxTotal06_W_Debugger = RxTotal06;  //DEBUGGER
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_UART_RxCpltCallback+0x2e8>)
 8002b0a:	881a      	ldrh	r2, [r3, #0]
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <HAL_UART_RxCpltCallback+0x2f8>)
 8002b0e:	801a      	strh	r2, [r3, #0]

			//TERMINAL UART 7
			//HAL_UART_Transmit(&huart7, (uint8_t*)Buffer_03_Rx, RxTotal03,300);

			// Stop DMA, Borrar el DMA!!
			HAL_UART_DMAStop(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f00b fd92 	bl	800e63a <HAL_UART_DMAStop>
			__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0210 	orr.w	r2, r2, #16
 8002b24:	601a      	str	r2, [r3, #0]
			memset(Buffer_06_Rx, 0x00, sizeof(Buffer_06_Rx));
 8002b26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4824      	ldr	r0, [pc, #144]	; (8002bc0 <HAL_UART_RxCpltCallback+0x2f0>)
 8002b2e:	f00d f809 	bl	800fb44 <memset>
			RxTotal06=0;
 8002b32:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <HAL_UART_RxCpltCallback+0x2e8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	801a      	strh	r2, [r3, #0]

		    Flag_06_Rx = 1;
 8002b38:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_UART_RxCpltCallback+0x2fc>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_DMA(huart, Buffer_06_Rx, BUFFER_RX_06_SIZE);
 8002b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b42:	491f      	ldr	r1, [pc, #124]	; (8002bc0 <HAL_UART_RxCpltCallback+0x2f0>)
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f00b fd34 	bl	800e5b2 <HAL_UART_Receive_DMA>
		}
	}

	if(huart->Instance==huart2.Instance)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_UART_RxCpltCallback+0x300>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	f040 8084 	bne.w	8002c60 <HAL_UART_RxCpltCallback+0x390>
 8002b58:	e03c      	b.n	8002bd4 <HAL_UART_RxCpltCallback+0x304>
 8002b5a:	bf00      	nop
 8002b5c:	20000390 	.word	0x20000390
 8002b60:	40020400 	.word	0x40020400
 8002b64:	20003cfe 	.word	0x20003cfe
 8002b68:	20003e04 	.word	0x20003e04
 8002b6c:	20003d00 	.word	0x20003d00
 8002b70:	20003e00 	.word	0x20003e00
 8002b74:	20003f1c 	.word	0x20003f1c
 8002b78:	20003f04 	.word	0x20003f04
 8002b7c:	200004a0 	.word	0x200004a0
 8002b80:	2000c136 	.word	0x2000c136
 8002b84:	2000c23c 	.word	0x2000c23c
 8002b88:	2000c138 	.word	0x2000c138
 8002b8c:	2000c238 	.word	0x2000c238
 8002b90:	2000c33e 	.word	0x2000c33e
 8002b94:	2000c33c 	.word	0x2000c33c
 8002b98:	20000280 	.word	0x20000280
 8002b9c:	2000c356 	.word	0x2000c356
 8002ba0:	2000c45c 	.word	0x2000c45c
 8002ba4:	2000c358 	.word	0x2000c358
 8002ba8:	2000c458 	.word	0x2000c458
 8002bac:	2000c55e 	.word	0x2000c55e
 8002bb0:	2000c55c 	.word	0x2000c55c
 8002bb4:	20000528 	.word	0x20000528
 8002bb8:	2000412a 	.word	0x2000412a
 8002bbc:	20008130 	.word	0x20008130
 8002bc0:	2000412c 	.word	0x2000412c
 8002bc4:	2000812c 	.word	0x2000812c
 8002bc8:	2000c132 	.word	0x2000c132
 8002bcc:	2000c130 	.word	0x2000c130
 8002bd0:	20000418 	.word	0x20000418
	{
		if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))  	 // Check if it is an "Idle Interrupt"
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d13e      	bne.n	8002c60 <HAL_UART_RxCpltCallback+0x390>
		{
			// ============== Led ==============================================
			HAL_GPIO_TogglePin(Led_Verde_GPIO_Port, Led_Verde_Pin);
 8002be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002be6:	4820      	ldr	r0, [pc, #128]	; (8002c68 <HAL_UART_RxCpltCallback+0x398>)
 8002be8:	f009 fa05 	bl	800bff6 <HAL_GPIO_TogglePin>

			__HAL_UART_CLEAR_IDLEFLAG(&huart2);				 // Borra la Interrupt
 8002bec:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <HAL_UART_RxCpltCallback+0x39c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	621a      	str	r2, [r3, #32]
			// determine actual buffer position  /CNDTR::::
			RxTotal02 = BUFFER_RX_02_SIZE - (uint16_t)huart->hdmarx->Instance->NDTR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <HAL_UART_RxCpltCallback+0x3a0>)
 8002c06:	801a      	strh	r2, [r3, #0]

			// Paso Buffer a otro
			memcpy(Buffer_02_Rx_W, Buffer_02_Rx, sizeof(Buffer_02_Rx));
 8002c08:	4a1a      	ldr	r2, [pc, #104]	; (8002c74 <HAL_UART_RxCpltCallback+0x3a4>)
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_UART_RxCpltCallback+0x3a8>)
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	461a      	mov	r2, r3
 8002c14:	f00c ff88 	bl	800fb28 <memcpy>
			RxTotal02_W = RxTotal02;
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_UART_RxCpltCallback+0x3a0>)
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_UART_RxCpltCallback+0x3ac>)
 8002c1e:	801a      	strh	r2, [r3, #0]
			RxTotal02_W_Debugger = RxTotal02;  // DEBUGGER >>>>>>>>>>>>>>>>>>
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <HAL_UART_RxCpltCallback+0x3a0>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_UART_RxCpltCallback+0x3b0>)
 8002c28:	701a      	strb	r2, [r3, #0]
			//TERMINAL UART 6
			//HAL_UART_Transmit(&huart7, (uint8_t*)Buffer_06_Rx, RxTotal06,300);
			//HAL_UART_Transmit(&huart7, (uint8_t*)Buffer_06_Tx, 20,300);

			// Stop DMA, Borrar el DMA!!
			HAL_UART_DMAStop(huart);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f00b fd05 	bl	800e63a <HAL_UART_DMAStop>
			__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0210 	orr.w	r2, r2, #16
 8002c3e:	601a      	str	r2, [r3, #0]
			memset(Buffer_02_Rx, 0x00, sizeof(Buffer_02_Rx));
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	2100      	movs	r1, #0
 8002c44:	480c      	ldr	r0, [pc, #48]	; (8002c78 <HAL_UART_RxCpltCallback+0x3a8>)
 8002c46:	f00c ff7d 	bl	800fb44 <memset>
			RxTotal02=0;
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_UART_RxCpltCallback+0x3a0>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	801a      	strh	r2, [r3, #0]

			Flag_02_Rx = 1; //
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_UART_RxCpltCallback+0x3b4>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_DMA(&huart2, Buffer_02_Rx, BUFFER_RX_02_SIZE); //21-09-21
 8002c56:	2280      	movs	r2, #128	; 0x80
 8002c58:	4907      	ldr	r1, [pc, #28]	; (8002c78 <HAL_UART_RxCpltCallback+0x3a8>)
 8002c5a:	4804      	ldr	r0, [pc, #16]	; (8002c6c <HAL_UART_RxCpltCallback+0x39c>)
 8002c5c:	f00b fca9 	bl	800e5b2 <HAL_UART_Receive_DMA>
		}
	}
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40020400 	.word	0x40020400
 8002c6c:	20000418 	.word	0x20000418
 8002c70:	2000c56e 	.word	0x2000c56e
 8002c74:	2000c5f4 	.word	0x2000c5f4
 8002c78:	2000c570 	.word	0x2000c570
 8002c7c:	2000c5f0 	.word	0x2000c5f0
 8002c80:	2000c675 	.word	0x2000c675
 8002c84:	2000c674 	.word	0x2000c674

08002c88 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)  // UART Tx Complete Callback;
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	{
		//HAL_GPIO_TogglePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin); // toggle LED2

	}

}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <analizar_Rx_08_local>:

//==========================================================================================
//  UART 08 (SCADA)
//==========================================================================================
void analizar_Rx_08_local (void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
	//RxTotal08_W_Debug = 0;  //DEBUGGER
	//TxTotal08_W_Debug = 100;  //DEBUGGER
	error_crc_08 = 0;
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <analizar_Rx_08_local+0xac>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
	switch(Buffer_08_Rx_W [0])
 8002ca6:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <analizar_Rx_08_local+0xb0>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d14a      	bne.n	8002d44 <analizar_Rx_08_local+0xa8>
	{
		case 5:
			if(Buffer_08_Rx_W [1]== 100)
 8002cae:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <analizar_Rx_08_local+0xb0>)
 8002cb0:	785b      	ldrb	r3, [r3, #1]
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d145      	bne.n	8002d42 <analizar_Rx_08_local+0xa6>
			{
				anal_recep_tot_crc_uart_08();  //ANALISIS RECEPCION con TOTAL de BYTES + CRC TOTAL
 8002cb6:	f000 f85b 	bl	8002d70 <anal_recep_tot_crc_uart_08>
				if(error_crc_08==0)
 8002cba:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <analizar_Rx_08_local+0xac>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d13a      	bne.n	8002d38 <analizar_Rx_08_local+0x9c>
				{
					Dest_Rx_Scada_l = Buffer_08_Rx_W[4];
 8002cc2:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <analizar_Rx_08_local+0xb0>)
 8002cc4:	791a      	ldrb	r2, [r3, #4]
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <analizar_Rx_08_local+0xb4>)
 8002cc8:	701a      	strb	r2, [r3, #0]
					Dest_Rx_Scada_h = Buffer_08_Rx_W[5];
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <analizar_Rx_08_local+0xb0>)
 8002ccc:	795a      	ldrb	r2, [r3, #5]
 8002cce:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <analizar_Rx_08_local+0xb8>)
 8002cd0:	701a      	strb	r2, [r3, #0]
					Orig_Rx_Scada_l = Buffer_08_Rx_W[6];
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <analizar_Rx_08_local+0xb0>)
 8002cd4:	799a      	ldrb	r2, [r3, #6]
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <analizar_Rx_08_local+0xbc>)
 8002cd8:	701a      	strb	r2, [r3, #0]
					Orig_Rx_Scada_h = Buffer_08_Rx_W[7];
 8002cda:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <analizar_Rx_08_local+0xb0>)
 8002cdc:	79da      	ldrb	r2, [r3, #7]
 8002cde:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <analizar_Rx_08_local+0xc0>)
 8002ce0:	701a      	strb	r2, [r3, #0]

					if(Dest_Rx_Scada_l + 256 * Dest_Rx_Scada_h == ID)
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <analizar_Rx_08_local+0xb4>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <analizar_Rx_08_local+0xb8>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	4413      	add	r3, r2
 8002cf0:	4a1b      	ldr	r2, [pc, #108]	; (8002d60 <analizar_Rx_08_local+0xc4>)
 8002cf2:	8812      	ldrh	r2, [r2, #0]
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d124      	bne.n	8002d42 <analizar_Rx_08_local+0xa6>
					{
						HAL_GPIO_WritePin(UART8_RXD_GPIO_Port, UART8_RXD_Pin, GPIO_PIN_RESET);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2110      	movs	r1, #16
 8002cfc:	4819      	ldr	r0, [pc, #100]	; (8002d64 <analizar_Rx_08_local+0xc8>)
 8002cfe:	f009 f961 	bl	800bfc4 <HAL_GPIO_WritePin>

						TH_Rx_Scada = Buffer_08_Rx_W[10];
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <analizar_Rx_08_local+0xb0>)
 8002d04:	7a9a      	ldrb	r2, [r3, #10]
 8002d06:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <analizar_Rx_08_local+0xcc>)
 8002d08:	701a      	strb	r2, [r3, #0]
						AC_Rx_Scada = Buffer_08_Rx_W[11];
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <analizar_Rx_08_local+0xb0>)
 8002d0c:	7ada      	ldrb	r2, [r3, #11]
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <analizar_Rx_08_local+0xd0>)
 8002d10:	701a      	strb	r2, [r3, #0]
						switch (Buffer_08_Rx_W [12])  //BUSCAR FUNCION [1] Lectura / [5] Comando
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <analizar_Rx_08_local+0xb0>)
 8002d14:	7b1b      	ldrb	r3, [r3, #12]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d002      	beq.n	8002d20 <analizar_Rx_08_local+0x84>
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d003      	beq.n	8002d26 <analizar_Rx_08_local+0x8a>
 8002d1e:	e005      	b.n	8002d2c <analizar_Rx_08_local+0x90>
						{
						case 1:
							func_lectura();  // 1|1|1|0 - 1|1|1|1 - 1|30|4|0 - 1|30|4|1| - 1|30|3|1|
 8002d20:	f000 f9fa 	bl	8003118 <func_lectura>
						break;
 8002d24:	e002      	b.n	8002d2c <analizar_Rx_08_local+0x90>

						case 5:
							func_comando();  // 5|12|1|40
 8002d26:	f001 f979 	bl	800401c <func_comando>
						break;
 8002d2a:	bf00      	nop
						}
						//>>>
						HAL_GPIO_WritePin(UART8_RXD_GPIO_Port, UART8_RXD_Pin, GPIO_PIN_SET);
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	2110      	movs	r1, #16
 8002d30:	480c      	ldr	r0, [pc, #48]	; (8002d64 <analizar_Rx_08_local+0xc8>)
 8002d32:	f009 f947 	bl	800bfc4 <HAL_GPIO_WritePin>
				else
				{
					HAL_GPIO_WritePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin, GPIO_PIN_SET);
				}
			}
		break;
 8002d36:	e004      	b.n	8002d42 <analizar_Rx_08_local+0xa6>
					HAL_GPIO_WritePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin, GPIO_PIN_SET);
 8002d38:	2201      	movs	r2, #1
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	4809      	ldr	r0, [pc, #36]	; (8002d64 <analizar_Rx_08_local+0xc8>)
 8002d3e:	f009 f941 	bl	800bfc4 <HAL_GPIO_WritePin>
		break;
 8002d42:	bf00      	nop
			}
		break;
*/		// >>>>> case 97 //-//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	}
	//TxTotal08_W_Debug = 0;  //DEBUGGER
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20004120 	.word	0x20004120
 8002d4c:	20003e04 	.word	0x20003e04
 8002d50:	20004123 	.word	0x20004123
 8002d54:	20004124 	.word	0x20004124
 8002d58:	20004125 	.word	0x20004125
 8002d5c:	20004126 	.word	0x20004126
 8002d60:	2000091e 	.word	0x2000091e
 8002d64:	40020400 	.word	0x40020400
 8002d68:	20004127 	.word	0x20004127
 8002d6c:	20004128 	.word	0x20004128

08002d70 <anal_recep_tot_crc_uart_08>:
	//====================CALCULO CRC DNP / CRC 02. 03. ..nX=============
	}
}

void anal_recep_tot_crc_uart_08 (void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
	if (calc_long_rx(Buffer_08_Rx_W [2]) != RxTotal08_W)  //
 8002d76:	4b94      	ldr	r3, [pc, #592]	; (8002fc8 <anal_recep_tot_crc_uart_08+0x258>)
 8002d78:	789b      	ldrb	r3, [r3, #2]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f93a 	bl	8002ff4 <calc_long_rx>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b91      	ldr	r3, [pc, #580]	; (8002fcc <anal_recep_tot_crc_uart_08+0x25c>)
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d003      	beq.n	8002d94 <anal_recep_tot_crc_uart_08+0x24>
	{
		error_crc_08 = 1;
 8002d8c:	4b90      	ldr	r3, [pc, #576]	; (8002fd0 <anal_recep_tot_crc_uart_08+0x260>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
		crc_h = crc >> 8;
		if (Buffer_08_Rx_W [punt_crc + cola_crc_08] != crc_l){error_crc_08 = 1;}
		if (Buffer_08_Rx_W [punt_crc + (cola_crc_08 + 1)] != crc_h){error_crc_08 = 1;}
		//===============================================================
	}
}
 8002d92:	e115      	b.n	8002fc0 <anal_recep_tot_crc_uart_08+0x250>
		cant_crc_08 = (RxTotal08_W-11)/18+1;  // 2
 8002d94:	4b8d      	ldr	r3, [pc, #564]	; (8002fcc <anal_recep_tot_crc_uart_08+0x25c>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	3b0b      	subs	r3, #11
 8002d9a:	4a8e      	ldr	r2, [pc, #568]	; (8002fd4 <anal_recep_tot_crc_uart_08+0x264>)
 8002d9c:	fb82 1203 	smull	r1, r2, r2, r3
 8002da0:	1092      	asrs	r2, r2, #2
 8002da2:	17db      	asrs	r3, r3, #31
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b8a      	ldr	r3, [pc, #552]	; (8002fd8 <anal_recep_tot_crc_uart_08+0x268>)
 8002dae:	701a      	strb	r2, [r3, #0]
		cola_crc_08 = RxTotal08_W - 10 - (cant_crc_08 - 1)*18 - 2;
 8002db0:	4b86      	ldr	r3, [pc, #536]	; (8002fcc <anal_recep_tot_crc_uart_08+0x25c>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4b88      	ldr	r3, [pc, #544]	; (8002fd8 <anal_recep_tot_crc_uart_08+0x268>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	00c9      	lsls	r1, r1, #3
 8002dbe:	1acb      	subs	r3, r1, r3
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	0108      	lsls	r0, r1, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	440b      	add	r3, r1
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	3306      	adds	r3, #6
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4b81      	ldr	r3, [pc, #516]	; (8002fdc <anal_recep_tot_crc_uart_08+0x26c>)
 8002dd8:	701a      	strb	r2, [r3, #0]
		crc=0x0000;
 8002dda:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	801a      	strh	r2, [r3, #0]
		n=8;
 8002de0:	4b80      	ldr	r3, [pc, #512]	; (8002fe4 <anal_recep_tot_crc_uart_08+0x274>)
 8002de2:	2208      	movs	r2, #8
 8002de4:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<n; j++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e010      	b.n	8002e0e <anal_recep_tot_crc_uart_08+0x9e>
			variable = Buffer_08_Rx_W[j];
 8002dec:	4a76      	ldr	r2, [pc, #472]	; (8002fc8 <anal_recep_tot_crc_uart_08+0x258>)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	4b7c      	ldr	r3, [pc, #496]	; (8002fe8 <anal_recep_tot_crc_uart_08+0x278>)
 8002df8:	801a      	strh	r2, [r3, #0]
			computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8002dfa:	4b7b      	ldr	r3, [pc, #492]	; (8002fe8 <anal_recep_tot_crc_uart_08+0x278>)
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	4619      	mov	r1, r3
 8002e02:	4877      	ldr	r0, [pc, #476]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002e04:	f7fe f862 	bl	8000ecc <computeCRC>
		for(int j=0; j<n; j++)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	4b75      	ldr	r3, [pc, #468]	; (8002fe4 <anal_recep_tot_crc_uart_08+0x274>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	4293      	cmp	r3, r2
 8002e18:	dbe8      	blt.n	8002dec <anal_recep_tot_crc_uart_08+0x7c>
		crc = ~crc;
 8002e1a:	4b71      	ldr	r3, [pc, #452]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002e24:	801a      	strh	r2, [r3, #0]
		crc_l = crc;
 8002e26:	4b6e      	ldr	r3, [pc, #440]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b6f      	ldr	r3, [pc, #444]	; (8002fec <anal_recep_tot_crc_uart_08+0x27c>)
 8002e2e:	701a      	strb	r2, [r3, #0]
		crc_h = crc >> 8;
 8002e30:	4b6b      	ldr	r3, [pc, #428]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ff0 <anal_recep_tot_crc_uart_08+0x280>)
 8002e3c:	701a      	strb	r2, [r3, #0]
		if (Buffer_08_Rx_W [8] != crc_l){error_crc_08 = 1;}
 8002e3e:	4b62      	ldr	r3, [pc, #392]	; (8002fc8 <anal_recep_tot_crc_uart_08+0x258>)
 8002e40:	7a1a      	ldrb	r2, [r3, #8]
 8002e42:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <anal_recep_tot_crc_uart_08+0x27c>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d002      	beq.n	8002e50 <anal_recep_tot_crc_uart_08+0xe0>
 8002e4a:	4b61      	ldr	r3, [pc, #388]	; (8002fd0 <anal_recep_tot_crc_uart_08+0x260>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
		if (Buffer_08_Rx_W [9] != crc_h){error_crc_08 = 1;}
 8002e50:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <anal_recep_tot_crc_uart_08+0x258>)
 8002e52:	7a5a      	ldrb	r2, [r3, #9]
 8002e54:	4b66      	ldr	r3, [pc, #408]	; (8002ff0 <anal_recep_tot_crc_uart_08+0x280>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d002      	beq.n	8002e62 <anal_recep_tot_crc_uart_08+0xf2>
 8002e5c:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <anal_recep_tot_crc_uart_08+0x260>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
		uint8_t punt_crc= 10;
 8002e62:	230a      	movs	r3, #10
 8002e64:	74fb      	strb	r3, [r7, #19]
		cant_crc_08 = cant_crc_08-1;
 8002e66:	4b5c      	ldr	r3, [pc, #368]	; (8002fd8 <anal_recep_tot_crc_uart_08+0x268>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b5a      	ldr	r3, [pc, #360]	; (8002fd8 <anal_recep_tot_crc_uart_08+0x268>)
 8002e70:	701a      	strb	r2, [r3, #0]
		for(int k=cant_crc_08; k>0; k--)
 8002e72:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <anal_recep_tot_crc_uart_08+0x268>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e04f      	b.n	8002f1a <anal_recep_tot_crc_uart_08+0x1aa>
			crc=0x0000;
 8002e7a:	4b59      	ldr	r3, [pc, #356]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	801a      	strh	r2, [r3, #0]
			n=16;
 8002e80:	4b58      	ldr	r3, [pc, #352]	; (8002fe4 <anal_recep_tot_crc_uart_08+0x274>)
 8002e82:	2210      	movs	r2, #16
 8002e84:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<n; j++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	e012      	b.n	8002eb2 <anal_recep_tot_crc_uart_08+0x142>
				variable = (Buffer_08_Rx_W + punt_crc)[j];
 8002e8c:	7cfa      	ldrb	r2, [r7, #19]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4413      	add	r3, r2
 8002e92:	4a4d      	ldr	r2, [pc, #308]	; (8002fc8 <anal_recep_tot_crc_uart_08+0x258>)
 8002e94:	4413      	add	r3, r2
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <anal_recep_tot_crc_uart_08+0x278>)
 8002e9c:	801a      	strh	r2, [r3, #0]
				computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8002e9e:	4b52      	ldr	r3, [pc, #328]	; (8002fe8 <anal_recep_tot_crc_uart_08+0x278>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	484e      	ldr	r0, [pc, #312]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002ea8:	f7fe f810 	bl	8000ecc <computeCRC>
			for(int j=0; j<n; j++)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <anal_recep_tot_crc_uart_08+0x274>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	dbe6      	blt.n	8002e8c <anal_recep_tot_crc_uart_08+0x11c>
			crc = ~crc;
 8002ebe:	4b48      	ldr	r3, [pc, #288]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	4b46      	ldr	r3, [pc, #280]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002ec8:	801a      	strh	r2, [r3, #0]
			crc_l = crc;
 8002eca:	4b45      	ldr	r3, [pc, #276]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	4b46      	ldr	r3, [pc, #280]	; (8002fec <anal_recep_tot_crc_uart_08+0x27c>)
 8002ed2:	701a      	strb	r2, [r3, #0]
			crc_h = crc >> 8;
 8002ed4:	4b42      	ldr	r3, [pc, #264]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4b44      	ldr	r3, [pc, #272]	; (8002ff0 <anal_recep_tot_crc_uart_08+0x280>)
 8002ee0:	701a      	strb	r2, [r3, #0]
			if (Buffer_08_Rx_W [punt_crc + 16] != crc_l){error_crc_08 = 1;}
 8002ee2:	7cfb      	ldrb	r3, [r7, #19]
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	4a38      	ldr	r2, [pc, #224]	; (8002fc8 <anal_recep_tot_crc_uart_08+0x258>)
 8002ee8:	5cd2      	ldrb	r2, [r2, r3]
 8002eea:	4b40      	ldr	r3, [pc, #256]	; (8002fec <anal_recep_tot_crc_uart_08+0x27c>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d002      	beq.n	8002ef8 <anal_recep_tot_crc_uart_08+0x188>
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <anal_recep_tot_crc_uart_08+0x260>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
			if (Buffer_08_Rx_W [punt_crc + 17] != crc_h){error_crc_08 = 1;}
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	3311      	adds	r3, #17
 8002efc:	4a32      	ldr	r2, [pc, #200]	; (8002fc8 <anal_recep_tot_crc_uart_08+0x258>)
 8002efe:	5cd2      	ldrb	r2, [r2, r3]
 8002f00:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <anal_recep_tot_crc_uart_08+0x280>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d002      	beq.n	8002f0e <anal_recep_tot_crc_uart_08+0x19e>
 8002f08:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <anal_recep_tot_crc_uart_08+0x260>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
			punt_crc = punt_crc + 18;
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	3312      	adds	r3, #18
 8002f12:	74fb      	strb	r3, [r7, #19]
		for(int k=cant_crc_08; k>0; k--)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	dcac      	bgt.n	8002e7a <anal_recep_tot_crc_uart_08+0x10a>
		crc=0x0000;
 8002f20:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	801a      	strh	r2, [r3, #0]
		n = cola_crc_08;
 8002f26:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <anal_recep_tot_crc_uart_08+0x26c>)
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <anal_recep_tot_crc_uart_08+0x274>)
 8002f2c:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<n; j++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	e012      	b.n	8002f5a <anal_recep_tot_crc_uart_08+0x1ea>
			variable = (Buffer_08_Rx_W + punt_crc)[j];
 8002f34:	7cfa      	ldrb	r2, [r7, #19]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <anal_recep_tot_crc_uart_08+0x258>)
 8002f3c:	4413      	add	r3, r2
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <anal_recep_tot_crc_uart_08+0x278>)
 8002f44:	801a      	strh	r2, [r3, #0]
			computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <anal_recep_tot_crc_uart_08+0x278>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4824      	ldr	r0, [pc, #144]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002f50:	f7fd ffbc 	bl	8000ecc <computeCRC>
		for(int j=0; j<n; j++)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3301      	adds	r3, #1
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <anal_recep_tot_crc_uart_08+0x274>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4293      	cmp	r3, r2
 8002f64:	dbe6      	blt.n	8002f34 <anal_recep_tot_crc_uart_08+0x1c4>
		crc = ~crc;
 8002f66:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002f70:	801a      	strh	r2, [r3, #0]
		crc_l = crc;
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <anal_recep_tot_crc_uart_08+0x27c>)
 8002f7a:	701a      	strb	r2, [r3, #0]
		crc_h = crc >> 8;
 8002f7c:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <anal_recep_tot_crc_uart_08+0x270>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <anal_recep_tot_crc_uart_08+0x280>)
 8002f88:	701a      	strb	r2, [r3, #0]
		if (Buffer_08_Rx_W [punt_crc + cola_crc_08] != crc_l){error_crc_08 = 1;}
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	4a13      	ldr	r2, [pc, #76]	; (8002fdc <anal_recep_tot_crc_uart_08+0x26c>)
 8002f8e:	7812      	ldrb	r2, [r2, #0]
 8002f90:	4413      	add	r3, r2
 8002f92:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <anal_recep_tot_crc_uart_08+0x258>)
 8002f94:	5cd2      	ldrb	r2, [r2, r3]
 8002f96:	4b15      	ldr	r3, [pc, #84]	; (8002fec <anal_recep_tot_crc_uart_08+0x27c>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d002      	beq.n	8002fa4 <anal_recep_tot_crc_uart_08+0x234>
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <anal_recep_tot_crc_uart_08+0x260>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
		if (Buffer_08_Rx_W [punt_crc + (cola_crc_08 + 1)] != crc_h){error_crc_08 = 1;}
 8002fa4:	7cfa      	ldrb	r2, [r7, #19]
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <anal_recep_tot_crc_uart_08+0x26c>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	4a06      	ldr	r2, [pc, #24]	; (8002fc8 <anal_recep_tot_crc_uart_08+0x258>)
 8002fb0:	5cd2      	ldrb	r2, [r2, r3]
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <anal_recep_tot_crc_uart_08+0x280>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d002      	beq.n	8002fc0 <anal_recep_tot_crc_uart_08+0x250>
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <anal_recep_tot_crc_uart_08+0x260>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20003e04 	.word	0x20003e04
 8002fcc:	20003e00 	.word	0x20003e00
 8002fd0:	20004120 	.word	0x20004120
 8002fd4:	38e38e39 	.word	0x38e38e39
 8002fd8:	20004121 	.word	0x20004121
 8002fdc:	20004122 	.word	0x20004122
 8002fe0:	20003ce0 	.word	0x20003ce0
 8002fe4:	20000012 	.word	0x20000012
 8002fe8:	20003ce4 	.word	0x20003ce4
 8002fec:	20003ce3 	.word	0x20003ce3
 8002ff0:	20003ce2 	.word	0x20003ce2

08002ff4 <calc_long_rx>:

uint16_t calc_long_rx (uint8_t L)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t A, B;
	A = ((L-5)/16);
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	3b05      	subs	r3, #5
 8003002:	2b00      	cmp	r3, #0
 8003004:	da00      	bge.n	8003008 <calc_long_rx+0x14>
 8003006:	330f      	adds	r3, #15
 8003008:	111b      	asrs	r3, r3, #4
 800300a:	73fb      	strb	r3, [r7, #15]
	if ((L-5) < 16)
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	2b14      	cmp	r3, #20
 8003010:	d803      	bhi.n	800301a <calc_long_rx+0x26>
	{
		B = L-5;
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	3b05      	subs	r3, #5
 8003016:	73bb      	strb	r3, [r7, #14]
 8003018:	e003      	b.n	8003022 <calc_long_rx+0x2e>
	}
	else
	{
		B = (A % 16);
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	73bb      	strb	r3, [r7, #14]
	}

	if (B != 0){ A = A + 1;}
 8003022:	7bbb      	ldrb	r3, [r7, #14]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <calc_long_rx+0x3a>
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	3301      	adds	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
	return ((A * 2) + 5 + L);
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	b29b      	uxth	r3, r3
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	b29b      	uxth	r3, r3
 800303a:	4413      	add	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	3305      	adds	r3, #5
 8003040:	b29b      	uxth	r3, r3
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <calc_long_tx>:

uint8_t calc_long_tx (uint8_t L)  //
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
	return (L - 5 -((L-11)/18 +1)*2);
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	3b0b      	subs	r3, #11
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <calc_long_tx+0x38>)
 8003060:	fb82 1203 	smull	r1, r2, r2, r3
 8003064:	1092      	asrs	r2, r2, #2
 8003066:	17db      	asrs	r3, r3, #31
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	3301      	adds	r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	79fa      	ldrb	r2, [r7, #7]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	3b05      	subs	r3, #5
 800307a:	b2db      	uxtb	r3, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	38e38e39 	.word	0x38e38e39

0800308c <cant_bits_d>:

uint16_t cant_bits_d (uint16_t I, uint16_t F)  //
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	460a      	mov	r2, r1
 8003096:	80fb      	strh	r3, [r7, #6]
 8003098:	4613      	mov	r3, r2
 800309a:	80bb      	strh	r3, [r7, #4]
	return ((F - I) + 1);	//
 800309c:	88ba      	ldrh	r2, [r7, #4]
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	b29b      	uxth	r3, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <cant_bytes_d>:

uint8_t cant_bytes_d (uint16_t I, uint16_t F)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	460a      	mov	r2, r1
 80030be:	80fb      	strh	r3, [r7, #6]
 80030c0:	4613      	mov	r3, r2
 80030c2:	80bb      	strh	r3, [r7, #4]
	return (((I % 8) + F - I )/ 8 + 1);
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	f003 0207 	and.w	r2, r3, #7
 80030ca:	88bb      	ldrh	r3, [r7, #4]
 80030cc:	441a      	add	r2, r3
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	da00      	bge.n	80030d8 <cant_bytes_d+0x24>
 80030d6:	3307      	adds	r3, #7
 80030d8:	10db      	asrs	r3, r3, #3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	b2db      	uxtb	r3, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <cant_bytes_a>:

uint8_t cant_bytes_a (uint16_t I, uint16_t F)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	460a      	mov	r2, r1
 80030f6:	80fb      	strh	r3, [r7, #6]
 80030f8:	4613      	mov	r3, r2
 80030fa:	80bb      	strh	r3, [r7, #4]
	return ((F - I + 1) * 2);
 80030fc:	88ba      	ldrh	r2, [r7, #4]
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	3301      	adds	r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <func_lectura>:

void func_lectura (void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
	Buffer_08_Tx_W [0] = 5;
 800311e:	4b1f      	ldr	r3, [pc, #124]	; (800319c <func_lectura+0x84>)
 8003120:	2205      	movs	r2, #5
 8003122:	701a      	strb	r2, [r3, #0]
	Buffer_08_Tx_W [1] = 100;
 8003124:	4b1d      	ldr	r3, [pc, #116]	; (800319c <func_lectura+0x84>)
 8003126:	2264      	movs	r2, #100	; 0x64
 8003128:	705a      	strb	r2, [r3, #1]
	// [2] --> Long
	Buffer_08_Tx_W [3] = 68;
 800312a:	4b1c      	ldr	r3, [pc, #112]	; (800319c <func_lectura+0x84>)
 800312c:	2244      	movs	r2, #68	; 0x44
 800312e:	70da      	strb	r2, [r3, #3]
	Buffer_08_Tx_W [4] = Orig_Rx_Scada_l;
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <func_lectura+0x88>)
 8003132:	781a      	ldrb	r2, [r3, #0]
 8003134:	4b19      	ldr	r3, [pc, #100]	; (800319c <func_lectura+0x84>)
 8003136:	711a      	strb	r2, [r3, #4]
	Buffer_08_Tx_W [5] = Orig_Rx_Scada_h;
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <func_lectura+0x8c>)
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <func_lectura+0x84>)
 800313e:	715a      	strb	r2, [r3, #5]
	Buffer_08_Tx_W [6] = Dest_Rx_Scada_l; // ID_L
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <func_lectura+0x90>)
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	4b15      	ldr	r3, [pc, #84]	; (800319c <func_lectura+0x84>)
 8003146:	719a      	strb	r2, [r3, #6]
	Buffer_08_Tx_W [7] = Dest_Rx_Scada_h; // ID_H
 8003148:	4b18      	ldr	r3, [pc, #96]	; (80031ac <func_lectura+0x94>)
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	4b13      	ldr	r3, [pc, #76]	; (800319c <func_lectura+0x84>)
 800314e:	71da      	strb	r2, [r3, #7]
	// [8] --> CRC
	// [9] --> CRC
	Buffer_08_Tx_W [10] = TH_Rx_Scada;
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <func_lectura+0x98>)
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <func_lectura+0x84>)
 8003156:	729a      	strb	r2, [r3, #10]
	Buffer_08_Tx_W [11] = AC_Rx_Scada;
 8003158:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <func_lectura+0x9c>)
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <func_lectura+0x84>)
 800315e:	72da      	strb	r2, [r3, #11]
	Buffer_08_Tx_W [12] = 129;
 8003160:	4b0e      	ldr	r3, [pc, #56]	; (800319c <func_lectura+0x84>)
 8003162:	2281      	movs	r2, #129	; 0x81
 8003164:	731a      	strb	r2, [r3, #12]
	Buffer_08_Tx_W [13] = 0;  // INN
 8003166:	4b0d      	ldr	r3, [pc, #52]	; (800319c <func_lectura+0x84>)
 8003168:	2200      	movs	r2, #0
 800316a:	735a      	strb	r2, [r3, #13]
	Buffer_08_Tx_W [14] = 0;  // INN
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <func_lectura+0x84>)
 800316e:	2200      	movs	r2, #0
 8003170:	739a      	strb	r2, [r3, #14]

	Punt_Buffer_08_Rx = 13;
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <func_lectura+0xa0>)
 8003174:	220d      	movs	r2, #13
 8003176:	801a      	strh	r2, [r3, #0]
	Punt_Buffer_08_Tx = 15;
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <func_lectura+0xa4>)
 800317a:	220f      	movs	r2, #15
 800317c:	801a      	strh	r2, [r3, #0]
	Fin_Buffer_08 = RxTotal08_W - 2;  //
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <func_lectura+0xa8>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	3b02      	subs	r3, #2
 8003184:	b29a      	uxth	r2, r3
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <func_lectura+0xac>)
 8003188:	801a      	strh	r2, [r3, #0]
	Prox_crc_Tx_08 = 26;
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <func_lectura+0xb0>)
 800318c:	221a      	movs	r2, #26
 800318e:	801a      	strh	r2, [r3, #0]
	Prox_crc_Rx_08 = 26;
 8003190:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <func_lectura+0xb4>)
 8003192:	221a      	movs	r2, #26
 8003194:	801a      	strh	r2, [r3, #0]


	//#################################################################
	while (Flag_Fin_Buffer_08 == 0)
 8003196:	f000 beb3 	b.w	8003f00 <func_lectura+0xde8>
 800319a:	bf00      	nop
 800319c:	20004020 	.word	0x20004020
 80031a0:	20004125 	.word	0x20004125
 80031a4:	20004126 	.word	0x20004126
 80031a8:	20004123 	.word	0x20004123
 80031ac:	20004124 	.word	0x20004124
 80031b0:	20004127 	.word	0x20004127
 80031b4:	20004128 	.word	0x20004128
 80031b8:	20003f06 	.word	0x20003f06
 80031bc:	20003f14 	.word	0x20003f14
 80031c0:	20003e00 	.word	0x20003e00
 80031c4:	20003f08 	.word	0x20003f08
 80031c8:	20000016 	.word	0x20000016
 80031cc:	20000014 	.word	0x20000014
	{

		analizar_Rx();
 80031d0:	f000 febc 	bl	8003f4c <analizar_Rx>
		if(Flag_Fin_Buffer_08 == 0)
 80031d4:	4b9b      	ldr	r3, [pc, #620]	; (8003444 <func_lectura+0x32c>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f040 855c 	bne.w	8003c96 <func_lectura+0xb7e>
		{
			analizar_Tx();
 80031de:	f000 fee1 	bl	8003fa4 <analizar_Tx>
			Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80031e2:	4b99      	ldr	r3, [pc, #612]	; (8003448 <func_lectura+0x330>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	4b98      	ldr	r3, [pc, #608]	; (800344c <func_lectura+0x334>)
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b98      	ldr	r3, [pc, #608]	; (8003450 <func_lectura+0x338>)
 80031f0:	5c59      	ldrb	r1, [r3, r1]
 80031f2:	4b98      	ldr	r3, [pc, #608]	; (8003454 <func_lectura+0x33c>)
 80031f4:	5499      	strb	r1, [r3, r2]

			if(Buffer_08_Rx_W [Punt_Buffer_08_Rx] == 1)  // 1 <> 30
 80031f6:	4b94      	ldr	r3, [pc, #592]	; (8003448 <func_lectura+0x330>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	4b94      	ldr	r3, [pc, #592]	; (8003450 <func_lectura+0x338>)
 80031fe:	5c9b      	ldrb	r3, [r3, r2]
 8003200:	2b01      	cmp	r3, #1
 8003202:	f040 8293 	bne.w	800372c <func_lectura+0x614>
			{
				Punt_Buffer_08_Rx++;
 8003206:	4b90      	ldr	r3, [pc, #576]	; (8003448 <func_lectura+0x330>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	3301      	adds	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	4b8e      	ldr	r3, [pc, #568]	; (8003448 <func_lectura+0x330>)
 8003210:	801a      	strh	r2, [r3, #0]
				Punt_Buffer_08_Tx++;
 8003212:	4b8e      	ldr	r3, [pc, #568]	; (800344c <func_lectura+0x334>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	4b8c      	ldr	r3, [pc, #560]	; (800344c <func_lectura+0x334>)
 800321c:	801a      	strh	r2, [r3, #0]
				analizar_Rx();
 800321e:	f000 fe95 	bl	8003f4c <analizar_Rx>
				analizar_Tx();
 8003222:	f000 febf 	bl	8003fa4 <analizar_Tx>
				Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003226:	4b88      	ldr	r3, [pc, #544]	; (8003448 <func_lectura+0x330>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	4619      	mov	r1, r3
 800322c:	4b87      	ldr	r3, [pc, #540]	; (800344c <func_lectura+0x334>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	4b87      	ldr	r3, [pc, #540]	; (8003450 <func_lectura+0x338>)
 8003234:	5c59      	ldrb	r1, [r3, r1]
 8003236:	4b87      	ldr	r3, [pc, #540]	; (8003454 <func_lectura+0x33c>)
 8003238:	5499      	strb	r1, [r3, r2]
				if(Buffer_08_Rx_W [Punt_Buffer_08_Rx] == 1)  //1
 800323a:	4b83      	ldr	r3, [pc, #524]	; (8003448 <func_lectura+0x330>)
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	4b83      	ldr	r3, [pc, #524]	; (8003450 <func_lectura+0x338>)
 8003242:	5c9b      	ldrb	r3, [r3, r2]
 8003244:	2b01      	cmp	r3, #1
 8003246:	f040 865b 	bne.w	8003f00 <func_lectura+0xde8>
				{
					Punt_Buffer_08_Rx++;
 800324a:	4b7f      	ldr	r3, [pc, #508]	; (8003448 <func_lectura+0x330>)
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	4b7d      	ldr	r3, [pc, #500]	; (8003448 <func_lectura+0x330>)
 8003254:	801a      	strh	r2, [r3, #0]
					Punt_Buffer_08_Tx++;
 8003256:	4b7d      	ldr	r3, [pc, #500]	; (800344c <func_lectura+0x334>)
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	4b7b      	ldr	r3, [pc, #492]	; (800344c <func_lectura+0x334>)
 8003260:	801a      	strh	r2, [r3, #0]
					analizar_Rx();
 8003262:	f000 fe73 	bl	8003f4c <analizar_Rx>
					analizar_Tx();
 8003266:	f000 fe9d 	bl	8003fa4 <analizar_Tx>
					Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 800326a:	4b77      	ldr	r3, [pc, #476]	; (8003448 <func_lectura+0x330>)
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	4b76      	ldr	r3, [pc, #472]	; (800344c <func_lectura+0x334>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b76      	ldr	r3, [pc, #472]	; (8003450 <func_lectura+0x338>)
 8003278:	5c59      	ldrb	r1, [r3, r1]
 800327a:	4b76      	ldr	r3, [pc, #472]	; (8003454 <func_lectura+0x33c>)
 800327c:	5499      	strb	r1, [r3, r2]
					if(Buffer_08_Rx_W [Punt_Buffer_08_Rx] == 1)  // 1 1 1
 800327e:	4b72      	ldr	r3, [pc, #456]	; (8003448 <func_lectura+0x330>)
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	4b72      	ldr	r3, [pc, #456]	; (8003450 <func_lectura+0x338>)
 8003286:	5c9b      	ldrb	r3, [r3, r2]
 8003288:	2b01      	cmp	r3, #1
 800328a:	f040 8146 	bne.w	800351a <func_lectura+0x402>
					{
						Punt_Buffer_08_Rx++;
 800328e:	4b6e      	ldr	r3, [pc, #440]	; (8003448 <func_lectura+0x330>)
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	3301      	adds	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	4b6c      	ldr	r3, [pc, #432]	; (8003448 <func_lectura+0x330>)
 8003298:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 800329a:	4b6c      	ldr	r3, [pc, #432]	; (800344c <func_lectura+0x334>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	4b6a      	ldr	r3, [pc, #424]	; (800344c <func_lectura+0x334>)
 80032a4:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 80032a6:	f000 fe51 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 80032aa:	f000 fe7b 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80032ae:	4b66      	ldr	r3, [pc, #408]	; (8003448 <func_lectura+0x330>)
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	4b65      	ldr	r3, [pc, #404]	; (800344c <func_lectura+0x334>)
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b65      	ldr	r3, [pc, #404]	; (8003450 <func_lectura+0x338>)
 80032bc:	5c59      	ldrb	r1, [r3, r1]
 80032be:	4b65      	ldr	r3, [pc, #404]	; (8003454 <func_lectura+0x33c>)
 80032c0:	5499      	strb	r1, [r3, r2]
						Inicio_08 = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80032c2:	4b61      	ldr	r3, [pc, #388]	; (8003448 <func_lectura+0x330>)
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	4b61      	ldr	r3, [pc, #388]	; (8003450 <func_lectura+0x338>)
 80032ca:	5c9b      	ldrb	r3, [r3, r2]
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	4b62      	ldr	r3, [pc, #392]	; (8003458 <func_lectura+0x340>)
 80032d0:	801a      	strh	r2, [r3, #0]

						Punt_Buffer_08_Rx++;
 80032d2:	4b5d      	ldr	r3, [pc, #372]	; (8003448 <func_lectura+0x330>)
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	3301      	adds	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	4b5b      	ldr	r3, [pc, #364]	; (8003448 <func_lectura+0x330>)
 80032dc:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 80032de:	4b5b      	ldr	r3, [pc, #364]	; (800344c <func_lectura+0x334>)
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	4b59      	ldr	r3, [pc, #356]	; (800344c <func_lectura+0x334>)
 80032e8:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 80032ea:	f000 fe2f 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 80032ee:	f000 fe59 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80032f2:	4b55      	ldr	r3, [pc, #340]	; (8003448 <func_lectura+0x330>)
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	4619      	mov	r1, r3
 80032f8:	4b54      	ldr	r3, [pc, #336]	; (800344c <func_lectura+0x334>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b54      	ldr	r3, [pc, #336]	; (8003450 <func_lectura+0x338>)
 8003300:	5c59      	ldrb	r1, [r3, r1]
 8003302:	4b54      	ldr	r3, [pc, #336]	; (8003454 <func_lectura+0x33c>)
 8003304:	5499      	strb	r1, [r3, r2]
						Inicio_08 = Inicio_08 + 256 * Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003306:	4b50      	ldr	r3, [pc, #320]	; (8003448 <func_lectura+0x330>)
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	4b50      	ldr	r3, [pc, #320]	; (8003450 <func_lectura+0x338>)
 800330e:	5c9b      	ldrb	r3, [r3, r2]
 8003310:	b29b      	uxth	r3, r3
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	b29a      	uxth	r2, r3
 8003316:	4b50      	ldr	r3, [pc, #320]	; (8003458 <func_lectura+0x340>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	4413      	add	r3, r2
 800331c:	b29a      	uxth	r2, r3
 800331e:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <func_lectura+0x340>)
 8003320:	801a      	strh	r2, [r3, #0]

						Punt_Buffer_08_Rx++;
 8003322:	4b49      	ldr	r3, [pc, #292]	; (8003448 <func_lectura+0x330>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	3301      	adds	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <func_lectura+0x330>)
 800332c:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <func_lectura+0x334>)
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	4b45      	ldr	r3, [pc, #276]	; (800344c <func_lectura+0x334>)
 8003338:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 800333a:	f000 fe07 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 800333e:	f000 fe31 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <func_lectura+0x330>)
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	4619      	mov	r1, r3
 8003348:	4b40      	ldr	r3, [pc, #256]	; (800344c <func_lectura+0x334>)
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	4b40      	ldr	r3, [pc, #256]	; (8003450 <func_lectura+0x338>)
 8003350:	5c59      	ldrb	r1, [r3, r1]
 8003352:	4b40      	ldr	r3, [pc, #256]	; (8003454 <func_lectura+0x33c>)
 8003354:	5499      	strb	r1, [r3, r2]
						Final_08 = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003356:	4b3c      	ldr	r3, [pc, #240]	; (8003448 <func_lectura+0x330>)
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	4b3c      	ldr	r3, [pc, #240]	; (8003450 <func_lectura+0x338>)
 800335e:	5c9b      	ldrb	r3, [r3, r2]
 8003360:	b29a      	uxth	r2, r3
 8003362:	4b3e      	ldr	r3, [pc, #248]	; (800345c <func_lectura+0x344>)
 8003364:	801a      	strh	r2, [r3, #0]

						Punt_Buffer_08_Rx++;
 8003366:	4b38      	ldr	r3, [pc, #224]	; (8003448 <func_lectura+0x330>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	3301      	adds	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <func_lectura+0x330>)
 8003370:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 8003372:	4b36      	ldr	r3, [pc, #216]	; (800344c <func_lectura+0x334>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	4b34      	ldr	r3, [pc, #208]	; (800344c <func_lectura+0x334>)
 800337c:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 800337e:	f000 fde5 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 8003382:	f000 fe0f 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003386:	4b30      	ldr	r3, [pc, #192]	; (8003448 <func_lectura+0x330>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	4619      	mov	r1, r3
 800338c:	4b2f      	ldr	r3, [pc, #188]	; (800344c <func_lectura+0x334>)
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4b2f      	ldr	r3, [pc, #188]	; (8003450 <func_lectura+0x338>)
 8003394:	5c59      	ldrb	r1, [r3, r1]
 8003396:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <func_lectura+0x33c>)
 8003398:	5499      	strb	r1, [r3, r2]
						Final_08 = Final_08 + 256 * Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 800339a:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <func_lectura+0x330>)
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <func_lectura+0x338>)
 80033a2:	5c9b      	ldrb	r3, [r3, r2]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	4b2c      	ldr	r3, [pc, #176]	; (800345c <func_lectura+0x344>)
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	4413      	add	r3, r2
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	4b2a      	ldr	r3, [pc, #168]	; (800345c <func_lectura+0x344>)
 80033b4:	801a      	strh	r2, [r3, #0]
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
						cant_bits_08 = cant_bits_d (Inicio_08, Final_08);
 80033b6:	4b28      	ldr	r3, [pc, #160]	; (8003458 <func_lectura+0x340>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	4a28      	ldr	r2, [pc, #160]	; (800345c <func_lectura+0x344>)
 80033bc:	8812      	ldrh	r2, [r2, #0]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fe63 	bl	800308c <cant_bits_d>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b25      	ldr	r3, [pc, #148]	; (8003460 <func_lectura+0x348>)
 80033cc:	801a      	strh	r2, [r3, #0]
						cant_bytes_08 = cant_bytes_d(Inicio_08, Final_08);
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <func_lectura+0x340>)
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	4a22      	ldr	r2, [pc, #136]	; (800345c <func_lectura+0x344>)
 80033d4:	8812      	ldrh	r2, [r2, #0]
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fe6b 	bl	80030b4 <cant_bytes_d>
 80033de:	4603      	mov	r3, r0
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <func_lectura+0x34c>)
 80033e4:	801a      	strh	r2, [r3, #0]
						primer_byte_08 = Inicio_08/8;
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <func_lectura+0x340>)
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	08db      	lsrs	r3, r3, #3
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <func_lectura+0x350>)
 80033f0:	801a      	strh	r2, [r3, #0]

						switch(Inicio_08 % 8)
 80033f2:	4b19      	ldr	r3, [pc, #100]	; (8003458 <func_lectura+0x340>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	2b07      	cmp	r3, #7
 80033fc:	d848      	bhi.n	8003490 <func_lectura+0x378>
 80033fe:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <func_lectura+0x2ec>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	08003425 	.word	0x08003425
 8003408:	0800342d 	.word	0x0800342d
 800340c:	08003435 	.word	0x08003435
 8003410:	0800343d 	.word	0x0800343d
 8003414:	08003471 	.word	0x08003471
 8003418:	08003479 	.word	0x08003479
 800341c:	08003481 	.word	0x08003481
 8003420:	08003489 	.word	0x08003489
						{
							case 0:
								mascara_08 = 0b11111111;
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <func_lectura+0x354>)
 8003426:	22ff      	movs	r2, #255	; 0xff
 8003428:	701a      	strb	r2, [r3, #0]
								break;
 800342a:	e031      	b.n	8003490 <func_lectura+0x378>
							case 1:
								mascara_08 = 0b11111110;
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <func_lectura+0x354>)
 800342e:	22fe      	movs	r2, #254	; 0xfe
 8003430:	701a      	strb	r2, [r3, #0]
								break;
 8003432:	e02d      	b.n	8003490 <func_lectura+0x378>
							case 2:
								mascara_08 = 0b11111100;
 8003434:	4b0d      	ldr	r3, [pc, #52]	; (800346c <func_lectura+0x354>)
 8003436:	22fc      	movs	r2, #252	; 0xfc
 8003438:	701a      	strb	r2, [r3, #0]
								break;
 800343a:	e029      	b.n	8003490 <func_lectura+0x378>
							case 3:
								mascara_08 = 0b11111000;
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <func_lectura+0x354>)
 800343e:	22f8      	movs	r2, #248	; 0xf8
 8003440:	701a      	strb	r2, [r3, #0]
								break;
 8003442:	e025      	b.n	8003490 <func_lectura+0x378>
 8003444:	20003f0e 	.word	0x20003f0e
 8003448:	20003f06 	.word	0x20003f06
 800344c:	20003f14 	.word	0x20003f14
 8003450:	20003e04 	.word	0x20003e04
 8003454:	20004020 	.word	0x20004020
 8003458:	20003f0a 	.word	0x20003f0a
 800345c:	20003f0c 	.word	0x20003f0c
 8003460:	20003f12 	.word	0x20003f12
 8003464:	20003f10 	.word	0x20003f10
 8003468:	20003f16 	.word	0x20003f16
 800346c:	20003f18 	.word	0x20003f18
							case 4:
								mascara_08 = 0b11110000;
 8003470:	4b79      	ldr	r3, [pc, #484]	; (8003658 <func_lectura+0x540>)
 8003472:	22f0      	movs	r2, #240	; 0xf0
 8003474:	701a      	strb	r2, [r3, #0]
								break;
 8003476:	e00b      	b.n	8003490 <func_lectura+0x378>
							case 5:
								mascara_08 = 0b11100000;
 8003478:	4b77      	ldr	r3, [pc, #476]	; (8003658 <func_lectura+0x540>)
 800347a:	22e0      	movs	r2, #224	; 0xe0
 800347c:	701a      	strb	r2, [r3, #0]
								break;
 800347e:	e007      	b.n	8003490 <func_lectura+0x378>
							case 6:
								mascara_08 = 0b11000000;
 8003480:	4b75      	ldr	r3, [pc, #468]	; (8003658 <func_lectura+0x540>)
 8003482:	22c0      	movs	r2, #192	; 0xc0
 8003484:	701a      	strb	r2, [r3, #0]
								break;
 8003486:	e003      	b.n	8003490 <func_lectura+0x378>
							case 7:
								mascara_08 = 0b10000000;
 8003488:	4b73      	ldr	r3, [pc, #460]	; (8003658 <func_lectura+0x540>)
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	701a      	strb	r2, [r3, #0]
								break;
 800348e:	bf00      	nop
						}

						for (uint8_t i=0; i<cant_bytes_08; i++)
 8003490:	2300      	movs	r3, #0
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e03a      	b.n	800350c <func_lectura+0x3f4>
						{
							Punt_Buffer_08_Tx++;
 8003496:	4b71      	ldr	r3, [pc, #452]	; (800365c <func_lectura+0x544>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	4b6f      	ldr	r3, [pc, #444]	; (800365c <func_lectura+0x544>)
 80034a0:	801a      	strh	r2, [r3, #0]
							analizar_Tx();
 80034a2:	f000 fd7f 	bl	8003fa4 <analizar_Tx>

							var_orig_08 = Buffer_mem_D [primer_byte_08 + i];
 80034a6:	4b6e      	ldr	r3, [pc, #440]	; (8003660 <func_lectura+0x548>)
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	7ffb      	ldrb	r3, [r7, #31]
 80034ae:	4413      	add	r3, r2
 80034b0:	4a6c      	ldr	r2, [pc, #432]	; (8003664 <func_lectura+0x54c>)
 80034b2:	5cd2      	ldrb	r2, [r2, r3]
 80034b4:	4b6c      	ldr	r3, [pc, #432]	; (8003668 <func_lectura+0x550>)
 80034b6:	701a      	strb	r2, [r3, #0]
							var_dest_08 = Buffer_08_Tx_W [Punt_Buffer_08_Tx];
 80034b8:	4b68      	ldr	r3, [pc, #416]	; (800365c <func_lectura+0x544>)
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	4b6b      	ldr	r3, [pc, #428]	; (800366c <func_lectura+0x554>)
 80034c0:	5c9a      	ldrb	r2, [r3, r2]
 80034c2:	4b6b      	ldr	r3, [pc, #428]	; (8003670 <func_lectura+0x558>)
 80034c4:	701a      	strb	r2, [r3, #0]
							var_final_08 = (var_orig_08 & mascara_08) | (var_dest_08 & !mascara_08);
 80034c6:	4b68      	ldr	r3, [pc, #416]	; (8003668 <func_lectura+0x550>)
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	4b63      	ldr	r3, [pc, #396]	; (8003658 <func_lectura+0x540>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	4013      	ands	r3, r2
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	b25a      	sxtb	r2, r3
 80034d4:	4b60      	ldr	r3, [pc, #384]	; (8003658 <func_lectura+0x540>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	b259      	sxtb	r1, r3
 80034e4:	4b62      	ldr	r3, [pc, #392]	; (8003670 <func_lectura+0x558>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b25b      	sxtb	r3, r3
 80034ea:	400b      	ands	r3, r1
 80034ec:	b25b      	sxtb	r3, r3
 80034ee:	4313      	orrs	r3, r2
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	4b5f      	ldr	r3, [pc, #380]	; (8003674 <func_lectura+0x55c>)
 80034f6:	701a      	strb	r2, [r3, #0]
							Buffer_08_Tx_W [Punt_Buffer_08_Tx] = var_final_08;
 80034f8:	4b58      	ldr	r3, [pc, #352]	; (800365c <func_lectura+0x544>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	4b5d      	ldr	r3, [pc, #372]	; (8003674 <func_lectura+0x55c>)
 8003500:	7819      	ldrb	r1, [r3, #0]
 8003502:	4b5a      	ldr	r3, [pc, #360]	; (800366c <func_lectura+0x554>)
 8003504:	5499      	strb	r1, [r3, r2]
						for (uint8_t i=0; i<cant_bytes_08; i++)
 8003506:	7ffb      	ldrb	r3, [r7, #31]
 8003508:	3301      	adds	r3, #1
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	7ffb      	ldrb	r3, [r7, #31]
 800350e:	b29a      	uxth	r2, r3
 8003510:	4b59      	ldr	r3, [pc, #356]	; (8003678 <func_lectura+0x560>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d3be      	bcc.n	8003496 <func_lectura+0x37e>
 8003518:	e0fb      	b.n	8003712 <func_lectura+0x5fa>
						}

					}
					else  // 1 1 0
					{
						Punt_Buffer_08_Rx++;
 800351a:	4b58      	ldr	r3, [pc, #352]	; (800367c <func_lectura+0x564>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	4b56      	ldr	r3, [pc, #344]	; (800367c <func_lectura+0x564>)
 8003524:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 8003526:	4b4d      	ldr	r3, [pc, #308]	; (800365c <func_lectura+0x544>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	3301      	adds	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	4b4b      	ldr	r3, [pc, #300]	; (800365c <func_lectura+0x544>)
 8003530:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 8003532:	f000 fd0b 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 8003536:	f000 fd35 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 800353a:	4b50      	ldr	r3, [pc, #320]	; (800367c <func_lectura+0x564>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	4619      	mov	r1, r3
 8003540:	4b46      	ldr	r3, [pc, #280]	; (800365c <func_lectura+0x544>)
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4b4e      	ldr	r3, [pc, #312]	; (8003680 <func_lectura+0x568>)
 8003548:	5c59      	ldrb	r1, [r3, r1]
 800354a:	4b48      	ldr	r3, [pc, #288]	; (800366c <func_lectura+0x554>)
 800354c:	5499      	strb	r1, [r3, r2]
						Inicio_08 = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 800354e:	4b4b      	ldr	r3, [pc, #300]	; (800367c <func_lectura+0x564>)
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <func_lectura+0x568>)
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	b29a      	uxth	r2, r3
 800355a:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <func_lectura+0x56c>)
 800355c:	801a      	strh	r2, [r3, #0]

						Punt_Buffer_08_Rx++;
 800355e:	4b47      	ldr	r3, [pc, #284]	; (800367c <func_lectura+0x564>)
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	4b45      	ldr	r3, [pc, #276]	; (800367c <func_lectura+0x564>)
 8003568:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 800356a:	4b3c      	ldr	r3, [pc, #240]	; (800365c <func_lectura+0x544>)
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	3301      	adds	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	4b3a      	ldr	r3, [pc, #232]	; (800365c <func_lectura+0x544>)
 8003574:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 8003576:	f000 fce9 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 800357a:	f000 fd13 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 800357e:	4b3f      	ldr	r3, [pc, #252]	; (800367c <func_lectura+0x564>)
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	4619      	mov	r1, r3
 8003584:	4b35      	ldr	r3, [pc, #212]	; (800365c <func_lectura+0x544>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <func_lectura+0x568>)
 800358c:	5c59      	ldrb	r1, [r3, r1]
 800358e:	4b37      	ldr	r3, [pc, #220]	; (800366c <func_lectura+0x554>)
 8003590:	5499      	strb	r1, [r3, r2]
						Final_08 = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003592:	4b3a      	ldr	r3, [pc, #232]	; (800367c <func_lectura+0x564>)
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	4b39      	ldr	r3, [pc, #228]	; (8003680 <func_lectura+0x568>)
 800359a:	5c9b      	ldrb	r3, [r3, r2]
 800359c:	b29a      	uxth	r2, r3
 800359e:	4b3a      	ldr	r3, [pc, #232]	; (8003688 <func_lectura+0x570>)
 80035a0:	801a      	strh	r2, [r3, #0]
				//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
						cant_bits_08 = cant_bits_d (Inicio_08, Final_08);  //
 80035a2:	4b38      	ldr	r3, [pc, #224]	; (8003684 <func_lectura+0x56c>)
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	4a38      	ldr	r2, [pc, #224]	; (8003688 <func_lectura+0x570>)
 80035a8:	8812      	ldrh	r2, [r2, #0]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fd6d 	bl	800308c <cant_bits_d>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b35      	ldr	r3, [pc, #212]	; (800368c <func_lectura+0x574>)
 80035b8:	801a      	strh	r2, [r3, #0]
						cant_bytes_08 = cant_bytes_d(Inicio_08, Final_08);  //
 80035ba:	4b32      	ldr	r3, [pc, #200]	; (8003684 <func_lectura+0x56c>)
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	4a32      	ldr	r2, [pc, #200]	; (8003688 <func_lectura+0x570>)
 80035c0:	8812      	ldrh	r2, [r2, #0]
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fd75 	bl	80030b4 <cant_bytes_d>
 80035ca:	4603      	mov	r3, r0
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <func_lectura+0x560>)
 80035d0:	801a      	strh	r2, [r3, #0]
						primer_byte_08 = Inicio_08/8;
 80035d2:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <func_lectura+0x56c>)
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	08db      	lsrs	r3, r3, #3
 80035d8:	b29a      	uxth	r2, r3
 80035da:	4b21      	ldr	r3, [pc, #132]	; (8003660 <func_lectura+0x548>)
 80035dc:	801a      	strh	r2, [r3, #0]
						switch(Inicio_08 % 8)
 80035de:	4b29      	ldr	r3, [pc, #164]	; (8003684 <func_lectura+0x56c>)
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	2b07      	cmp	r3, #7
 80035e8:	d832      	bhi.n	8003650 <func_lectura+0x538>
 80035ea:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <func_lectura+0x4d8>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	08003611 	.word	0x08003611
 80035f4:	08003619 	.word	0x08003619
 80035f8:	08003621 	.word	0x08003621
 80035fc:	08003629 	.word	0x08003629
 8003600:	08003631 	.word	0x08003631
 8003604:	08003639 	.word	0x08003639
 8003608:	08003641 	.word	0x08003641
 800360c:	08003649 	.word	0x08003649
						{
							case 0:
								mascara_08 = 0b11111111;
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <func_lectura+0x540>)
 8003612:	22ff      	movs	r2, #255	; 0xff
 8003614:	701a      	strb	r2, [r3, #0]
								break;
 8003616:	e01b      	b.n	8003650 <func_lectura+0x538>
							case 1:
								mascara_08 = 0b11111110;
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <func_lectura+0x540>)
 800361a:	22fe      	movs	r2, #254	; 0xfe
 800361c:	701a      	strb	r2, [r3, #0]
								break;
 800361e:	e017      	b.n	8003650 <func_lectura+0x538>
							case 2:
								mascara_08 = 0b11111100;
 8003620:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <func_lectura+0x540>)
 8003622:	22fc      	movs	r2, #252	; 0xfc
 8003624:	701a      	strb	r2, [r3, #0]
								break;
 8003626:	e013      	b.n	8003650 <func_lectura+0x538>
							case 3:
								mascara_08 = 0b11111000;
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <func_lectura+0x540>)
 800362a:	22f8      	movs	r2, #248	; 0xf8
 800362c:	701a      	strb	r2, [r3, #0]
								break;
 800362e:	e00f      	b.n	8003650 <func_lectura+0x538>
							case 4:
								mascara_08 = 0b11110000;
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <func_lectura+0x540>)
 8003632:	22f0      	movs	r2, #240	; 0xf0
 8003634:	701a      	strb	r2, [r3, #0]
								break;
 8003636:	e00b      	b.n	8003650 <func_lectura+0x538>
							case 5:
								mascara_08 = 0b11100000;
 8003638:	4b07      	ldr	r3, [pc, #28]	; (8003658 <func_lectura+0x540>)
 800363a:	22e0      	movs	r2, #224	; 0xe0
 800363c:	701a      	strb	r2, [r3, #0]
								break;
 800363e:	e007      	b.n	8003650 <func_lectura+0x538>
							case 6:
								mascara_08 = 0b11000000;
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <func_lectura+0x540>)
 8003642:	22c0      	movs	r2, #192	; 0xc0
 8003644:	701a      	strb	r2, [r3, #0]
								break;
 8003646:	e003      	b.n	8003650 <func_lectura+0x538>
							case 7:
								mascara_08 = 0b10000000;
 8003648:	4b03      	ldr	r3, [pc, #12]	; (8003658 <func_lectura+0x540>)
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	701a      	strb	r2, [r3, #0]
								break;
 800364e:	bf00      	nop
						}
						for (uint8_t i=0; i<cant_bytes_08; i++)
 8003650:	2300      	movs	r3, #0
 8003652:	77bb      	strb	r3, [r7, #30]
 8003654:	e057      	b.n	8003706 <func_lectura+0x5ee>
 8003656:	bf00      	nop
 8003658:	20003f18 	.word	0x20003f18
 800365c:	20003f14 	.word	0x20003f14
 8003660:	20003f16 	.word	0x20003f16
 8003664:	20000930 	.word	0x20000930
 8003668:	20003f19 	.word	0x20003f19
 800366c:	20004020 	.word	0x20004020
 8003670:	20003f1a 	.word	0x20003f1a
 8003674:	20003f1b 	.word	0x20003f1b
 8003678:	20003f10 	.word	0x20003f10
 800367c:	20003f06 	.word	0x20003f06
 8003680:	20003e04 	.word	0x20003e04
 8003684:	20003f0a 	.word	0x20003f0a
 8003688:	20003f0c 	.word	0x20003f0c
 800368c:	20003f12 	.word	0x20003f12
						{
							Punt_Buffer_08_Tx++;
 8003690:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <func_lectura+0x79c>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	4b86      	ldr	r3, [pc, #536]	; (80038b4 <func_lectura+0x79c>)
 800369a:	801a      	strh	r2, [r3, #0]
							analizar_Tx();
 800369c:	f000 fc82 	bl	8003fa4 <analizar_Tx>

							var_orig_08 = Buffer_mem_D [primer_byte_08 + i];
 80036a0:	4b85      	ldr	r3, [pc, #532]	; (80038b8 <func_lectura+0x7a0>)
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	7fbb      	ldrb	r3, [r7, #30]
 80036a8:	4413      	add	r3, r2
 80036aa:	4a84      	ldr	r2, [pc, #528]	; (80038bc <func_lectura+0x7a4>)
 80036ac:	5cd2      	ldrb	r2, [r2, r3]
 80036ae:	4b84      	ldr	r3, [pc, #528]	; (80038c0 <func_lectura+0x7a8>)
 80036b0:	701a      	strb	r2, [r3, #0]
							var_dest_08 = Buffer_08_Tx_W [Punt_Buffer_08_Tx];
 80036b2:	4b80      	ldr	r3, [pc, #512]	; (80038b4 <func_lectura+0x79c>)
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	4b82      	ldr	r3, [pc, #520]	; (80038c4 <func_lectura+0x7ac>)
 80036ba:	5c9a      	ldrb	r2, [r3, r2]
 80036bc:	4b82      	ldr	r3, [pc, #520]	; (80038c8 <func_lectura+0x7b0>)
 80036be:	701a      	strb	r2, [r3, #0]
							var_final_08 = (var_orig_08 & mascara_08) | (var_dest_08 & !mascara_08);
 80036c0:	4b7f      	ldr	r3, [pc, #508]	; (80038c0 <func_lectura+0x7a8>)
 80036c2:	781a      	ldrb	r2, [r3, #0]
 80036c4:	4b81      	ldr	r3, [pc, #516]	; (80038cc <func_lectura+0x7b4>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4013      	ands	r3, r2
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	b25a      	sxtb	r2, r3
 80036ce:	4b7f      	ldr	r3, [pc, #508]	; (80038cc <func_lectura+0x7b4>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf0c      	ite	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	2300      	movne	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	b259      	sxtb	r1, r3
 80036de:	4b7a      	ldr	r3, [pc, #488]	; (80038c8 <func_lectura+0x7b0>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b25b      	sxtb	r3, r3
 80036e4:	400b      	ands	r3, r1
 80036e6:	b25b      	sxtb	r3, r3
 80036e8:	4313      	orrs	r3, r2
 80036ea:	b25b      	sxtb	r3, r3
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b78      	ldr	r3, [pc, #480]	; (80038d0 <func_lectura+0x7b8>)
 80036f0:	701a      	strb	r2, [r3, #0]
							Buffer_08_Tx_W [Punt_Buffer_08_Tx] = var_final_08;
 80036f2:	4b70      	ldr	r3, [pc, #448]	; (80038b4 <func_lectura+0x79c>)
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b75      	ldr	r3, [pc, #468]	; (80038d0 <func_lectura+0x7b8>)
 80036fa:	7819      	ldrb	r1, [r3, #0]
 80036fc:	4b71      	ldr	r3, [pc, #452]	; (80038c4 <func_lectura+0x7ac>)
 80036fe:	5499      	strb	r1, [r3, r2]
						for (uint8_t i=0; i<cant_bytes_08; i++)
 8003700:	7fbb      	ldrb	r3, [r7, #30]
 8003702:	3301      	adds	r3, #1
 8003704:	77bb      	strb	r3, [r7, #30]
 8003706:	7fbb      	ldrb	r3, [r7, #30]
 8003708:	b29a      	uxth	r2, r3
 800370a:	4b72      	ldr	r3, [pc, #456]	; (80038d4 <func_lectura+0x7bc>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d3be      	bcc.n	8003690 <func_lectura+0x578>
						}
					}
					Punt_Buffer_08_Rx++;
 8003712:	4b71      	ldr	r3, [pc, #452]	; (80038d8 <func_lectura+0x7c0>)
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	4b6f      	ldr	r3, [pc, #444]	; (80038d8 <func_lectura+0x7c0>)
 800371c:	801a      	strh	r2, [r3, #0]
					Punt_Buffer_08_Tx++;
 800371e:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <func_lectura+0x79c>)
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	3301      	adds	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	4b63      	ldr	r3, [pc, #396]	; (80038b4 <func_lectura+0x79c>)
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	e3e9      	b.n	8003f00 <func_lectura+0xde8>
				}
			}
			else   // 30/4/0 --30/3/1
			{
				if(Buffer_08_Rx_W [Punt_Buffer_08_Rx] == 30)  // = 30
 800372c:	4b6a      	ldr	r3, [pc, #424]	; (80038d8 <func_lectura+0x7c0>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	4b6a      	ldr	r3, [pc, #424]	; (80038dc <func_lectura+0x7c4>)
 8003734:	5c9b      	ldrb	r3, [r3, r2]
 8003736:	2b1e      	cmp	r3, #30
 8003738:	f040 83e2 	bne.w	8003f00 <func_lectura+0xde8>
				{
					Punt_Buffer_08_Rx++;
 800373c:	4b66      	ldr	r3, [pc, #408]	; (80038d8 <func_lectura+0x7c0>)
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	4b64      	ldr	r3, [pc, #400]	; (80038d8 <func_lectura+0x7c0>)
 8003746:	801a      	strh	r2, [r3, #0]
					Punt_Buffer_08_Tx++;
 8003748:	4b5a      	ldr	r3, [pc, #360]	; (80038b4 <func_lectura+0x79c>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	3301      	adds	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	4b58      	ldr	r3, [pc, #352]	; (80038b4 <func_lectura+0x79c>)
 8003752:	801a      	strh	r2, [r3, #0]
					analizar_Rx();
 8003754:	f000 fbfa 	bl	8003f4c <analizar_Rx>
					analizar_Tx();
 8003758:	f000 fc24 	bl	8003fa4 <analizar_Tx>
					Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 800375c:	4b5e      	ldr	r3, [pc, #376]	; (80038d8 <func_lectura+0x7c0>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	4619      	mov	r1, r3
 8003762:	4b54      	ldr	r3, [pc, #336]	; (80038b4 <func_lectura+0x79c>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	4b5c      	ldr	r3, [pc, #368]	; (80038dc <func_lectura+0x7c4>)
 800376a:	5c59      	ldrb	r1, [r3, r1]
 800376c:	4b55      	ldr	r3, [pc, #340]	; (80038c4 <func_lectura+0x7ac>)
 800376e:	5499      	strb	r1, [r3, r2]
					if(Buffer_08_Rx_W [Punt_Buffer_08_Rx] == 4)  //4
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <func_lectura+0x7c0>)
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	4b59      	ldr	r3, [pc, #356]	; (80038dc <func_lectura+0x7c4>)
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	2b04      	cmp	r3, #4
 800377c:	f040 819c 	bne.w	8003ab8 <func_lectura+0x9a0>
					{   // 30 4 0/1
						Punt_Buffer_08_Rx++;
 8003780:	4b55      	ldr	r3, [pc, #340]	; (80038d8 <func_lectura+0x7c0>)
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <func_lectura+0x7c0>)
 800378a:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 800378c:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <func_lectura+0x79c>)
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	3301      	adds	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <func_lectura+0x79c>)
 8003796:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 8003798:	f000 fbd8 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 800379c:	f000 fc02 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80037a0:	4b4d      	ldr	r3, [pc, #308]	; (80038d8 <func_lectura+0x7c0>)
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	4619      	mov	r1, r3
 80037a6:	4b43      	ldr	r3, [pc, #268]	; (80038b4 <func_lectura+0x79c>)
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <func_lectura+0x7c4>)
 80037ae:	5c59      	ldrb	r1, [r3, r1]
 80037b0:	4b44      	ldr	r3, [pc, #272]	; (80038c4 <func_lectura+0x7ac>)
 80037b2:	5499      	strb	r1, [r3, r2]
						if(Buffer_08_Rx_W [Punt_Buffer_08_Rx] == 0)  // 30 4 0
 80037b4:	4b48      	ldr	r3, [pc, #288]	; (80038d8 <func_lectura+0x7c0>)
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	4b48      	ldr	r3, [pc, #288]	; (80038dc <func_lectura+0x7c4>)
 80037bc:	5c9b      	ldrb	r3, [r3, r2]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f040 8094 	bne.w	80038ec <func_lectura+0x7d4>
						{
								Punt_Buffer_08_Rx++;
 80037c4:	4b44      	ldr	r3, [pc, #272]	; (80038d8 <func_lectura+0x7c0>)
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	3301      	adds	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	4b42      	ldr	r3, [pc, #264]	; (80038d8 <func_lectura+0x7c0>)
 80037ce:	801a      	strh	r2, [r3, #0]
								Punt_Buffer_08_Tx++;
 80037d0:	4b38      	ldr	r3, [pc, #224]	; (80038b4 <func_lectura+0x79c>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <func_lectura+0x79c>)
 80037da:	801a      	strh	r2, [r3, #0]
								analizar_Rx();
 80037dc:	f000 fbb6 	bl	8003f4c <analizar_Rx>
								analizar_Tx();
 80037e0:	f000 fbe0 	bl	8003fa4 <analizar_Tx>
								Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80037e4:	4b3c      	ldr	r3, [pc, #240]	; (80038d8 <func_lectura+0x7c0>)
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	4619      	mov	r1, r3
 80037ea:	4b32      	ldr	r3, [pc, #200]	; (80038b4 <func_lectura+0x79c>)
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	4b3a      	ldr	r3, [pc, #232]	; (80038dc <func_lectura+0x7c4>)
 80037f2:	5c59      	ldrb	r1, [r3, r1]
 80037f4:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <func_lectura+0x7ac>)
 80037f6:	5499      	strb	r1, [r3, r2]
								Inicio_08 = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80037f8:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <func_lectura+0x7c0>)
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b37      	ldr	r3, [pc, #220]	; (80038dc <func_lectura+0x7c4>)
 8003800:	5c9b      	ldrb	r3, [r3, r2]
 8003802:	b29a      	uxth	r2, r3
 8003804:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <func_lectura+0x7c8>)
 8003806:	801a      	strh	r2, [r3, #0]

								Punt_Buffer_08_Rx++;
 8003808:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <func_lectura+0x7c0>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	3301      	adds	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <func_lectura+0x7c0>)
 8003812:	801a      	strh	r2, [r3, #0]
								Punt_Buffer_08_Tx++;
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <func_lectura+0x79c>)
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <func_lectura+0x79c>)
 800381e:	801a      	strh	r2, [r3, #0]
								analizar_Rx();
 8003820:	f000 fb94 	bl	8003f4c <analizar_Rx>
								analizar_Tx();
 8003824:	f000 fbbe 	bl	8003fa4 <analizar_Tx>
								Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003828:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <func_lectura+0x7c0>)
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <func_lectura+0x79c>)
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <func_lectura+0x7c4>)
 8003836:	5c59      	ldrb	r1, [r3, r1]
 8003838:	4b22      	ldr	r3, [pc, #136]	; (80038c4 <func_lectura+0x7ac>)
 800383a:	5499      	strb	r1, [r3, r2]
								Final_08 = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 800383c:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <func_lectura+0x7c0>)
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	4b26      	ldr	r3, [pc, #152]	; (80038dc <func_lectura+0x7c4>)
 8003844:	5c9b      	ldrb	r3, [r3, r2]
 8003846:	b29a      	uxth	r2, r3
 8003848:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <func_lectura+0x7cc>)
 800384a:	801a      	strh	r2, [r3, #0]

								cant_bytes_08 = cant_bytes_a(Inicio_08, Final_08);
 800384c:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <func_lectura+0x7c8>)
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	4a24      	ldr	r2, [pc, #144]	; (80038e4 <func_lectura+0x7cc>)
 8003852:	8812      	ldrh	r2, [r2, #0]
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fc48 	bl	80030ec <cant_bytes_a>
 800385c:	4603      	mov	r3, r0
 800385e:	b29a      	uxth	r2, r3
 8003860:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <func_lectura+0x7bc>)
 8003862:	801a      	strh	r2, [r3, #0]
								primer_byte_08 = Inicio_08 * 2;
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <func_lectura+0x7c8>)
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <func_lectura+0x7a0>)
 800386e:	801a      	strh	r2, [r3, #0]

								for (uint8_t i=0; i<cant_bytes_08; i++)
 8003870:	2300      	movs	r3, #0
 8003872:	777b      	strb	r3, [r7, #29]
 8003874:	e016      	b.n	80038a4 <func_lectura+0x78c>
								{
									Punt_Buffer_08_Tx++;
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <func_lectura+0x79c>)
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	3301      	adds	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <func_lectura+0x79c>)
 8003880:	801a      	strh	r2, [r3, #0]
									analizar_Tx();
 8003882:	f000 fb8f 	bl	8003fa4 <analizar_Tx>
									Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_mem_A [primer_byte_08 + i];
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <func_lectura+0x7a0>)
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	7f7b      	ldrb	r3, [r7, #29]
 800388e:	4413      	add	r3, r2
 8003890:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <func_lectura+0x79c>)
 8003892:	8812      	ldrh	r2, [r2, #0]
 8003894:	4611      	mov	r1, r2
 8003896:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <func_lectura+0x7d0>)
 8003898:	5cd2      	ldrb	r2, [r2, r3]
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <func_lectura+0x7ac>)
 800389c:	545a      	strb	r2, [r3, r1]
								for (uint8_t i=0; i<cant_bytes_08; i++)
 800389e:	7f7b      	ldrb	r3, [r7, #29]
 80038a0:	3301      	adds	r3, #1
 80038a2:	777b      	strb	r3, [r7, #29]
 80038a4:	7f7b      	ldrb	r3, [r7, #29]
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <func_lectura+0x7bc>)
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d3e2      	bcc.n	8003876 <func_lectura+0x75e>
 80038b0:	e0e2      	b.n	8003a78 <func_lectura+0x960>
 80038b2:	bf00      	nop
 80038b4:	20003f14 	.word	0x20003f14
 80038b8:	20003f16 	.word	0x20003f16
 80038bc:	20000930 	.word	0x20000930
 80038c0:	20003f19 	.word	0x20003f19
 80038c4:	20004020 	.word	0x20004020
 80038c8:	20003f1a 	.word	0x20003f1a
 80038cc:	20003f18 	.word	0x20003f18
 80038d0:	20003f1b 	.word	0x20003f1b
 80038d4:	20003f10 	.word	0x20003f10
 80038d8:	20003f06 	.word	0x20003f06
 80038dc:	20003e04 	.word	0x20003e04
 80038e0:	20003f0a 	.word	0x20003f0a
 80038e4:	20003f0c 	.word	0x20003f0c
 80038e8:	20000d74 	.word	0x20000d74
								}
						}

						else   // 30 4 1
						{
								Punt_Buffer_08_Rx++;
 80038ec:	4b69      	ldr	r3, [pc, #420]	; (8003a94 <func_lectura+0x97c>)
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	4b67      	ldr	r3, [pc, #412]	; (8003a94 <func_lectura+0x97c>)
 80038f6:	801a      	strh	r2, [r3, #0]
								Punt_Buffer_08_Tx++;
 80038f8:	4b67      	ldr	r3, [pc, #412]	; (8003a98 <func_lectura+0x980>)
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	4b65      	ldr	r3, [pc, #404]	; (8003a98 <func_lectura+0x980>)
 8003902:	801a      	strh	r2, [r3, #0]
								analizar_Rx();
 8003904:	f000 fb22 	bl	8003f4c <analizar_Rx>
								analizar_Tx();
 8003908:	f000 fb4c 	bl	8003fa4 <analizar_Tx>
								Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 800390c:	4b61      	ldr	r3, [pc, #388]	; (8003a94 <func_lectura+0x97c>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	4619      	mov	r1, r3
 8003912:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <func_lectura+0x980>)
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	4b60      	ldr	r3, [pc, #384]	; (8003a9c <func_lectura+0x984>)
 800391a:	5c59      	ldrb	r1, [r3, r1]
 800391c:	4b60      	ldr	r3, [pc, #384]	; (8003aa0 <func_lectura+0x988>)
 800391e:	5499      	strb	r1, [r3, r2]
								Inicio_08 = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003920:	4b5c      	ldr	r3, [pc, #368]	; (8003a94 <func_lectura+0x97c>)
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	4b5d      	ldr	r3, [pc, #372]	; (8003a9c <func_lectura+0x984>)
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	b29a      	uxth	r2, r3
 800392c:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <func_lectura+0x98c>)
 800392e:	801a      	strh	r2, [r3, #0]

								Punt_Buffer_08_Rx++;
 8003930:	4b58      	ldr	r3, [pc, #352]	; (8003a94 <func_lectura+0x97c>)
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	4b56      	ldr	r3, [pc, #344]	; (8003a94 <func_lectura+0x97c>)
 800393a:	801a      	strh	r2, [r3, #0]
								Punt_Buffer_08_Tx++;
 800393c:	4b56      	ldr	r3, [pc, #344]	; (8003a98 <func_lectura+0x980>)
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	3301      	adds	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	4b54      	ldr	r3, [pc, #336]	; (8003a98 <func_lectura+0x980>)
 8003946:	801a      	strh	r2, [r3, #0]
								analizar_Rx();
 8003948:	f000 fb00 	bl	8003f4c <analizar_Rx>
								analizar_Tx();
 800394c:	f000 fb2a 	bl	8003fa4 <analizar_Tx>
								Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003950:	4b50      	ldr	r3, [pc, #320]	; (8003a94 <func_lectura+0x97c>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	4619      	mov	r1, r3
 8003956:	4b50      	ldr	r3, [pc, #320]	; (8003a98 <func_lectura+0x980>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	4b4f      	ldr	r3, [pc, #316]	; (8003a9c <func_lectura+0x984>)
 800395e:	5c59      	ldrb	r1, [r3, r1]
 8003960:	4b4f      	ldr	r3, [pc, #316]	; (8003aa0 <func_lectura+0x988>)
 8003962:	5499      	strb	r1, [r3, r2]
								Inicio_08 = Inicio_08 + 256 * Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003964:	4b4b      	ldr	r3, [pc, #300]	; (8003a94 <func_lectura+0x97c>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <func_lectura+0x984>)
 800396c:	5c9b      	ldrb	r3, [r3, r2]
 800396e:	b29b      	uxth	r3, r3
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	b29a      	uxth	r2, r3
 8003974:	4b4b      	ldr	r3, [pc, #300]	; (8003aa4 <func_lectura+0x98c>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	4413      	add	r3, r2
 800397a:	b29a      	uxth	r2, r3
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <func_lectura+0x98c>)
 800397e:	801a      	strh	r2, [r3, #0]

								Punt_Buffer_08_Rx++;
 8003980:	4b44      	ldr	r3, [pc, #272]	; (8003a94 <func_lectura+0x97c>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	3301      	adds	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	4b42      	ldr	r3, [pc, #264]	; (8003a94 <func_lectura+0x97c>)
 800398a:	801a      	strh	r2, [r3, #0]
								Punt_Buffer_08_Tx++;
 800398c:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <func_lectura+0x980>)
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	4b40      	ldr	r3, [pc, #256]	; (8003a98 <func_lectura+0x980>)
 8003996:	801a      	strh	r2, [r3, #0]
								analizar_Rx();
 8003998:	f000 fad8 	bl	8003f4c <analizar_Rx>
								analizar_Tx();
 800399c:	f000 fb02 	bl	8003fa4 <analizar_Tx>
								Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80039a0:	4b3c      	ldr	r3, [pc, #240]	; (8003a94 <func_lectura+0x97c>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	4619      	mov	r1, r3
 80039a6:	4b3c      	ldr	r3, [pc, #240]	; (8003a98 <func_lectura+0x980>)
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b3b      	ldr	r3, [pc, #236]	; (8003a9c <func_lectura+0x984>)
 80039ae:	5c59      	ldrb	r1, [r3, r1]
 80039b0:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <func_lectura+0x988>)
 80039b2:	5499      	strb	r1, [r3, r2]
								Final_08 = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80039b4:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <func_lectura+0x97c>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <func_lectura+0x984>)
 80039bc:	5c9b      	ldrb	r3, [r3, r2]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <func_lectura+0x990>)
 80039c2:	801a      	strh	r2, [r3, #0]

								Punt_Buffer_08_Rx++;
 80039c4:	4b33      	ldr	r3, [pc, #204]	; (8003a94 <func_lectura+0x97c>)
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	3301      	adds	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <func_lectura+0x97c>)
 80039ce:	801a      	strh	r2, [r3, #0]
								Punt_Buffer_08_Tx++;
 80039d0:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <func_lectura+0x980>)
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	3301      	adds	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <func_lectura+0x980>)
 80039da:	801a      	strh	r2, [r3, #0]
								analizar_Rx();
 80039dc:	f000 fab6 	bl	8003f4c <analizar_Rx>
								analizar_Tx();
 80039e0:	f000 fae0 	bl	8003fa4 <analizar_Tx>
								Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80039e4:	4b2b      	ldr	r3, [pc, #172]	; (8003a94 <func_lectura+0x97c>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	4619      	mov	r1, r3
 80039ea:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <func_lectura+0x980>)
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <func_lectura+0x984>)
 80039f2:	5c59      	ldrb	r1, [r3, r1]
 80039f4:	4b2a      	ldr	r3, [pc, #168]	; (8003aa0 <func_lectura+0x988>)
 80039f6:	5499      	strb	r1, [r3, r2]
								Final_08 = Final_08 + 256 * Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80039f8:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <func_lectura+0x97c>)
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <func_lectura+0x984>)
 8003a00:	5c9b      	ldrb	r3, [r3, r2]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <func_lectura+0x990>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <func_lectura+0x990>)
 8003a12:	801a      	strh	r2, [r3, #0]

								cant_bytes_08 = cant_bytes_a(Inicio_08, Final_08);
 8003a14:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <func_lectura+0x98c>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	4a23      	ldr	r2, [pc, #140]	; (8003aa8 <func_lectura+0x990>)
 8003a1a:	8812      	ldrh	r2, [r2, #0]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fb64 	bl	80030ec <cant_bytes_a>
 8003a24:	4603      	mov	r3, r0
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	4b20      	ldr	r3, [pc, #128]	; (8003aac <func_lectura+0x994>)
 8003a2a:	801a      	strh	r2, [r3, #0]
								primer_byte_08 = Inicio_08 * 2;
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <func_lectura+0x98c>)
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <func_lectura+0x998>)
 8003a36:	801a      	strh	r2, [r3, #0]

								for (uint8_t i=0; i<cant_bytes_08; i++)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	773b      	strb	r3, [r7, #28]
 8003a3c:	e016      	b.n	8003a6c <func_lectura+0x954>
								{
									Punt_Buffer_08_Tx++;
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <func_lectura+0x980>)
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	3301      	adds	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <func_lectura+0x980>)
 8003a48:	801a      	strh	r2, [r3, #0]
									analizar_Tx();
 8003a4a:	f000 faab 	bl	8003fa4 <analizar_Tx>
									Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_mem_A [primer_byte_08 + i];
 8003a4e:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <func_lectura+0x998>)
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	7f3b      	ldrb	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <func_lectura+0x980>)
 8003a5a:	8812      	ldrh	r2, [r2, #0]
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <func_lectura+0x99c>)
 8003a60:	5cd2      	ldrb	r2, [r2, r3]
 8003a62:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <func_lectura+0x988>)
 8003a64:	545a      	strb	r2, [r3, r1]
								for (uint8_t i=0; i<cant_bytes_08; i++)
 8003a66:	7f3b      	ldrb	r3, [r7, #28]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	773b      	strb	r3, [r7, #28]
 8003a6c:	7f3b      	ldrb	r3, [r7, #28]
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <func_lectura+0x994>)
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d3e2      	bcc.n	8003a3e <func_lectura+0x926>
								}
						}

						Punt_Buffer_08_Rx++;
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <func_lectura+0x97c>)
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <func_lectura+0x97c>)
 8003a82:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <func_lectura+0x980>)
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	4b02      	ldr	r3, [pc, #8]	; (8003a98 <func_lectura+0x980>)
 8003a8e:	801a      	strh	r2, [r3, #0]
 8003a90:	e236      	b.n	8003f00 <func_lectura+0xde8>
 8003a92:	bf00      	nop
 8003a94:	20003f06 	.word	0x20003f06
 8003a98:	20003f14 	.word	0x20003f14
 8003a9c:	20003e04 	.word	0x20003e04
 8003aa0:	20004020 	.word	0x20004020
 8003aa4:	20003f0a 	.word	0x20003f0a
 8003aa8:	20003f0c 	.word	0x20003f0c
 8003aac:	20003f10 	.word	0x20003f10
 8003ab0:	20003f16 	.word	0x20003f16
 8003ab4:	20000d74 	.word	0x20000d74
					}  //--- 30 4 0/1

					else  // 30 3 1
					{
//-------------------------
						Punt_Buffer_08_Rx++;
 8003ab8:	4b84      	ldr	r3, [pc, #528]	; (8003ccc <func_lectura+0xbb4>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	4b82      	ldr	r3, [pc, #520]	; (8003ccc <func_lectura+0xbb4>)
 8003ac2:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 8003ac4:	4b82      	ldr	r3, [pc, #520]	; (8003cd0 <func_lectura+0xbb8>)
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	4b80      	ldr	r3, [pc, #512]	; (8003cd0 <func_lectura+0xbb8>)
 8003ace:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 8003ad0:	f000 fa3c 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 8003ad4:	f000 fa66 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003ad8:	4b7c      	ldr	r3, [pc, #496]	; (8003ccc <func_lectura+0xbb4>)
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	4619      	mov	r1, r3
 8003ade:	4b7c      	ldr	r3, [pc, #496]	; (8003cd0 <func_lectura+0xbb8>)
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b7b      	ldr	r3, [pc, #492]	; (8003cd4 <func_lectura+0xbbc>)
 8003ae6:	5c59      	ldrb	r1, [r3, r1]
 8003ae8:	4b7b      	ldr	r3, [pc, #492]	; (8003cd8 <func_lectura+0xbc0>)
 8003aea:	5499      	strb	r1, [r3, r2]
						//------------------------------------
						Punt_Buffer_08_Rx++;
 8003aec:	4b77      	ldr	r3, [pc, #476]	; (8003ccc <func_lectura+0xbb4>)
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	3301      	adds	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	4b75      	ldr	r3, [pc, #468]	; (8003ccc <func_lectura+0xbb4>)
 8003af6:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 8003af8:	4b75      	ldr	r3, [pc, #468]	; (8003cd0 <func_lectura+0xbb8>)
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	4b73      	ldr	r3, [pc, #460]	; (8003cd0 <func_lectura+0xbb8>)
 8003b02:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 8003b04:	f000 fa22 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 8003b08:	f000 fa4c 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	; (8003ccc <func_lectura+0xbb4>)
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	4b6f      	ldr	r3, [pc, #444]	; (8003cd0 <func_lectura+0xbb8>)
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b6e      	ldr	r3, [pc, #440]	; (8003cd4 <func_lectura+0xbbc>)
 8003b1a:	5c59      	ldrb	r1, [r3, r1]
 8003b1c:	4b6e      	ldr	r3, [pc, #440]	; (8003cd8 <func_lectura+0xbc0>)
 8003b1e:	5499      	strb	r1, [r3, r2]
						Inicio_08 = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003b20:	4b6a      	ldr	r3, [pc, #424]	; (8003ccc <func_lectura+0xbb4>)
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b6b      	ldr	r3, [pc, #428]	; (8003cd4 <func_lectura+0xbbc>)
 8003b28:	5c9b      	ldrb	r3, [r3, r2]
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	4b6b      	ldr	r3, [pc, #428]	; (8003cdc <func_lectura+0xbc4>)
 8003b2e:	801a      	strh	r2, [r3, #0]

						Punt_Buffer_08_Rx++;
 8003b30:	4b66      	ldr	r3, [pc, #408]	; (8003ccc <func_lectura+0xbb4>)
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	4b64      	ldr	r3, [pc, #400]	; (8003ccc <func_lectura+0xbb4>)
 8003b3a:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 8003b3c:	4b64      	ldr	r3, [pc, #400]	; (8003cd0 <func_lectura+0xbb8>)
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	4b62      	ldr	r3, [pc, #392]	; (8003cd0 <func_lectura+0xbb8>)
 8003b46:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 8003b48:	f000 fa00 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 8003b4c:	f000 fa2a 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003b50:	4b5e      	ldr	r3, [pc, #376]	; (8003ccc <func_lectura+0xbb4>)
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	4619      	mov	r1, r3
 8003b56:	4b5e      	ldr	r3, [pc, #376]	; (8003cd0 <func_lectura+0xbb8>)
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4b5d      	ldr	r3, [pc, #372]	; (8003cd4 <func_lectura+0xbbc>)
 8003b5e:	5c59      	ldrb	r1, [r3, r1]
 8003b60:	4b5d      	ldr	r3, [pc, #372]	; (8003cd8 <func_lectura+0xbc0>)
 8003b62:	5499      	strb	r1, [r3, r2]
						Inicio_08 = Inicio_08 + 256 * Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003b64:	4b59      	ldr	r3, [pc, #356]	; (8003ccc <func_lectura+0xbb4>)
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b5a      	ldr	r3, [pc, #360]	; (8003cd4 <func_lectura+0xbbc>)
 8003b6c:	5c9b      	ldrb	r3, [r3, r2]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <func_lectura+0xbc4>)
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	4413      	add	r3, r2
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	4b57      	ldr	r3, [pc, #348]	; (8003cdc <func_lectura+0xbc4>)
 8003b7e:	801a      	strh	r2, [r3, #0]

						Punt_Buffer_08_Rx++;
 8003b80:	4b52      	ldr	r3, [pc, #328]	; (8003ccc <func_lectura+0xbb4>)
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	4b50      	ldr	r3, [pc, #320]	; (8003ccc <func_lectura+0xbb4>)
 8003b8a:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 8003b8c:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <func_lectura+0xbb8>)
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	4b4e      	ldr	r3, [pc, #312]	; (8003cd0 <func_lectura+0xbb8>)
 8003b96:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 8003b98:	f000 f9d8 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 8003b9c:	f000 fa02 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003ba0:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <func_lectura+0xbb4>)
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <func_lectura+0xbb8>)
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b49      	ldr	r3, [pc, #292]	; (8003cd4 <func_lectura+0xbbc>)
 8003bae:	5c59      	ldrb	r1, [r3, r1]
 8003bb0:	4b49      	ldr	r3, [pc, #292]	; (8003cd8 <func_lectura+0xbc0>)
 8003bb2:	5499      	strb	r1, [r3, r2]
						Final_08 = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003bb4:	4b45      	ldr	r3, [pc, #276]	; (8003ccc <func_lectura+0xbb4>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <func_lectura+0xbbc>)
 8003bbc:	5c9b      	ldrb	r3, [r3, r2]
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	4b47      	ldr	r3, [pc, #284]	; (8003ce0 <func_lectura+0xbc8>)
 8003bc2:	801a      	strh	r2, [r3, #0]

						Punt_Buffer_08_Rx++;
 8003bc4:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <func_lectura+0xbb4>)
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ccc <func_lectura+0xbb4>)
 8003bce:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 8003bd0:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <func_lectura+0xbb8>)
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <func_lectura+0xbb8>)
 8003bda:	801a      	strh	r2, [r3, #0]
						analizar_Rx();
 8003bdc:	f000 f9b6 	bl	8003f4c <analizar_Rx>
						analizar_Tx();
 8003be0:	f000 f9e0 	bl	8003fa4 <analizar_Tx>
						Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003be4:	4b39      	ldr	r3, [pc, #228]	; (8003ccc <func_lectura+0xbb4>)
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	4619      	mov	r1, r3
 8003bea:	4b39      	ldr	r3, [pc, #228]	; (8003cd0 <func_lectura+0xbb8>)
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b38      	ldr	r3, [pc, #224]	; (8003cd4 <func_lectura+0xbbc>)
 8003bf2:	5c59      	ldrb	r1, [r3, r1]
 8003bf4:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <func_lectura+0xbc0>)
 8003bf6:	5499      	strb	r1, [r3, r2]
						Final_08 = Final_08 + 256 * Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8003bf8:	4b34      	ldr	r3, [pc, #208]	; (8003ccc <func_lectura+0xbb4>)
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4b35      	ldr	r3, [pc, #212]	; (8003cd4 <func_lectura+0xbbc>)
 8003c00:	5c9b      	ldrb	r3, [r3, r2]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	4b35      	ldr	r3, [pc, #212]	; (8003ce0 <func_lectura+0xbc8>)
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	4b33      	ldr	r3, [pc, #204]	; (8003ce0 <func_lectura+0xbc8>)
 8003c12:	801a      	strh	r2, [r3, #0]

						cant_bytes_08 = 2 * cant_bytes_a(Inicio_08, Final_08); // > 2
 8003c14:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <func_lectura+0xbc4>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	4a31      	ldr	r2, [pc, #196]	; (8003ce0 <func_lectura+0xbc8>)
 8003c1a:	8812      	ldrh	r2, [r2, #0]
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fa64 	bl	80030ec <cant_bytes_a>
 8003c24:	4603      	mov	r3, r0
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <func_lectura+0xbcc>)
 8003c2e:	801a      	strh	r2, [r3, #0]
						primer_byte_08 = Inicio_08 * 4;  //64?
 8003c30:	4b2a      	ldr	r3, [pc, #168]	; (8003cdc <func_lectura+0xbc4>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <func_lectura+0xbd0>)
 8003c3a:	801a      	strh	r2, [r3, #0]

						for (uint8_t i=0; i<cant_bytes_08; i++)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	76fb      	strb	r3, [r7, #27]
 8003c40:	e016      	b.n	8003c70 <func_lectura+0xb58>
						{
							Punt_Buffer_08_Tx++;
 8003c42:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <func_lectura+0xbb8>)
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	3301      	adds	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <func_lectura+0xbb8>)
 8003c4c:	801a      	strh	r2, [r3, #0]
							analizar_Tx();
 8003c4e:	f000 f9a9 	bl	8003fa4 <analizar_Tx>
							Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_mem_A [primer_byte_08 + i];
 8003c52:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <func_lectura+0xbd0>)
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	7efb      	ldrb	r3, [r7, #27]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <func_lectura+0xbb8>)
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	4611      	mov	r1, r2
 8003c62:	4a22      	ldr	r2, [pc, #136]	; (8003cec <func_lectura+0xbd4>)
 8003c64:	5cd2      	ldrb	r2, [r2, r3]
 8003c66:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <func_lectura+0xbc0>)
 8003c68:	545a      	strb	r2, [r3, r1]
						for (uint8_t i=0; i<cant_bytes_08; i++)
 8003c6a:	7efb      	ldrb	r3, [r7, #27]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	76fb      	strb	r3, [r7, #27]
 8003c70:	7efb      	ldrb	r3, [r7, #27]
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <func_lectura+0xbcc>)
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d3e2      	bcc.n	8003c42 <func_lectura+0xb2a>
						}

						Punt_Buffer_08_Rx++;
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <func_lectura+0xbb4>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <func_lectura+0xbb4>)
 8003c86:	801a      	strh	r2, [r3, #0]
						Punt_Buffer_08_Tx++;
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <func_lectura+0xbb8>)
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <func_lectura+0xbb8>)
 8003c92:	801a      	strh	r2, [r3, #0]
 8003c94:	e134      	b.n	8003f00 <func_lectura+0xde8>
			} ///
		}
		else
		{
			// Cálculo de longitud DNP y CRC, agregado de AC, TH e IIN, para terminar el paquete
			HAL_GPIO_WritePin(UART8_RXD_GPIO_Port, UART8_RXD_Pin, GPIO_PIN_SET);
 8003c96:	2201      	movs	r2, #1
 8003c98:	2110      	movs	r1, #16
 8003c9a:	4815      	ldr	r0, [pc, #84]	; (8003cf0 <func_lectura+0xbd8>)
 8003c9c:	f008 f992 	bl	800bfc4 <HAL_GPIO_WritePin>

			Buffer_08_Tx_W [2] = calc_long_tx (Punt_Buffer_08_Tx + 2);
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <func_lectura+0xbb8>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff f9d0 	bl	8003050 <calc_long_tx>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <func_lectura+0xbc0>)
 8003cb6:	709a      	strb	r2, [r3, #2]
			//====================CALCULO CRC DNP / CRC 01====================
				crc=0x0000;
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <func_lectura+0xbdc>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	801a      	strh	r2, [r3, #0]
				n=8;
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <func_lectura+0xbe0>)
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<n; j++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e029      	b.n	8003d1e <func_lectura+0xc06>
 8003cca:	bf00      	nop
 8003ccc:	20003f06 	.word	0x20003f06
 8003cd0:	20003f14 	.word	0x20003f14
 8003cd4:	20003e04 	.word	0x20003e04
 8003cd8:	20004020 	.word	0x20004020
 8003cdc:	20003f0a 	.word	0x20003f0a
 8003ce0:	20003f0c 	.word	0x20003f0c
 8003ce4:	20003f10 	.word	0x20003f10
 8003ce8:	20003f16 	.word	0x20003f16
 8003cec:	20000d74 	.word	0x20000d74
 8003cf0:	40020400 	.word	0x40020400
 8003cf4:	20003ce0 	.word	0x20003ce0
 8003cf8:	20000012 	.word	0x20000012
					{
					variable = Buffer_08_Tx_W[j];
 8003cfc:	4a86      	ldr	r2, [pc, #536]	; (8003f18 <func_lectura+0xe00>)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4413      	add	r3, r2
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	4b85      	ldr	r3, [pc, #532]	; (8003f1c <func_lectura+0xe04>)
 8003d08:	801a      	strh	r2, [r3, #0]
					computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8003d0a:	4b84      	ldr	r3, [pc, #528]	; (8003f1c <func_lectura+0xe04>)
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	4619      	mov	r1, r3
 8003d12:	4883      	ldr	r0, [pc, #524]	; (8003f20 <func_lectura+0xe08>)
 8003d14:	f7fd f8da 	bl	8000ecc <computeCRC>
				for(int j=0; j<n; j++)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	4b81      	ldr	r3, [pc, #516]	; (8003f24 <func_lectura+0xe0c>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	4293      	cmp	r3, r2
 8003d28:	dbe8      	blt.n	8003cfc <func_lectura+0xbe4>
					}
				crc = ~crc;
 8003d2a:	4b7d      	ldr	r3, [pc, #500]	; (8003f20 <func_lectura+0xe08>)
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	4b7b      	ldr	r3, [pc, #492]	; (8003f20 <func_lectura+0xe08>)
 8003d34:	801a      	strh	r2, [r3, #0]
				crc_l = crc;
 8003d36:	4b7a      	ldr	r3, [pc, #488]	; (8003f20 <func_lectura+0xe08>)
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	4b7a      	ldr	r3, [pc, #488]	; (8003f28 <func_lectura+0xe10>)
 8003d3e:	701a      	strb	r2, [r3, #0]
				crc_h = crc >> 8;
 8003d40:	4b77      	ldr	r3, [pc, #476]	; (8003f20 <func_lectura+0xe08>)
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	4b78      	ldr	r3, [pc, #480]	; (8003f2c <func_lectura+0xe14>)
 8003d4c:	701a      	strb	r2, [r3, #0]
				Buffer_08_Tx_W [8] = crc_l;
 8003d4e:	4b76      	ldr	r3, [pc, #472]	; (8003f28 <func_lectura+0xe10>)
 8003d50:	781a      	ldrb	r2, [r3, #0]
 8003d52:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <func_lectura+0xe00>)
 8003d54:	721a      	strb	r2, [r3, #8]
				Buffer_08_Tx_W [9] = crc_h;
 8003d56:	4b75      	ldr	r3, [pc, #468]	; (8003f2c <func_lectura+0xe14>)
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	4b6f      	ldr	r3, [pc, #444]	; (8003f18 <func_lectura+0xe00>)
 8003d5c:	725a      	strb	r2, [r3, #9]

				//====================CALCULO CRC DNP / CRC 02. 03. ..nX=============
					uint8_t punt_crc= 10;
 8003d5e:	230a      	movs	r3, #10
 8003d60:	74fb      	strb	r3, [r7, #19]

					cant_crc_08 = (Punt_Buffer_08_Tx + 2 -11)/18+1;  // 2
 8003d62:	4b73      	ldr	r3, [pc, #460]	; (8003f30 <func_lectura+0xe18>)
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	3b09      	subs	r3, #9
 8003d68:	4a72      	ldr	r2, [pc, #456]	; (8003f34 <func_lectura+0xe1c>)
 8003d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8003d6e:	1092      	asrs	r2, r2, #2
 8003d70:	17db      	asrs	r3, r3, #31
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	3301      	adds	r3, #1
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4b6f      	ldr	r3, [pc, #444]	; (8003f38 <func_lectura+0xe20>)
 8003d7c:	701a      	strb	r2, [r3, #0]
					cola_crc_08 = Punt_Buffer_08_Tx + 2 - 10 - (cant_crc_08 - 1)*18 - 2;
 8003d7e:	4b6c      	ldr	r3, [pc, #432]	; (8003f30 <func_lectura+0xe18>)
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	4b6c      	ldr	r3, [pc, #432]	; (8003f38 <func_lectura+0xe20>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	00c9      	lsls	r1, r1, #3
 8003d8c:	1acb      	subs	r3, r1, r3
 8003d8e:	4619      	mov	r1, r3
 8003d90:	0108      	lsls	r0, r1, #4
 8003d92:	4619      	mov	r1, r3
 8003d94:	4603      	mov	r3, r0
 8003d96:	440b      	add	r3, r1
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	3308      	adds	r3, #8
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	4b65      	ldr	r3, [pc, #404]	; (8003f3c <func_lectura+0xe24>)
 8003da6:	701a      	strb	r2, [r3, #0]

					cant_crc_08 = cant_crc_08-1;
 8003da8:	4b63      	ldr	r3, [pc, #396]	; (8003f38 <func_lectura+0xe20>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	4b61      	ldr	r3, [pc, #388]	; (8003f38 <func_lectura+0xe20>)
 8003db2:	701a      	strb	r2, [r3, #0]
					for(int k=cant_crc_08; k>0; k--)
 8003db4:	4b60      	ldr	r3, [pc, #384]	; (8003f38 <func_lectura+0xe20>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	e045      	b.n	8003e48 <func_lectura+0xd30>
						{
						//============================CALCULO CRC DNP====================
						crc=0x0000;
 8003dbc:	4b58      	ldr	r3, [pc, #352]	; (8003f20 <func_lectura+0xe08>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	801a      	strh	r2, [r3, #0]
						n=16;
 8003dc2:	4b58      	ldr	r3, [pc, #352]	; (8003f24 <func_lectura+0xe0c>)
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	701a      	strb	r2, [r3, #0]
						for(int j=0; j<n; j++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	e012      	b.n	8003df4 <func_lectura+0xcdc>
							{
							variable = (Buffer_08_Tx_W + punt_crc)[j];
 8003dce:	7cfa      	ldrb	r2, [r7, #19]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	4a50      	ldr	r2, [pc, #320]	; (8003f18 <func_lectura+0xe00>)
 8003dd6:	4413      	add	r3, r2
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	4b4f      	ldr	r3, [pc, #316]	; (8003f1c <func_lectura+0xe04>)
 8003dde:	801a      	strh	r2, [r3, #0]
							computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8003de0:	4b4e      	ldr	r3, [pc, #312]	; (8003f1c <func_lectura+0xe04>)
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	4619      	mov	r1, r3
 8003de8:	484d      	ldr	r0, [pc, #308]	; (8003f20 <func_lectura+0xe08>)
 8003dea:	f7fd f86f 	bl	8000ecc <computeCRC>
						for(int j=0; j<n; j++)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	4b4b      	ldr	r3, [pc, #300]	; (8003f24 <func_lectura+0xe0c>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	dbe6      	blt.n	8003dce <func_lectura+0xcb6>
							 }
						crc = ~crc;
 8003e00:	4b47      	ldr	r3, [pc, #284]	; (8003f20 <func_lectura+0xe08>)
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	4b45      	ldr	r3, [pc, #276]	; (8003f20 <func_lectura+0xe08>)
 8003e0a:	801a      	strh	r2, [r3, #0]
						crc_l = crc;
 8003e0c:	4b44      	ldr	r3, [pc, #272]	; (8003f20 <func_lectura+0xe08>)
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4b45      	ldr	r3, [pc, #276]	; (8003f28 <func_lectura+0xe10>)
 8003e14:	701a      	strb	r2, [r3, #0]
						crc_h = crc >> 8;
 8003e16:	4b42      	ldr	r3, [pc, #264]	; (8003f20 <func_lectura+0xe08>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <func_lectura+0xe14>)
 8003e22:	701a      	strb	r2, [r3, #0]
						Buffer_08_Tx_W [punt_crc + 16] = crc_l;
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	3310      	adds	r3, #16
 8003e28:	4a3f      	ldr	r2, [pc, #252]	; (8003f28 <func_lectura+0xe10>)
 8003e2a:	7811      	ldrb	r1, [r2, #0]
 8003e2c:	4a3a      	ldr	r2, [pc, #232]	; (8003f18 <func_lectura+0xe00>)
 8003e2e:	54d1      	strb	r1, [r2, r3]
						Buffer_08_Tx_W [punt_crc + 17] = crc_h;
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	3311      	adds	r3, #17
 8003e34:	4a3d      	ldr	r2, [pc, #244]	; (8003f2c <func_lectura+0xe14>)
 8003e36:	7811      	ldrb	r1, [r2, #0]
 8003e38:	4a37      	ldr	r2, [pc, #220]	; (8003f18 <func_lectura+0xe00>)
 8003e3a:	54d1      	strb	r1, [r2, r3]
						//===============================================================
						punt_crc = punt_crc + 18;
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	3312      	adds	r3, #18
 8003e40:	74fb      	strb	r3, [r7, #19]
					for(int k=cant_crc_08; k>0; k--)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	dcb6      	bgt.n	8003dbc <func_lectura+0xca4>
						}
					//====================CALCULO CRC DNP / CRC .nX FINAL================
						crc=0x0000;
 8003e4e:	4b34      	ldr	r3, [pc, #208]	; (8003f20 <func_lectura+0xe08>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	801a      	strh	r2, [r3, #0]
						n = cola_crc_08;
 8003e54:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <func_lectura+0xe24>)
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	4b32      	ldr	r3, [pc, #200]	; (8003f24 <func_lectura+0xe0c>)
 8003e5a:	701a      	strb	r2, [r3, #0]
						for(int j=0; j<n; j++)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	e012      	b.n	8003e88 <func_lectura+0xd70>
							{
							variable = (Buffer_08_Tx_W + punt_crc)[j];
 8003e62:	7cfa      	ldrb	r2, [r7, #19]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4413      	add	r3, r2
 8003e68:	4a2b      	ldr	r2, [pc, #172]	; (8003f18 <func_lectura+0xe00>)
 8003e6a:	4413      	add	r3, r2
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <func_lectura+0xe04>)
 8003e72:	801a      	strh	r2, [r3, #0]
							computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8003e74:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <func_lectura+0xe04>)
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4828      	ldr	r0, [pc, #160]	; (8003f20 <func_lectura+0xe08>)
 8003e7e:	f7fd f825 	bl	8000ecc <computeCRC>
						for(int j=0; j<n; j++)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3301      	adds	r3, #1
 8003e86:	607b      	str	r3, [r7, #4]
 8003e88:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <func_lectura+0xe0c>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4293      	cmp	r3, r2
 8003e92:	dbe6      	blt.n	8003e62 <func_lectura+0xd4a>
							}
						crc = ~crc;
 8003e94:	4b22      	ldr	r3, [pc, #136]	; (8003f20 <func_lectura+0xe08>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <func_lectura+0xe08>)
 8003e9e:	801a      	strh	r2, [r3, #0]
						crc_l = crc;
 8003ea0:	4b1f      	ldr	r3, [pc, #124]	; (8003f20 <func_lectura+0xe08>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <func_lectura+0xe10>)
 8003ea8:	701a      	strb	r2, [r3, #0]
						crc_h = crc >> 8;
 8003eaa:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <func_lectura+0xe08>)
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <func_lectura+0xe14>)
 8003eb6:	701a      	strb	r2, [r3, #0]
						Buffer_08_Tx_W [punt_crc + cola_crc_08] = crc_l;
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <func_lectura+0xe24>)
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	4a19      	ldr	r2, [pc, #100]	; (8003f28 <func_lectura+0xe10>)
 8003ec2:	7811      	ldrb	r1, [r2, #0]
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <func_lectura+0xe00>)
 8003ec6:	54d1      	strb	r1, [r2, r3]
						Buffer_08_Tx_W [punt_crc + (cola_crc_08 + 1)] = crc_h;
 8003ec8:	7cfa      	ldrb	r2, [r7, #19]
 8003eca:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <func_lectura+0xe24>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	4413      	add	r3, r2
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <func_lectura+0xe14>)
 8003ed4:	7811      	ldrb	r1, [r2, #0]
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <func_lectura+0xe00>)
 8003ed8:	54d1      	strb	r1, [r2, r3]
						//===============================================================

						// Paso Buffer a otro
						memcpy(Buffer_08_Tx, Buffer_08_Tx_W, sizeof(Buffer_08_Tx_W));
 8003eda:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <func_lectura+0xe28>)
 8003edc:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <func_lectura+0xe00>)
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f00b fe1e 	bl	800fb28 <memcpy>

						HAL_UART_Transmit(&huart8, Buffer_08_Tx, Punt_Buffer_08_Tx + 2, 300);
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <func_lectura+0xe18>)
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003ef8:	4911      	ldr	r1, [pc, #68]	; (8003f40 <func_lectura+0xe28>)
 8003efa:	4812      	ldr	r0, [pc, #72]	; (8003f44 <func_lectura+0xe2c>)
 8003efc:	f00a fad6 	bl	800e4ac <HAL_UART_Transmit>
	while (Flag_Fin_Buffer_08 == 0)
 8003f00:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <func_lectura+0xe30>)
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f43f a963 	beq.w	80031d0 <func_lectura+0xb8>
		}
	}
	Flag_Fin_Buffer_08 = 0;
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <func_lectura+0xe30>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	801a      	strh	r2, [r3, #0]
	//#################################################################
}
 8003f10:	bf00      	nop
 8003f12:	3720      	adds	r7, #32
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20004020 	.word	0x20004020
 8003f1c:	20003ce4 	.word	0x20003ce4
 8003f20:	20003ce0 	.word	0x20003ce0
 8003f24:	20000012 	.word	0x20000012
 8003f28:	20003ce3 	.word	0x20003ce3
 8003f2c:	20003ce2 	.word	0x20003ce2
 8003f30:	20003f14 	.word	0x20003f14
 8003f34:	38e38e39 	.word	0x38e38e39
 8003f38:	20004121 	.word	0x20004121
 8003f3c:	20004122 	.word	0x20004122
 8003f40:	20003f20 	.word	0x20003f20
 8003f44:	20000390 	.word	0x20000390
 8003f48:	20003f0e 	.word	0x20003f0e

08003f4c <analizar_Rx>:

void analizar_Rx(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
	if (Punt_Buffer_08_Rx != Fin_Buffer_08)
 8003f50:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <analizar_Rx+0x48>)
 8003f52:	881a      	ldrh	r2, [r3, #0]
 8003f54:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <analizar_Rx+0x4c>)
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d012      	beq.n	8003f82 <analizar_Rx+0x36>
	{
		if(Punt_Buffer_08_Rx == Prox_crc_Rx_08)
 8003f5c:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <analizar_Rx+0x48>)
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <analizar_Rx+0x50>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d10f      	bne.n	8003f88 <analizar_Rx+0x3c>
		{
			Prox_crc_Rx_08 = Prox_crc_Rx_08 + 18;
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <analizar_Rx+0x50>)
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	3312      	adds	r3, #18
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <analizar_Rx+0x50>)
 8003f72:	801a      	strh	r2, [r3, #0]
			Punt_Buffer_08_Rx = Punt_Buffer_08_Rx + 2;
 8003f74:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <analizar_Rx+0x48>)
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	3302      	adds	r3, #2
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <analizar_Rx+0x48>)
 8003f7e:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		Flag_Fin_Buffer_08 = 1;
	}
}
 8003f80:	e002      	b.n	8003f88 <analizar_Rx+0x3c>
		Flag_Fin_Buffer_08 = 1;
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <analizar_Rx+0x54>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	801a      	strh	r2, [r3, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20003f06 	.word	0x20003f06
 8003f98:	20003f08 	.word	0x20003f08
 8003f9c:	20000014 	.word	0x20000014
 8003fa0:	20003f0e 	.word	0x20003f0e

08003fa4 <analizar_Tx>:

void analizar_Tx(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
	if (Punt_Buffer_08_Tx == Prox_crc_Tx_08)
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <analizar_Tx+0x34>)
 8003faa:	881a      	ldrh	r2, [r3, #0]
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <analizar_Tx+0x38>)
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d10b      	bne.n	8003fcc <analizar_Tx+0x28>
	{
			Prox_crc_Tx_08 = Prox_crc_Tx_08 + 18;
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <analizar_Tx+0x38>)
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	3312      	adds	r3, #18
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <analizar_Tx+0x38>)
 8003fbe:	801a      	strh	r2, [r3, #0]
			Punt_Buffer_08_Tx = Punt_Buffer_08_Tx + 2;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <analizar_Tx+0x34>)
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <analizar_Tx+0x34>)
 8003fca:	801a      	strh	r2, [r3, #0]
	}
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20003f14 	.word	0x20003f14
 8003fdc:	20000016 	.word	0x20000016

08003fe0 <analizar_UR_Tx>:

void analizar_UR_Tx(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
	if (Punt_Buffer_UR_Tx == Prox_crc_UR_Tx)
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <analizar_UR_Tx+0x34>)
 8003fe6:	881a      	ldrh	r2, [r3, #0]
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <analizar_UR_Tx+0x38>)
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d10b      	bne.n	8004008 <analizar_UR_Tx+0x28>
	{
			Prox_crc_UR_Tx = Prox_crc_UR_Tx + 18;
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <analizar_UR_Tx+0x38>)
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	3312      	adds	r3, #18
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	4b07      	ldr	r3, [pc, #28]	; (8004018 <analizar_UR_Tx+0x38>)
 8003ffa:	801a      	strh	r2, [r3, #0]
			Punt_Buffer_UR_Tx = Punt_Buffer_UR_Tx + 2;
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <analizar_UR_Tx+0x34>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	3302      	adds	r3, #2
 8004002:	b29a      	uxth	r2, r3
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <analizar_UR_Tx+0x34>)
 8004006:	801a      	strh	r2, [r3, #0]
	}
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20003ca4 	.word	0x20003ca4
 8004018:	20003ca6 	.word	0x20003ca6

0800401c <func_comando>:

//==========================================================================================
//  CTRL / FUNCION COMANDO
//==========================================================================================
void func_comando (void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
	Buffer_08_Tx_W [0] = 5;
 8004022:	4b7d      	ldr	r3, [pc, #500]	; (8004218 <func_comando+0x1fc>)
 8004024:	2205      	movs	r2, #5
 8004026:	701a      	strb	r2, [r3, #0]
	Buffer_08_Tx_W [1] = 100;
 8004028:	4b7b      	ldr	r3, [pc, #492]	; (8004218 <func_comando+0x1fc>)
 800402a:	2264      	movs	r2, #100	; 0x64
 800402c:	705a      	strb	r2, [r3, #1]
	// [2] --> Long
	Buffer_08_Tx_W [2] = 68;
 800402e:	4b7a      	ldr	r3, [pc, #488]	; (8004218 <func_comando+0x1fc>)
 8004030:	2244      	movs	r2, #68	; 0x44
 8004032:	709a      	strb	r2, [r3, #2]
	Buffer_08_Tx_W [3] = 68;
 8004034:	4b78      	ldr	r3, [pc, #480]	; (8004218 <func_comando+0x1fc>)
 8004036:	2244      	movs	r2, #68	; 0x44
 8004038:	70da      	strb	r2, [r3, #3]
	Buffer_08_Tx_W [4] = Orig_Rx_Scada_l;
 800403a:	4b78      	ldr	r3, [pc, #480]	; (800421c <func_comando+0x200>)
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	4b76      	ldr	r3, [pc, #472]	; (8004218 <func_comando+0x1fc>)
 8004040:	711a      	strb	r2, [r3, #4]
	Buffer_08_Tx_W [5] = Orig_Rx_Scada_h;
 8004042:	4b77      	ldr	r3, [pc, #476]	; (8004220 <func_comando+0x204>)
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	4b74      	ldr	r3, [pc, #464]	; (8004218 <func_comando+0x1fc>)
 8004048:	715a      	strb	r2, [r3, #5]
	Buffer_08_Tx_W [6] = Dest_Rx_Scada_l; // ID_L
 800404a:	4b76      	ldr	r3, [pc, #472]	; (8004224 <func_comando+0x208>)
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	4b72      	ldr	r3, [pc, #456]	; (8004218 <func_comando+0x1fc>)
 8004050:	719a      	strb	r2, [r3, #6]
	Buffer_08_Tx_W [7] = Dest_Rx_Scada_h; // ID_H
 8004052:	4b75      	ldr	r3, [pc, #468]	; (8004228 <func_comando+0x20c>)
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	4b70      	ldr	r3, [pc, #448]	; (8004218 <func_comando+0x1fc>)
 8004058:	71da      	strb	r2, [r3, #7]
	// [8] --> CRC
	// [9] --> CRC
	Buffer_08_Tx_W [10] = TH_Rx_Scada;
 800405a:	4b74      	ldr	r3, [pc, #464]	; (800422c <func_comando+0x210>)
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	4b6e      	ldr	r3, [pc, #440]	; (8004218 <func_comando+0x1fc>)
 8004060:	729a      	strb	r2, [r3, #10]
	Buffer_08_Tx_W [11] = AC_Rx_Scada;
 8004062:	4b73      	ldr	r3, [pc, #460]	; (8004230 <func_comando+0x214>)
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	4b6c      	ldr	r3, [pc, #432]	; (8004218 <func_comando+0x1fc>)
 8004068:	72da      	strb	r2, [r3, #11]
	Buffer_08_Tx_W [12] = 129; 	//tenía 5 (CVM)	; //129; // CTRL
 800406a:	4b6b      	ldr	r3, [pc, #428]	; (8004218 <func_comando+0x1fc>)
 800406c:	2281      	movs	r2, #129	; 0x81
 800406e:	731a      	strb	r2, [r3, #12]
	Buffer_08_Tx_W [13] = 0;   // INN
 8004070:	4b69      	ldr	r3, [pc, #420]	; (8004218 <func_comando+0x1fc>)
 8004072:	2200      	movs	r2, #0
 8004074:	735a      	strb	r2, [r3, #13]
	Buffer_08_Tx_W [14] = 0;   // INN
 8004076:	4b68      	ldr	r3, [pc, #416]	; (8004218 <func_comando+0x1fc>)
 8004078:	2200      	movs	r2, #0
 800407a:	739a      	strb	r2, [r3, #14]

	Punt_Buffer_08_Rx = 13;
 800407c:	4b6d      	ldr	r3, [pc, #436]	; (8004234 <func_comando+0x218>)
 800407e:	220d      	movs	r2, #13
 8004080:	801a      	strh	r2, [r3, #0]
	Punt_Buffer_08_Tx = 15;
 8004082:	4b6d      	ldr	r3, [pc, #436]	; (8004238 <func_comando+0x21c>)
 8004084:	220f      	movs	r2, #15
 8004086:	801a      	strh	r2, [r3, #0]
	Fin_Buffer_08 = RxTotal08_W - 2;  //
 8004088:	4b6c      	ldr	r3, [pc, #432]	; (800423c <func_comando+0x220>)
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	3b02      	subs	r3, #2
 800408e:	b29a      	uxth	r2, r3
 8004090:	4b6b      	ldr	r3, [pc, #428]	; (8004240 <func_comando+0x224>)
 8004092:	801a      	strh	r2, [r3, #0]
	Prox_crc_Tx_08 = 26;
 8004094:	4b6b      	ldr	r3, [pc, #428]	; (8004244 <func_comando+0x228>)
 8004096:	221a      	movs	r2, #26
 8004098:	801a      	strh	r2, [r3, #0]
	Prox_crc_Rx_08 = 26;
 800409a:	4b6b      	ldr	r3, [pc, #428]	; (8004248 <func_comando+0x22c>)
 800409c:	221a      	movs	r2, #26
 800409e:	801a      	strh	r2, [r3, #0]


	//#################################################################
	while (Flag_Fin_Buffer_08 == 0)
 80040a0:	e1e8      	b.n	8004474 <func_comando+0x458>
	{
		analizar_Rx();
 80040a2:	f7ff ff53 	bl	8003f4c <analizar_Rx>
		if(Flag_Fin_Buffer_08 == 0)
 80040a6:	4b69      	ldr	r3, [pc, #420]	; (800424c <func_comando+0x230>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 81e2 	bne.w	8004474 <func_comando+0x458>
		{
			analizar_Tx();
 80040b0:	f7ff ff78 	bl	8003fa4 <analizar_Tx>
			Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80040b4:	4b5f      	ldr	r3, [pc, #380]	; (8004234 <func_comando+0x218>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	4b5f      	ldr	r3, [pc, #380]	; (8004238 <func_comando+0x21c>)
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	4b63      	ldr	r3, [pc, #396]	; (8004250 <func_comando+0x234>)
 80040c2:	5c59      	ldrb	r1, [r3, r1]
 80040c4:	4b54      	ldr	r3, [pc, #336]	; (8004218 <func_comando+0x1fc>)
 80040c6:	5499      	strb	r1, [r3, r2]

			if(Buffer_08_Rx_W [Punt_Buffer_08_Rx] == 12)  // 12
 80040c8:	4b5a      	ldr	r3, [pc, #360]	; (8004234 <func_comando+0x218>)
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b60      	ldr	r3, [pc, #384]	; (8004250 <func_comando+0x234>)
 80040d0:	5c9b      	ldrb	r3, [r3, r2]
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	f040 81ce 	bne.w	8004474 <func_comando+0x458>
			{
				Punt_Buffer_08_Rx++;
 80040d8:	4b56      	ldr	r3, [pc, #344]	; (8004234 <func_comando+0x218>)
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	4b54      	ldr	r3, [pc, #336]	; (8004234 <func_comando+0x218>)
 80040e2:	801a      	strh	r2, [r3, #0]
				Punt_Buffer_08_Tx++;
 80040e4:	4b54      	ldr	r3, [pc, #336]	; (8004238 <func_comando+0x21c>)
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	3301      	adds	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	4b52      	ldr	r3, [pc, #328]	; (8004238 <func_comando+0x21c>)
 80040ee:	801a      	strh	r2, [r3, #0]
				analizar_Rx();
 80040f0:	f7ff ff2c 	bl	8003f4c <analizar_Rx>
				analizar_Tx();
 80040f4:	f7ff ff56 	bl	8003fa4 <analizar_Tx>
				Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 80040f8:	4b4e      	ldr	r3, [pc, #312]	; (8004234 <func_comando+0x218>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	4b4e      	ldr	r3, [pc, #312]	; (8004238 <func_comando+0x21c>)
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	4b52      	ldr	r3, [pc, #328]	; (8004250 <func_comando+0x234>)
 8004106:	5c59      	ldrb	r1, [r3, r1]
 8004108:	4b43      	ldr	r3, [pc, #268]	; (8004218 <func_comando+0x1fc>)
 800410a:	5499      	strb	r1, [r3, r2]
				if(Buffer_08_Rx_W [Punt_Buffer_08_Rx] == 1)  //12 1
 800410c:	4b49      	ldr	r3, [pc, #292]	; (8004234 <func_comando+0x218>)
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	4b4f      	ldr	r3, [pc, #316]	; (8004250 <func_comando+0x234>)
 8004114:	5c9b      	ldrb	r3, [r3, r2]
 8004116:	2b01      	cmp	r3, #1
 8004118:	f040 81ac 	bne.w	8004474 <func_comando+0x458>
				{
					Punt_Buffer_08_Rx++;
 800411c:	4b45      	ldr	r3, [pc, #276]	; (8004234 <func_comando+0x218>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	4b43      	ldr	r3, [pc, #268]	; (8004234 <func_comando+0x218>)
 8004126:	801a      	strh	r2, [r3, #0]
					Punt_Buffer_08_Tx++;
 8004128:	4b43      	ldr	r3, [pc, #268]	; (8004238 <func_comando+0x21c>)
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	4b41      	ldr	r3, [pc, #260]	; (8004238 <func_comando+0x21c>)
 8004132:	801a      	strh	r2, [r3, #0]
					analizar_Rx();
 8004134:	f7ff ff0a 	bl	8003f4c <analizar_Rx>
					analizar_Tx();
 8004138:	f7ff ff34 	bl	8003fa4 <analizar_Tx>
					Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 800413c:	4b3d      	ldr	r3, [pc, #244]	; (8004234 <func_comando+0x218>)
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	4619      	mov	r1, r3
 8004142:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <func_comando+0x21c>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	4b41      	ldr	r3, [pc, #260]	; (8004250 <func_comando+0x234>)
 800414a:	5c59      	ldrb	r1, [r3, r1]
 800414c:	4b32      	ldr	r3, [pc, #200]	; (8004218 <func_comando+0x1fc>)
 800414e:	5499      	strb	r1, [r3, r2]
					if(Buffer_08_Rx_W [Punt_Buffer_08_Rx] == 40)  // 12 1 40
 8004150:	4b38      	ldr	r3, [pc, #224]	; (8004234 <func_comando+0x218>)
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <func_comando+0x234>)
 8004158:	5c9b      	ldrb	r3, [r3, r2]
 800415a:	2b28      	cmp	r3, #40	; 0x28
 800415c:	f040 818a 	bne.w	8004474 <func_comando+0x458>
					{
						for (uint8_t i=0; i<16; i++)		//i<19 (cvm)
 8004160:	2300      	movs	r3, #0
 8004162:	75fb      	strb	r3, [r7, #23]
 8004164:	e01c      	b.n	80041a0 <func_comando+0x184>
						{
							Punt_Buffer_08_Rx++;
 8004166:	4b33      	ldr	r3, [pc, #204]	; (8004234 <func_comando+0x218>)
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	3301      	adds	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	4b31      	ldr	r3, [pc, #196]	; (8004234 <func_comando+0x218>)
 8004170:	801a      	strh	r2, [r3, #0]
							Punt_Buffer_08_Tx++;
 8004172:	4b31      	ldr	r3, [pc, #196]	; (8004238 <func_comando+0x21c>)
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	3301      	adds	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <func_comando+0x21c>)
 800417c:	801a      	strh	r2, [r3, #0]
							analizar_Rx();
 800417e:	f7ff fee5 	bl	8003f4c <analizar_Rx>
							analizar_Tx();
 8004182:	f7ff ff0f 	bl	8003fa4 <analizar_Tx>
							Buffer_08_Tx_W [Punt_Buffer_08_Tx] = Buffer_08_Rx_W [Punt_Buffer_08_Rx];
 8004186:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <func_comando+0x218>)
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	4619      	mov	r1, r3
 800418c:	4b2a      	ldr	r3, [pc, #168]	; (8004238 <func_comando+0x21c>)
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	4b2f      	ldr	r3, [pc, #188]	; (8004250 <func_comando+0x234>)
 8004194:	5c59      	ldrb	r1, [r3, r1]
 8004196:	4b20      	ldr	r3, [pc, #128]	; (8004218 <func_comando+0x1fc>)
 8004198:	5499      	strb	r1, [r3, r2]
						for (uint8_t i=0; i<16; i++)		//i<19 (cvm)
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	3301      	adds	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	2b0f      	cmp	r3, #15
 80041a4:	d9df      	bls.n	8004166 <func_comando+0x14a>
						}

						cod_com = Buffer_08_Rx_W [18] + 256 * Buffer_08_Rx_W [19];
 80041a6:	4b2a      	ldr	r3, [pc, #168]	; (8004250 <func_comando+0x234>)
 80041a8:	7c9b      	ldrb	r3, [r3, #18]
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	4b28      	ldr	r3, [pc, #160]	; (8004250 <func_comando+0x234>)
 80041ae:	7cdb      	ldrb	r3, [r3, #19]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	4b26      	ldr	r3, [pc, #152]	; (8004254 <func_comando+0x238>)
 80041bc:	801a      	strh	r2, [r3, #0]

						punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 80041be:	4b25      	ldr	r3, [pc, #148]	; (8004254 <func_comando+0x238>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b24      	ldr	r3, [pc, #144]	; (8004258 <func_comando+0x23c>)
 80041c6:	4413      	add	r3, r2
 80041c8:	019b      	lsls	r3, r3, #6
 80041ca:	3305      	adds	r3, #5
 80041cc:	461a      	mov	r2, r3
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <func_comando+0x240>)
 80041d0:	601a      	str	r2, [r3, #0]
						val_com = *(uint8_t*) punt_com;  //
 80041d2:	4b22      	ldr	r3, [pc, #136]	; (800425c <func_comando+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	781a      	ldrb	r2, [r3, #0]
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <func_comando+0x244>)
 80041da:	701a      	strb	r2, [r3, #0]

						punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 80041dc:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <func_comando+0x238>)
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <func_comando+0x23c>)
 80041e4:	4413      	add	r3, r2
 80041e6:	019b      	lsls	r3, r3, #6
 80041e8:	3306      	adds	r3, #6
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <func_comando+0x240>)
 80041ee:	601a      	str	r2, [r3, #0]
						val_com2 = *(uint8_t*) punt_com;  //
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <func_comando+0x240>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <func_comando+0x248>)
 80041f8:	701a      	strb	r2, [r3, #0]

// --------------------------------------------------
						ejecutar_comando();  	//
 80041fa:	f000 fa79 	bl	80046f0 <ejecutar_comando>

						//-- Procesar Buffer_08_Tx_W y enviar respuesta al Scada ------------------------------------------
						// Cálculo de longitud DNP y CRC, agregado de AC, TH e IIN, para terminar el paquete
						// HAL_GPIO_WritePin(UART8_RXD_GPIO_Port, UART8_RXD_Pin, GPIO_PIN_SET);
// (cvm)						Buffer_08_Tx_W [2] = 37;
						Buffer_08_Tx_W [2] = 28;
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <func_comando+0x1fc>)
 8004200:	221c      	movs	r2, #28
 8004202:	709a      	strb	r2, [r3, #2]
						//====================CALCULO CRC DNP / CRC 01====================
						crc=0x0000;
 8004204:	4b18      	ldr	r3, [pc, #96]	; (8004268 <func_comando+0x24c>)
 8004206:	2200      	movs	r2, #0
 8004208:	801a      	strh	r2, [r3, #0]
						n=8;
 800420a:	4b18      	ldr	r3, [pc, #96]	; (800426c <func_comando+0x250>)
 800420c:	2208      	movs	r2, #8
 800420e:	701a      	strb	r2, [r3, #0]
						for(int j=0; j<n; j++)
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	e03d      	b.n	8004292 <func_comando+0x276>
 8004216:	bf00      	nop
 8004218:	20004020 	.word	0x20004020
 800421c:	20004125 	.word	0x20004125
 8004220:	20004126 	.word	0x20004126
 8004224:	20004123 	.word	0x20004123
 8004228:	20004124 	.word	0x20004124
 800422c:	20004127 	.word	0x20004127
 8004230:	20004128 	.word	0x20004128
 8004234:	20003f06 	.word	0x20003f06
 8004238:	20003f14 	.word	0x20003f14
 800423c:	20003e00 	.word	0x20003e00
 8004240:	20003f08 	.word	0x20003f08
 8004244:	20000016 	.word	0x20000016
 8004248:	20000014 	.word	0x20000014
 800424c:	20003f0e 	.word	0x20003f0e
 8004250:	20003e04 	.word	0x20003e04
 8004254:	2000c566 	.word	0x2000c566
 8004258:	0020307f 	.word	0x0020307f
 800425c:	2000c568 	.word	0x2000c568
 8004260:	2000c56c 	.word	0x2000c56c
 8004264:	2000c56d 	.word	0x2000c56d
 8004268:	20003ce0 	.word	0x20003ce0
 800426c:	20000012 	.word	0x20000012
						{
							variable = Buffer_08_Tx_W[j];
 8004270:	4a85      	ldr	r2, [pc, #532]	; (8004488 <func_comando+0x46c>)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4413      	add	r3, r2
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	b29a      	uxth	r2, r3
 800427a:	4b84      	ldr	r3, [pc, #528]	; (800448c <func_comando+0x470>)
 800427c:	801a      	strh	r2, [r3, #0]
							computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 800427e:	4b83      	ldr	r3, [pc, #524]	; (800448c <func_comando+0x470>)
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	4619      	mov	r1, r3
 8004286:	4882      	ldr	r0, [pc, #520]	; (8004490 <func_comando+0x474>)
 8004288:	f7fc fe20 	bl	8000ecc <computeCRC>
						for(int j=0; j<n; j++)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	3301      	adds	r3, #1
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	4b80      	ldr	r3, [pc, #512]	; (8004494 <func_comando+0x478>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4293      	cmp	r3, r2
 800429c:	dbe8      	blt.n	8004270 <func_comando+0x254>
						}
						crc = ~crc;
 800429e:	4b7c      	ldr	r3, [pc, #496]	; (8004490 <func_comando+0x474>)
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	4b7a      	ldr	r3, [pc, #488]	; (8004490 <func_comando+0x474>)
 80042a8:	801a      	strh	r2, [r3, #0]
						crc_l = crc;
 80042aa:	4b79      	ldr	r3, [pc, #484]	; (8004490 <func_comando+0x474>)
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	4b79      	ldr	r3, [pc, #484]	; (8004498 <func_comando+0x47c>)
 80042b2:	701a      	strb	r2, [r3, #0]
						crc_h = crc >> 8;
 80042b4:	4b76      	ldr	r3, [pc, #472]	; (8004490 <func_comando+0x474>)
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	4b77      	ldr	r3, [pc, #476]	; (800449c <func_comando+0x480>)
 80042c0:	701a      	strb	r2, [r3, #0]
						Buffer_08_Tx_W [8] = crc_l;
 80042c2:	4b75      	ldr	r3, [pc, #468]	; (8004498 <func_comando+0x47c>)
 80042c4:	781a      	ldrb	r2, [r3, #0]
 80042c6:	4b70      	ldr	r3, [pc, #448]	; (8004488 <func_comando+0x46c>)
 80042c8:	721a      	strb	r2, [r3, #8]
						Buffer_08_Tx_W [9] = crc_h;
 80042ca:	4b74      	ldr	r3, [pc, #464]	; (800449c <func_comando+0x480>)
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	4b6e      	ldr	r3, [pc, #440]	; (8004488 <func_comando+0x46c>)
 80042d0:	725a      	strb	r2, [r3, #9]

						//====================CALCULO CRC DNP / CRC 02. 03. ..nX============
						uint8_t punt_crc= 10;
 80042d2:	230a      	movs	r3, #10
 80042d4:	73fb      	strb	r3, [r7, #15]

						cant_crc_08 = (Punt_Buffer_08_Tx + 2 -11)/18+1;  // 2
 80042d6:	4b72      	ldr	r3, [pc, #456]	; (80044a0 <func_comando+0x484>)
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	3b09      	subs	r3, #9
 80042dc:	4a71      	ldr	r2, [pc, #452]	; (80044a4 <func_comando+0x488>)
 80042de:	fb82 1203 	smull	r1, r2, r2, r3
 80042e2:	1092      	asrs	r2, r2, #2
 80042e4:	17db      	asrs	r3, r3, #31
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	3301      	adds	r3, #1
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b6e      	ldr	r3, [pc, #440]	; (80044a8 <func_comando+0x48c>)
 80042f0:	701a      	strb	r2, [r3, #0]
						cola_crc_08 = Punt_Buffer_08_Tx + 2 - 10 - (cant_crc_08 - 1)*18 - 2;
 80042f2:	4b6b      	ldr	r3, [pc, #428]	; (80044a0 <func_comando+0x484>)
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	4b6b      	ldr	r3, [pc, #428]	; (80044a8 <func_comando+0x48c>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4619      	mov	r1, r3
 80042fe:	00c9      	lsls	r1, r1, #3
 8004300:	1acb      	subs	r3, r1, r3
 8004302:	4619      	mov	r1, r3
 8004304:	0108      	lsls	r0, r1, #4
 8004306:	4619      	mov	r1, r3
 8004308:	4603      	mov	r3, r0
 800430a:	440b      	add	r3, r1
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	4413      	add	r3, r2
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3308      	adds	r3, #8
 8004316:	b2da      	uxtb	r2, r3
 8004318:	4b64      	ldr	r3, [pc, #400]	; (80044ac <func_comando+0x490>)
 800431a:	701a      	strb	r2, [r3, #0]

						cant_crc_08 = cant_crc_08-1;
 800431c:	4b62      	ldr	r3, [pc, #392]	; (80044a8 <func_comando+0x48c>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	3b01      	subs	r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	4b60      	ldr	r3, [pc, #384]	; (80044a8 <func_comando+0x48c>)
 8004326:	701a      	strb	r2, [r3, #0]
						for(int k=cant_crc_08; k>0; k--)
 8004328:	4b5f      	ldr	r3, [pc, #380]	; (80044a8 <func_comando+0x48c>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	e045      	b.n	80043bc <func_comando+0x3a0>
						{
						//============================CALCULO CRC DNP====================
							crc=0x0000;
 8004330:	4b57      	ldr	r3, [pc, #348]	; (8004490 <func_comando+0x474>)
 8004332:	2200      	movs	r2, #0
 8004334:	801a      	strh	r2, [r3, #0]
							n=16;
 8004336:	4b57      	ldr	r3, [pc, #348]	; (8004494 <func_comando+0x478>)
 8004338:	2210      	movs	r2, #16
 800433a:	701a      	strb	r2, [r3, #0]
							for(int j=0; j<n; j++)
 800433c:	2300      	movs	r3, #0
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	e012      	b.n	8004368 <func_comando+0x34c>
								{
								variable = (Buffer_08_Tx_W + punt_crc)[j];
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4413      	add	r3, r2
 8004348:	4a4f      	ldr	r2, [pc, #316]	; (8004488 <func_comando+0x46c>)
 800434a:	4413      	add	r3, r2
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	b29a      	uxth	r2, r3
 8004350:	4b4e      	ldr	r3, [pc, #312]	; (800448c <func_comando+0x470>)
 8004352:	801a      	strh	r2, [r3, #0]
								computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8004354:	4b4d      	ldr	r3, [pc, #308]	; (800448c <func_comando+0x470>)
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	4619      	mov	r1, r3
 800435c:	484c      	ldr	r0, [pc, #304]	; (8004490 <func_comando+0x474>)
 800435e:	f7fc fdb5 	bl	8000ecc <computeCRC>
							for(int j=0; j<n; j++)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3301      	adds	r3, #1
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <func_comando+0x478>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4293      	cmp	r3, r2
 8004372:	dbe6      	blt.n	8004342 <func_comando+0x326>
								 }
							crc = ~crc;
 8004374:	4b46      	ldr	r3, [pc, #280]	; (8004490 <func_comando+0x474>)
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	43db      	mvns	r3, r3
 800437a:	b29a      	uxth	r2, r3
 800437c:	4b44      	ldr	r3, [pc, #272]	; (8004490 <func_comando+0x474>)
 800437e:	801a      	strh	r2, [r3, #0]
							crc_l = crc;
 8004380:	4b43      	ldr	r3, [pc, #268]	; (8004490 <func_comando+0x474>)
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	4b44      	ldr	r3, [pc, #272]	; (8004498 <func_comando+0x47c>)
 8004388:	701a      	strb	r2, [r3, #0]
							crc_h = crc >> 8;
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <func_comando+0x474>)
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	b29b      	uxth	r3, r3
 8004392:	b2da      	uxtb	r2, r3
 8004394:	4b41      	ldr	r3, [pc, #260]	; (800449c <func_comando+0x480>)
 8004396:	701a      	strb	r2, [r3, #0]
							Buffer_08_Tx_W [punt_crc + 16] = crc_l;
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	3310      	adds	r3, #16
 800439c:	4a3e      	ldr	r2, [pc, #248]	; (8004498 <func_comando+0x47c>)
 800439e:	7811      	ldrb	r1, [r2, #0]
 80043a0:	4a39      	ldr	r2, [pc, #228]	; (8004488 <func_comando+0x46c>)
 80043a2:	54d1      	strb	r1, [r2, r3]
							Buffer_08_Tx_W [punt_crc + 17] = crc_h;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	3311      	adds	r3, #17
 80043a8:	4a3c      	ldr	r2, [pc, #240]	; (800449c <func_comando+0x480>)
 80043aa:	7811      	ldrb	r1, [r2, #0]
 80043ac:	4a36      	ldr	r2, [pc, #216]	; (8004488 <func_comando+0x46c>)
 80043ae:	54d1      	strb	r1, [r2, r3]
						//===============================================================
							punt_crc = punt_crc + 18;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	3312      	adds	r3, #18
 80043b4:	73fb      	strb	r3, [r7, #15]
						for(int k=cant_crc_08; k>0; k--)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	dcb6      	bgt.n	8004330 <func_comando+0x314>
						}
						//====================CALCULO CRC DNP / CRC .nX FINAL================
						crc=0x0000;
 80043c2:	4b33      	ldr	r3, [pc, #204]	; (8004490 <func_comando+0x474>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	801a      	strh	r2, [r3, #0]
						n = cola_crc_08;
 80043c8:	4b38      	ldr	r3, [pc, #224]	; (80044ac <func_comando+0x490>)
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	4b31      	ldr	r3, [pc, #196]	; (8004494 <func_comando+0x478>)
 80043ce:	701a      	strb	r2, [r3, #0]
						for(int j=0; j<n; j++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	e012      	b.n	80043fc <func_comando+0x3e0>
						{
							variable = (Buffer_08_Tx_W + punt_crc)[j];
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	4413      	add	r3, r2
 80043dc:	4a2a      	ldr	r2, [pc, #168]	; (8004488 <func_comando+0x46c>)
 80043de:	4413      	add	r3, r2
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	4b29      	ldr	r3, [pc, #164]	; (800448c <func_comando+0x470>)
 80043e6:	801a      	strh	r2, [r3, #0]
							computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 80043e8:	4b28      	ldr	r3, [pc, #160]	; (800448c <func_comando+0x470>)
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	4619      	mov	r1, r3
 80043f0:	4827      	ldr	r0, [pc, #156]	; (8004490 <func_comando+0x474>)
 80043f2:	f7fc fd6b 	bl	8000ecc <computeCRC>
						for(int j=0; j<n; j++)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	3301      	adds	r3, #1
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4b25      	ldr	r3, [pc, #148]	; (8004494 <func_comando+0x478>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	4293      	cmp	r3, r2
 8004406:	dbe6      	blt.n	80043d6 <func_comando+0x3ba>
						}
						crc = ~crc;
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <func_comando+0x474>)
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	43db      	mvns	r3, r3
 800440e:	b29a      	uxth	r2, r3
 8004410:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <func_comando+0x474>)
 8004412:	801a      	strh	r2, [r3, #0]
						crc_l = crc;
 8004414:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <func_comando+0x474>)
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <func_comando+0x47c>)
 800441c:	701a      	strb	r2, [r3, #0]
						crc_h = crc >> 8;
 800441e:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <func_comando+0x474>)
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	b29b      	uxth	r3, r3
 8004426:	b2da      	uxtb	r2, r3
 8004428:	4b1c      	ldr	r3, [pc, #112]	; (800449c <func_comando+0x480>)
 800442a:	701a      	strb	r2, [r3, #0]
						Buffer_08_Tx_W [punt_crc + cola_crc_08] = crc_l;
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <func_comando+0x490>)
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	4413      	add	r3, r2
 8004434:	4a18      	ldr	r2, [pc, #96]	; (8004498 <func_comando+0x47c>)
 8004436:	7811      	ldrb	r1, [r2, #0]
 8004438:	4a13      	ldr	r2, [pc, #76]	; (8004488 <func_comando+0x46c>)
 800443a:	54d1      	strb	r1, [r2, r3]
						Buffer_08_Tx_W [punt_crc + (cola_crc_08 + 1)] = crc_h;
 800443c:	7bfa      	ldrb	r2, [r7, #15]
 800443e:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <func_comando+0x490>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	3301      	adds	r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	4a15      	ldr	r2, [pc, #84]	; (800449c <func_comando+0x480>)
 8004448:	7811      	ldrb	r1, [r2, #0]
 800444a:	4a0f      	ldr	r2, [pc, #60]	; (8004488 <func_comando+0x46c>)
 800444c:	54d1      	strb	r1, [r2, r3]
						//===============================================================


						// Paso Buffer a otro
						memcpy(Buffer_08_Tx, Buffer_08_Tx_W, sizeof(Buffer_08_Tx_W));
 800444e:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <func_comando+0x494>)
 8004450:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <func_comando+0x46c>)
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800445a:	461a      	mov	r2, r3
 800445c:	f00b fb64 	bl	800fb28 <memcpy>
						HAL_UART_Transmit(&huart8, Buffer_08_Tx, Punt_Buffer_08_Tx + 2, 300);
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <func_comando+0x484>)
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	3302      	adds	r3, #2
 8004466:	b29a      	uxth	r2, r3
 8004468:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800446c:	4910      	ldr	r1, [pc, #64]	; (80044b0 <func_comando+0x494>)
 800446e:	4811      	ldr	r0, [pc, #68]	; (80044b4 <func_comando+0x498>)
 8004470:	f00a f81c 	bl	800e4ac <HAL_UART_Transmit>
	while (Flag_Fin_Buffer_08 == 0)
 8004474:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <func_comando+0x49c>)
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f43f ae12 	beq.w	80040a2 <func_comando+0x86>
					}
				}
			}
		}
	}
}
 800447e:	bf00      	nop
 8004480:	bf00      	nop
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20004020 	.word	0x20004020
 800448c:	20003ce4 	.word	0x20003ce4
 8004490:	20003ce0 	.word	0x20003ce0
 8004494:	20000012 	.word	0x20000012
 8004498:	20003ce3 	.word	0x20003ce3
 800449c:	20003ce2 	.word	0x20003ce2
 80044a0:	20003f14 	.word	0x20003f14
 80044a4:	38e38e39 	.word	0x38e38e39
 80044a8:	20004121 	.word	0x20004121
 80044ac:	20004122 	.word	0x20004122
 80044b0:	20003f20 	.word	0x20003f20
 80044b4:	20000390 	.word	0x20000390
 80044b8:	20003f0e 	.word	0x20003f0e

080044bc <func_comando_ctrl>:

void func_comando_ctrl (void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
	punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 18 + 1;
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <func_comando_ctrl+0x48>)
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <func_comando_ctrl+0x4c>)
 80044c8:	4413      	add	r3, r2
 80044ca:	019b      	lsls	r3, r3, #6
 80044cc:	3313      	adds	r3, #19
 80044ce:	461a      	mov	r2, r3
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <func_comando_ctrl+0x50>)
 80044d2:	601a      	str	r2, [r3, #0]
	val_com = *(uint8_t*) punt_com;  //
 80044d4:	4b0d      	ldr	r3, [pc, #52]	; (800450c <func_comando_ctrl+0x50>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <func_comando_ctrl+0x54>)
 80044dc:	701a      	strb	r2, [r3, #0]
	//punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 19 + 1;
	//val_com2 = *(uint8_t*) punt_com;  //

	relay_xx = val_com; // + val_com2 * 256;
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <func_comando_ctrl+0x54>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <func_comando_ctrl+0x58>)
 80044e6:	801a      	strh	r2, [r3, #0]

	if(relay_xx < 256)
 80044e8:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <func_comando_ctrl+0x58>)
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	2bff      	cmp	r3, #255	; 0xff
 80044ee:	d807      	bhi.n	8004500 <func_comando_ctrl+0x44>
	{
		rele_xx_on();
 80044f0:	f000 f812 	bl	8004518 <rele_xx_on>
		HAL_Delay(500);
 80044f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044f8:	f005 fff0 	bl	800a4dc <HAL_Delay>
		rele_xx_off();
 80044fc:	f000 f84a 	bl	8004594 <rele_xx_off>

	}

	//HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_SET);

}
 8004500:	bf00      	nop
 8004502:	bd80      	pop	{r7, pc}
 8004504:	2000c566 	.word	0x2000c566
 8004508:	0020307f 	.word	0x0020307f
 800450c:	2000c568 	.word	0x2000c568
 8004510:	2000c56c 	.word	0x2000c56c
 8004514:	2000c678 	.word	0x2000c678

08004518 <rele_xx_on>:

void rele_xx_on (void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
	for (uint8_t r=0; r<4; r++)
 800451e:	2300      	movs	r3, #0
 8004520:	71fb      	strb	r3, [r7, #7]
 8004522:	e02a      	b.n	800457a <rele_xx_on+0x62>
	{
		relay_xx_temp = relay_xx;
 8004524:	4b19      	ldr	r3, [pc, #100]	; (800458c <rele_xx_on+0x74>)
 8004526:	881a      	ldrh	r2, [r3, #0]
 8004528:	4b19      	ldr	r3, [pc, #100]	; (8004590 <rele_xx_on+0x78>)
 800452a:	801a      	strh	r2, [r3, #0]
	//=======================================;
		ht_piloto();
 800452c:	f000 f870 	bl	8004610 <ht_piloto>
	//=======================================;
		for (uint8_t k=0; k<8; k++)
 8004530:	2300      	movs	r3, #0
 8004532:	71bb      	strb	r3, [r7, #6]
 8004534:	e013      	b.n	800455e <rele_xx_on+0x46>
		{
			if((relay_xx_temp & 1) == 1)
 8004536:	4b16      	ldr	r3, [pc, #88]	; (8004590 <rele_xx_on+0x78>)
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <rele_xx_on+0x30>
			{
				ht_uno();
 8004542:	f000 f8ad 	bl	80046a0 <ht_uno>
 8004546:	e001      	b.n	800454c <rele_xx_on+0x34>
			}
			else
			{
				ht_cero();
 8004548:	f000 f882 	bl	8004650 <ht_cero>
			}
			relay_xx_temp = relay_xx_temp >> 1;
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <rele_xx_on+0x78>)
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <rele_xx_on+0x78>)
 8004556:	801a      	strh	r2, [r3, #0]
		for (uint8_t k=0; k<8; k++)
 8004558:	79bb      	ldrb	r3, [r7, #6]
 800455a:	3301      	adds	r3, #1
 800455c:	71bb      	strb	r3, [r7, #6]
 800455e:	79bb      	ldrb	r3, [r7, #6]
 8004560:	2b07      	cmp	r3, #7
 8004562:	d9e8      	bls.n	8004536 <rele_xx_on+0x1e>
		}
	//=======================================;
		ht_cero();  // [0]
 8004564:	f000 f874 	bl	8004650 <ht_cero>
		ht_cero();  // [0]  DATO
 8004568:	f000 f872 	bl	8004650 <ht_cero>
		ht_uno();   // [1]
 800456c:	f000 f898 	bl	80046a0 <ht_uno>
		ht_cero();  // [0]
 8004570:	f000 f86e 	bl	8004650 <ht_cero>
	for (uint8_t r=0; r<4; r++)
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	3301      	adds	r3, #1
 8004578:	71fb      	strb	r3, [r7, #7]
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d9d1      	bls.n	8004524 <rele_xx_on+0xc>
	//=======================================;
	}
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	2000c678 	.word	0x2000c678
 8004590:	2000c67a 	.word	0x2000c67a

08004594 <rele_xx_off>:

void rele_xx_off (void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
	for (uint8_t r=0; r<4; r++)
 800459a:	2300      	movs	r3, #0
 800459c:	71fb      	strb	r3, [r7, #7]
 800459e:	e02a      	b.n	80045f6 <rele_xx_off+0x62>
	{
		relay_xx_temp = relay_xx;
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <rele_xx_off+0x74>)
 80045a2:	881a      	ldrh	r2, [r3, #0]
 80045a4:	4b19      	ldr	r3, [pc, #100]	; (800460c <rele_xx_off+0x78>)
 80045a6:	801a      	strh	r2, [r3, #0]
	//=======================================;
		ht_piloto();
 80045a8:	f000 f832 	bl	8004610 <ht_piloto>
	//=======================================;
		for (uint8_t t=0; t<8; t++)
 80045ac:	2300      	movs	r3, #0
 80045ae:	71bb      	strb	r3, [r7, #6]
 80045b0:	e013      	b.n	80045da <rele_xx_off+0x46>
		{
			if((relay_xx_temp & 1) == 1)
 80045b2:	4b16      	ldr	r3, [pc, #88]	; (800460c <rele_xx_off+0x78>)
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <rele_xx_off+0x30>
			{
				ht_uno();
 80045be:	f000 f86f 	bl	80046a0 <ht_uno>
 80045c2:	e001      	b.n	80045c8 <rele_xx_off+0x34>
			}
			else
			{
				ht_cero();
 80045c4:	f000 f844 	bl	8004650 <ht_cero>
			}
			relay_xx_temp = relay_xx_temp >> 1;
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <rele_xx_off+0x78>)
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	085b      	lsrs	r3, r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <rele_xx_off+0x78>)
 80045d2:	801a      	strh	r2, [r3, #0]
		for (uint8_t t=0; t<8; t++)
 80045d4:	79bb      	ldrb	r3, [r7, #6]
 80045d6:	3301      	adds	r3, #1
 80045d8:	71bb      	strb	r3, [r7, #6]
 80045da:	79bb      	ldrb	r3, [r7, #6]
 80045dc:	2b07      	cmp	r3, #7
 80045de:	d9e8      	bls.n	80045b2 <rele_xx_off+0x1e>
		}
	//=======================================;
		ht_cero(); // [0]
 80045e0:	f000 f836 	bl	8004650 <ht_cero>
		ht_uno();  // [1]
 80045e4:	f000 f85c 	bl	80046a0 <ht_uno>
		ht_cero(); // [0]
 80045e8:	f000 f832 	bl	8004650 <ht_cero>
		ht_cero(); // [0]
 80045ec:	f000 f830 	bl	8004650 <ht_cero>
	for (uint8_t r=0; r<4; r++)
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	3301      	adds	r3, #1
 80045f4:	71fb      	strb	r3, [r7, #7]
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d9d1      	bls.n	80045a0 <rele_xx_off+0xc>
	//=======================================;
	}
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	2000c678 	.word	0x2000c678
 800460c:	2000c67a 	.word	0x2000c67a

08004610 <ht_piloto>:

void ht_piloto (void)  // X________________||__
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_RESET);
 8004614:	2200      	movs	r2, #0
 8004616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800461a:	480c      	ldr	r0, [pc, #48]	; (800464c <ht_piloto+0x3c>)
 800461c:	f007 fcd2 	bl	800bfc4 <HAL_GPIO_WritePin>
	  delay (7560);  // [useg delay]
 8004620:	f641 5088 	movw	r0, #7560	; 0x1d88
 8004624:	f001 fea4 	bl	8006370 <delay>
	  HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_SET);
 8004628:	2201      	movs	r2, #1
 800462a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800462e:	4807      	ldr	r0, [pc, #28]	; (800464c <ht_piloto+0x3c>)
 8004630:	f007 fcc8 	bl	800bfc4 <HAL_GPIO_WritePin>
	  delay (210);  // [useg delay]
 8004634:	20d2      	movs	r0, #210	; 0xd2
 8004636:	f001 fe9b 	bl	8006370 <delay>
	  HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_RESET);
 800463a:	2200      	movs	r2, #0
 800463c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004640:	4802      	ldr	r0, [pc, #8]	; (800464c <ht_piloto+0x3c>)
 8004642:	f007 fcbf 	bl	800bfc4 <HAL_GPIO_WritePin>

}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000

08004650 <ht_cero>:

void ht_cero (void)    //011 -> Cero[ht12]
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_RESET);
 8004654:	2200      	movs	r2, #0
 8004656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800465a:	4810      	ldr	r0, [pc, #64]	; (800469c <ht_cero+0x4c>)
 800465c:	f007 fcb2 	bl	800bfc4 <HAL_GPIO_WritePin>
	  delay (210);  // [useg delay]
 8004660:	20d2      	movs	r0, #210	; 0xd2
 8004662:	f001 fe85 	bl	8006370 <delay>
	  HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_SET);
 8004666:	2201      	movs	r2, #1
 8004668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800466c:	480b      	ldr	r0, [pc, #44]	; (800469c <ht_cero+0x4c>)
 800466e:	f007 fca9 	bl	800bfc4 <HAL_GPIO_WritePin>
	  delay (210);  // [useg delay]
 8004672:	20d2      	movs	r0, #210	; 0xd2
 8004674:	f001 fe7c 	bl	8006370 <delay>
	  HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_SET);
 8004678:	2201      	movs	r2, #1
 800467a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800467e:	4807      	ldr	r0, [pc, #28]	; (800469c <ht_cero+0x4c>)
 8004680:	f007 fca0 	bl	800bfc4 <HAL_GPIO_WritePin>
	  delay (210);  // [useg delay]
 8004684:	20d2      	movs	r0, #210	; 0xd2
 8004686:	f001 fe73 	bl	8006370 <delay>
	  HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_RESET);
 800468a:	2200      	movs	r2, #0
 800468c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004690:	4802      	ldr	r0, [pc, #8]	; (800469c <ht_cero+0x4c>)
 8004692:	f007 fc97 	bl	800bfc4 <HAL_GPIO_WritePin>
}
 8004696:	bf00      	nop
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000

080046a0 <ht_uno>:

void ht_uno (void)     //001 -> Uno[ht12]
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_RESET);
 80046a4:	2200      	movs	r2, #0
 80046a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046aa:	4810      	ldr	r0, [pc, #64]	; (80046ec <ht_uno+0x4c>)
 80046ac:	f007 fc8a 	bl	800bfc4 <HAL_GPIO_WritePin>
	  delay (210);  // [useg delay]
 80046b0:	20d2      	movs	r0, #210	; 0xd2
 80046b2:	f001 fe5d 	bl	8006370 <delay>
	  HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_RESET);
 80046b6:	2200      	movs	r2, #0
 80046b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046bc:	480b      	ldr	r0, [pc, #44]	; (80046ec <ht_uno+0x4c>)
 80046be:	f007 fc81 	bl	800bfc4 <HAL_GPIO_WritePin>
	  delay (210);  // [useg delay]
 80046c2:	20d2      	movs	r0, #210	; 0xd2
 80046c4:	f001 fe54 	bl	8006370 <delay>
	  HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_SET);
 80046c8:	2201      	movs	r2, #1
 80046ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046ce:	4807      	ldr	r0, [pc, #28]	; (80046ec <ht_uno+0x4c>)
 80046d0:	f007 fc78 	bl	800bfc4 <HAL_GPIO_WritePin>
	  delay (210);  // [useg delay]
 80046d4:	20d2      	movs	r0, #210	; 0xd2
 80046d6:	f001 fe4b 	bl	8006370 <delay>
	  HAL_GPIO_WritePin (SPIV2_CODE_GPIO_Port, SPIV2_CODE_Pin,GPIO_PIN_RESET);
 80046da:	2200      	movs	r2, #0
 80046dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046e0:	4802      	ldr	r0, [pc, #8]	; (80046ec <ht_uno+0x4c>)
 80046e2:	f007 fc6f 	bl	800bfc4 <HAL_GPIO_WritePin>
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000

080046f0 <ejecutar_comando>:

void ejecutar_comando(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
	if(val_com + 256 * val_com2 != ID)
 80046f4:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <ejecutar_comando+0x74>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <ejecutar_comando+0x78>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	4413      	add	r3, r2
 8004702:	4a1a      	ldr	r2, [pc, #104]	; (800476c <ejecutar_comando+0x7c>)
 8004704:	8812      	ldrh	r2, [r2, #0]
 8004706:	4293      	cmp	r3, r2
 8004708:	d028      	beq.n	800475c <ejecutar_comando+0x6c>
	{
		punt_com = (PAQ_001_COM + (cod_com - 1) * 64);
 800470a:	4b19      	ldr	r3, [pc, #100]	; (8004770 <ejecutar_comando+0x80>)
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	4b18      	ldr	r3, [pc, #96]	; (8004774 <ejecutar_comando+0x84>)
 8004712:	4413      	add	r3, r2
 8004714:	019b      	lsls	r3, r3, #6
 8004716:	461a      	mov	r2, r3
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <ejecutar_comando+0x88>)
 800471a:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_SET);  //USART3_DE (RS485)
 800471c:	2201      	movs	r2, #1
 800471e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004722:	4816      	ldr	r0, [pc, #88]	; (800477c <ejecutar_comando+0x8c>)
 8004724:	f007 fc4e 	bl	800bfc4 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8004728:	2002      	movs	r0, #2
 800472a:	f005 fed7 	bl	800a4dc <HAL_Delay>
		HAL_UART_Transmit(&huart6, (uint8_t*) punt_com + 1,*(uint8_t*) punt_com, 500);
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <ejecutar_comando+0x88>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	4619      	mov	r1, r3
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <ejecutar_comando+0x88>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	b29a      	uxth	r2, r3
 800473e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004742:	480f      	ldr	r0, [pc, #60]	; (8004780 <ejecutar_comando+0x90>)
 8004744:	f009 feb2 	bl	800e4ac <HAL_UART_Transmit>
		HAL_Delay(4);
 8004748:	2004      	movs	r0, #4
 800474a:	f005 fec7 	bl	800a4dc <HAL_Delay>
		HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_RESET);  //USART3_DE (RS485)
 800474e:	2200      	movs	r2, #0
 8004750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004754:	4809      	ldr	r0, [pc, #36]	; (800477c <ejecutar_comando+0x8c>)
 8004756:	f007 fc35 	bl	800bfc4 <HAL_GPIO_WritePin>
	}
	else
	{
		func_comando_ctrl();
	}
}
 800475a:	e001      	b.n	8004760 <ejecutar_comando+0x70>
		func_comando_ctrl();
 800475c:	f7ff feae 	bl	80044bc <func_comando_ctrl>
}
 8004760:	bf00      	nop
 8004762:	bd80      	pop	{r7, pc}
 8004764:	2000c56c 	.word	0x2000c56c
 8004768:	2000c56d 	.word	0x2000c56d
 800476c:	2000091e 	.word	0x2000091e
 8004770:	2000c566 	.word	0x2000c566
 8004774:	0020307f 	.word	0x0020307f
 8004778:	2000c568 	.word	0x2000c568
 800477c:	40020c00 	.word	0x40020c00
 8004780:	20000528 	.word	0x20000528

08004784 <pulsador>:
//=========================================================================================
// PULSADORES connectando al CTRL - Plaqueta RTP COMAND - RTUCTRL7  (cvm)
//
//=========================================================================================
void pulsador (void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
		flag_puls_02 = false;
	}
*/

	//==== Pulsador 03 ======================================================
	if ((Buffer_mem_D [0] & 0b00000100) == 0b00000100)
 8004788:	4b92      	ldr	r3, [pc, #584]	; (80049d4 <pulsador+0x250>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d038      	beq.n	8004806 <pulsador+0x82>
	{
		if (!flag_pulsador_03)
 8004794:	4b90      	ldr	r3, [pc, #576]	; (80049d8 <pulsador+0x254>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f083 0301 	eor.w	r3, r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <pulsador+0x26>
		{
			flag_pulsador_03 = true;  //
 80047a2:	4b8d      	ldr	r3, [pc, #564]	; (80049d8 <pulsador+0x254>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e033      	b.n	8004812 <pulsador+0x8e>
		}
		else
		{
			if (!flag_puls_03)
 80047aa:	4b8c      	ldr	r3, [pc, #560]	; (80049dc <pulsador+0x258>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	f083 0301 	eor.w	r3, r3, #1
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02c      	beq.n	8004812 <pulsador+0x8e>
			{
				cod_com = 15;
 80047b8:	4b89      	ldr	r3, [pc, #548]	; (80049e0 <pulsador+0x25c>)
 80047ba:	220f      	movs	r2, #15
 80047bc:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 80047be:	4b88      	ldr	r3, [pc, #544]	; (80049e0 <pulsador+0x25c>)
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	4b87      	ldr	r3, [pc, #540]	; (80049e4 <pulsador+0x260>)
 80047c6:	4413      	add	r3, r2
 80047c8:	019b      	lsls	r3, r3, #6
 80047ca:	3305      	adds	r3, #5
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b86      	ldr	r3, [pc, #536]	; (80049e8 <pulsador+0x264>)
 80047d0:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 80047d2:	4b85      	ldr	r3, [pc, #532]	; (80049e8 <pulsador+0x264>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	4b84      	ldr	r3, [pc, #528]	; (80049ec <pulsador+0x268>)
 80047da:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 80047dc:	4b80      	ldr	r3, [pc, #512]	; (80049e0 <pulsador+0x25c>)
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	4b80      	ldr	r3, [pc, #512]	; (80049e4 <pulsador+0x260>)
 80047e4:	4413      	add	r3, r2
 80047e6:	019b      	lsls	r3, r3, #6
 80047e8:	3306      	adds	r3, #6
 80047ea:	461a      	mov	r2, r3
 80047ec:	4b7e      	ldr	r3, [pc, #504]	; (80049e8 <pulsador+0x264>)
 80047ee:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 80047f0:	4b7d      	ldr	r3, [pc, #500]	; (80049e8 <pulsador+0x264>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	781a      	ldrb	r2, [r3, #0]
 80047f6:	4b7e      	ldr	r3, [pc, #504]	; (80049f0 <pulsador+0x26c>)
 80047f8:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 80047fa:	f7ff ff79 	bl	80046f0 <ejecutar_comando>
				flag_puls_03 = true;
 80047fe:	4b77      	ldr	r3, [pc, #476]	; (80049dc <pulsador+0x258>)
 8004800:	2201      	movs	r2, #1
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e005      	b.n	8004812 <pulsador+0x8e>
			}
		}
	}
	else
	{
		flag_pulsador_03 = false;  //
 8004806:	4b74      	ldr	r3, [pc, #464]	; (80049d8 <pulsador+0x254>)
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
		flag_puls_03 = false;
 800480c:	4b73      	ldr	r3, [pc, #460]	; (80049dc <pulsador+0x258>)
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 04 ======================================================
	if ((Buffer_mem_D [0] & 0b00001000) == 0b00001000)
 8004812:	4b70      	ldr	r3, [pc, #448]	; (80049d4 <pulsador+0x250>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d038      	beq.n	8004890 <pulsador+0x10c>
	{
		if (!flag_pulsador_04)
 800481e:	4b75      	ldr	r3, [pc, #468]	; (80049f4 <pulsador+0x270>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	f083 0301 	eor.w	r3, r3, #1
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <pulsador+0xb0>
		{
			flag_pulsador_04 = true;  //
 800482c:	4b71      	ldr	r3, [pc, #452]	; (80049f4 <pulsador+0x270>)
 800482e:	2201      	movs	r2, #1
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	e033      	b.n	800489c <pulsador+0x118>
		}
		else
		{
			if (!flag_puls_04)
 8004834:	4b70      	ldr	r3, [pc, #448]	; (80049f8 <pulsador+0x274>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	f083 0301 	eor.w	r3, r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02c      	beq.n	800489c <pulsador+0x118>
			{
				cod_com = 14;
 8004842:	4b67      	ldr	r3, [pc, #412]	; (80049e0 <pulsador+0x25c>)
 8004844:	220e      	movs	r2, #14
 8004846:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8004848:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <pulsador+0x25c>)
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <pulsador+0x260>)
 8004850:	4413      	add	r3, r2
 8004852:	019b      	lsls	r3, r3, #6
 8004854:	3305      	adds	r3, #5
 8004856:	461a      	mov	r2, r3
 8004858:	4b63      	ldr	r3, [pc, #396]	; (80049e8 <pulsador+0x264>)
 800485a:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 800485c:	4b62      	ldr	r3, [pc, #392]	; (80049e8 <pulsador+0x264>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	781a      	ldrb	r2, [r3, #0]
 8004862:	4b62      	ldr	r3, [pc, #392]	; (80049ec <pulsador+0x268>)
 8004864:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8004866:	4b5e      	ldr	r3, [pc, #376]	; (80049e0 <pulsador+0x25c>)
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	4b5d      	ldr	r3, [pc, #372]	; (80049e4 <pulsador+0x260>)
 800486e:	4413      	add	r3, r2
 8004870:	019b      	lsls	r3, r3, #6
 8004872:	3306      	adds	r3, #6
 8004874:	461a      	mov	r2, r3
 8004876:	4b5c      	ldr	r3, [pc, #368]	; (80049e8 <pulsador+0x264>)
 8004878:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 800487a:	4b5b      	ldr	r3, [pc, #364]	; (80049e8 <pulsador+0x264>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	781a      	ldrb	r2, [r3, #0]
 8004880:	4b5b      	ldr	r3, [pc, #364]	; (80049f0 <pulsador+0x26c>)
 8004882:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004884:	f7ff ff34 	bl	80046f0 <ejecutar_comando>
				flag_puls_04 = true;
 8004888:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <pulsador+0x274>)
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	e005      	b.n	800489c <pulsador+0x118>
			}
		}
	}
	else
	{
		flag_pulsador_04 = false;  //
 8004890:	4b58      	ldr	r3, [pc, #352]	; (80049f4 <pulsador+0x270>)
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
		flag_puls_04 = false;
 8004896:	4b58      	ldr	r3, [pc, #352]	; (80049f8 <pulsador+0x274>)
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 05 ======================================================
	if ((Buffer_mem_D [0] & 0b00010000) == 0b00010000)
 800489c:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <pulsador+0x250>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d038      	beq.n	800491a <pulsador+0x196>
	{
		if (!flag_pulsador_05)
 80048a8:	4b54      	ldr	r3, [pc, #336]	; (80049fc <pulsador+0x278>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f083 0301 	eor.w	r3, r3, #1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <pulsador+0x13a>
		{
			flag_pulsador_05 = true;  //
 80048b6:	4b51      	ldr	r3, [pc, #324]	; (80049fc <pulsador+0x278>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	e033      	b.n	8004926 <pulsador+0x1a2>
		}
		else
		{
			if (!flag_puls_05)
 80048be:	4b50      	ldr	r3, [pc, #320]	; (8004a00 <pulsador+0x27c>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	f083 0301 	eor.w	r3, r3, #1
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d02c      	beq.n	8004926 <pulsador+0x1a2>
			{
				cod_com = 15;
 80048cc:	4b44      	ldr	r3, [pc, #272]	; (80049e0 <pulsador+0x25c>)
 80048ce:	220f      	movs	r2, #15
 80048d0:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 80048d2:	4b43      	ldr	r3, [pc, #268]	; (80049e0 <pulsador+0x25c>)
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	4b42      	ldr	r3, [pc, #264]	; (80049e4 <pulsador+0x260>)
 80048da:	4413      	add	r3, r2
 80048dc:	019b      	lsls	r3, r3, #6
 80048de:	3305      	adds	r3, #5
 80048e0:	461a      	mov	r2, r3
 80048e2:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <pulsador+0x264>)
 80048e4:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 80048e6:	4b40      	ldr	r3, [pc, #256]	; (80049e8 <pulsador+0x264>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	781a      	ldrb	r2, [r3, #0]
 80048ec:	4b3f      	ldr	r3, [pc, #252]	; (80049ec <pulsador+0x268>)
 80048ee:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 80048f0:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <pulsador+0x25c>)
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <pulsador+0x260>)
 80048f8:	4413      	add	r3, r2
 80048fa:	019b      	lsls	r3, r3, #6
 80048fc:	3306      	adds	r3, #6
 80048fe:	461a      	mov	r2, r3
 8004900:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <pulsador+0x264>)
 8004902:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8004904:	4b38      	ldr	r3, [pc, #224]	; (80049e8 <pulsador+0x264>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <pulsador+0x26c>)
 800490c:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 800490e:	f7ff feef 	bl	80046f0 <ejecutar_comando>
				flag_puls_05 = true;
 8004912:	4b3b      	ldr	r3, [pc, #236]	; (8004a00 <pulsador+0x27c>)
 8004914:	2201      	movs	r2, #1
 8004916:	701a      	strb	r2, [r3, #0]
 8004918:	e005      	b.n	8004926 <pulsador+0x1a2>
			}
		}
	}
	else
	{
		flag_pulsador_05 = false;  //
 800491a:	4b38      	ldr	r3, [pc, #224]	; (80049fc <pulsador+0x278>)
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
		flag_puls_05 = false;
 8004920:	4b37      	ldr	r3, [pc, #220]	; (8004a00 <pulsador+0x27c>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 06 ======================================================
	if ((Buffer_mem_D [0] & 0b00100000) == 0b00100000)
 8004926:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <pulsador+0x250>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d038      	beq.n	80049a4 <pulsador+0x220>
	{
		if (!flag_pulsador_06)
 8004932:	4b34      	ldr	r3, [pc, #208]	; (8004a04 <pulsador+0x280>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	f083 0301 	eor.w	r3, r3, #1
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <pulsador+0x1c4>
		{
			flag_pulsador_06 = true;  //
 8004940:	4b30      	ldr	r3, [pc, #192]	; (8004a04 <pulsador+0x280>)
 8004942:	2201      	movs	r2, #1
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	e033      	b.n	80049b0 <pulsador+0x22c>
		}
		else
		{
			if (!flag_puls_06)
 8004948:	4b2f      	ldr	r3, [pc, #188]	; (8004a08 <pulsador+0x284>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	f083 0301 	eor.w	r3, r3, #1
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d02c      	beq.n	80049b0 <pulsador+0x22c>
			{
				cod_com = 14;
 8004956:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <pulsador+0x25c>)
 8004958:	220e      	movs	r2, #14
 800495a:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 800495c:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <pulsador+0x25c>)
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <pulsador+0x260>)
 8004964:	4413      	add	r3, r2
 8004966:	019b      	lsls	r3, r3, #6
 8004968:	3305      	adds	r3, #5
 800496a:	461a      	mov	r2, r3
 800496c:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <pulsador+0x264>)
 800496e:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8004970:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <pulsador+0x264>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	781a      	ldrb	r2, [r3, #0]
 8004976:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <pulsador+0x268>)
 8004978:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 800497a:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <pulsador+0x25c>)
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <pulsador+0x260>)
 8004982:	4413      	add	r3, r2
 8004984:	019b      	lsls	r3, r3, #6
 8004986:	3306      	adds	r3, #6
 8004988:	461a      	mov	r2, r3
 800498a:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <pulsador+0x264>)
 800498c:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 800498e:	4b16      	ldr	r3, [pc, #88]	; (80049e8 <pulsador+0x264>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	781a      	ldrb	r2, [r3, #0]
 8004994:	4b16      	ldr	r3, [pc, #88]	; (80049f0 <pulsador+0x26c>)
 8004996:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004998:	f7ff feaa 	bl	80046f0 <ejecutar_comando>
				flag_puls_06 = true;
 800499c:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <pulsador+0x284>)
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e005      	b.n	80049b0 <pulsador+0x22c>
			}
		}
	}
	else
	{
		flag_pulsador_06 = false;  //
 80049a4:	4b17      	ldr	r3, [pc, #92]	; (8004a04 <pulsador+0x280>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
		flag_puls_06 = false;
 80049aa:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <pulsador+0x284>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 07 ======================================================
	if ((Buffer_mem_D [0] & 0b01000000) == 0b01000000)
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <pulsador+0x250>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d057      	beq.n	8004a6c <pulsador+0x2e8>
	{
		if (!flag_pulsador_07)
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <pulsador+0x288>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	f083 0301 	eor.w	r3, r3, #1
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d022      	beq.n	8004a10 <pulsador+0x28c>
		{
			flag_pulsador_07 = true;  //
 80049ca:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <pulsador+0x288>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e052      	b.n	8004a78 <pulsador+0x2f4>
 80049d2:	bf00      	nop
 80049d4:	20000930 	.word	0x20000930
 80049d8:	2000c6b3 	.word	0x2000c6b3
 80049dc:	2000c69b 	.word	0x2000c69b
 80049e0:	2000c566 	.word	0x2000c566
 80049e4:	0020307f 	.word	0x0020307f
 80049e8:	2000c568 	.word	0x2000c568
 80049ec:	2000c56c 	.word	0x2000c56c
 80049f0:	2000c56d 	.word	0x2000c56d
 80049f4:	2000c6b4 	.word	0x2000c6b4
 80049f8:	2000c69c 	.word	0x2000c69c
 80049fc:	2000c6b5 	.word	0x2000c6b5
 8004a00:	2000c69d 	.word	0x2000c69d
 8004a04:	2000c6b6 	.word	0x2000c6b6
 8004a08:	2000c69e 	.word	0x2000c69e
 8004a0c:	2000c6b7 	.word	0x2000c6b7
		}
		else
		{
			if (!flag_puls_07)
 8004a10:	4b89      	ldr	r3, [pc, #548]	; (8004c38 <pulsador+0x4b4>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	f083 0301 	eor.w	r3, r3, #1
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d02c      	beq.n	8004a78 <pulsador+0x2f4>
			{
				cod_com = 15;
 8004a1e:	4b87      	ldr	r3, [pc, #540]	; (8004c3c <pulsador+0x4b8>)
 8004a20:	220f      	movs	r2, #15
 8004a22:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8004a24:	4b85      	ldr	r3, [pc, #532]	; (8004c3c <pulsador+0x4b8>)
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4b85      	ldr	r3, [pc, #532]	; (8004c40 <pulsador+0x4bc>)
 8004a2c:	4413      	add	r3, r2
 8004a2e:	019b      	lsls	r3, r3, #6
 8004a30:	3305      	adds	r3, #5
 8004a32:	461a      	mov	r2, r3
 8004a34:	4b83      	ldr	r3, [pc, #524]	; (8004c44 <pulsador+0x4c0>)
 8004a36:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8004a38:	4b82      	ldr	r3, [pc, #520]	; (8004c44 <pulsador+0x4c0>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	781a      	ldrb	r2, [r3, #0]
 8004a3e:	4b82      	ldr	r3, [pc, #520]	; (8004c48 <pulsador+0x4c4>)
 8004a40:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8004a42:	4b7e      	ldr	r3, [pc, #504]	; (8004c3c <pulsador+0x4b8>)
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b7d      	ldr	r3, [pc, #500]	; (8004c40 <pulsador+0x4bc>)
 8004a4a:	4413      	add	r3, r2
 8004a4c:	019b      	lsls	r3, r3, #6
 8004a4e:	3306      	adds	r3, #6
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b7c      	ldr	r3, [pc, #496]	; (8004c44 <pulsador+0x4c0>)
 8004a54:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8004a56:	4b7b      	ldr	r3, [pc, #492]	; (8004c44 <pulsador+0x4c0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	4b7b      	ldr	r3, [pc, #492]	; (8004c4c <pulsador+0x4c8>)
 8004a5e:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004a60:	f7ff fe46 	bl	80046f0 <ejecutar_comando>
				flag_puls_07 = true;
 8004a64:	4b74      	ldr	r3, [pc, #464]	; (8004c38 <pulsador+0x4b4>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e005      	b.n	8004a78 <pulsador+0x2f4>
			}
		}
	}
	else
	{
		flag_pulsador_07 = false;  //
 8004a6c:	4b78      	ldr	r3, [pc, #480]	; (8004c50 <pulsador+0x4cc>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
		flag_puls_07 = false;
 8004a72:	4b71      	ldr	r3, [pc, #452]	; (8004c38 <pulsador+0x4b4>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 08 ======================================================
	if ((Buffer_mem_D [0] & 0b10000000) == 0b10000000)
 8004a78:	4b76      	ldr	r3, [pc, #472]	; (8004c54 <pulsador+0x4d0>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	b25b      	sxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	da38      	bge.n	8004af4 <pulsador+0x370>
	{
		if (!flag_pulsador_08)
 8004a82:	4b75      	ldr	r3, [pc, #468]	; (8004c58 <pulsador+0x4d4>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	f083 0301 	eor.w	r3, r3, #1
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <pulsador+0x314>
		{
			flag_pulsador_08 = true;  //
 8004a90:	4b71      	ldr	r3, [pc, #452]	; (8004c58 <pulsador+0x4d4>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e033      	b.n	8004b00 <pulsador+0x37c>
		}
		else
		{
			if (!flag_puls_08)
 8004a98:	4b70      	ldr	r3, [pc, #448]	; (8004c5c <pulsador+0x4d8>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	f083 0301 	eor.w	r3, r3, #1
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d02c      	beq.n	8004b00 <pulsador+0x37c>
			{
				cod_com = 14;
 8004aa6:	4b65      	ldr	r3, [pc, #404]	; (8004c3c <pulsador+0x4b8>)
 8004aa8:	220e      	movs	r2, #14
 8004aaa:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8004aac:	4b63      	ldr	r3, [pc, #396]	; (8004c3c <pulsador+0x4b8>)
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4b63      	ldr	r3, [pc, #396]	; (8004c40 <pulsador+0x4bc>)
 8004ab4:	4413      	add	r3, r2
 8004ab6:	019b      	lsls	r3, r3, #6
 8004ab8:	3305      	adds	r3, #5
 8004aba:	461a      	mov	r2, r3
 8004abc:	4b61      	ldr	r3, [pc, #388]	; (8004c44 <pulsador+0x4c0>)
 8004abe:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8004ac0:	4b60      	ldr	r3, [pc, #384]	; (8004c44 <pulsador+0x4c0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	781a      	ldrb	r2, [r3, #0]
 8004ac6:	4b60      	ldr	r3, [pc, #384]	; (8004c48 <pulsador+0x4c4>)
 8004ac8:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8004aca:	4b5c      	ldr	r3, [pc, #368]	; (8004c3c <pulsador+0x4b8>)
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4b5b      	ldr	r3, [pc, #364]	; (8004c40 <pulsador+0x4bc>)
 8004ad2:	4413      	add	r3, r2
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	3306      	adds	r3, #6
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4b5a      	ldr	r3, [pc, #360]	; (8004c44 <pulsador+0x4c0>)
 8004adc:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8004ade:	4b59      	ldr	r3, [pc, #356]	; (8004c44 <pulsador+0x4c0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	781a      	ldrb	r2, [r3, #0]
 8004ae4:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <pulsador+0x4c8>)
 8004ae6:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004ae8:	f7ff fe02 	bl	80046f0 <ejecutar_comando>
				flag_puls_08 = true;
 8004aec:	4b5b      	ldr	r3, [pc, #364]	; (8004c5c <pulsador+0x4d8>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	e005      	b.n	8004b00 <pulsador+0x37c>
			}
		}
	}
	else
	{
		flag_pulsador_08 = false;  //
 8004af4:	4b58      	ldr	r3, [pc, #352]	; (8004c58 <pulsador+0x4d4>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
		flag_puls_08 = false;
 8004afa:	4b58      	ldr	r3, [pc, #352]	; (8004c5c <pulsador+0x4d8>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
		flag_pulsador_10 = false;  //
		flag_puls_10 = false;
	}
*/
	//==== Pulsador 11 ======================================================
	if ((Buffer_mem_D [1] & 0b00000100) == 0b00000100)
 8004b00:	4b54      	ldr	r3, [pc, #336]	; (8004c54 <pulsador+0x4d0>)
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d038      	beq.n	8004b7e <pulsador+0x3fa>
	{
		if (!flag_pulsador_11)
 8004b0c:	4b54      	ldr	r3, [pc, #336]	; (8004c60 <pulsador+0x4dc>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	f083 0301 	eor.w	r3, r3, #1
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <pulsador+0x39e>
		{
			flag_pulsador_11 = true;  //
 8004b1a:	4b51      	ldr	r3, [pc, #324]	; (8004c60 <pulsador+0x4dc>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	e033      	b.n	8004b8a <pulsador+0x406>
		}
		else
		{
			if (!flag_puls_11)
 8004b22:	4b50      	ldr	r3, [pc, #320]	; (8004c64 <pulsador+0x4e0>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	f083 0301 	eor.w	r3, r3, #1
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02c      	beq.n	8004b8a <pulsador+0x406>
			{
				cod_com = 14;
 8004b30:	4b42      	ldr	r3, [pc, #264]	; (8004c3c <pulsador+0x4b8>)
 8004b32:	220e      	movs	r2, #14
 8004b34:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8004b36:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <pulsador+0x4b8>)
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	4b40      	ldr	r3, [pc, #256]	; (8004c40 <pulsador+0x4bc>)
 8004b3e:	4413      	add	r3, r2
 8004b40:	019b      	lsls	r3, r3, #6
 8004b42:	3305      	adds	r3, #5
 8004b44:	461a      	mov	r2, r3
 8004b46:	4b3f      	ldr	r3, [pc, #252]	; (8004c44 <pulsador+0x4c0>)
 8004b48:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8004b4a:	4b3e      	ldr	r3, [pc, #248]	; (8004c44 <pulsador+0x4c0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	781a      	ldrb	r2, [r3, #0]
 8004b50:	4b3d      	ldr	r3, [pc, #244]	; (8004c48 <pulsador+0x4c4>)
 8004b52:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8004b54:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <pulsador+0x4b8>)
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4b39      	ldr	r3, [pc, #228]	; (8004c40 <pulsador+0x4bc>)
 8004b5c:	4413      	add	r3, r2
 8004b5e:	019b      	lsls	r3, r3, #6
 8004b60:	3306      	adds	r3, #6
 8004b62:	461a      	mov	r2, r3
 8004b64:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <pulsador+0x4c0>)
 8004b66:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8004b68:	4b36      	ldr	r3, [pc, #216]	; (8004c44 <pulsador+0x4c0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	781a      	ldrb	r2, [r3, #0]
 8004b6e:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <pulsador+0x4c8>)
 8004b70:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004b72:	f7ff fdbd 	bl	80046f0 <ejecutar_comando>
				flag_puls_11 = true;
 8004b76:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <pulsador+0x4e0>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	701a      	strb	r2, [r3, #0]
 8004b7c:	e005      	b.n	8004b8a <pulsador+0x406>
			}
		}
	}
	else
	{
		flag_pulsador_11 = false;  //
 8004b7e:	4b38      	ldr	r3, [pc, #224]	; (8004c60 <pulsador+0x4dc>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
		flag_puls_11 = false;
 8004b84:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <pulsador+0x4e0>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 12 ======================================================
	if ((Buffer_mem_D [1] & 0b00001000) == 0b00001000)
 8004b8a:	4b32      	ldr	r3, [pc, #200]	; (8004c54 <pulsador+0x4d0>)
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d038      	beq.n	8004c08 <pulsador+0x484>
	{
		if (!flag_pulsador_12)
 8004b96:	4b34      	ldr	r3, [pc, #208]	; (8004c68 <pulsador+0x4e4>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	f083 0301 	eor.w	r3, r3, #1
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <pulsador+0x428>
		{
			flag_pulsador_12 = true;  //
 8004ba4:	4b30      	ldr	r3, [pc, #192]	; (8004c68 <pulsador+0x4e4>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e033      	b.n	8004c14 <pulsador+0x490>
		}
		else
		{
			if (!flag_puls_12)
 8004bac:	4b2f      	ldr	r3, [pc, #188]	; (8004c6c <pulsador+0x4e8>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	f083 0301 	eor.w	r3, r3, #1
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d02c      	beq.n	8004c14 <pulsador+0x490>
			{
				cod_com = 15;
 8004bba:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <pulsador+0x4b8>)
 8004bbc:	220f      	movs	r2, #15
 8004bbe:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8004bc0:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <pulsador+0x4b8>)
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <pulsador+0x4bc>)
 8004bc8:	4413      	add	r3, r2
 8004bca:	019b      	lsls	r3, r3, #6
 8004bcc:	3305      	adds	r3, #5
 8004bce:	461a      	mov	r2, r3
 8004bd0:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <pulsador+0x4c0>)
 8004bd2:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <pulsador+0x4c0>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	4b1b      	ldr	r3, [pc, #108]	; (8004c48 <pulsador+0x4c4>)
 8004bdc:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <pulsador+0x4b8>)
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <pulsador+0x4bc>)
 8004be6:	4413      	add	r3, r2
 8004be8:	019b      	lsls	r3, r3, #6
 8004bea:	3306      	adds	r3, #6
 8004bec:	461a      	mov	r2, r3
 8004bee:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <pulsador+0x4c0>)
 8004bf0:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8004bf2:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <pulsador+0x4c0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	781a      	ldrb	r2, [r3, #0]
 8004bf8:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <pulsador+0x4c8>)
 8004bfa:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004bfc:	f7ff fd78 	bl	80046f0 <ejecutar_comando>
				flag_puls_12 = true;
 8004c00:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <pulsador+0x4e8>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	e005      	b.n	8004c14 <pulsador+0x490>
			}
		}
	}
	else
	{
		flag_pulsador_12 = false;  //
 8004c08:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <pulsador+0x4e4>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	701a      	strb	r2, [r3, #0]
		flag_puls_12 = false;
 8004c0e:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <pulsador+0x4e8>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 13 ======================================================
	if ((Buffer_mem_D [1] & 0b00010000) == 0b00010000)
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <pulsador+0x4d0>)
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d057      	beq.n	8004cd0 <pulsador+0x54c>
	{
		if (!flag_pulsador_13)
 8004c20:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <pulsador+0x4ec>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f083 0301 	eor.w	r3, r3, #1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d022      	beq.n	8004c74 <pulsador+0x4f0>
		{
			flag_pulsador_13 = true;  //
 8004c2e:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <pulsador+0x4ec>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
 8004c34:	e052      	b.n	8004cdc <pulsador+0x558>
 8004c36:	bf00      	nop
 8004c38:	2000c69f 	.word	0x2000c69f
 8004c3c:	2000c566 	.word	0x2000c566
 8004c40:	0020307f 	.word	0x0020307f
 8004c44:	2000c568 	.word	0x2000c568
 8004c48:	2000c56c 	.word	0x2000c56c
 8004c4c:	2000c56d 	.word	0x2000c56d
 8004c50:	2000c6b7 	.word	0x2000c6b7
 8004c54:	20000930 	.word	0x20000930
 8004c58:	2000c6b8 	.word	0x2000c6b8
 8004c5c:	2000c6a0 	.word	0x2000c6a0
 8004c60:	2000c6b9 	.word	0x2000c6b9
 8004c64:	2000c6a1 	.word	0x2000c6a1
 8004c68:	2000c6ba 	.word	0x2000c6ba
 8004c6c:	2000c6a2 	.word	0x2000c6a2
 8004c70:	2000c6bb 	.word	0x2000c6bb
		}
		else
		{
			if (!flag_puls_13)
 8004c74:	4b89      	ldr	r3, [pc, #548]	; (8004e9c <pulsador+0x718>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	f083 0301 	eor.w	r3, r3, #1
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d02c      	beq.n	8004cdc <pulsador+0x558>
			{
				cod_com = 14;
 8004c82:	4b87      	ldr	r3, [pc, #540]	; (8004ea0 <pulsador+0x71c>)
 8004c84:	220e      	movs	r2, #14
 8004c86:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8004c88:	4b85      	ldr	r3, [pc, #532]	; (8004ea0 <pulsador+0x71c>)
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4b85      	ldr	r3, [pc, #532]	; (8004ea4 <pulsador+0x720>)
 8004c90:	4413      	add	r3, r2
 8004c92:	019b      	lsls	r3, r3, #6
 8004c94:	3305      	adds	r3, #5
 8004c96:	461a      	mov	r2, r3
 8004c98:	4b83      	ldr	r3, [pc, #524]	; (8004ea8 <pulsador+0x724>)
 8004c9a:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8004c9c:	4b82      	ldr	r3, [pc, #520]	; (8004ea8 <pulsador+0x724>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	781a      	ldrb	r2, [r3, #0]
 8004ca2:	4b82      	ldr	r3, [pc, #520]	; (8004eac <pulsador+0x728>)
 8004ca4:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8004ca6:	4b7e      	ldr	r3, [pc, #504]	; (8004ea0 <pulsador+0x71c>)
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	4b7d      	ldr	r3, [pc, #500]	; (8004ea4 <pulsador+0x720>)
 8004cae:	4413      	add	r3, r2
 8004cb0:	019b      	lsls	r3, r3, #6
 8004cb2:	3306      	adds	r3, #6
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4b7c      	ldr	r3, [pc, #496]	; (8004ea8 <pulsador+0x724>)
 8004cb8:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8004cba:	4b7b      	ldr	r3, [pc, #492]	; (8004ea8 <pulsador+0x724>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	781a      	ldrb	r2, [r3, #0]
 8004cc0:	4b7b      	ldr	r3, [pc, #492]	; (8004eb0 <pulsador+0x72c>)
 8004cc2:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004cc4:	f7ff fd14 	bl	80046f0 <ejecutar_comando>
				flag_puls_13 = true;
 8004cc8:	4b74      	ldr	r3, [pc, #464]	; (8004e9c <pulsador+0x718>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e005      	b.n	8004cdc <pulsador+0x558>
			}
		}
	}
	else
	{
		flag_pulsador_13 = false;  //
 8004cd0:	4b78      	ldr	r3, [pc, #480]	; (8004eb4 <pulsador+0x730>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
		flag_puls_13 = false;
 8004cd6:	4b71      	ldr	r3, [pc, #452]	; (8004e9c <pulsador+0x718>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 14 ======================================================
	if ((Buffer_mem_D [1] & 0b00100000) == 0b00100000)
 8004cdc:	4b76      	ldr	r3, [pc, #472]	; (8004eb8 <pulsador+0x734>)
 8004cde:	785b      	ldrb	r3, [r3, #1]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d038      	beq.n	8004d5a <pulsador+0x5d6>
	{
		if (!flag_pulsador_14)
 8004ce8:	4b74      	ldr	r3, [pc, #464]	; (8004ebc <pulsador+0x738>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	f083 0301 	eor.w	r3, r3, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <pulsador+0x57a>
		{
			flag_pulsador_14 = true;  //
 8004cf6:	4b71      	ldr	r3, [pc, #452]	; (8004ebc <pulsador+0x738>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e033      	b.n	8004d66 <pulsador+0x5e2>
		}
		else
		{
			if (!flag_puls_14)
 8004cfe:	4b70      	ldr	r3, [pc, #448]	; (8004ec0 <pulsador+0x73c>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	f083 0301 	eor.w	r3, r3, #1
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d02c      	beq.n	8004d66 <pulsador+0x5e2>
			{
				cod_com = 15;
 8004d0c:	4b64      	ldr	r3, [pc, #400]	; (8004ea0 <pulsador+0x71c>)
 8004d0e:	220f      	movs	r2, #15
 8004d10:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8004d12:	4b63      	ldr	r3, [pc, #396]	; (8004ea0 <pulsador+0x71c>)
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	4b62      	ldr	r3, [pc, #392]	; (8004ea4 <pulsador+0x720>)
 8004d1a:	4413      	add	r3, r2
 8004d1c:	019b      	lsls	r3, r3, #6
 8004d1e:	3305      	adds	r3, #5
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b61      	ldr	r3, [pc, #388]	; (8004ea8 <pulsador+0x724>)
 8004d24:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8004d26:	4b60      	ldr	r3, [pc, #384]	; (8004ea8 <pulsador+0x724>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	781a      	ldrb	r2, [r3, #0]
 8004d2c:	4b5f      	ldr	r3, [pc, #380]	; (8004eac <pulsador+0x728>)
 8004d2e:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8004d30:	4b5b      	ldr	r3, [pc, #364]	; (8004ea0 <pulsador+0x71c>)
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	4b5b      	ldr	r3, [pc, #364]	; (8004ea4 <pulsador+0x720>)
 8004d38:	4413      	add	r3, r2
 8004d3a:	019b      	lsls	r3, r3, #6
 8004d3c:	3306      	adds	r3, #6
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4b59      	ldr	r3, [pc, #356]	; (8004ea8 <pulsador+0x724>)
 8004d42:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8004d44:	4b58      	ldr	r3, [pc, #352]	; (8004ea8 <pulsador+0x724>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	781a      	ldrb	r2, [r3, #0]
 8004d4a:	4b59      	ldr	r3, [pc, #356]	; (8004eb0 <pulsador+0x72c>)
 8004d4c:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004d4e:	f7ff fccf 	bl	80046f0 <ejecutar_comando>
				flag_puls_14 = true;
 8004d52:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <pulsador+0x73c>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	e005      	b.n	8004d66 <pulsador+0x5e2>
			}
		}
	}
	else
	{
		flag_pulsador_14 = false;  //
 8004d5a:	4b58      	ldr	r3, [pc, #352]	; (8004ebc <pulsador+0x738>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
		flag_puls_14 = false;
 8004d60:	4b57      	ldr	r3, [pc, #348]	; (8004ec0 <pulsador+0x73c>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 15 ======================================================
	if ((Buffer_mem_D [1] & 0b01000000) == 0b01000000)
 8004d66:	4b54      	ldr	r3, [pc, #336]	; (8004eb8 <pulsador+0x734>)
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d038      	beq.n	8004de4 <pulsador+0x660>
	{
		if (!flag_pulsador_15)
 8004d72:	4b54      	ldr	r3, [pc, #336]	; (8004ec4 <pulsador+0x740>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	f083 0301 	eor.w	r3, r3, #1
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <pulsador+0x604>
		{
			flag_pulsador_15 = true;  //
 8004d80:	4b50      	ldr	r3, [pc, #320]	; (8004ec4 <pulsador+0x740>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	e033      	b.n	8004df0 <pulsador+0x66c>
		}
		else
		{
			if (!flag_puls_15)
 8004d88:	4b4f      	ldr	r3, [pc, #316]	; (8004ec8 <pulsador+0x744>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	f083 0301 	eor.w	r3, r3, #1
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02c      	beq.n	8004df0 <pulsador+0x66c>
			{
				cod_com = 14;
 8004d96:	4b42      	ldr	r3, [pc, #264]	; (8004ea0 <pulsador+0x71c>)
 8004d98:	220e      	movs	r2, #14
 8004d9a:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8004d9c:	4b40      	ldr	r3, [pc, #256]	; (8004ea0 <pulsador+0x71c>)
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b40      	ldr	r3, [pc, #256]	; (8004ea4 <pulsador+0x720>)
 8004da4:	4413      	add	r3, r2
 8004da6:	019b      	lsls	r3, r3, #6
 8004da8:	3305      	adds	r3, #5
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b3e      	ldr	r3, [pc, #248]	; (8004ea8 <pulsador+0x724>)
 8004dae:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8004db0:	4b3d      	ldr	r3, [pc, #244]	; (8004ea8 <pulsador+0x724>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	4b3d      	ldr	r3, [pc, #244]	; (8004eac <pulsador+0x728>)
 8004db8:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8004dba:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <pulsador+0x71c>)
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4b38      	ldr	r3, [pc, #224]	; (8004ea4 <pulsador+0x720>)
 8004dc2:	4413      	add	r3, r2
 8004dc4:	019b      	lsls	r3, r3, #6
 8004dc6:	3306      	adds	r3, #6
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4b37      	ldr	r3, [pc, #220]	; (8004ea8 <pulsador+0x724>)
 8004dcc:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8004dce:	4b36      	ldr	r3, [pc, #216]	; (8004ea8 <pulsador+0x724>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	781a      	ldrb	r2, [r3, #0]
 8004dd4:	4b36      	ldr	r3, [pc, #216]	; (8004eb0 <pulsador+0x72c>)
 8004dd6:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004dd8:	f7ff fc8a 	bl	80046f0 <ejecutar_comando>
				flag_puls_15 = true;
 8004ddc:	4b3a      	ldr	r3, [pc, #232]	; (8004ec8 <pulsador+0x744>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e005      	b.n	8004df0 <pulsador+0x66c>
			}
		}
	}
	else
	{
		flag_pulsador_15 = false;  //
 8004de4:	4b37      	ldr	r3, [pc, #220]	; (8004ec4 <pulsador+0x740>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
		flag_puls_15 = false;
 8004dea:	4b37      	ldr	r3, [pc, #220]	; (8004ec8 <pulsador+0x744>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 16 ======================================================
	if ((Buffer_mem_D [1] & 0b10000000) == 0b10000000)
 8004df0:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <pulsador+0x734>)
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	b25b      	sxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	da38      	bge.n	8004e6c <pulsador+0x6e8>
	{
		if (!flag_pulsador_16)
 8004dfa:	4b34      	ldr	r3, [pc, #208]	; (8004ecc <pulsador+0x748>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	f083 0301 	eor.w	r3, r3, #1
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <pulsador+0x68c>
		{
			flag_pulsador_16 = true;  //
 8004e08:	4b30      	ldr	r3, [pc, #192]	; (8004ecc <pulsador+0x748>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	e033      	b.n	8004e78 <pulsador+0x6f4>
		}
		else
		{
			if (!flag_puls_16)
 8004e10:	4b2f      	ldr	r3, [pc, #188]	; (8004ed0 <pulsador+0x74c>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	f083 0301 	eor.w	r3, r3, #1
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d02c      	beq.n	8004e78 <pulsador+0x6f4>
			{
				cod_com = 15;
 8004e1e:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <pulsador+0x71c>)
 8004e20:	220f      	movs	r2, #15
 8004e22:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8004e24:	4b1e      	ldr	r3, [pc, #120]	; (8004ea0 <pulsador+0x71c>)
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <pulsador+0x720>)
 8004e2c:	4413      	add	r3, r2
 8004e2e:	019b      	lsls	r3, r3, #6
 8004e30:	3305      	adds	r3, #5
 8004e32:	461a      	mov	r2, r3
 8004e34:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <pulsador+0x724>)
 8004e36:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8004e38:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <pulsador+0x724>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	781a      	ldrb	r2, [r3, #0]
 8004e3e:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <pulsador+0x728>)
 8004e40:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8004e42:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <pulsador+0x71c>)
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	4b16      	ldr	r3, [pc, #88]	; (8004ea4 <pulsador+0x720>)
 8004e4a:	4413      	add	r3, r2
 8004e4c:	019b      	lsls	r3, r3, #6
 8004e4e:	3306      	adds	r3, #6
 8004e50:	461a      	mov	r2, r3
 8004e52:	4b15      	ldr	r3, [pc, #84]	; (8004ea8 <pulsador+0x724>)
 8004e54:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8004e56:	4b14      	ldr	r3, [pc, #80]	; (8004ea8 <pulsador+0x724>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	781a      	ldrb	r2, [r3, #0]
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <pulsador+0x72c>)
 8004e5e:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004e60:	f7ff fc46 	bl	80046f0 <ejecutar_comando>
				flag_puls_16 = true;
 8004e64:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <pulsador+0x74c>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e005      	b.n	8004e78 <pulsador+0x6f4>
			}
		}
	}
	else
	{
		flag_pulsador_16 = false;  //
 8004e6c:	4b17      	ldr	r3, [pc, #92]	; (8004ecc <pulsador+0x748>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
		flag_puls_16 = false;
 8004e72:	4b17      	ldr	r3, [pc, #92]	; (8004ed0 <pulsador+0x74c>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]
		flag_pulsador_18 = false;  //
		flag_puls_18 = false;
	}
*/
	//==== Pulsador 19 ======================================================
	if ((Buffer_mem_D [2] & 0b00000100) == 0b00000100)
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <pulsador+0x734>)
 8004e7a:	789b      	ldrb	r3, [r3, #2]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d057      	beq.n	8004f34 <pulsador+0x7b0>
	{
		if (!flag_pulsador_19)
 8004e84:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <pulsador+0x750>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	f083 0301 	eor.w	r3, r3, #1
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d022      	beq.n	8004ed8 <pulsador+0x754>
		{
			flag_pulsador_19 = true;  //
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <pulsador+0x750>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e052      	b.n	8004f40 <pulsador+0x7bc>
 8004e9a:	bf00      	nop
 8004e9c:	2000c6a3 	.word	0x2000c6a3
 8004ea0:	2000c566 	.word	0x2000c566
 8004ea4:	0020307f 	.word	0x0020307f
 8004ea8:	2000c568 	.word	0x2000c568
 8004eac:	2000c56c 	.word	0x2000c56c
 8004eb0:	2000c56d 	.word	0x2000c56d
 8004eb4:	2000c6bb 	.word	0x2000c6bb
 8004eb8:	20000930 	.word	0x20000930
 8004ebc:	2000c6bc 	.word	0x2000c6bc
 8004ec0:	2000c6a4 	.word	0x2000c6a4
 8004ec4:	2000c6bd 	.word	0x2000c6bd
 8004ec8:	2000c6a5 	.word	0x2000c6a5
 8004ecc:	2000c6be 	.word	0x2000c6be
 8004ed0:	2000c6a6 	.word	0x2000c6a6
 8004ed4:	2000c6bf 	.word	0x2000c6bf
		}
		else
		{
			if (!flag_puls_19)
 8004ed8:	4b89      	ldr	r3, [pc, #548]	; (8005100 <pulsador+0x97c>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f083 0301 	eor.w	r3, r3, #1
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02c      	beq.n	8004f40 <pulsador+0x7bc>
			{
				cod_com = 14;
 8004ee6:	4b87      	ldr	r3, [pc, #540]	; (8005104 <pulsador+0x980>)
 8004ee8:	220e      	movs	r2, #14
 8004eea:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8004eec:	4b85      	ldr	r3, [pc, #532]	; (8005104 <pulsador+0x980>)
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4b85      	ldr	r3, [pc, #532]	; (8005108 <pulsador+0x984>)
 8004ef4:	4413      	add	r3, r2
 8004ef6:	019b      	lsls	r3, r3, #6
 8004ef8:	3305      	adds	r3, #5
 8004efa:	461a      	mov	r2, r3
 8004efc:	4b83      	ldr	r3, [pc, #524]	; (800510c <pulsador+0x988>)
 8004efe:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8004f00:	4b82      	ldr	r3, [pc, #520]	; (800510c <pulsador+0x988>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	4b82      	ldr	r3, [pc, #520]	; (8005110 <pulsador+0x98c>)
 8004f08:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8004f0a:	4b7e      	ldr	r3, [pc, #504]	; (8005104 <pulsador+0x980>)
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4b7d      	ldr	r3, [pc, #500]	; (8005108 <pulsador+0x984>)
 8004f12:	4413      	add	r3, r2
 8004f14:	019b      	lsls	r3, r3, #6
 8004f16:	3306      	adds	r3, #6
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b7c      	ldr	r3, [pc, #496]	; (800510c <pulsador+0x988>)
 8004f1c:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8004f1e:	4b7b      	ldr	r3, [pc, #492]	; (800510c <pulsador+0x988>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	781a      	ldrb	r2, [r3, #0]
 8004f24:	4b7b      	ldr	r3, [pc, #492]	; (8005114 <pulsador+0x990>)
 8004f26:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004f28:	f7ff fbe2 	bl	80046f0 <ejecutar_comando>
				flag_puls_19 = true;
 8004f2c:	4b74      	ldr	r3, [pc, #464]	; (8005100 <pulsador+0x97c>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	e005      	b.n	8004f40 <pulsador+0x7bc>
			}
		}
	}
	else
	{
		flag_pulsador_19 = false;  //
 8004f34:	4b78      	ldr	r3, [pc, #480]	; (8005118 <pulsador+0x994>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	701a      	strb	r2, [r3, #0]
		flag_puls_19 = false;
 8004f3a:	4b71      	ldr	r3, [pc, #452]	; (8005100 <pulsador+0x97c>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 20 ======================================================
	if ((Buffer_mem_D [2] & 0b00001000) == 0b00001000)
 8004f40:	4b76      	ldr	r3, [pc, #472]	; (800511c <pulsador+0x998>)
 8004f42:	789b      	ldrb	r3, [r3, #2]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d038      	beq.n	8004fbe <pulsador+0x83a>
	{
		if (!flag_pulsador_20)
 8004f4c:	4b74      	ldr	r3, [pc, #464]	; (8005120 <pulsador+0x99c>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f083 0301 	eor.w	r3, r3, #1
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <pulsador+0x7de>
		{
			flag_pulsador_20 = true;  //
 8004f5a:	4b71      	ldr	r3, [pc, #452]	; (8005120 <pulsador+0x99c>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	e033      	b.n	8004fca <pulsador+0x846>
		}
		else
		{
			if (!flag_puls_20)
 8004f62:	4b70      	ldr	r3, [pc, #448]	; (8005124 <pulsador+0x9a0>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	f083 0301 	eor.w	r3, r3, #1
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d02c      	beq.n	8004fca <pulsador+0x846>
			{
				cod_com = 15;
 8004f70:	4b64      	ldr	r3, [pc, #400]	; (8005104 <pulsador+0x980>)
 8004f72:	220f      	movs	r2, #15
 8004f74:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8004f76:	4b63      	ldr	r3, [pc, #396]	; (8005104 <pulsador+0x980>)
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4b62      	ldr	r3, [pc, #392]	; (8005108 <pulsador+0x984>)
 8004f7e:	4413      	add	r3, r2
 8004f80:	019b      	lsls	r3, r3, #6
 8004f82:	3305      	adds	r3, #5
 8004f84:	461a      	mov	r2, r3
 8004f86:	4b61      	ldr	r3, [pc, #388]	; (800510c <pulsador+0x988>)
 8004f88:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8004f8a:	4b60      	ldr	r3, [pc, #384]	; (800510c <pulsador+0x988>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	781a      	ldrb	r2, [r3, #0]
 8004f90:	4b5f      	ldr	r3, [pc, #380]	; (8005110 <pulsador+0x98c>)
 8004f92:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8004f94:	4b5b      	ldr	r3, [pc, #364]	; (8005104 <pulsador+0x980>)
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4b5b      	ldr	r3, [pc, #364]	; (8005108 <pulsador+0x984>)
 8004f9c:	4413      	add	r3, r2
 8004f9e:	019b      	lsls	r3, r3, #6
 8004fa0:	3306      	adds	r3, #6
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b59      	ldr	r3, [pc, #356]	; (800510c <pulsador+0x988>)
 8004fa6:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8004fa8:	4b58      	ldr	r3, [pc, #352]	; (800510c <pulsador+0x988>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	4b59      	ldr	r3, [pc, #356]	; (8005114 <pulsador+0x990>)
 8004fb0:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8004fb2:	f7ff fb9d 	bl	80046f0 <ejecutar_comando>
				flag_puls_20 = true;
 8004fb6:	4b5b      	ldr	r3, [pc, #364]	; (8005124 <pulsador+0x9a0>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	e005      	b.n	8004fca <pulsador+0x846>
			}
		}
	}
	else
	{
		flag_pulsador_20 = false;  //
 8004fbe:	4b58      	ldr	r3, [pc, #352]	; (8005120 <pulsador+0x99c>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
		flag_puls_20 = false;
 8004fc4:	4b57      	ldr	r3, [pc, #348]	; (8005124 <pulsador+0x9a0>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 21 ======================================================
	if ((Buffer_mem_D [2] & 0b00010000) == 0b00010000)
 8004fca:	4b54      	ldr	r3, [pc, #336]	; (800511c <pulsador+0x998>)
 8004fcc:	789b      	ldrb	r3, [r3, #2]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d038      	beq.n	8005048 <pulsador+0x8c4>
	{
		if (!flag_pulsador_21)
 8004fd6:	4b54      	ldr	r3, [pc, #336]	; (8005128 <pulsador+0x9a4>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	f083 0301 	eor.w	r3, r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <pulsador+0x868>
		{
			flag_pulsador_21 = true;  //
 8004fe4:	4b50      	ldr	r3, [pc, #320]	; (8005128 <pulsador+0x9a4>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e033      	b.n	8005054 <pulsador+0x8d0>
		}
		else
		{
			if (!flag_puls_21)
 8004fec:	4b4f      	ldr	r3, [pc, #316]	; (800512c <pulsador+0x9a8>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f083 0301 	eor.w	r3, r3, #1
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d02c      	beq.n	8005054 <pulsador+0x8d0>
			{
				cod_com = 14;
 8004ffa:	4b42      	ldr	r3, [pc, #264]	; (8005104 <pulsador+0x980>)
 8004ffc:	220e      	movs	r2, #14
 8004ffe:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8005000:	4b40      	ldr	r3, [pc, #256]	; (8005104 <pulsador+0x980>)
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	4b40      	ldr	r3, [pc, #256]	; (8005108 <pulsador+0x984>)
 8005008:	4413      	add	r3, r2
 800500a:	019b      	lsls	r3, r3, #6
 800500c:	3305      	adds	r3, #5
 800500e:	461a      	mov	r2, r3
 8005010:	4b3e      	ldr	r3, [pc, #248]	; (800510c <pulsador+0x988>)
 8005012:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8005014:	4b3d      	ldr	r3, [pc, #244]	; (800510c <pulsador+0x988>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	4b3d      	ldr	r3, [pc, #244]	; (8005110 <pulsador+0x98c>)
 800501c:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 800501e:	4b39      	ldr	r3, [pc, #228]	; (8005104 <pulsador+0x980>)
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	4b38      	ldr	r3, [pc, #224]	; (8005108 <pulsador+0x984>)
 8005026:	4413      	add	r3, r2
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	3306      	adds	r3, #6
 800502c:	461a      	mov	r2, r3
 800502e:	4b37      	ldr	r3, [pc, #220]	; (800510c <pulsador+0x988>)
 8005030:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8005032:	4b36      	ldr	r3, [pc, #216]	; (800510c <pulsador+0x988>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	781a      	ldrb	r2, [r3, #0]
 8005038:	4b36      	ldr	r3, [pc, #216]	; (8005114 <pulsador+0x990>)
 800503a:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 800503c:	f7ff fb58 	bl	80046f0 <ejecutar_comando>
				flag_puls_21 = true;
 8005040:	4b3a      	ldr	r3, [pc, #232]	; (800512c <pulsador+0x9a8>)
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e005      	b.n	8005054 <pulsador+0x8d0>
			}
		}
	}
	else
	{
		flag_pulsador_21 = false;  //
 8005048:	4b37      	ldr	r3, [pc, #220]	; (8005128 <pulsador+0x9a4>)
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
		flag_puls_21 = false;
 800504e:	4b37      	ldr	r3, [pc, #220]	; (800512c <pulsador+0x9a8>)
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 22 ======================================================
	if ((Buffer_mem_D [2] & 0b00100000) == 0b00100000)
 8005054:	4b31      	ldr	r3, [pc, #196]	; (800511c <pulsador+0x998>)
 8005056:	789b      	ldrb	r3, [r3, #2]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d038      	beq.n	80050d2 <pulsador+0x94e>
	{
		if (!flag_pulsador_22)
 8005060:	4b33      	ldr	r3, [pc, #204]	; (8005130 <pulsador+0x9ac>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f083 0301 	eor.w	r3, r3, #1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <pulsador+0x8f2>
		{
			flag_pulsador_22 = true;  //
 800506e:	4b30      	ldr	r3, [pc, #192]	; (8005130 <pulsador+0x9ac>)
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	e033      	b.n	80050de <pulsador+0x95a>
		}
		else
		{
			if (!flag_puls_22)
 8005076:	4b2f      	ldr	r3, [pc, #188]	; (8005134 <pulsador+0x9b0>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	f083 0301 	eor.w	r3, r3, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d02c      	beq.n	80050de <pulsador+0x95a>
			{
				cod_com = 15;
 8005084:	4b1f      	ldr	r3, [pc, #124]	; (8005104 <pulsador+0x980>)
 8005086:	220f      	movs	r2, #15
 8005088:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 800508a:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <pulsador+0x980>)
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <pulsador+0x984>)
 8005092:	4413      	add	r3, r2
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	3305      	adds	r3, #5
 8005098:	461a      	mov	r2, r3
 800509a:	4b1c      	ldr	r3, [pc, #112]	; (800510c <pulsador+0x988>)
 800509c:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 800509e:	4b1b      	ldr	r3, [pc, #108]	; (800510c <pulsador+0x988>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	781a      	ldrb	r2, [r3, #0]
 80050a4:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <pulsador+0x98c>)
 80050a6:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 80050a8:	4b16      	ldr	r3, [pc, #88]	; (8005104 <pulsador+0x980>)
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b16      	ldr	r3, [pc, #88]	; (8005108 <pulsador+0x984>)
 80050b0:	4413      	add	r3, r2
 80050b2:	019b      	lsls	r3, r3, #6
 80050b4:	3306      	adds	r3, #6
 80050b6:	461a      	mov	r2, r3
 80050b8:	4b14      	ldr	r3, [pc, #80]	; (800510c <pulsador+0x988>)
 80050ba:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <pulsador+0x988>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	4b14      	ldr	r3, [pc, #80]	; (8005114 <pulsador+0x990>)
 80050c4:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 80050c6:	f7ff fb13 	bl	80046f0 <ejecutar_comando>
				flag_puls_22 = true;
 80050ca:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <pulsador+0x9b0>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	e005      	b.n	80050de <pulsador+0x95a>
			}
		}
	}
	else
	{
		flag_pulsador_22 = false;  //
 80050d2:	4b17      	ldr	r3, [pc, #92]	; (8005130 <pulsador+0x9ac>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
		flag_puls_22 = false;
 80050d8:	4b16      	ldr	r3, [pc, #88]	; (8005134 <pulsador+0x9b0>)
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 23 ======================================================
	if ((Buffer_mem_D [2] & 0b01000000) == 0b01000000)
 80050de:	4b0f      	ldr	r3, [pc, #60]	; (800511c <pulsador+0x998>)
 80050e0:	789b      	ldrb	r3, [r3, #2]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d056      	beq.n	8005198 <pulsador+0xa14>
	{
		if (!flag_pulsador_23)
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <pulsador+0x9b4>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	f083 0301 	eor.w	r3, r3, #1
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d021      	beq.n	800513c <pulsador+0x9b8>
		{
			flag_pulsador_23 = true;  //
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <pulsador+0x9b4>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e051      	b.n	80051a4 <pulsador+0xa20>
 8005100:	2000c6a7 	.word	0x2000c6a7
 8005104:	2000c566 	.word	0x2000c566
 8005108:	0020307f 	.word	0x0020307f
 800510c:	2000c568 	.word	0x2000c568
 8005110:	2000c56c 	.word	0x2000c56c
 8005114:	2000c56d 	.word	0x2000c56d
 8005118:	2000c6bf 	.word	0x2000c6bf
 800511c:	20000930 	.word	0x20000930
 8005120:	2000c6c0 	.word	0x2000c6c0
 8005124:	2000c6a8 	.word	0x2000c6a8
 8005128:	2000c6c1 	.word	0x2000c6c1
 800512c:	2000c6a9 	.word	0x2000c6a9
 8005130:	2000c6c2 	.word	0x2000c6c2
 8005134:	2000c6aa 	.word	0x2000c6aa
 8005138:	2000c6c3 	.word	0x2000c6c3
		}
		else
		{
			if (!flag_puls_23)
 800513c:	4b89      	ldr	r3, [pc, #548]	; (8005364 <pulsador+0xbe0>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	f083 0301 	eor.w	r3, r3, #1
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d02c      	beq.n	80051a4 <pulsador+0xa20>
			{
				cod_com = 14;
 800514a:	4b87      	ldr	r3, [pc, #540]	; (8005368 <pulsador+0xbe4>)
 800514c:	220e      	movs	r2, #14
 800514e:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8005150:	4b85      	ldr	r3, [pc, #532]	; (8005368 <pulsador+0xbe4>)
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	4b85      	ldr	r3, [pc, #532]	; (800536c <pulsador+0xbe8>)
 8005158:	4413      	add	r3, r2
 800515a:	019b      	lsls	r3, r3, #6
 800515c:	3305      	adds	r3, #5
 800515e:	461a      	mov	r2, r3
 8005160:	4b83      	ldr	r3, [pc, #524]	; (8005370 <pulsador+0xbec>)
 8005162:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8005164:	4b82      	ldr	r3, [pc, #520]	; (8005370 <pulsador+0xbec>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	781a      	ldrb	r2, [r3, #0]
 800516a:	4b82      	ldr	r3, [pc, #520]	; (8005374 <pulsador+0xbf0>)
 800516c:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 800516e:	4b7e      	ldr	r3, [pc, #504]	; (8005368 <pulsador+0xbe4>)
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	4b7d      	ldr	r3, [pc, #500]	; (800536c <pulsador+0xbe8>)
 8005176:	4413      	add	r3, r2
 8005178:	019b      	lsls	r3, r3, #6
 800517a:	3306      	adds	r3, #6
 800517c:	461a      	mov	r2, r3
 800517e:	4b7c      	ldr	r3, [pc, #496]	; (8005370 <pulsador+0xbec>)
 8005180:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8005182:	4b7b      	ldr	r3, [pc, #492]	; (8005370 <pulsador+0xbec>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	4b7b      	ldr	r3, [pc, #492]	; (8005378 <pulsador+0xbf4>)
 800518a:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 800518c:	f7ff fab0 	bl	80046f0 <ejecutar_comando>
				flag_puls_23 = true;
 8005190:	4b74      	ldr	r3, [pc, #464]	; (8005364 <pulsador+0xbe0>)
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e005      	b.n	80051a4 <pulsador+0xa20>
			}
		}
	}
	else
	{
		flag_pulsador_23 = false;  //
 8005198:	4b78      	ldr	r3, [pc, #480]	; (800537c <pulsador+0xbf8>)
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
		flag_puls_23 = false;
 800519e:	4b71      	ldr	r3, [pc, #452]	; (8005364 <pulsador+0xbe0>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 24 ======================================================
	if ((Buffer_mem_D [2] & 0b10000000) == 0b10000000)
 80051a4:	4b76      	ldr	r3, [pc, #472]	; (8005380 <pulsador+0xbfc>)
 80051a6:	789b      	ldrb	r3, [r3, #2]
 80051a8:	b25b      	sxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	da38      	bge.n	8005220 <pulsador+0xa9c>
	{
		if (!flag_pulsador_24)
 80051ae:	4b75      	ldr	r3, [pc, #468]	; (8005384 <pulsador+0xc00>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	f083 0301 	eor.w	r3, r3, #1
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <pulsador+0xa40>
		{
			flag_pulsador_24 = true;  //
 80051bc:	4b71      	ldr	r3, [pc, #452]	; (8005384 <pulsador+0xc00>)
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e033      	b.n	800522c <pulsador+0xaa8>
		}
		else
		{
			if (!flag_puls_24)
 80051c4:	4b70      	ldr	r3, [pc, #448]	; (8005388 <pulsador+0xc04>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	f083 0301 	eor.w	r3, r3, #1
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d02c      	beq.n	800522c <pulsador+0xaa8>
			{
				cod_com = 15;
 80051d2:	4b65      	ldr	r3, [pc, #404]	; (8005368 <pulsador+0xbe4>)
 80051d4:	220f      	movs	r2, #15
 80051d6:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 80051d8:	4b63      	ldr	r3, [pc, #396]	; (8005368 <pulsador+0xbe4>)
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	4b63      	ldr	r3, [pc, #396]	; (800536c <pulsador+0xbe8>)
 80051e0:	4413      	add	r3, r2
 80051e2:	019b      	lsls	r3, r3, #6
 80051e4:	3305      	adds	r3, #5
 80051e6:	461a      	mov	r2, r3
 80051e8:	4b61      	ldr	r3, [pc, #388]	; (8005370 <pulsador+0xbec>)
 80051ea:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 80051ec:	4b60      	ldr	r3, [pc, #384]	; (8005370 <pulsador+0xbec>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	4b60      	ldr	r3, [pc, #384]	; (8005374 <pulsador+0xbf0>)
 80051f4:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 80051f6:	4b5c      	ldr	r3, [pc, #368]	; (8005368 <pulsador+0xbe4>)
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	4b5b      	ldr	r3, [pc, #364]	; (800536c <pulsador+0xbe8>)
 80051fe:	4413      	add	r3, r2
 8005200:	019b      	lsls	r3, r3, #6
 8005202:	3306      	adds	r3, #6
 8005204:	461a      	mov	r2, r3
 8005206:	4b5a      	ldr	r3, [pc, #360]	; (8005370 <pulsador+0xbec>)
 8005208:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 800520a:	4b59      	ldr	r3, [pc, #356]	; (8005370 <pulsador+0xbec>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	781a      	ldrb	r2, [r3, #0]
 8005210:	4b59      	ldr	r3, [pc, #356]	; (8005378 <pulsador+0xbf4>)
 8005212:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8005214:	f7ff fa6c 	bl	80046f0 <ejecutar_comando>
				flag_puls_24 = true;
 8005218:	4b5b      	ldr	r3, [pc, #364]	; (8005388 <pulsador+0xc04>)
 800521a:	2201      	movs	r2, #1
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	e005      	b.n	800522c <pulsador+0xaa8>
			}
		}
	}
	else
	{
		flag_pulsador_24 = false;  //
 8005220:	4b58      	ldr	r3, [pc, #352]	; (8005384 <pulsador+0xc00>)
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
		flag_puls_24 = false;
 8005226:	4b58      	ldr	r3, [pc, #352]	; (8005388 <pulsador+0xc04>)
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
		flag_pulsador_26 = false;  //
		flag_puls_26 = false;
	}
*/
	//==== Pulsador 27 ======================================================
	if ((Buffer_mem_D [3] & 0b00000100) == 0b00000100)
 800522c:	4b54      	ldr	r3, [pc, #336]	; (8005380 <pulsador+0xbfc>)
 800522e:	78db      	ldrb	r3, [r3, #3]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d038      	beq.n	80052aa <pulsador+0xb26>
	{
		if (!flag_pulsador_27)
 8005238:	4b54      	ldr	r3, [pc, #336]	; (800538c <pulsador+0xc08>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f083 0301 	eor.w	r3, r3, #1
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <pulsador+0xaca>
		{
			flag_pulsador_27 = true;  //
 8005246:	4b51      	ldr	r3, [pc, #324]	; (800538c <pulsador+0xc08>)
 8005248:	2201      	movs	r2, #1
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e033      	b.n	80052b6 <pulsador+0xb32>
		}
		else
		{
			if (!flag_puls_27)
 800524e:	4b50      	ldr	r3, [pc, #320]	; (8005390 <pulsador+0xc0c>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	f083 0301 	eor.w	r3, r3, #1
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d02c      	beq.n	80052b6 <pulsador+0xb32>
			{
				cod_com = 14;
 800525c:	4b42      	ldr	r3, [pc, #264]	; (8005368 <pulsador+0xbe4>)
 800525e:	220e      	movs	r2, #14
 8005260:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8005262:	4b41      	ldr	r3, [pc, #260]	; (8005368 <pulsador+0xbe4>)
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	4b40      	ldr	r3, [pc, #256]	; (800536c <pulsador+0xbe8>)
 800526a:	4413      	add	r3, r2
 800526c:	019b      	lsls	r3, r3, #6
 800526e:	3305      	adds	r3, #5
 8005270:	461a      	mov	r2, r3
 8005272:	4b3f      	ldr	r3, [pc, #252]	; (8005370 <pulsador+0xbec>)
 8005274:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8005276:	4b3e      	ldr	r3, [pc, #248]	; (8005370 <pulsador+0xbec>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	781a      	ldrb	r2, [r3, #0]
 800527c:	4b3d      	ldr	r3, [pc, #244]	; (8005374 <pulsador+0xbf0>)
 800527e:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 8005280:	4b39      	ldr	r3, [pc, #228]	; (8005368 <pulsador+0xbe4>)
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	4b39      	ldr	r3, [pc, #228]	; (800536c <pulsador+0xbe8>)
 8005288:	4413      	add	r3, r2
 800528a:	019b      	lsls	r3, r3, #6
 800528c:	3306      	adds	r3, #6
 800528e:	461a      	mov	r2, r3
 8005290:	4b37      	ldr	r3, [pc, #220]	; (8005370 <pulsador+0xbec>)
 8005292:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8005294:	4b36      	ldr	r3, [pc, #216]	; (8005370 <pulsador+0xbec>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	781a      	ldrb	r2, [r3, #0]
 800529a:	4b37      	ldr	r3, [pc, #220]	; (8005378 <pulsador+0xbf4>)
 800529c:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 800529e:	f7ff fa27 	bl	80046f0 <ejecutar_comando>
				flag_puls_27 = true;
 80052a2:	4b3b      	ldr	r3, [pc, #236]	; (8005390 <pulsador+0xc0c>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	e005      	b.n	80052b6 <pulsador+0xb32>
			}
		}
	}
	else
	{
		flag_pulsador_27 = false;  //
 80052aa:	4b38      	ldr	r3, [pc, #224]	; (800538c <pulsador+0xc08>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
		flag_puls_27 = false;
 80052b0:	4b37      	ldr	r3, [pc, #220]	; (8005390 <pulsador+0xc0c>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 28 ======================================================
	if ((Buffer_mem_D [3] & 0b00001000) == 0b00001000)
 80052b6:	4b32      	ldr	r3, [pc, #200]	; (8005380 <pulsador+0xbfc>)
 80052b8:	78db      	ldrb	r3, [r3, #3]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d038      	beq.n	8005334 <pulsador+0xbb0>
	{
		if (!flag_pulsador_28)
 80052c2:	4b34      	ldr	r3, [pc, #208]	; (8005394 <pulsador+0xc10>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	f083 0301 	eor.w	r3, r3, #1
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <pulsador+0xb54>
		{
			flag_pulsador_28 = true;  //
 80052d0:	4b30      	ldr	r3, [pc, #192]	; (8005394 <pulsador+0xc10>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e033      	b.n	8005340 <pulsador+0xbbc>
		}
		else
		{
			if (!flag_puls_28)
 80052d8:	4b2f      	ldr	r3, [pc, #188]	; (8005398 <pulsador+0xc14>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	f083 0301 	eor.w	r3, r3, #1
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d02c      	beq.n	8005340 <pulsador+0xbbc>
			{
				cod_com = 15;
 80052e6:	4b20      	ldr	r3, [pc, #128]	; (8005368 <pulsador+0xbe4>)
 80052e8:	220f      	movs	r2, #15
 80052ea:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 80052ec:	4b1e      	ldr	r3, [pc, #120]	; (8005368 <pulsador+0xbe4>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	4b1e      	ldr	r3, [pc, #120]	; (800536c <pulsador+0xbe8>)
 80052f4:	4413      	add	r3, r2
 80052f6:	019b      	lsls	r3, r3, #6
 80052f8:	3305      	adds	r3, #5
 80052fa:	461a      	mov	r2, r3
 80052fc:	4b1c      	ldr	r3, [pc, #112]	; (8005370 <pulsador+0xbec>)
 80052fe:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8005300:	4b1b      	ldr	r3, [pc, #108]	; (8005370 <pulsador+0xbec>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	781a      	ldrb	r2, [r3, #0]
 8005306:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <pulsador+0xbf0>)
 8005308:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <pulsador+0xbe4>)
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	4b16      	ldr	r3, [pc, #88]	; (800536c <pulsador+0xbe8>)
 8005312:	4413      	add	r3, r2
 8005314:	019b      	lsls	r3, r3, #6
 8005316:	3306      	adds	r3, #6
 8005318:	461a      	mov	r2, r3
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <pulsador+0xbec>)
 800531c:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <pulsador+0xbec>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	781a      	ldrb	r2, [r3, #0]
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <pulsador+0xbf4>)
 8005326:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8005328:	f7ff f9e2 	bl	80046f0 <ejecutar_comando>
				flag_puls_28 = true;
 800532c:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <pulsador+0xc14>)
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e005      	b.n	8005340 <pulsador+0xbbc>
			}
		}
	}
	else
	{
		flag_pulsador_28 = false;  //
 8005334:	4b17      	ldr	r3, [pc, #92]	; (8005394 <pulsador+0xc10>)
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
		flag_puls_28 = false;
 800533a:	4b17      	ldr	r3, [pc, #92]	; (8005398 <pulsador+0xc14>)
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 29 ======================================================
	if ((Buffer_mem_D [3] & 0b00010000) == 0b00010000)
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <pulsador+0xbfc>)
 8005342:	78db      	ldrb	r3, [r3, #3]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d057      	beq.n	80053fc <pulsador+0xc78>
	{
		if (!flag_pulsador_29)
 800534c:	4b13      	ldr	r3, [pc, #76]	; (800539c <pulsador+0xc18>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f083 0301 	eor.w	r3, r3, #1
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d022      	beq.n	80053a0 <pulsador+0xc1c>
		{
			flag_pulsador_29 = true;  //
 800535a:	4b10      	ldr	r3, [pc, #64]	; (800539c <pulsador+0xc18>)
 800535c:	2201      	movs	r2, #1
 800535e:	701a      	strb	r2, [r3, #0]
 8005360:	e052      	b.n	8005408 <pulsador+0xc84>
 8005362:	bf00      	nop
 8005364:	2000c6ab 	.word	0x2000c6ab
 8005368:	2000c566 	.word	0x2000c566
 800536c:	0020307f 	.word	0x0020307f
 8005370:	2000c568 	.word	0x2000c568
 8005374:	2000c56c 	.word	0x2000c56c
 8005378:	2000c56d 	.word	0x2000c56d
 800537c:	2000c6c3 	.word	0x2000c6c3
 8005380:	20000930 	.word	0x20000930
 8005384:	2000c6c4 	.word	0x2000c6c4
 8005388:	2000c6ac 	.word	0x2000c6ac
 800538c:	2000c6c5 	.word	0x2000c6c5
 8005390:	2000c6ad 	.word	0x2000c6ad
 8005394:	2000c6c6 	.word	0x2000c6c6
 8005398:	2000c6ae 	.word	0x2000c6ae
 800539c:	2000c6c7 	.word	0x2000c6c7
		}
		else
		{
			if (!flag_puls_29)
 80053a0:	4b81      	ldr	r3, [pc, #516]	; (80055a8 <pulsador+0xe24>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f083 0301 	eor.w	r3, r3, #1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d02c      	beq.n	8005408 <pulsador+0xc84>
			{
				cod_com = 14;
 80053ae:	4b7f      	ldr	r3, [pc, #508]	; (80055ac <pulsador+0xe28>)
 80053b0:	220e      	movs	r2, #14
 80053b2:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 80053b4:	4b7d      	ldr	r3, [pc, #500]	; (80055ac <pulsador+0xe28>)
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	4b7d      	ldr	r3, [pc, #500]	; (80055b0 <pulsador+0xe2c>)
 80053bc:	4413      	add	r3, r2
 80053be:	019b      	lsls	r3, r3, #6
 80053c0:	3305      	adds	r3, #5
 80053c2:	461a      	mov	r2, r3
 80053c4:	4b7b      	ldr	r3, [pc, #492]	; (80055b4 <pulsador+0xe30>)
 80053c6:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 80053c8:	4b7a      	ldr	r3, [pc, #488]	; (80055b4 <pulsador+0xe30>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	4b7a      	ldr	r3, [pc, #488]	; (80055b8 <pulsador+0xe34>)
 80053d0:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 80053d2:	4b76      	ldr	r3, [pc, #472]	; (80055ac <pulsador+0xe28>)
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	4b75      	ldr	r3, [pc, #468]	; (80055b0 <pulsador+0xe2c>)
 80053da:	4413      	add	r3, r2
 80053dc:	019b      	lsls	r3, r3, #6
 80053de:	3306      	adds	r3, #6
 80053e0:	461a      	mov	r2, r3
 80053e2:	4b74      	ldr	r3, [pc, #464]	; (80055b4 <pulsador+0xe30>)
 80053e4:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 80053e6:	4b73      	ldr	r3, [pc, #460]	; (80055b4 <pulsador+0xe30>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	781a      	ldrb	r2, [r3, #0]
 80053ec:	4b73      	ldr	r3, [pc, #460]	; (80055bc <pulsador+0xe38>)
 80053ee:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 80053f0:	f7ff f97e 	bl	80046f0 <ejecutar_comando>
				flag_puls_29 = true;
 80053f4:	4b6c      	ldr	r3, [pc, #432]	; (80055a8 <pulsador+0xe24>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	e005      	b.n	8005408 <pulsador+0xc84>
			}
		}
	}
	else
	{
		flag_pulsador_29 = false;  //
 80053fc:	4b70      	ldr	r3, [pc, #448]	; (80055c0 <pulsador+0xe3c>)
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
		flag_puls_29 = false;
 8005402:	4b69      	ldr	r3, [pc, #420]	; (80055a8 <pulsador+0xe24>)
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 30 ======================================================
	if ((Buffer_mem_D [3] & 0b00100000) == 0b00100000)
 8005408:	4b6e      	ldr	r3, [pc, #440]	; (80055c4 <pulsador+0xe40>)
 800540a:	78db      	ldrb	r3, [r3, #3]
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	2b00      	cmp	r3, #0
 8005412:	d038      	beq.n	8005486 <pulsador+0xd02>
	{
		if (!flag_pulsador_30)
 8005414:	4b6c      	ldr	r3, [pc, #432]	; (80055c8 <pulsador+0xe44>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f083 0301 	eor.w	r3, r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <pulsador+0xca6>
		{
			flag_pulsador_30 = true;  //
 8005422:	4b69      	ldr	r3, [pc, #420]	; (80055c8 <pulsador+0xe44>)
 8005424:	2201      	movs	r2, #1
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	e033      	b.n	8005492 <pulsador+0xd0e>
		}
		else
		{
			if (!flag_puls_30)
 800542a:	4b68      	ldr	r3, [pc, #416]	; (80055cc <pulsador+0xe48>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	f083 0301 	eor.w	r3, r3, #1
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d02c      	beq.n	8005492 <pulsador+0xd0e>
			{
				cod_com = 15;
 8005438:	4b5c      	ldr	r3, [pc, #368]	; (80055ac <pulsador+0xe28>)
 800543a:	220f      	movs	r2, #15
 800543c:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 800543e:	4b5b      	ldr	r3, [pc, #364]	; (80055ac <pulsador+0xe28>)
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	4b5a      	ldr	r3, [pc, #360]	; (80055b0 <pulsador+0xe2c>)
 8005446:	4413      	add	r3, r2
 8005448:	019b      	lsls	r3, r3, #6
 800544a:	3305      	adds	r3, #5
 800544c:	461a      	mov	r2, r3
 800544e:	4b59      	ldr	r3, [pc, #356]	; (80055b4 <pulsador+0xe30>)
 8005450:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8005452:	4b58      	ldr	r3, [pc, #352]	; (80055b4 <pulsador+0xe30>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	781a      	ldrb	r2, [r3, #0]
 8005458:	4b57      	ldr	r3, [pc, #348]	; (80055b8 <pulsador+0xe34>)
 800545a:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 800545c:	4b53      	ldr	r3, [pc, #332]	; (80055ac <pulsador+0xe28>)
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	4b53      	ldr	r3, [pc, #332]	; (80055b0 <pulsador+0xe2c>)
 8005464:	4413      	add	r3, r2
 8005466:	019b      	lsls	r3, r3, #6
 8005468:	3306      	adds	r3, #6
 800546a:	461a      	mov	r2, r3
 800546c:	4b51      	ldr	r3, [pc, #324]	; (80055b4 <pulsador+0xe30>)
 800546e:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8005470:	4b50      	ldr	r3, [pc, #320]	; (80055b4 <pulsador+0xe30>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	781a      	ldrb	r2, [r3, #0]
 8005476:	4b51      	ldr	r3, [pc, #324]	; (80055bc <pulsador+0xe38>)
 8005478:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 800547a:	f7ff f939 	bl	80046f0 <ejecutar_comando>
				flag_puls_30 = true;
 800547e:	4b53      	ldr	r3, [pc, #332]	; (80055cc <pulsador+0xe48>)
 8005480:	2201      	movs	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	e005      	b.n	8005492 <pulsador+0xd0e>
			}
		}
	}
	else
	{
		flag_pulsador_30 = false;  //
 8005486:	4b50      	ldr	r3, [pc, #320]	; (80055c8 <pulsador+0xe44>)
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]
		flag_puls_30 = false;
 800548c:	4b4f      	ldr	r3, [pc, #316]	; (80055cc <pulsador+0xe48>)
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 31 ======================================================
	if ((Buffer_mem_D [3] & 0b01000000) == 0b01000000)
 8005492:	4b4c      	ldr	r3, [pc, #304]	; (80055c4 <pulsador+0xe40>)
 8005494:	78db      	ldrb	r3, [r3, #3]
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d038      	beq.n	8005510 <pulsador+0xd8c>
	{
		if (!flag_pulsador_31)
 800549e:	4b4c      	ldr	r3, [pc, #304]	; (80055d0 <pulsador+0xe4c>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	f083 0301 	eor.w	r3, r3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <pulsador+0xd30>
		{
			flag_pulsador_31 = true;  //
 80054ac:	4b48      	ldr	r3, [pc, #288]	; (80055d0 <pulsador+0xe4c>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	e033      	b.n	800551c <pulsador+0xd98>
		}
		else
		{
			if (!flag_puls_31)
 80054b4:	4b47      	ldr	r3, [pc, #284]	; (80055d4 <pulsador+0xe50>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	f083 0301 	eor.w	r3, r3, #1
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d02c      	beq.n	800551c <pulsador+0xd98>
			{
				cod_com = 14;
 80054c2:	4b3a      	ldr	r3, [pc, #232]	; (80055ac <pulsador+0xe28>)
 80054c4:	220e      	movs	r2, #14
 80054c6:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 80054c8:	4b38      	ldr	r3, [pc, #224]	; (80055ac <pulsador+0xe28>)
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	4b38      	ldr	r3, [pc, #224]	; (80055b0 <pulsador+0xe2c>)
 80054d0:	4413      	add	r3, r2
 80054d2:	019b      	lsls	r3, r3, #6
 80054d4:	3305      	adds	r3, #5
 80054d6:	461a      	mov	r2, r3
 80054d8:	4b36      	ldr	r3, [pc, #216]	; (80055b4 <pulsador+0xe30>)
 80054da:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 80054dc:	4b35      	ldr	r3, [pc, #212]	; (80055b4 <pulsador+0xe30>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <pulsador+0xe34>)
 80054e4:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 80054e6:	4b31      	ldr	r3, [pc, #196]	; (80055ac <pulsador+0xe28>)
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <pulsador+0xe2c>)
 80054ee:	4413      	add	r3, r2
 80054f0:	019b      	lsls	r3, r3, #6
 80054f2:	3306      	adds	r3, #6
 80054f4:	461a      	mov	r2, r3
 80054f6:	4b2f      	ldr	r3, [pc, #188]	; (80055b4 <pulsador+0xe30>)
 80054f8:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 80054fa:	4b2e      	ldr	r3, [pc, #184]	; (80055b4 <pulsador+0xe30>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	781a      	ldrb	r2, [r3, #0]
 8005500:	4b2e      	ldr	r3, [pc, #184]	; (80055bc <pulsador+0xe38>)
 8005502:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 8005504:	f7ff f8f4 	bl	80046f0 <ejecutar_comando>
				flag_puls_31 = true;
 8005508:	4b32      	ldr	r3, [pc, #200]	; (80055d4 <pulsador+0xe50>)
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e005      	b.n	800551c <pulsador+0xd98>
			}
		}
	}
	else
	{
		flag_pulsador_31 = false;  //
 8005510:	4b2f      	ldr	r3, [pc, #188]	; (80055d0 <pulsador+0xe4c>)
 8005512:	2200      	movs	r2, #0
 8005514:	701a      	strb	r2, [r3, #0]
		flag_puls_31 = false;
 8005516:	4b2f      	ldr	r3, [pc, #188]	; (80055d4 <pulsador+0xe50>)
 8005518:	2200      	movs	r2, #0
 800551a:	701a      	strb	r2, [r3, #0]
	}

	//==== Pulsador 32 ======================================================
	if ((Buffer_mem_D [3] & 0b10000000) == 0b10000000)
 800551c:	4b29      	ldr	r3, [pc, #164]	; (80055c4 <pulsador+0xe40>)
 800551e:	78db      	ldrb	r3, [r3, #3]
 8005520:	b25b      	sxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	da38      	bge.n	8005598 <pulsador+0xe14>
	{
		if (!flag_pulsador_32)
 8005526:	4b2c      	ldr	r3, [pc, #176]	; (80055d8 <pulsador+0xe54>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	f083 0301 	eor.w	r3, r3, #1
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <pulsador+0xdb8>
		{
			flag_pulsador_32 = true;  //
 8005534:	4b28      	ldr	r3, [pc, #160]	; (80055d8 <pulsador+0xe54>)
 8005536:	2201      	movs	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
	else
	{
		flag_pulsador_32 = false;  //
		flag_puls_32 = false;
	}
}
 800553a:	e033      	b.n	80055a4 <pulsador+0xe20>
			if (!flag_puls_32)
 800553c:	4b27      	ldr	r3, [pc, #156]	; (80055dc <pulsador+0xe58>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f083 0301 	eor.w	r3, r3, #1
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d02c      	beq.n	80055a4 <pulsador+0xe20>
				cod_com = 15;
 800554a:	4b18      	ldr	r3, [pc, #96]	; (80055ac <pulsador+0xe28>)
 800554c:	220f      	movs	r2, #15
 800554e:	801a      	strh	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 4 + 1;
 8005550:	4b16      	ldr	r3, [pc, #88]	; (80055ac <pulsador+0xe28>)
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	4b16      	ldr	r3, [pc, #88]	; (80055b0 <pulsador+0xe2c>)
 8005558:	4413      	add	r3, r2
 800555a:	019b      	lsls	r3, r3, #6
 800555c:	3305      	adds	r3, #5
 800555e:	461a      	mov	r2, r3
 8005560:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <pulsador+0xe30>)
 8005562:	601a      	str	r2, [r3, #0]
				val_com = *(uint8_t*) punt_com;  //
 8005564:	4b13      	ldr	r3, [pc, #76]	; (80055b4 <pulsador+0xe30>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	781a      	ldrb	r2, [r3, #0]
 800556a:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <pulsador+0xe34>)
 800556c:	701a      	strb	r2, [r3, #0]
				punt_com = (PAQ_001_COM + (cod_com - 1) * 64) + 5 + 1;
 800556e:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <pulsador+0xe28>)
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <pulsador+0xe2c>)
 8005576:	4413      	add	r3, r2
 8005578:	019b      	lsls	r3, r3, #6
 800557a:	3306      	adds	r3, #6
 800557c:	461a      	mov	r2, r3
 800557e:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <pulsador+0xe30>)
 8005580:	601a      	str	r2, [r3, #0]
				val_com2 = *(uint8_t*) punt_com;  //
 8005582:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <pulsador+0xe30>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <pulsador+0xe38>)
 800558a:	701a      	strb	r2, [r3, #0]
				ejecutar_comando();
 800558c:	f7ff f8b0 	bl	80046f0 <ejecutar_comando>
				flag_puls_32 = true;
 8005590:	4b12      	ldr	r3, [pc, #72]	; (80055dc <pulsador+0xe58>)
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
}
 8005596:	e005      	b.n	80055a4 <pulsador+0xe20>
		flag_pulsador_32 = false;  //
 8005598:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <pulsador+0xe54>)
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
		flag_puls_32 = false;
 800559e:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <pulsador+0xe58>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	701a      	strb	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	2000c6af 	.word	0x2000c6af
 80055ac:	2000c566 	.word	0x2000c566
 80055b0:	0020307f 	.word	0x0020307f
 80055b4:	2000c568 	.word	0x2000c568
 80055b8:	2000c56c 	.word	0x2000c56c
 80055bc:	2000c56d 	.word	0x2000c56d
 80055c0:	2000c6c7 	.word	0x2000c6c7
 80055c4:	20000930 	.word	0x20000930
 80055c8:	2000c6c8 	.word	0x2000c6c8
 80055cc:	2000c6b0 	.word	0x2000c6b0
 80055d0:	2000c6c9 	.word	0x2000c6c9
 80055d4:	2000c6b1 	.word	0x2000c6b1
 80055d8:	2000c6ca 	.word	0x2000c6ca
 80055dc:	2000c6b2 	.word	0x2000c6b2

080055e0 <ctrl_relay>:
///	//(cvm)

//==============================================================
//========== TIM 7 (500mseg) /CTRL + ADC[12V] + DS18B20[Temperatura]
void ctrl_relay (void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
	spiv2_ctrl_49();          //Control hacia el Scada +/- 13ms
 80055e4:	f000 f92a 	bl	800583c <spiv2_ctrl_49>

	pulsador();  //(cvm)
 80055e8:	f7ff f8cc 	bl	8004784 <pulsador>

	//--------------- ENTRADA DIG. AUXILIAR [EA1, EA2, EA3] ------------------
	  if (HAL_GPIO_ReadPin(EA1_GPIO_Port, EA1_Pin) == GPIO_PIN_RESET)
 80055ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055f0:	4824      	ldr	r0, [pc, #144]	; (8005684 <ctrl_relay+0xa4>)
 80055f2:	f006 fccf 	bl	800bf94 <HAL_GPIO_ReadPin>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d107      	bne.n	800560c <ctrl_relay+0x2c>
	  {
		  ent_auxiliar = ent_auxiliar & 0b11111110;
 80055fc:	4b22      	ldr	r3, [pc, #136]	; (8005688 <ctrl_relay+0xa8>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	b2da      	uxtb	r2, r3
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <ctrl_relay+0xa8>)
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e006      	b.n	800561a <ctrl_relay+0x3a>
	  }
	  else
	  {
		  ent_auxiliar = ent_auxiliar | 0b00000001;
 800560c:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <ctrl_relay+0xa8>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	f043 0301 	orr.w	r3, r3, #1
 8005614:	b2da      	uxtb	r2, r3
 8005616:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <ctrl_relay+0xa8>)
 8005618:	701a      	strb	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(EA2_GPIO_Port, EA2_Pin) == GPIO_PIN_RESET)
 800561a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800561e:	481b      	ldr	r0, [pc, #108]	; (800568c <ctrl_relay+0xac>)
 8005620:	f006 fcb8 	bl	800bf94 <HAL_GPIO_ReadPin>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d107      	bne.n	800563a <ctrl_relay+0x5a>
	  {
		  ent_auxiliar = ent_auxiliar & 0b11111101;
 800562a:	4b17      	ldr	r3, [pc, #92]	; (8005688 <ctrl_relay+0xa8>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	f023 0302 	bic.w	r3, r3, #2
 8005632:	b2da      	uxtb	r2, r3
 8005634:	4b14      	ldr	r3, [pc, #80]	; (8005688 <ctrl_relay+0xa8>)
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	e006      	b.n	8005648 <ctrl_relay+0x68>
	  }
	  else
	  {
		  ent_auxiliar = ent_auxiliar | 0b00000010;
 800563a:	4b13      	ldr	r3, [pc, #76]	; (8005688 <ctrl_relay+0xa8>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	f043 0302 	orr.w	r3, r3, #2
 8005642:	b2da      	uxtb	r2, r3
 8005644:	4b10      	ldr	r3, [pc, #64]	; (8005688 <ctrl_relay+0xa8>)
 8005646:	701a      	strb	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(EA3_GPIO_Port, EA3_Pin) == GPIO_PIN_RESET)
 8005648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800564c:	480f      	ldr	r0, [pc, #60]	; (800568c <ctrl_relay+0xac>)
 800564e:	f006 fca1 	bl	800bf94 <HAL_GPIO_ReadPin>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d107      	bne.n	8005668 <ctrl_relay+0x88>
	  {
		  ent_auxiliar = ent_auxiliar & 0b11111011;
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <ctrl_relay+0xa8>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	f023 0304 	bic.w	r3, r3, #4
 8005660:	b2da      	uxtb	r2, r3
 8005662:	4b09      	ldr	r3, [pc, #36]	; (8005688 <ctrl_relay+0xa8>)
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	e006      	b.n	8005676 <ctrl_relay+0x96>
	  }
	  else
	  {
		  ent_auxiliar = ent_auxiliar | 0b00000100;
 8005668:	4b07      	ldr	r3, [pc, #28]	; (8005688 <ctrl_relay+0xa8>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f043 0304 	orr.w	r3, r3, #4
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <ctrl_relay+0xa8>)
 8005674:	701a      	strb	r2, [r3, #0]
	  }
//	  Buffer_mem_D[50] = ent_auxiliar;		//(cvm191022) para Morugo
	  Buffer_mem_D[36] = ent_auxiliar;		//(cvm191022) para pruebas de cámaras.
 8005676:	4b04      	ldr	r3, [pc, #16]	; (8005688 <ctrl_relay+0xa8>)
 8005678:	781a      	ldrb	r2, [r3, #0]
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <ctrl_relay+0xb0>)
 800567c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 8005680:	bf00      	nop
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40020800 	.word	0x40020800
 8005688:	20003cfd 	.word	0x20003cfd
 800568c:	40020000 	.word	0x40020000
 8005690:	20000930 	.word	0x20000930
 8005694:	00000000 	.word	0x00000000

08005698 <adc_ds18b20>:

void adc_ds18b20(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
	//***** ADC para Tension ***********************************************
	  HAL_ADC_Start(&hadc1);                    // Inicia el ADC
 800569e:	483e      	ldr	r0, [pc, #248]	; (8005798 <adc_ds18b20+0x100>)
 80056a0:	f004 ff84 	bl	800a5ac <HAL_ADC_Start>
	  //HAL_ADC_PollForConversion(&hadc1, 100);   // Encuesta para Conversion
	  adc_valor = HAL_ADC_GetValue(&hadc1);     // Obtener el valor de ADC
 80056a4:	483c      	ldr	r0, [pc, #240]	; (8005798 <adc_ds18b20+0x100>)
 80056a6:	f005 f84f 	bl	800a748 <HAL_ADC_GetValue>
 80056aa:	4603      	mov	r3, r0
 80056ac:	4a3b      	ldr	r2, [pc, #236]	; (800579c <adc_ds18b20+0x104>)
 80056ae:	6013      	str	r3, [r2, #0]
	  //HAL_ADC_Stop(&hadc1);                     // Detener el ADC
	  //------------------------------------
	  volt12 = adc_valor/15.675;                // Calcular el Valor Tension 12V [ADC1_IN0]-> PA0
 80056b0:	4b3a      	ldr	r3, [pc, #232]	; (800579c <adc_ds18b20+0x104>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fa ff3d 	bl	8000534 <__aeabi_ui2d>
 80056ba:	a335      	add	r3, pc, #212	; (adr r3, 8005790 <adc_ds18b20+0xf8>)
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f7fb f8dc 	bl	800087c <__aeabi_ddiv>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4610      	mov	r0, r2
 80056ca:	4619      	mov	r1, r3
 80056cc:	f7fb fa5c 	bl	8000b88 <__aeabi_d2uiz>
 80056d0:	4603      	mov	r3, r0
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	4b32      	ldr	r3, [pc, #200]	; (80057a0 <adc_ds18b20+0x108>)
 80056d6:	701a      	strb	r2, [r3, #0]
	  Buffer_mem_A [0] = volt12;				// volt12 [3][2][1][0]
 80056d8:	4b31      	ldr	r3, [pc, #196]	; (80057a0 <adc_ds18b20+0x108>)
 80056da:	781a      	ldrb	r2, [r3, #0]
 80056dc:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <adc_ds18b20+0x10c>)
 80056de:	701a      	strb	r2, [r3, #0]

	//***** DS18B20 TEMPERATURA - Leer los datos desde el SCRATCHPAD *******
	  presence = DS18B20_Start ();
 80056e0:	f7fb fc98 	bl	8001014 <DS18B20_Start>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	4b2f      	ldr	r3, [pc, #188]	; (80057a8 <adc_ds18b20+0x110>)
 80056ea:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 80056ec:	2001      	movs	r0, #1
 80056ee:	f004 fef5 	bl	800a4dc <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 80056f2:	20cc      	movs	r0, #204	; 0xcc
 80056f4:	f7fb fcc2 	bl	800107c <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 80056f8:	20be      	movs	r0, #190	; 0xbe
 80056fa:	f7fb fcbf 	bl	800107c <DS18B20_Write>
	  for (int i=0; i<5; i++)
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	e00b      	b.n	800571c <adc_ds18b20+0x84>
	  {
		  Scratchpad [i] = DS18B20_Read(); // Scratchpad [TempL, TempH, Th, Tl, Config]
 8005704:	f7fb fd06 	bl	8001114 <DS18B20_Read>
 8005708:	4603      	mov	r3, r0
 800570a:	4619      	mov	r1, r3
 800570c:	4a27      	ldr	r2, [pc, #156]	; (80057ac <adc_ds18b20+0x114>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	460a      	mov	r2, r1
 8005714:	701a      	strb	r2, [r3, #0]
	  for (int i=0; i<5; i++)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3301      	adds	r3, #1
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b04      	cmp	r3, #4
 8005720:	ddf0      	ble.n	8005704 <adc_ds18b20+0x6c>
	  }
	  temp = (Scratchpad [1]<<8) | Scratchpad [0];
 8005722:	4b22      	ldr	r3, [pc, #136]	; (80057ac <adc_ds18b20+0x114>)
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	b21a      	sxth	r2, r3
 800572a:	4b20      	ldr	r3, [pc, #128]	; (80057ac <adc_ds18b20+0x114>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	b21b      	sxth	r3, r3
 8005730:	4313      	orrs	r3, r2
 8005732:	b21b      	sxth	r3, r3
 8005734:	b29a      	uxth	r2, r3
 8005736:	4b1e      	ldr	r3, [pc, #120]	; (80057b0 <adc_ds18b20+0x118>)
 8005738:	801a      	strh	r2, [r3, #0]
	  temperatura = (float)temp/16;
 800573a:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <adc_ds18b20+0x118>)
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005746:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800574a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800574e:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <adc_ds18b20+0x11c>)
 8005750:	edc3 7a00 	vstr	s15, [r3]
	//------------------------------------
	  Buffer_mem_A [4] = temperatura;	// Valor [7][6][5][4] (Temperatura)
 8005754:	4b17      	ldr	r3, [pc, #92]	; (80057b4 <adc_ds18b20+0x11c>)
 8005756:	edd3 7a00 	vldr	s15, [r3]
 800575a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800575e:	edc7 7a01 	vstr	s15, [r7, #4]
 8005762:	793b      	ldrb	r3, [r7, #4]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <adc_ds18b20+0x10c>)
 8005768:	711a      	strb	r2, [r3, #4]
	//-----------------------------------------------------------------------
	  presence = DS18B20_Start ();
 800576a:	f7fb fc53 	bl	8001014 <DS18B20_Start>
 800576e:	4603      	mov	r3, r0
 8005770:	461a      	mov	r2, r3
 8005772:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <adc_ds18b20+0x110>)
 8005774:	701a      	strb	r2, [r3, #0]
	  HAL_Delay (1);
 8005776:	2001      	movs	r0, #1
 8005778:	f004 feb0 	bl	800a4dc <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 800577c:	20cc      	movs	r0, #204	; 0xcc
 800577e:	f7fb fc7d 	bl	800107c <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8005782:	2044      	movs	r0, #68	; 0x44
 8005784:	f7fb fc7a 	bl	800107c <DS18B20_Write>
	  //HAL_Delay (100);  // Resolucion p/ 9bit(100), 10bit(200), 11bit(400), 12bit(800)

}
 8005788:	bf00      	nop
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	9999999a 	.word	0x9999999a
 8005794:	402f5999 	.word	0x402f5999
 8005798:	200000b4 	.word	0x200000b4
 800579c:	20003ce8 	.word	0x20003ce8
 80057a0:	20003cec 	.word	0x20003cec
 80057a4:	20000d74 	.word	0x20000d74
 80057a8:	20003cfc 	.word	0x20003cfc
 80057ac:	20003cf0 	.word	0x20003cf0
 80057b0:	20003cf6 	.word	0x20003cf6
 80057b4:	20003cf8 	.word	0x20003cf8

080057b8 <spiv2_ctrl_49_init>:

//==========================================================================================
//  CTRL /  TIMERS uS nS / TIM1
//==========================================================================================
void spiv2_ctrl_49_init (void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPIV2_P_S_GPIO_Port, SPIV2_P_S_Pin, GPIO_PIN_RESET);  //P-S
 80057be:	2200      	movs	r2, #0
 80057c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057c4:	481a      	ldr	r0, [pc, #104]	; (8005830 <spiv2_ctrl_49_init+0x78>)
 80057c6:	f006 fbfd 	bl	800bfc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIV2_CLK_GPIO_Port, SPIV2_CLK_Pin, GPIO_PIN_RESET);  //CLOCK
 80057ca:	2200      	movs	r2, #0
 80057cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057d0:	4817      	ldr	r0, [pc, #92]	; (8005830 <spiv2_ctrl_49_init+0x78>)
 80057d2:	f006 fbf7 	bl	800bfc4 <HAL_GPIO_WritePin>
	HAL_Delay(1); //
 80057d6:	2001      	movs	r0, #1
 80057d8:	f004 fe80 	bl	800a4dc <HAL_Delay>
	HAL_GPIO_WritePin(SPIV2_P_S_GPIO_Port, SPIV2_P_S_Pin, GPIO_PIN_SET);  //P-S
 80057dc:	2201      	movs	r2, #1
 80057de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057e2:	4813      	ldr	r0, [pc, #76]	; (8005830 <spiv2_ctrl_49_init+0x78>)
 80057e4:	f006 fbee 	bl	800bfc4 <HAL_GPIO_WritePin>
	HAL_Delay(1); //
 80057e8:	2001      	movs	r0, #1
 80057ea:	f004 fe77 	bl	800a4dc <HAL_Delay>
	HAL_GPIO_WritePin(SPIV2_P_S_GPIO_Port, SPIV2_P_S_Pin, GPIO_PIN_RESET);  //P-S
 80057ee:	2200      	movs	r2, #0
 80057f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057f4:	480e      	ldr	r0, [pc, #56]	; (8005830 <spiv2_ctrl_49_init+0x78>)
 80057f6:	f006 fbe5 	bl	800bfc4 <HAL_GPIO_WritePin>
	HAL_Delay(1); //
 80057fa:	2001      	movs	r0, #1
 80057fc:	f004 fe6e 	bl	800a4dc <HAL_Delay>
	//===============================
	for (uint8_t k=0; k<50; k++)  //60
 8005800:	2300      	movs	r3, #0
 8005802:	71fb      	strb	r3, [r7, #7]
 8005804:	e00c      	b.n	8005820 <spiv2_ctrl_49_init+0x68>
	{
		dato_spiv2 = 0;
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <spiv2_ctrl_49_init+0x7c>)
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]
		spiv2_byte8();
 800580c:	f000 fc9e 	bl	800614c <spiv2_byte8>
		Buffer_mem_D_temp[k] = dato_spiv2;
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	4a08      	ldr	r2, [pc, #32]	; (8005834 <spiv2_ctrl_49_init+0x7c>)
 8005814:	7811      	ldrb	r1, [r2, #0]
 8005816:	4a08      	ldr	r2, [pc, #32]	; (8005838 <spiv2_ctrl_49_init+0x80>)
 8005818:	54d1      	strb	r1, [r2, r3]
	for (uint8_t k=0; k<50; k++)  //60
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	3301      	adds	r3, #1
 800581e:	71fb      	strb	r3, [r7, #7]
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	2b31      	cmp	r3, #49	; 0x31
 8005824:	d9ef      	bls.n	8005806 <spiv2_ctrl_49_init+0x4e>
	}
}
 8005826:	bf00      	nop
 8005828:	bf00      	nop
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40021000 	.word	0x40021000
 8005834:	2000c677 	.word	0x2000c677
 8005838:	20002db4 	.word	0x20002db4

0800583c <spiv2_ctrl_49>:

void spiv2_ctrl_49 (void)
{
 800583c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005840:	b098      	sub	sp, #96	; 0x60
 8005842:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPIV2_P_S_GPIO_Port, SPIV2_P_S_Pin, GPIO_PIN_RESET);  //P-S
 8005844:	2200      	movs	r2, #0
 8005846:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800584a:	4852      	ldr	r0, [pc, #328]	; (8005994 <spiv2_ctrl_49+0x158>)
 800584c:	f006 fbba 	bl	800bfc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIV2_CLK_GPIO_Port, SPIV2_CLK_Pin, GPIO_PIN_RESET);  //CLOCK
 8005850:	2200      	movs	r2, #0
 8005852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005856:	484f      	ldr	r0, [pc, #316]	; (8005994 <spiv2_ctrl_49+0x158>)
 8005858:	f006 fbb4 	bl	800bfc4 <HAL_GPIO_WritePin>
	HAL_Delay(1); //
 800585c:	2001      	movs	r0, #1
 800585e:	f004 fe3d 	bl	800a4dc <HAL_Delay>
	HAL_GPIO_WritePin(SPIV2_P_S_GPIO_Port, SPIV2_P_S_Pin, GPIO_PIN_SET);  //P-S
 8005862:	2201      	movs	r2, #1
 8005864:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005868:	484a      	ldr	r0, [pc, #296]	; (8005994 <spiv2_ctrl_49+0x158>)
 800586a:	f006 fbab 	bl	800bfc4 <HAL_GPIO_WritePin>
	HAL_Delay(1); //
 800586e:	2001      	movs	r0, #1
 8005870:	f004 fe34 	bl	800a4dc <HAL_Delay>
	HAL_GPIO_WritePin(SPIV2_P_S_GPIO_Port, SPIV2_P_S_Pin, GPIO_PIN_RESET);  //P-S
 8005874:	2200      	movs	r2, #0
 8005876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800587a:	4846      	ldr	r0, [pc, #280]	; (8005994 <spiv2_ctrl_49+0x158>)
 800587c:	f006 fba2 	bl	800bfc4 <HAL_GPIO_WritePin>
	HAL_Delay(1); //
 8005880:	2001      	movs	r0, #1
 8005882:	f004 fe2b 	bl	800a4dc <HAL_Delay>
	//===============================
	for (uint8_t k=0; k<50; k++)  //60
 8005886:	2300      	movs	r3, #0
 8005888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800588c:	e00f      	b.n	80058ae <spiv2_ctrl_49+0x72>
	{
		dato_spiv2 = 0;
 800588e:	4a42      	ldr	r2, [pc, #264]	; (8005998 <spiv2_ctrl_49+0x15c>)
 8005890:	2300      	movs	r3, #0
 8005892:	7013      	strb	r3, [r2, #0]
		spiv2_byte8();
 8005894:	f000 fc5a 	bl	800614c <spiv2_byte8>
		Buffer_mem_D[k] = dato_spiv2;
 8005898:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 800589c:	4b3e      	ldr	r3, [pc, #248]	; (8005998 <spiv2_ctrl_49+0x15c>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	4a3e      	ldr	r2, [pc, #248]	; (800599c <spiv2_ctrl_49+0x160>)
 80058a2:	5453      	strb	r3, [r2, r1]
	for (uint8_t k=0; k<50; k++)  //60
 80058a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058a8:	3301      	adds	r3, #1
 80058aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80058ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058b2:	2b31      	cmp	r3, #49	; 0x31
 80058b4:	d9eb      	bls.n	800588e <spiv2_ctrl_49+0x52>
	}

	//  DETECCION DE VARIACION EN LAS ENTRADAS PARA RESPUESTA NO SOLICITADA
	//Punt_Buffer_UR = 0;
	for(uint16_t j=4; j<50; j++)  //for(uint16_t j=0; j<50; j++)  //60
 80058b6:	2304      	movs	r3, #4
 80058b8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80058bc:	e1e3      	b.n	8005c86 <spiv2_ctrl_49+0x44a>
	{
		if (Buffer_mem_D [j] != Buffer_mem_D_temp [j])
 80058be:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80058c2:	4b36      	ldr	r3, [pc, #216]	; (800599c <spiv2_ctrl_49+0x160>)
 80058c4:	5c99      	ldrb	r1, [r3, r2]
 80058c6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80058ca:	4b35      	ldr	r3, [pc, #212]	; (80059a0 <spiv2_ctrl_49+0x164>)
 80058cc:	5c9b      	ldrb	r3, [r3, r2]
 80058ce:	4299      	cmp	r1, r3
 80058d0:	f000 81d4 	beq.w	8005c7c <spiv2_ctrl_49+0x440>
		{
			//Flag_mem_D_temp = 1;
			Var_aux_UR = Buffer_mem_D [j] ^ Buffer_mem_D_temp [j];
 80058d4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80058d8:	4b30      	ldr	r3, [pc, #192]	; (800599c <spiv2_ctrl_49+0x160>)
 80058da:	5c99      	ldrb	r1, [r3, r2]
 80058dc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80058e0:	4b2f      	ldr	r3, [pc, #188]	; (80059a0 <spiv2_ctrl_49+0x164>)
 80058e2:	5c9b      	ldrb	r3, [r3, r2]
 80058e4:	404b      	eors	r3, r1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	4a2e      	ldr	r2, [pc, #184]	; (80059a4 <spiv2_ctrl_49+0x168>)
 80058ec:	8013      	strh	r3, [r2, #0]
			if (Var_aux_UR)
 80058ee:	4b2d      	ldr	r3, [pc, #180]	; (80059a4 <spiv2_ctrl_49+0x168>)
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 81ba 	beq.w	8005c6c <spiv2_ctrl_49+0x430>
			{
				for(uint8_t k=0; k<8; k++)
 80058f8:	2300      	movs	r3, #0
 80058fa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80058fe:	e1b0      	b.n	8005c62 <spiv2_ctrl_49+0x426>
				{
					if(Var_aux_UR & 1)
 8005900:	4b28      	ldr	r3, [pc, #160]	; (80059a4 <spiv2_ctrl_49+0x168>)
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 819f 	beq.w	8005c4c <spiv2_ctrl_49+0x410>
					{
					    conv_a_epoch();  //
 800590e:	f000 fc67 	bl	80061e0 <conv_a_epoch>
						Ent_dnp_UR = j * 8 + k;  //crc_h = crc >> 8;
 8005912:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	b29a      	uxth	r2, r3
 800591a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800591e:	b29b      	uxth	r3, r3
 8005920:	4413      	add	r3, r2
 8005922:	b29b      	uxth	r3, r3
 8005924:	4a20      	ldr	r2, [pc, #128]	; (80059a8 <spiv2_ctrl_49+0x16c>)
 8005926:	8013      	strh	r3, [r2, #0]

						Buffer_UR [Punt_Buffer_UR][0] = Ent_dnp_UR % 256; // Parte baja (módulo 256)
 8005928:	4b1f      	ldr	r3, [pc, #124]	; (80059a8 <spiv2_ctrl_49+0x16c>)
 800592a:	881a      	ldrh	r2, [r3, #0]
 800592c:	4b1f      	ldr	r3, [pc, #124]	; (80059ac <spiv2_ctrl_49+0x170>)
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	4619      	mov	r1, r3
 8005932:	b2d0      	uxtb	r0, r2
 8005934:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <spiv2_ctrl_49+0x174>)
 8005936:	460b      	mov	r3, r1
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	440b      	add	r3, r1
 800593c:	441a      	add	r2, r3
 800593e:	4603      	mov	r3, r0
 8005940:	7013      	strb	r3, [r2, #0]
						Buffer_UR [Punt_Buffer_UR][1] = Ent_dnp_UR >> 8;  // Parte alta (División entera)
 8005942:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <spiv2_ctrl_49+0x16c>)
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	0a1b      	lsrs	r3, r3, #8
 8005948:	b29a      	uxth	r2, r3
 800594a:	4b18      	ldr	r3, [pc, #96]	; (80059ac <spiv2_ctrl_49+0x170>)
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	4619      	mov	r1, r3
 8005950:	b2d0      	uxtb	r0, r2
 8005952:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <spiv2_ctrl_49+0x174>)
 8005954:	460b      	mov	r3, r1
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	440b      	add	r3, r1
 800595a:	4413      	add	r3, r2
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	4603      	mov	r3, r0
 8005960:	7013      	strb	r3, [r2, #0]

						if(Buffer_mem_D [j] & (1<<k))
 8005962:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8005966:	4b0d      	ldr	r3, [pc, #52]	; (800599c <spiv2_ctrl_49+0x160>)
 8005968:	5c9b      	ldrb	r3, [r3, r2]
 800596a:	461a      	mov	r2, r3
 800596c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005970:	fa42 f303 	asr.w	r3, r2, r3
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01b      	beq.n	80059b4 <spiv2_ctrl_49+0x178>
						{
							Buffer_UR [Punt_Buffer_UR][2] = 129; //1;
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <spiv2_ctrl_49+0x170>)
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	4619      	mov	r1, r3
 8005982:	4a0b      	ldr	r2, [pc, #44]	; (80059b0 <spiv2_ctrl_49+0x174>)
 8005984:	460b      	mov	r3, r1
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	440b      	add	r3, r1
 800598a:	4413      	add	r3, r2
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	2381      	movs	r3, #129	; 0x81
 8005990:	7013      	strb	r3, [r2, #0]
 8005992:	e01a      	b.n	80059ca <spiv2_ctrl_49+0x18e>
 8005994:	40021000 	.word	0x40021000
 8005998:	2000c677 	.word	0x2000c677
 800599c:	20000930 	.word	0x20000930
 80059a0:	20002db4 	.word	0x20002db4
 80059a4:	20003ba2 	.word	0x20003ba2
 80059a8:	20003ba0 	.word	0x20003ba0
 80059ac:	20003b9c 	.word	0x20003b9c
 80059b0:	2000329c 	.word	0x2000329c
						}
						else
						{
							Buffer_UR [Punt_Buffer_UR][2] = 128; //0;
 80059b4:	4bc8      	ldr	r3, [pc, #800]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	4619      	mov	r1, r3
 80059ba:	4ac8      	ldr	r2, [pc, #800]	; (8005cdc <spiv2_ctrl_49+0x4a0>)
 80059bc:	460b      	mov	r3, r1
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	440b      	add	r3, r1
 80059c2:	4413      	add	r3, r2
 80059c4:	1c9a      	adds	r2, r3, #2
 80059c6:	2380      	movs	r3, #128	; 0x80
 80059c8:	7013      	strb	r3, [r2, #0]
						}

						tiempo_epoch_aux = tiempo_epoch*1000 + calendario [3]/256*1000; // En milisegundos
 80059ca:	4bc5      	ldr	r3, [pc, #788]	; (8005ce0 <spiv2_ctrl_49+0x4a4>)
 80059cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80059d0:	4622      	mov	r2, r4
 80059d2:	462b      	mov	r3, r5
 80059d4:	f04f 0000 	mov.w	r0, #0
 80059d8:	f04f 0100 	mov.w	r1, #0
 80059dc:	0159      	lsls	r1, r3, #5
 80059de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059e2:	0150      	lsls	r0, r2, #5
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	ebb2 0804 	subs.w	r8, r2, r4
 80059ec:	eb63 0905 	sbc.w	r9, r3, r5
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80059fc:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8005a00:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8005a04:	4690      	mov	r8, r2
 8005a06:	4699      	mov	r9, r3
 8005a08:	eb18 0304 	adds.w	r3, r8, r4
 8005a0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a0e:	eb49 0305 	adc.w	r3, r9, r5
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8005a20:	4629      	mov	r1, r5
 8005a22:	00cb      	lsls	r3, r1, #3
 8005a24:	4621      	mov	r1, r4
 8005a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	00ca      	lsls	r2, r1, #3
 8005a2e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005a32:	4610      	mov	r0, r2
 8005a34:	4619      	mov	r1, r3
 8005a36:	4bab      	ldr	r3, [pc, #684]	; (8005ce4 <spiv2_ctrl_49+0x4a8>)
 8005a38:	78db      	ldrb	r3, [r3, #3]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	da00      	bge.n	8005a40 <spiv2_ctrl_49+0x204>
 8005a3e:	33ff      	adds	r3, #255	; 0xff
 8005a40:	121b      	asrs	r3, r3, #8
 8005a42:	461a      	mov	r2, r3
 8005a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a48:	fb02 f303 	mul.w	r3, r2, r3
 8005a4c:	17da      	asrs	r2, r3, #31
 8005a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a52:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8005a56:	4623      	mov	r3, r4
 8005a58:	18c3      	adds	r3, r0, r3
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	eb41 0303 	adc.w	r3, r1, r3
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
 8005a64:	4ba0      	ldr	r3, [pc, #640]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005a66:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a6a:	e9c3 1200 	strd	r1, r2, [r3]
						Buffer_UR [Punt_Buffer_UR][8] = tiempo_epoch_aux/1099511627776; //256^5
 8005a6e:	4b9e      	ldr	r3, [pc, #632]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f04f 0000 	mov.w	r0, #0
 8005a78:	f04f 0100 	mov.w	r1, #0
 8005a7c:	0a18      	lsrs	r0, r3, #8
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4b95      	ldr	r3, [pc, #596]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	461c      	mov	r4, r3
 8005a86:	b2c1      	uxtb	r1, r0
 8005a88:	4a94      	ldr	r2, [pc, #592]	; (8005cdc <spiv2_ctrl_49+0x4a0>)
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	4423      	add	r3, r4
 8005a90:	4413      	add	r3, r2
 8005a92:	f103 0208 	add.w	r2, r3, #8
 8005a96:	460b      	mov	r3, r1
 8005a98:	7013      	strb	r3, [r2, #0]
						tiempo_epoch_aux = tiempo_epoch*1000 % 1099511627776;
 8005a9a:	4b91      	ldr	r3, [pc, #580]	; (8005ce0 <spiv2_ctrl_49+0x4a4>)
 8005a9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	462b      	mov	r3, r5
 8005aa4:	f04f 0000 	mov.w	r0, #0
 8005aa8:	f04f 0100 	mov.w	r1, #0
 8005aac:	0159      	lsls	r1, r3, #5
 8005aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ab2:	0150      	lsls	r0, r2, #5
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	ebb2 0a04 	subs.w	sl, r2, r4
 8005abc:	eb63 0b05 	sbc.w	fp, r3, r5
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8005acc:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8005ad0:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8005ad4:	4692      	mov	sl, r2
 8005ad6:	469b      	mov	fp, r3
 8005ad8:	eb1a 0304 	adds.w	r3, sl, r4
 8005adc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ade:	eb4b 0305 	adc.w	r3, fp, r5
 8005ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005af0:	4629      	mov	r1, r5
 8005af2:	00cb      	lsls	r3, r1, #3
 8005af4:	4621      	mov	r1, r4
 8005af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005afa:	4621      	mov	r1, r4
 8005afc:	00ca      	lsls	r2, r1, #3
 8005afe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005b02:	f022 0107 	bic.w	r1, r2, #7
 8005b06:	61b9      	str	r1, [r7, #24]
 8005b08:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	4b76      	ldr	r3, [pc, #472]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005b10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b14:	e9c3 1200 	strd	r1, r2, [r3]
						Buffer_UR [Punt_Buffer_UR][7] = tiempo_epoch_aux/4294967296;    //256^4
 8005b18:	4b73      	ldr	r3, [pc, #460]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	f04f 0000 	mov.w	r0, #0
 8005b22:	f04f 0100 	mov.w	r1, #0
 8005b26:	0018      	movs	r0, r3
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4b6b      	ldr	r3, [pc, #428]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	461c      	mov	r4, r3
 8005b30:	b2c1      	uxtb	r1, r0
 8005b32:	4a6a      	ldr	r2, [pc, #424]	; (8005cdc <spiv2_ctrl_49+0x4a0>)
 8005b34:	4623      	mov	r3, r4
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4423      	add	r3, r4
 8005b3a:	4413      	add	r3, r2
 8005b3c:	1dda      	adds	r2, r3, #7
 8005b3e:	460b      	mov	r3, r1
 8005b40:	7013      	strb	r3, [r2, #0]
						tiempo_epoch_aux = tiempo_epoch_aux % 4294967296;
 8005b42:	4b69      	ldr	r3, [pc, #420]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	613a      	str	r2, [r7, #16]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	4b66      	ldr	r3, [pc, #408]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005b50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b54:	e9c3 1200 	strd	r1, r2, [r3]
						Buffer_UR [Punt_Buffer_UR][6] = tiempo_epoch_aux/16777216;      //256^3
 8005b58:	4b63      	ldr	r3, [pc, #396]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f04f 0000 	mov.w	r0, #0
 8005b62:	f04f 0100 	mov.w	r1, #0
 8005b66:	0e10      	lsrs	r0, r2, #24
 8005b68:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005b6c:	0e19      	lsrs	r1, r3, #24
 8005b6e:	4b5a      	ldr	r3, [pc, #360]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	461c      	mov	r4, r3
 8005b74:	b2c1      	uxtb	r1, r0
 8005b76:	4a59      	ldr	r2, [pc, #356]	; (8005cdc <spiv2_ctrl_49+0x4a0>)
 8005b78:	4623      	mov	r3, r4
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4423      	add	r3, r4
 8005b7e:	4413      	add	r3, r2
 8005b80:	1d9a      	adds	r2, r3, #6
 8005b82:	460b      	mov	r3, r1
 8005b84:	7013      	strb	r3, [r2, #0]
						tiempo_epoch_aux = tiempo_epoch_aux % 16777216;
 8005b86:	4b58      	ldr	r3, [pc, #352]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	4b54      	ldr	r3, [pc, #336]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005b98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b9c:	e9c3 1200 	strd	r1, r2, [r3]
						Buffer_UR [Punt_Buffer_UR][5] = tiempo_epoch_aux/65536;         //256^2
 8005ba0:	4b51      	ldr	r3, [pc, #324]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f04f 0000 	mov.w	r0, #0
 8005baa:	f04f 0100 	mov.w	r1, #0
 8005bae:	0c10      	lsrs	r0, r2, #16
 8005bb0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8005bb4:	0c19      	lsrs	r1, r3, #16
 8005bb6:	4b48      	ldr	r3, [pc, #288]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	461c      	mov	r4, r3
 8005bbc:	b2c1      	uxtb	r1, r0
 8005bbe:	4a47      	ldr	r2, [pc, #284]	; (8005cdc <spiv2_ctrl_49+0x4a0>)
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4423      	add	r3, r4
 8005bc6:	4413      	add	r3, r2
 8005bc8:	1d5a      	adds	r2, r3, #5
 8005bca:	460b      	mov	r3, r1
 8005bcc:	7013      	strb	r3, [r2, #0]
						tiempo_epoch_aux = tiempo_epoch_aux % 65536;
 8005bce:	4b46      	ldr	r3, [pc, #280]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	b293      	uxth	r3, r2
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	607b      	str	r3, [r7, #4]
 8005bdc:	4b42      	ldr	r3, [pc, #264]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005bde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005be2:	e9c3 1200 	strd	r1, r2, [r3]
						Buffer_UR [Punt_Buffer_UR][4] = tiempo_epoch_aux/256;           //256^1
 8005be6:	4b40      	ldr	r3, [pc, #256]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f04f 0000 	mov.w	r0, #0
 8005bf0:	f04f 0100 	mov.w	r1, #0
 8005bf4:	0a10      	lsrs	r0, r2, #8
 8005bf6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8005bfa:	0a19      	lsrs	r1, r3, #8
 8005bfc:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	461c      	mov	r4, r3
 8005c02:	b2c1      	uxtb	r1, r0
 8005c04:	4a35      	ldr	r2, [pc, #212]	; (8005cdc <spiv2_ctrl_49+0x4a0>)
 8005c06:	4623      	mov	r3, r4
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	4423      	add	r3, r4
 8005c0c:	4413      	add	r3, r2
 8005c0e:	1d1a      	adds	r2, r3, #4
 8005c10:	460b      	mov	r3, r1
 8005c12:	7013      	strb	r3, [r2, #0]
						Buffer_UR [Punt_Buffer_UR][3] = tiempo_epoch_aux % 256;         //256^0
 8005c14:	4b34      	ldr	r3, [pc, #208]	; (8005ce8 <spiv2_ctrl_49+0x4ac>)
 8005c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c1a:	4b2f      	ldr	r3, [pc, #188]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	461c      	mov	r4, r3
 8005c20:	b2c1      	uxtb	r1, r0
 8005c22:	4a2e      	ldr	r2, [pc, #184]	; (8005cdc <spiv2_ctrl_49+0x4a0>)
 8005c24:	4623      	mov	r3, r4
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4423      	add	r3, r4
 8005c2a:	4413      	add	r3, r2
 8005c2c:	1cda      	adds	r2, r3, #3
 8005c2e:	460b      	mov	r3, r1
 8005c30:	7013      	strb	r3, [r2, #0]

						Punt_Buffer_UR++;  //// ok
 8005c32:	4b29      	ldr	r3, [pc, #164]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	3301      	adds	r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 8005c3c:	8013      	strh	r3, [r2, #0]
						if (Punt_Buffer_UR == 10)
 8005c3e:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	2b0a      	cmp	r3, #10
 8005c44:	d102      	bne.n	8005c4c <spiv2_ctrl_49+0x410>
						{
							Punt_Buffer_UR = 9;
 8005c46:	4a24      	ldr	r2, [pc, #144]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 8005c48:	2309      	movs	r3, #9
 8005c4a:	8013      	strh	r3, [r2, #0]
						}
					}
					Var_aux_UR = Var_aux_UR >> 1;
 8005c4c:	4b27      	ldr	r3, [pc, #156]	; (8005cec <spiv2_ctrl_49+0x4b0>)
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	4a25      	ldr	r2, [pc, #148]	; (8005cec <spiv2_ctrl_49+0x4b0>)
 8005c56:	8013      	strh	r3, [r2, #0]
				for(uint8_t k=0; k<8; k++)
 8005c58:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8005c62:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005c66:	2b07      	cmp	r3, #7
 8005c68:	f67f ae4a 	bls.w	8005900 <spiv2_ctrl_49+0xc4>
				}
			}
			Buffer_mem_D_temp [j] = Buffer_mem_D [j];
 8005c6c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8005c70:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8005c74:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <spiv2_ctrl_49+0x4b4>)
 8005c76:	5c9b      	ldrb	r3, [r3, r2]
 8005c78:	4a1e      	ldr	r2, [pc, #120]	; (8005cf4 <spiv2_ctrl_49+0x4b8>)
 8005c7a:	5453      	strb	r3, [r2, r1]
	for(uint16_t j=4; j<50; j++)  //for(uint16_t j=0; j<50; j++)  //60
 8005c7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c80:	3301      	adds	r3, #1
 8005c82:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005c86:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c8a:	2b31      	cmp	r3, #49	; 0x31
 8005c8c:	f67f ae17 	bls.w	80058be <spiv2_ctrl_49+0x82>
			//Punt_Buffer_UR++;
		}
	}

	//Ver si hay variaciones, y si las hay, enviar respuesta ---------
	if (Punt_Buffer_UR)
 8005c90:	4b11      	ldr	r3, [pc, #68]	; (8005cd8 <spiv2_ctrl_49+0x49c>)
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8235 	beq.w	8006104 <spiv2_ctrl_49+0x8c8>
	{
		//Armar respuesta
		Paq_UR [0] = 5;
 8005c9a:	4b17      	ldr	r3, [pc, #92]	; (8005cf8 <spiv2_ctrl_49+0x4bc>)
 8005c9c:	2205      	movs	r2, #5
 8005c9e:	701a      	strb	r2, [r3, #0]
		Paq_UR [1] = 100;
 8005ca0:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <spiv2_ctrl_49+0x4bc>)
 8005ca2:	2264      	movs	r2, #100	; 0x64
 8005ca4:	705a      	strb	r2, [r3, #1]
		// [2] --> Long
		Paq_UR [3] = 68;
 8005ca6:	4b14      	ldr	r3, [pc, #80]	; (8005cf8 <spiv2_ctrl_49+0x4bc>)
 8005ca8:	2244      	movs	r2, #68	; 0x44
 8005caa:	70da      	strb	r2, [r3, #3]
		Paq_UR [4] = MASTER & 255; // MASTER_L
 8005cac:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <spiv2_ctrl_49+0x4c0>)
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <spiv2_ctrl_49+0x4bc>)
 8005cb4:	711a      	strb	r2, [r3, #4]
		Paq_UR [5] = MASTER / 256; // MASTER_H
 8005cb6:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <spiv2_ctrl_49+0x4c0>)
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	0a1b      	lsrs	r3, r3, #8
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <spiv2_ctrl_49+0x4bc>)
 8005cc2:	715a      	strb	r2, [r3, #5]
		Paq_UR [6] = ID & 255; // ID_L
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <spiv2_ctrl_49+0x4c4>)
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <spiv2_ctrl_49+0x4bc>)
 8005ccc:	719a      	strb	r2, [r3, #6]
		Paq_UR [7] = ID / 256; // ID_H
 8005cce:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <spiv2_ctrl_49+0x4c4>)
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	0a1b      	lsrs	r3, r3, #8
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	e015      	b.n	8005d04 <spiv2_ctrl_49+0x4c8>
 8005cd8:	20003b9c 	.word	0x20003b9c
 8005cdc:	2000329c 	.word	0x2000329c
 8005ce0:	20003cb8 	.word	0x20003cb8
 8005ce4:	20003cac 	.word	0x20003cac
 8005ce8:	20003cc0 	.word	0x20003cc0
 8005cec:	20003ba2 	.word	0x20003ba2
 8005cf0:	20000930 	.word	0x20000930
 8005cf4:	20002db4 	.word	0x20002db4
 8005cf8:	20003ba4 	.word	0x20003ba4
 8005cfc:	20000920 	.word	0x20000920
 8005d00:	2000091e 	.word	0x2000091e
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	4b97      	ldr	r3, [pc, #604]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005d08:	71da      	strb	r2, [r3, #7]
		// [8] --> CRC
		// [9] --> CRC
		Paq_UR [10] = 192;      // Preguntar cuál sería la secuencia
 8005d0a:	4b96      	ldr	r3, [pc, #600]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005d0c:	22c0      	movs	r2, #192	; 0xc0
 8005d0e:	729a      	strb	r2, [r3, #10]
		Paq_UR [11] = 192 | 16; // Preguntar cuál sería la secuencia
 8005d10:	4b94      	ldr	r3, [pc, #592]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005d12:	22d0      	movs	r2, #208	; 0xd0
 8005d14:	72da      	strb	r2, [r3, #11]
		Paq_UR [12] = 130;      // Función correspondiente a respuesta no solicitada
 8005d16:	4b93      	ldr	r3, [pc, #588]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005d18:	2282      	movs	r2, #130	; 0x82
 8005d1a:	731a      	strb	r2, [r3, #12]
		Paq_UR [13] = 0b10010000;  // INN
 8005d1c:	4b91      	ldr	r3, [pc, #580]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005d1e:	2290      	movs	r2, #144	; 0x90
 8005d20:	735a      	strb	r2, [r3, #13]
		Paq_UR [14] = 0b00000000;  // INN
 8005d22:	4b90      	ldr	r3, [pc, #576]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	739a      	strb	r2, [r3, #14]
		Paq_UR [15] = 2;
 8005d28:	4b8e      	ldr	r3, [pc, #568]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	73da      	strb	r2, [r3, #15]
		Paq_UR [16] = 2;
 8005d2e:	4b8d      	ldr	r3, [pc, #564]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005d30:	2202      	movs	r2, #2
 8005d32:	741a      	strb	r2, [r3, #16]
		Paq_UR [17] = 40;  //40
 8005d34:	4b8b      	ldr	r3, [pc, #556]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005d36:	2228      	movs	r2, #40	; 0x28
 8005d38:	745a      	strb	r2, [r3, #17]
		Paq_UR [18] = Punt_Buffer_UR;  //
 8005d3a:	4b8b      	ldr	r3, [pc, #556]	; (8005f68 <spiv2_ctrl_49+0x72c>)
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	4b88      	ldr	r3, [pc, #544]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005d42:	749a      	strb	r2, [r3, #18]

		Punt_Buffer_UR_Tx = 18;  //19
 8005d44:	4b89      	ldr	r3, [pc, #548]	; (8005f6c <spiv2_ctrl_49+0x730>)
 8005d46:	2212      	movs	r2, #18
 8005d48:	801a      	strh	r2, [r3, #0]

		Prox_crc_UR_Tx = 26;
 8005d4a:	4b89      	ldr	r3, [pc, #548]	; (8005f70 <spiv2_ctrl_49+0x734>)
 8005d4c:	221a      	movs	r2, #26
 8005d4e:	801a      	strh	r2, [r3, #0]

		for(uint8_t l=0; l<Punt_Buffer_UR; l++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8005d56:	e029      	b.n	8005dac <spiv2_ctrl_49+0x570>
		{
			for	(uint8_t c=0; c<9; c++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8005d5e:	e01c      	b.n	8005d9a <spiv2_ctrl_49+0x55e>
			{
				Punt_Buffer_UR_Tx++;
 8005d60:	4b82      	ldr	r3, [pc, #520]	; (8005f6c <spiv2_ctrl_49+0x730>)
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	4b80      	ldr	r3, [pc, #512]	; (8005f6c <spiv2_ctrl_49+0x730>)
 8005d6a:	801a      	strh	r2, [r3, #0]
				analizar_UR_Tx();
 8005d6c:	f7fe f938 	bl	8003fe0 <analizar_UR_Tx>
				Paq_UR [Punt_Buffer_UR_Tx] = Buffer_UR [l][c];
 8005d70:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8005d74:	f897 1059 	ldrb.w	r1, [r7, #89]	; 0x59
 8005d78:	4b7c      	ldr	r3, [pc, #496]	; (8005f6c <spiv2_ctrl_49+0x730>)
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	461c      	mov	r4, r3
 8005d7e:	487d      	ldr	r0, [pc, #500]	; (8005f74 <spiv2_ctrl_49+0x738>)
 8005d80:	4613      	mov	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4413      	add	r3, r2
 8005d86:	4403      	add	r3, r0
 8005d88:	440b      	add	r3, r1
 8005d8a:	781a      	ldrb	r2, [r3, #0]
 8005d8c:	4b75      	ldr	r3, [pc, #468]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005d8e:	551a      	strb	r2, [r3, r4]
			for	(uint8_t c=0; c<9; c++)
 8005d90:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8005d94:	3301      	adds	r3, #1
 8005d96:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8005d9a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d9de      	bls.n	8005d60 <spiv2_ctrl_49+0x524>
		for(uint8_t l=0; l<Punt_Buffer_UR; l++)
 8005da2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8005da6:	3301      	adds	r3, #1
 8005da8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8005dac:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	4b6d      	ldr	r3, [pc, #436]	; (8005f68 <spiv2_ctrl_49+0x72c>)
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d3ce      	bcc.n	8005d58 <spiv2_ctrl_49+0x51c>
			}
		}
		Punt_Buffer_UR_Tx++;
 8005dba:	4b6c      	ldr	r3, [pc, #432]	; (8005f6c <spiv2_ctrl_49+0x730>)
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	4b6a      	ldr	r3, [pc, #424]	; (8005f6c <spiv2_ctrl_49+0x730>)
 8005dc4:	801a      	strh	r2, [r3, #0]
		Paq_UR [2] = calc_long_tx (Punt_Buffer_UR_Tx + 2);
 8005dc6:	4b69      	ldr	r3, [pc, #420]	; (8005f6c <spiv2_ctrl_49+0x730>)
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	3302      	adds	r3, #2
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fd f93d 	bl	8003050 <calc_long_tx>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b62      	ldr	r3, [pc, #392]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005ddc:	709a      	strb	r2, [r3, #2]

		//====================CALCULO CRC DNP / CRC 01====================
			crc=0x0000;
 8005dde:	4b66      	ldr	r3, [pc, #408]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	801a      	strh	r2, [r3, #0]
			n=8;
 8005de4:	4b65      	ldr	r3, [pc, #404]	; (8005f7c <spiv2_ctrl_49+0x740>)
 8005de6:	2208      	movs	r2, #8
 8005de8:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<n; j++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	657b      	str	r3, [r7, #84]	; 0x54
 8005dee:	e010      	b.n	8005e12 <spiv2_ctrl_49+0x5d6>
				{
				variable = Paq_UR [j];
 8005df0:	4a5c      	ldr	r2, [pc, #368]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df4:	4413      	add	r3, r2
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	4b61      	ldr	r3, [pc, #388]	; (8005f80 <spiv2_ctrl_49+0x744>)
 8005dfc:	801a      	strh	r2, [r3, #0]
				computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8005dfe:	4b60      	ldr	r3, [pc, #384]	; (8005f80 <spiv2_ctrl_49+0x744>)
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	4619      	mov	r1, r3
 8005e06:	485c      	ldr	r0, [pc, #368]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005e08:	f7fb f860 	bl	8000ecc <computeCRC>
			for(int j=0; j<n; j++)
 8005e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e0e:	3301      	adds	r3, #1
 8005e10:	657b      	str	r3, [r7, #84]	; 0x54
 8005e12:	4b5a      	ldr	r3, [pc, #360]	; (8005f7c <spiv2_ctrl_49+0x740>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	dbe8      	blt.n	8005df0 <spiv2_ctrl_49+0x5b4>
				}
			crc = ~crc;
 8005e1e:	4b56      	ldr	r3, [pc, #344]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	43db      	mvns	r3, r3
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	4b54      	ldr	r3, [pc, #336]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005e28:	801a      	strh	r2, [r3, #0]
			crc_l = crc;
 8005e2a:	4b53      	ldr	r3, [pc, #332]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	4b54      	ldr	r3, [pc, #336]	; (8005f84 <spiv2_ctrl_49+0x748>)
 8005e32:	701a      	strb	r2, [r3, #0]
			crc_h = crc >> 8;
 8005e34:	4b50      	ldr	r3, [pc, #320]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	0a1b      	lsrs	r3, r3, #8
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	4b52      	ldr	r3, [pc, #328]	; (8005f88 <spiv2_ctrl_49+0x74c>)
 8005e40:	701a      	strb	r2, [r3, #0]
			Paq_UR [8] = crc_l;
 8005e42:	4b50      	ldr	r3, [pc, #320]	; (8005f84 <spiv2_ctrl_49+0x748>)
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	4b47      	ldr	r3, [pc, #284]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005e48:	721a      	strb	r2, [r3, #8]
			Paq_UR [9] = crc_h;
 8005e4a:	4b4f      	ldr	r3, [pc, #316]	; (8005f88 <spiv2_ctrl_49+0x74c>)
 8005e4c:	781a      	ldrb	r2, [r3, #0]
 8005e4e:	4b45      	ldr	r3, [pc, #276]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005e50:	725a      	strb	r2, [r3, #9]
		//====================CALCULO CRC DNP / CRC 02. 08. ..nX=============
			uint8_t punt_crc= 10;
 8005e52:	230a      	movs	r3, #10
 8005e54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

			cant_crc_UR = (Punt_Buffer_UR_Tx + 2 - 11)/18+1;  // 2
 8005e58:	4b44      	ldr	r3, [pc, #272]	; (8005f6c <spiv2_ctrl_49+0x730>)
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	3b09      	subs	r3, #9
 8005e5e:	4a4b      	ldr	r2, [pc, #300]	; (8005f8c <spiv2_ctrl_49+0x750>)
 8005e60:	fb82 1203 	smull	r1, r2, r2, r3
 8005e64:	1092      	asrs	r2, r2, #2
 8005e66:	17db      	asrs	r3, r3, #31
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	4b47      	ldr	r3, [pc, #284]	; (8005f90 <spiv2_ctrl_49+0x754>)
 8005e72:	701a      	strb	r2, [r3, #0]
			cola_crc_UR = Punt_Buffer_UR_Tx + 2 - 10 - (cant_crc_UR - 1)*18 - 2;
 8005e74:	4b3d      	ldr	r3, [pc, #244]	; (8005f6c <spiv2_ctrl_49+0x730>)
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	4b45      	ldr	r3, [pc, #276]	; (8005f90 <spiv2_ctrl_49+0x754>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	00c9      	lsls	r1, r1, #3
 8005e82:	1acb      	subs	r3, r1, r3
 8005e84:	4619      	mov	r1, r3
 8005e86:	0108      	lsls	r0, r1, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	440b      	add	r3, r1
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	4413      	add	r3, r2
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	3308      	adds	r3, #8
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4b3e      	ldr	r3, [pc, #248]	; (8005f94 <spiv2_ctrl_49+0x758>)
 8005e9c:	701a      	strb	r2, [r3, #0]

			cant_crc_UR = cant_crc_UR - 1;
 8005e9e:	4b3c      	ldr	r3, [pc, #240]	; (8005f90 <spiv2_ctrl_49+0x754>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	4b3a      	ldr	r3, [pc, #232]	; (8005f90 <spiv2_ctrl_49+0x754>)
 8005ea8:	701a      	strb	r2, [r3, #0]
			for(int k=cant_crc_UR; k>0; k--)
 8005eaa:	4b39      	ldr	r3, [pc, #228]	; (8005f90 <spiv2_ctrl_49+0x754>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb0:	e04a      	b.n	8005f48 <spiv2_ctrl_49+0x70c>
				{
					//============================CALCULO CRC DNP====================
					crc=0x0000;
 8005eb2:	4b31      	ldr	r3, [pc, #196]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	801a      	strh	r2, [r3, #0]
					n=16;
 8005eb8:	4b30      	ldr	r3, [pc, #192]	; (8005f7c <spiv2_ctrl_49+0x740>)
 8005eba:	2210      	movs	r2, #16
 8005ebc:	701a      	strb	r2, [r3, #0]
					for(int j=0; j<n; j++)
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec2:	e013      	b.n	8005eec <spiv2_ctrl_49+0x6b0>
						{
						variable = (Paq_UR + punt_crc)[j];
 8005ec4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8005ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eca:	4413      	add	r3, r2
 8005ecc:	4a25      	ldr	r2, [pc, #148]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005ece:	4413      	add	r3, r2
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	4b2a      	ldr	r3, [pc, #168]	; (8005f80 <spiv2_ctrl_49+0x744>)
 8005ed6:	801a      	strh	r2, [r3, #0]
						computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8005ed8:	4b29      	ldr	r3, [pc, #164]	; (8005f80 <spiv2_ctrl_49+0x744>)
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4825      	ldr	r0, [pc, #148]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005ee2:	f7fa fff3 	bl	8000ecc <computeCRC>
					for(int j=0; j<n; j++)
 8005ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee8:	3301      	adds	r3, #1
 8005eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eec:	4b23      	ldr	r3, [pc, #140]	; (8005f7c <spiv2_ctrl_49+0x740>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	dbe5      	blt.n	8005ec4 <spiv2_ctrl_49+0x688>
						 }
					crc = ~crc;
 8005ef8:	4b1f      	ldr	r3, [pc, #124]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	4b1d      	ldr	r3, [pc, #116]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005f02:	801a      	strh	r2, [r3, #0]
					crc_l = crc;
 8005f04:	4b1c      	ldr	r3, [pc, #112]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	4b1e      	ldr	r3, [pc, #120]	; (8005f84 <spiv2_ctrl_49+0x748>)
 8005f0c:	701a      	strb	r2, [r3, #0]
					crc_h = crc >> 8;
 8005f0e:	4b1a      	ldr	r3, [pc, #104]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	0a1b      	lsrs	r3, r3, #8
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	4b1b      	ldr	r3, [pc, #108]	; (8005f88 <spiv2_ctrl_49+0x74c>)
 8005f1a:	701a      	strb	r2, [r3, #0]
					Paq_UR [punt_crc + 16] = crc_l;
 8005f1c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005f20:	3310      	adds	r3, #16
 8005f22:	4a18      	ldr	r2, [pc, #96]	; (8005f84 <spiv2_ctrl_49+0x748>)
 8005f24:	7811      	ldrb	r1, [r2, #0]
 8005f26:	4a0f      	ldr	r2, [pc, #60]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005f28:	54d1      	strb	r1, [r2, r3]
					Paq_UR [punt_crc + 17] = crc_h;
 8005f2a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005f2e:	3311      	adds	r3, #17
 8005f30:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <spiv2_ctrl_49+0x74c>)
 8005f32:	7811      	ldrb	r1, [r2, #0]
 8005f34:	4a0b      	ldr	r2, [pc, #44]	; (8005f64 <spiv2_ctrl_49+0x728>)
 8005f36:	54d1      	strb	r1, [r2, r3]
					//===============================================================
					punt_crc = punt_crc + 18;
 8005f38:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005f3c:	3312      	adds	r3, #18
 8005f3e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			for(int k=cant_crc_UR; k>0; k--)
 8005f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f44:	3b01      	subs	r3, #1
 8005f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dcb1      	bgt.n	8005eb2 <spiv2_ctrl_49+0x676>
				}
			//====================CALCULO CRC DNP / CRC .nX FINAL================
			crc=0x0000;
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <spiv2_ctrl_49+0x73c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	801a      	strh	r2, [r3, #0]
			n = cola_crc_UR;
 8005f54:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <spiv2_ctrl_49+0x758>)
 8005f56:	781a      	ldrb	r2, [r3, #0]
 8005f58:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <spiv2_ctrl_49+0x740>)
 8005f5a:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<n; j++)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f60:	e02e      	b.n	8005fc0 <spiv2_ctrl_49+0x784>
 8005f62:	bf00      	nop
 8005f64:	20003ba4 	.word	0x20003ba4
 8005f68:	20003b9c 	.word	0x20003b9c
 8005f6c:	20003ca4 	.word	0x20003ca4
 8005f70:	20003ca6 	.word	0x20003ca6
 8005f74:	2000329c 	.word	0x2000329c
 8005f78:	20003ce0 	.word	0x20003ce0
 8005f7c:	20000012 	.word	0x20000012
 8005f80:	20003ce4 	.word	0x20003ce4
 8005f84:	20003ce3 	.word	0x20003ce3
 8005f88:	20003ce2 	.word	0x20003ce2
 8005f8c:	38e38e39 	.word	0x38e38e39
 8005f90:	20003ca8 	.word	0x20003ca8
 8005f94:	20003ca9 	.word	0x20003ca9
			{
				variable = (Paq_UR + punt_crc)[j];
 8005f98:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8005f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9e:	4413      	add	r3, r2
 8005fa0:	4a5b      	ldr	r2, [pc, #364]	; (8006110 <spiv2_ctrl_49+0x8d4>)
 8005fa2:	4413      	add	r3, r2
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	4b5a      	ldr	r3, [pc, #360]	; (8006114 <spiv2_ctrl_49+0x8d8>)
 8005faa:	801a      	strh	r2, [r3, #0]
				computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8005fac:	4b59      	ldr	r3, [pc, #356]	; (8006114 <spiv2_ctrl_49+0x8d8>)
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4858      	ldr	r0, [pc, #352]	; (8006118 <spiv2_ctrl_49+0x8dc>)
 8005fb6:	f7fa ff89 	bl	8000ecc <computeCRC>
			for(int j=0; j<n; j++)
 8005fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc0:	4b56      	ldr	r3, [pc, #344]	; (800611c <spiv2_ctrl_49+0x8e0>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	dbe5      	blt.n	8005f98 <spiv2_ctrl_49+0x75c>
			}
			crc = ~crc;
 8005fcc:	4b52      	ldr	r3, [pc, #328]	; (8006118 <spiv2_ctrl_49+0x8dc>)
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	4b50      	ldr	r3, [pc, #320]	; (8006118 <spiv2_ctrl_49+0x8dc>)
 8005fd6:	801a      	strh	r2, [r3, #0]
			crc_l = crc;
 8005fd8:	4b4f      	ldr	r3, [pc, #316]	; (8006118 <spiv2_ctrl_49+0x8dc>)
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	4b50      	ldr	r3, [pc, #320]	; (8006120 <spiv2_ctrl_49+0x8e4>)
 8005fe0:	701a      	strb	r2, [r3, #0]
			crc_h = crc >> 8;
 8005fe2:	4b4d      	ldr	r3, [pc, #308]	; (8006118 <spiv2_ctrl_49+0x8dc>)
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	0a1b      	lsrs	r3, r3, #8
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	4b4d      	ldr	r3, [pc, #308]	; (8006124 <spiv2_ctrl_49+0x8e8>)
 8005fee:	701a      	strb	r2, [r3, #0]
			Paq_UR [punt_crc + cola_crc_UR] = crc_l;
 8005ff0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005ff4:	4a4c      	ldr	r2, [pc, #304]	; (8006128 <spiv2_ctrl_49+0x8ec>)
 8005ff6:	7812      	ldrb	r2, [r2, #0]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	4a49      	ldr	r2, [pc, #292]	; (8006120 <spiv2_ctrl_49+0x8e4>)
 8005ffc:	7811      	ldrb	r1, [r2, #0]
 8005ffe:	4a44      	ldr	r2, [pc, #272]	; (8006110 <spiv2_ctrl_49+0x8d4>)
 8006000:	54d1      	strb	r1, [r2, r3]
			Paq_UR [punt_crc + (cola_crc_UR + 1)] = crc_h;
 8006002:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8006006:	4b48      	ldr	r3, [pc, #288]	; (8006128 <spiv2_ctrl_49+0x8ec>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	3301      	adds	r3, #1
 800600c:	4413      	add	r3, r2
 800600e:	4a45      	ldr	r2, [pc, #276]	; (8006124 <spiv2_ctrl_49+0x8e8>)
 8006010:	7811      	ldrb	r1, [r2, #0]
 8006012:	4a3f      	ldr	r2, [pc, #252]	; (8006110 <spiv2_ctrl_49+0x8d4>)
 8006014:	54d1      	strb	r1, [r2, r3]
			//===============================================================
			// ******* deshabilitado para que funcione como el proyecto SAT *********

			// Paso Buffer a otro
			memcpy(Buffer_08_Tx, Paq_UR, sizeof(Paq_UR));
 8006016:	4a45      	ldr	r2, [pc, #276]	; (800612c <spiv2_ctrl_49+0x8f0>)
 8006018:	4b3d      	ldr	r3, [pc, #244]	; (8006110 <spiv2_ctrl_49+0x8d4>)
 800601a:	4610      	mov	r0, r2
 800601c:	4619      	mov	r1, r3
 800601e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006022:	461a      	mov	r2, r3
 8006024:	f009 fd80 	bl	800fb28 <memcpy>

			// Paso Buffer a otro
			for (uint8_t i=0; i<3;i++)
 8006028:	2300      	movs	r3, #0
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602e:	e00d      	b.n	800604c <spiv2_ctrl_49+0x810>
			{
				numero_ran[i] = HAL_RNG_GetRandomNumber(&hrng);
 8006030:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
 8006034:	483e      	ldr	r0, [pc, #248]	; (8006130 <spiv2_ctrl_49+0x8f4>)
 8006036:	f007 f95b 	bl	800d2f0 <HAL_RNG_GetRandomNumber>
 800603a:	4603      	mov	r3, r0
 800603c:	4a3d      	ldr	r2, [pc, #244]	; (8006134 <spiv2_ctrl_49+0x8f8>)
 800603e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for (uint8_t i=0; i<3;i++)
 8006042:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006046:	3301      	adds	r3, #1
 8006048:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006050:	2b02      	cmp	r3, #2
 8006052:	d9ed      	bls.n	8006030 <spiv2_ctrl_49+0x7f4>
			}

			//numero_ran[0] = HAL_RNG_GetRandomNumber(&hrng);
			numero_random = (numero_ran [0] % 100) + 0;
 8006054:	4b37      	ldr	r3, [pc, #220]	; (8006134 <spiv2_ctrl_49+0x8f8>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	4b37      	ldr	r3, [pc, #220]	; (8006138 <spiv2_ctrl_49+0x8fc>)
 800605a:	fba3 1302 	umull	r1, r3, r3, r2
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	2164      	movs	r1, #100	; 0x64
 8006062:	fb01 f303 	mul.w	r3, r1, r3
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	4a34      	ldr	r2, [pc, #208]	; (800613c <spiv2_ctrl_49+0x900>)
 800606a:	6013      	str	r3, [r2, #0]
			HAL_Delay (numero_random);
 800606c:	4b33      	ldr	r3, [pc, #204]	; (800613c <spiv2_ctrl_49+0x900>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f004 fa33 	bl	800a4dc <HAL_Delay>
			HAL_UART_Transmit(&huart8, Buffer_08_Tx, Punt_Buffer_UR_Tx + 2, 300);
 8006076:	4b32      	ldr	r3, [pc, #200]	; (8006140 <spiv2_ctrl_49+0x904>)
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	3302      	adds	r3, #2
 800607c:	b29a      	uxth	r2, r3
 800607e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006082:	492a      	ldr	r1, [pc, #168]	; (800612c <spiv2_ctrl_49+0x8f0>)
 8006084:	482f      	ldr	r0, [pc, #188]	; (8006144 <spiv2_ctrl_49+0x908>)
 8006086:	f008 fa11 	bl	800e4ac <HAL_UART_Transmit>

			//numero_ran[1] = HAL_RNG_GetRandomNumber(&hrng);
			numero_random = (numero_ran [1] % 100) + 300;
 800608a:	4b2a      	ldr	r3, [pc, #168]	; (8006134 <spiv2_ctrl_49+0x8f8>)
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	4b2a      	ldr	r3, [pc, #168]	; (8006138 <spiv2_ctrl_49+0x8fc>)
 8006090:	fba3 1302 	umull	r1, r3, r3, r2
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	2164      	movs	r1, #100	; 0x64
 8006098:	fb01 f303 	mul.w	r3, r1, r3
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80060a2:	4a26      	ldr	r2, [pc, #152]	; (800613c <spiv2_ctrl_49+0x900>)
 80060a4:	6013      	str	r3, [r2, #0]
			HAL_Delay (numero_random);
 80060a6:	4b25      	ldr	r3, [pc, #148]	; (800613c <spiv2_ctrl_49+0x900>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f004 fa16 	bl	800a4dc <HAL_Delay>
			HAL_UART_Transmit(&huart8, Buffer_08_Tx, Punt_Buffer_UR_Tx + 2, 300);
 80060b0:	4b23      	ldr	r3, [pc, #140]	; (8006140 <spiv2_ctrl_49+0x904>)
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	3302      	adds	r3, #2
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80060bc:	491b      	ldr	r1, [pc, #108]	; (800612c <spiv2_ctrl_49+0x8f0>)
 80060be:	4821      	ldr	r0, [pc, #132]	; (8006144 <spiv2_ctrl_49+0x908>)
 80060c0:	f008 f9f4 	bl	800e4ac <HAL_UART_Transmit>

			//numero_ran[2] = HAL_RNG_GetRandomNumber(&hrng);
			numero_random = (numero_ran [2] % 100) + 300;
 80060c4:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <spiv2_ctrl_49+0x8f8>)
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	4b1b      	ldr	r3, [pc, #108]	; (8006138 <spiv2_ctrl_49+0x8fc>)
 80060ca:	fba3 1302 	umull	r1, r3, r3, r2
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	2164      	movs	r1, #100	; 0x64
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80060dc:	4a17      	ldr	r2, [pc, #92]	; (800613c <spiv2_ctrl_49+0x900>)
 80060de:	6013      	str	r3, [r2, #0]
			HAL_Delay (numero_random);
 80060e0:	4b16      	ldr	r3, [pc, #88]	; (800613c <spiv2_ctrl_49+0x900>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f004 f9f9 	bl	800a4dc <HAL_Delay>
			HAL_UART_Transmit(&huart8, Buffer_08_Tx, Punt_Buffer_UR_Tx + 2, 300);
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <spiv2_ctrl_49+0x904>)
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	3302      	adds	r3, #2
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80060f6:	490d      	ldr	r1, [pc, #52]	; (800612c <spiv2_ctrl_49+0x8f0>)
 80060f8:	4812      	ldr	r0, [pc, #72]	; (8006144 <spiv2_ctrl_49+0x908>)
 80060fa:	f008 f9d7 	bl	800e4ac <HAL_UART_Transmit>

			Punt_Buffer_UR = 0;
 80060fe:	4b12      	ldr	r3, [pc, #72]	; (8006148 <spiv2_ctrl_49+0x90c>)
 8006100:	2200      	movs	r2, #0
 8006102:	801a      	strh	r2, [r3, #0]
           	//#################################################################
	}

}
 8006104:	bf00      	nop
 8006106:	3760      	adds	r7, #96	; 0x60
 8006108:	46bd      	mov	sp, r7
 800610a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800610e:	bf00      	nop
 8006110:	20003ba4 	.word	0x20003ba4
 8006114:	20003ce4 	.word	0x20003ce4
 8006118:	20003ce0 	.word	0x20003ce0
 800611c:	20000012 	.word	0x20000012
 8006120:	20003ce3 	.word	0x20003ce3
 8006124:	20003ce2 	.word	0x20003ce2
 8006128:	20003ca9 	.word	0x20003ca9
 800612c:	20003f20 	.word	0x20003f20
 8006130:	20000120 	.word	0x20000120
 8006134:	2000c680 	.word	0x2000c680
 8006138:	51eb851f 	.word	0x51eb851f
 800613c:	2000c68c 	.word	0x2000c68c
 8006140:	20003ca4 	.word	0x20003ca4
 8006144:	20000390 	.word	0x20000390
 8006148:	20003b9c 	.word	0x20003b9c

0800614c <spiv2_byte8>:

void spiv2_byte8 (void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0

	for (uint8_t j=0; j<8; j++)
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]
 8006156:	e034      	b.n	80061c2 <spiv2_byte8+0x76>
	{
		dato_spiv2 = dato_spiv2 >> 1;
 8006158:	4b1e      	ldr	r3, [pc, #120]	; (80061d4 <spiv2_byte8+0x88>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	b2da      	uxtb	r2, r3
 8006160:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <spiv2_byte8+0x88>)
 8006162:	701a      	strb	r2, [r3, #0]
		//dato_spiv2 = dato_spiv2 << 1;
		if(HAL_GPIO_ReadPin(SPIV2_ENT_GPIO_Port, SPIV2_ENT_Pin) == GPIO_PIN_SET)
 8006164:	2140      	movs	r1, #64	; 0x40
 8006166:	481c      	ldr	r0, [pc, #112]	; (80061d8 <spiv2_byte8+0x8c>)
 8006168:	f005 ff14 	bl	800bf94 <HAL_GPIO_ReadPin>
 800616c:	4603      	mov	r3, r0
 800616e:	2b01      	cmp	r3, #1
 8006170:	d106      	bne.n	8006180 <spiv2_byte8+0x34>
		{
			dato_spiv2 = dato_spiv2 | 128;
 8006172:	4b18      	ldr	r3, [pc, #96]	; (80061d4 <spiv2_byte8+0x88>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800617a:	b2da      	uxtb	r2, r3
 800617c:	4b15      	ldr	r3, [pc, #84]	; (80061d4 <spiv2_byte8+0x88>)
 800617e:	701a      	strb	r2, [r3, #0]
			//dato_spiv2 = dato_spiv2 | 1;
		}
		//==============================CLK
		for(int i=0; i<200; i++);  //15
 8006180:	2300      	movs	r3, #0
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	e002      	b.n	800618c <spiv2_byte8+0x40>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	3301      	adds	r3, #1
 800618a:	60bb      	str	r3, [r7, #8]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2bc7      	cmp	r3, #199	; 0xc7
 8006190:	ddf9      	ble.n	8006186 <spiv2_byte8+0x3a>
		HAL_GPIO_WritePin(SPIV2_CLK_GPIO_Port, SPIV2_CLK_Pin, GPIO_PIN_SET);  //CLOCK
 8006192:	2201      	movs	r2, #1
 8006194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006198:	4810      	ldr	r0, [pc, #64]	; (80061dc <spiv2_byte8+0x90>)
 800619a:	f005 ff13 	bl	800bfc4 <HAL_GPIO_WritePin>
		for(int i=0; i<200; i++);  //15
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
 80061a2:	e002      	b.n	80061aa <spiv2_byte8+0x5e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3301      	adds	r3, #1
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2bc7      	cmp	r3, #199	; 0xc7
 80061ae:	ddf9      	ble.n	80061a4 <spiv2_byte8+0x58>
		HAL_GPIO_WritePin(SPIV2_CLK_GPIO_Port, SPIV2_CLK_Pin, GPIO_PIN_RESET);  //CLOCK
 80061b0:	2200      	movs	r2, #0
 80061b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061b6:	4809      	ldr	r0, [pc, #36]	; (80061dc <spiv2_byte8+0x90>)
 80061b8:	f005 ff04 	bl	800bfc4 <HAL_GPIO_WritePin>
	for (uint8_t j=0; j<8; j++)
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	3301      	adds	r3, #1
 80061c0:	73fb      	strb	r3, [r7, #15]
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	2b07      	cmp	r3, #7
 80061c6:	d9c7      	bls.n	8006158 <spiv2_byte8+0xc>
		//==============================CLK

		//HAL_Delay(1); //
	}
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	2000c677 	.word	0x2000c677
 80061d8:	40020000 	.word	0x40020000
 80061dc:	40021000 	.word	0x40021000

080061e0 <conv_a_epoch>:

void conv_a_epoch (void)
{
 80061e0:	b490      	push	{r4, r7}
 80061e2:	af00      	add	r7, sp, #0
	y_seg = (2000 + calendario [6] - 1970)*60*60*24*365;
 80061e4:	4b57      	ldr	r3, [pc, #348]	; (8006344 <conv_a_epoch+0x164>)
 80061e6:	799b      	ldrb	r3, [r3, #6]
 80061e8:	331e      	adds	r3, #30
 80061ea:	4a57      	ldr	r2, [pc, #348]	; (8006348 <conv_a_epoch+0x168>)
 80061ec:	fb02 f303 	mul.w	r3, r2, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	4b56      	ldr	r3, [pc, #344]	; (800634c <conv_a_epoch+0x16c>)
 80061f4:	601a      	str	r2, [r3, #0]

	switch(calendario [5] - 1)
 80061f6:	4b53      	ldr	r3, [pc, #332]	; (8006344 <conv_a_epoch+0x164>)
 80061f8:	795b      	ldrb	r3, [r3, #5]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	2b0b      	cmp	r3, #11
 80061fe:	d84e      	bhi.n	800629e <conv_a_epoch+0xbe>
 8006200:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <conv_a_epoch+0x28>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	08006239 	.word	0x08006239
 800620c:	08006241 	.word	0x08006241
 8006210:	08006249 	.word	0x08006249
 8006214:	08006251 	.word	0x08006251
 8006218:	08006259 	.word	0x08006259
 800621c:	08006261 	.word	0x08006261
 8006220:	08006269 	.word	0x08006269
 8006224:	08006271 	.word	0x08006271
 8006228:	08006279 	.word	0x08006279
 800622c:	08006281 	.word	0x08006281
 8006230:	0800628b 	.word	0x0800628b
 8006234:	08006295 	.word	0x08006295
	{
		case 0:
			dias = 0;
 8006238:	4b45      	ldr	r3, [pc, #276]	; (8006350 <conv_a_epoch+0x170>)
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]
			break;
 800623e:	e02e      	b.n	800629e <conv_a_epoch+0xbe>
		case 1:
			dias = 31;
 8006240:	4b43      	ldr	r3, [pc, #268]	; (8006350 <conv_a_epoch+0x170>)
 8006242:	221f      	movs	r2, #31
 8006244:	601a      	str	r2, [r3, #0]
			break;
 8006246:	e02a      	b.n	800629e <conv_a_epoch+0xbe>
		case 2:
			dias = 31 + 28;
 8006248:	4b41      	ldr	r3, [pc, #260]	; (8006350 <conv_a_epoch+0x170>)
 800624a:	223b      	movs	r2, #59	; 0x3b
 800624c:	601a      	str	r2, [r3, #0]
			break;
 800624e:	e026      	b.n	800629e <conv_a_epoch+0xbe>
		case 3:
			dias = 31 + 28 + 31;
 8006250:	4b3f      	ldr	r3, [pc, #252]	; (8006350 <conv_a_epoch+0x170>)
 8006252:	225a      	movs	r2, #90	; 0x5a
 8006254:	601a      	str	r2, [r3, #0]
			break;
 8006256:	e022      	b.n	800629e <conv_a_epoch+0xbe>
		case 4:
			dias = 31 + 28 + 31 + 30;
 8006258:	4b3d      	ldr	r3, [pc, #244]	; (8006350 <conv_a_epoch+0x170>)
 800625a:	2278      	movs	r2, #120	; 0x78
 800625c:	601a      	str	r2, [r3, #0]
			break;
 800625e:	e01e      	b.n	800629e <conv_a_epoch+0xbe>
		case 5:
			dias = 31 + 28 + 31 + 30 + 31;
 8006260:	4b3b      	ldr	r3, [pc, #236]	; (8006350 <conv_a_epoch+0x170>)
 8006262:	2297      	movs	r2, #151	; 0x97
 8006264:	601a      	str	r2, [r3, #0]
			break;
 8006266:	e01a      	b.n	800629e <conv_a_epoch+0xbe>
		case 6:
			dias = 31 + 28 + 31 + 30 + 31 + 30;
 8006268:	4b39      	ldr	r3, [pc, #228]	; (8006350 <conv_a_epoch+0x170>)
 800626a:	22b5      	movs	r2, #181	; 0xb5
 800626c:	601a      	str	r2, [r3, #0]
			break;
 800626e:	e016      	b.n	800629e <conv_a_epoch+0xbe>
		case 7:
			dias = 31 + 28 + 31 + 30 + 31 + 30 + 31;
 8006270:	4b37      	ldr	r3, [pc, #220]	; (8006350 <conv_a_epoch+0x170>)
 8006272:	22d4      	movs	r2, #212	; 0xd4
 8006274:	601a      	str	r2, [r3, #0]
			break;
 8006276:	e012      	b.n	800629e <conv_a_epoch+0xbe>
		case 8:
			dias = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31;
 8006278:	4b35      	ldr	r3, [pc, #212]	; (8006350 <conv_a_epoch+0x170>)
 800627a:	22f3      	movs	r2, #243	; 0xf3
 800627c:	601a      	str	r2, [r3, #0]
			break;
 800627e:	e00e      	b.n	800629e <conv_a_epoch+0xbe>
		case 9:
			dias = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30;
 8006280:	4b33      	ldr	r3, [pc, #204]	; (8006350 <conv_a_epoch+0x170>)
 8006282:	f240 1211 	movw	r2, #273	; 0x111
 8006286:	601a      	str	r2, [r3, #0]
			break;
 8006288:	e009      	b.n	800629e <conv_a_epoch+0xbe>
		case 10:
			dias = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31;
 800628a:	4b31      	ldr	r3, [pc, #196]	; (8006350 <conv_a_epoch+0x170>)
 800628c:	f44f 7298 	mov.w	r2, #304	; 0x130
 8006290:	601a      	str	r2, [r3, #0]
			break;
 8006292:	e004      	b.n	800629e <conv_a_epoch+0xbe>
		case 11:
			dias = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 31;
 8006294:	4b2e      	ldr	r3, [pc, #184]	; (8006350 <conv_a_epoch+0x170>)
 8006296:	f240 124f 	movw	r2, #335	; 0x14f
 800629a:	601a      	str	r2, [r3, #0]
			break;
 800629c:	bf00      	nop
	}
	d_seg = (dias + calendario [4] - 1)*60*60*24;
 800629e:	4b29      	ldr	r3, [pc, #164]	; (8006344 <conv_a_epoch+0x164>)
 80062a0:	791b      	ldrb	r3, [r3, #4]
 80062a2:	461a      	mov	r2, r3
 80062a4:	4b2a      	ldr	r3, [pc, #168]	; (8006350 <conv_a_epoch+0x170>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4413      	add	r3, r2
 80062aa:	4a2a      	ldr	r2, [pc, #168]	; (8006354 <conv_a_epoch+0x174>)
 80062ac:	fb03 f202 	mul.w	r2, r3, r2
 80062b0:	4b29      	ldr	r3, [pc, #164]	; (8006358 <conv_a_epoch+0x178>)
 80062b2:	4413      	add	r3, r2
 80062b4:	4a29      	ldr	r2, [pc, #164]	; (800635c <conv_a_epoch+0x17c>)
 80062b6:	6013      	str	r3, [r2, #0]
	h_seg = calendario [0]*60*60;
 80062b8:	4b22      	ldr	r3, [pc, #136]	; (8006344 <conv_a_epoch+0x164>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80062c2:	fb02 f303 	mul.w	r3, r2, r3
 80062c6:	461a      	mov	r2, r3
 80062c8:	4b25      	ldr	r3, [pc, #148]	; (8006360 <conv_a_epoch+0x180>)
 80062ca:	601a      	str	r2, [r3, #0]
	m_seg = calendario [1]*60;
 80062cc:	4b1d      	ldr	r3, [pc, #116]	; (8006344 <conv_a_epoch+0x164>)
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	461a      	mov	r2, r3
 80062d2:	4613      	mov	r3, r2
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	461a      	mov	r2, r3
 80062dc:	4b21      	ldr	r3, [pc, #132]	; (8006364 <conv_a_epoch+0x184>)
 80062de:	601a      	str	r2, [r3, #0]

	dias_bisiestos = (2000 + calendario [6] - 1968) / 4;
 80062e0:	4b18      	ldr	r3, [pc, #96]	; (8006344 <conv_a_epoch+0x164>)
 80062e2:	799b      	ldrb	r3, [r3, #6]
 80062e4:	3320      	adds	r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da00      	bge.n	80062ec <conv_a_epoch+0x10c>
 80062ea:	3303      	adds	r3, #3
 80062ec:	109b      	asrs	r3, r3, #2
 80062ee:	461a      	mov	r2, r3
 80062f0:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <conv_a_epoch+0x188>)
 80062f2:	601a      	str	r2, [r3, #0]
	if (calendario [5] < 3)
 80062f4:	4b13      	ldr	r3, [pc, #76]	; (8006344 <conv_a_epoch+0x164>)
 80062f6:	795b      	ldrb	r3, [r3, #5]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d804      	bhi.n	8006306 <conv_a_epoch+0x126>
		{
		dias_bisiestos--;
 80062fc:	4b1a      	ldr	r3, [pc, #104]	; (8006368 <conv_a_epoch+0x188>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3b01      	subs	r3, #1
 8006302:	4a19      	ldr	r2, [pc, #100]	; (8006368 <conv_a_epoch+0x188>)
 8006304:	6013      	str	r3, [r2, #0]
		}
	tiempo_epoch = (y_seg + d_seg + h_seg + m_seg + calendario [2] + dias_bisiestos*60*60*24); //seg
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <conv_a_epoch+0x16c>)
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	4b14      	ldr	r3, [pc, #80]	; (800635c <conv_a_epoch+0x17c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	441a      	add	r2, r3
 8006310:	4b13      	ldr	r3, [pc, #76]	; (8006360 <conv_a_epoch+0x180>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	441a      	add	r2, r3
 8006316:	4b13      	ldr	r3, [pc, #76]	; (8006364 <conv_a_epoch+0x184>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4413      	add	r3, r2
 800631c:	4a09      	ldr	r2, [pc, #36]	; (8006344 <conv_a_epoch+0x164>)
 800631e:	7892      	ldrb	r2, [r2, #2]
 8006320:	441a      	add	r2, r3
 8006322:	4b11      	ldr	r3, [pc, #68]	; (8006368 <conv_a_epoch+0x188>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4c0b      	ldr	r4, [pc, #44]	; (8006354 <conv_a_epoch+0x174>)
 8006328:	fb04 f303 	mul.w	r3, r4, r3
 800632c:	4413      	add	r3, r2
 800632e:	2200      	movs	r2, #0
 8006330:	4618      	mov	r0, r3
 8006332:	4611      	mov	r1, r2
 8006334:	4b0d      	ldr	r3, [pc, #52]	; (800636c <conv_a_epoch+0x18c>)
 8006336:	e9c3 0100 	strd	r0, r1, [r3]
}
 800633a:	bf00      	nop
 800633c:	46bd      	mov	sp, r7
 800633e:	bc90      	pop	{r4, r7}
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20003cac 	.word	0x20003cac
 8006348:	01e13380 	.word	0x01e13380
 800634c:	20003cc8 	.word	0x20003cc8
 8006350:	20003cd0 	.word	0x20003cd0
 8006354:	00015180 	.word	0x00015180
 8006358:	fffeae80 	.word	0xfffeae80
 800635c:	20003ccc 	.word	0x20003ccc
 8006360:	20003cd4 	.word	0x20003cd4
 8006364:	20003cd8 	.word	0x20003cd8
 8006368:	20003cdc 	.word	0x20003cdc
 800636c:	20003cb8 	.word	0x20003cb8

08006370 <delay>:

extern void delay (uint16_t time)  //TIMERS uS nS / TIM1
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	4603      	mov	r3, r0
 8006378:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <delay+0x30>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2200      	movs	r2, #0
 8006380:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1)) < time);
 8006382:	bf00      	nop
 8006384:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <delay+0x30>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800638a:	88fb      	ldrh	r3, [r7, #6]
 800638c:	429a      	cmp	r2, r3
 800638e:	d3f9      	bcc.n	8006384 <delay+0x14>
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20000150 	.word	0x20000150

080063a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //Interrupcion TIMER 6 / 7 /10
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  {

	// HAL_GPIO_TogglePin(Led_Verde_GPIO_Port, Led_Verde_Pin);
  }

if ((htim->Instance) == TIM7)  //TIM 7 (500mseg)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d102      	bne.n	80063bc <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	tim7_ctrl = 1;
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	701a      	strb	r2, [r3, #0]
	 //HAL_GPIO_TogglePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin);
  }
if ((htim->Instance) == TIM10)  //TIM 10 (500mseg)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a07      	ldr	r2, [pc, #28]	; (80063e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d102      	bne.n	80063cc <HAL_TIM_PeriodElapsedCallback+0x28>
  {
	tim10_temp = 1;
 80063c6:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin);
  }
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	40001400 	.word	0x40001400
 80063dc:	2000c67c 	.word	0x2000c67c
 80063e0:	40014400 	.word	0x40014400
 80063e4:	2000c67d 	.word	0x2000c67d

080063e8 <pedidos_reconectadores>:

//==========================================================================================
//  UART 03 // RECONECTADORES
//==========================================================================================
void pedidos_reconectadores(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
	dispositivos_r++;
 80063ec:	4ba7      	ldr	r3, [pc, #668]	; (800668c <pedidos_reconectadores+0x2a4>)
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	4ba5      	ldr	r3, [pc, #660]	; (800668c <pedidos_reconectadores+0x2a4>)
 80063f6:	801a      	strh	r2, [r3, #0]

	if (dispositivos_r <= CANT_DISP_R)  // 33
 80063f8:	4ba5      	ldr	r3, [pc, #660]	; (8006690 <pedidos_reconectadores+0x2a8>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	4ba3      	ldr	r3, [pc, #652]	; (800668c <pedidos_reconectadores+0x2a4>)
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	f0c0 820c 	bcc.w	8006820 <pedidos_reconectadores+0x438>
	{
		//TxTotal03_W = 42;  //  DEBUGGER
		TxTotal03_W_Debugger = 42;  // DEBUGGER >>>>>>>>>>>>>>>>>>
 8006408:	4ba2      	ldr	r3, [pc, #648]	; (8006694 <pedidos_reconectadores+0x2ac>)
 800640a:	222a      	movs	r2, #42	; 0x2a
 800640c:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_SET);  //USART3_DE (RS485)
 800640e:	2201      	movs	r2, #1
 8006410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006414:	48a0      	ldr	r0, [pc, #640]	; (8006698 <pedidos_reconectadores+0x2b0>)
 8006416:	f005 fdd5 	bl	800bfc4 <HAL_GPIO_WritePin>
		switch(dispositivos_r)
 800641a:	4b9c      	ldr	r3, [pc, #624]	; (800668c <pedidos_reconectadores+0x2a4>)
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	3b01      	subs	r3, #1
 8006420:	2b1f      	cmp	r3, #31
 8006422:	f200 81ed 	bhi.w	8006800 <pedidos_reconectadores+0x418>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <pedidos_reconectadores+0x44>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	080064ad 	.word	0x080064ad
 8006430:	080064c1 	.word	0x080064c1
 8006434:	080064d5 	.word	0x080064d5
 8006438:	080064e9 	.word	0x080064e9
 800643c:	080064fd 	.word	0x080064fd
 8006440:	08006511 	.word	0x08006511
 8006444:	08006525 	.word	0x08006525
 8006448:	08006539 	.word	0x08006539
 800644c:	0800654d 	.word	0x0800654d
 8006450:	08006561 	.word	0x08006561
 8006454:	08006575 	.word	0x08006575
 8006458:	08006589 	.word	0x08006589
 800645c:	0800659d 	.word	0x0800659d
 8006460:	080065b1 	.word	0x080065b1
 8006464:	080065c5 	.word	0x080065c5
 8006468:	080065d9 	.word	0x080065d9
 800646c:	080065ed 	.word	0x080065ed
 8006470:	08006601 	.word	0x08006601
 8006474:	08006615 	.word	0x08006615
 8006478:	08006629 	.word	0x08006629
 800647c:	0800663d 	.word	0x0800663d
 8006480:	08006651 	.word	0x08006651
 8006484:	08006665 	.word	0x08006665
 8006488:	08006679 	.word	0x08006679
 800648c:	08006761 	.word	0x08006761
 8006490:	08006775 	.word	0x08006775
 8006494:	08006789 	.word	0x08006789
 8006498:	0800679d 	.word	0x0800679d
 800649c:	080067b1 	.word	0x080067b1
 80064a0:	080067c5 	.word	0x080067c5
 80064a4:	080067d9 	.word	0x080067d9
 80064a8:	080067ed 	.word	0x080067ed
		{
			case 1:
				//HAL_UART_Transmit(&huart3, paq_001 + 1, paq_001[0], 300);  // Ejemplo desde Buffer
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_001_REC + 1,*(uint8_t*) PAQ_001_REC, 500);  //(uint8_t*) PAQ_001_REC
 80064ac:	4b7b      	ldr	r3, [pc, #492]	; (800669c <pedidos_reconectadores+0x2b4>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80064b6:	497a      	ldr	r1, [pc, #488]	; (80066a0 <pedidos_reconectadores+0x2b8>)
 80064b8:	487a      	ldr	r0, [pc, #488]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 80064ba:	f007 fff7 	bl	800e4ac <HAL_UART_Transmit>
				//------------- Terminal 06 --------------------------------------------------
				//----HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_001_REC + 1,*(uint8_t*) PAQ_001_REC, 500);  //(uint8_t*) PAQ_001_REC
				break;
 80064be:	e19f      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 2:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_002_REC + 1,*(uint8_t*) PAQ_002_REC, 500);  //
 80064c0:	4b79      	ldr	r3, [pc, #484]	; (80066a8 <pedidos_reconectadores+0x2c0>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80064ca:	4978      	ldr	r1, [pc, #480]	; (80066ac <pedidos_reconectadores+0x2c4>)
 80064cc:	4875      	ldr	r0, [pc, #468]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 80064ce:	f007 ffed 	bl	800e4ac <HAL_UART_Transmit>
				//------------- Terminal 06 --------------------------------------------------
				//HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_002_REC + 1,*(uint8_t*) PAQ_002_REC, 500);  //(uint8_t*) PAQ_001_REC
				break;
 80064d2:	e195      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 3:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_003_REC + 1,*(uint8_t*) PAQ_003_REC, 500);  //
 80064d4:	4b76      	ldr	r3, [pc, #472]	; (80066b0 <pedidos_reconectadores+0x2c8>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	b29a      	uxth	r2, r3
 80064da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80064de:	4975      	ldr	r1, [pc, #468]	; (80066b4 <pedidos_reconectadores+0x2cc>)
 80064e0:	4870      	ldr	r0, [pc, #448]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 80064e2:	f007 ffe3 	bl	800e4ac <HAL_UART_Transmit>
				//------------- Terminal 06 --------------------------------------------------
				//HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_003_REC + 1,*(uint8_t*) PAQ_003_REC, 500);  //(uint8_t*) PAQ_001_REC
				break;
 80064e6:	e18b      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 4:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_004_REC + 1,*(uint8_t*) PAQ_004_REC, 500);  //
 80064e8:	4b73      	ldr	r3, [pc, #460]	; (80066b8 <pedidos_reconectadores+0x2d0>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80064f2:	4972      	ldr	r1, [pc, #456]	; (80066bc <pedidos_reconectadores+0x2d4>)
 80064f4:	486b      	ldr	r0, [pc, #428]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 80064f6:	f007 ffd9 	bl	800e4ac <HAL_UART_Transmit>
				//------------- Terminal 06 --------------------------------------------------
				//HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_004_REC + 1,*(uint8_t*) PAQ_004_REC, 500);  //(uint8_t*) PAQ_001_REC
				break;
 80064fa:	e181      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 5:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_005_REC + 1,*(uint8_t*) PAQ_005_REC, 500);  //
 80064fc:	4b70      	ldr	r3, [pc, #448]	; (80066c0 <pedidos_reconectadores+0x2d8>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	b29a      	uxth	r2, r3
 8006502:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006506:	496f      	ldr	r1, [pc, #444]	; (80066c4 <pedidos_reconectadores+0x2dc>)
 8006508:	4866      	ldr	r0, [pc, #408]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 800650a:	f007 ffcf 	bl	800e4ac <HAL_UART_Transmit>
				break;
 800650e:	e177      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 6:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_006_REC + 1,*(uint8_t*) PAQ_006_REC, 500);  //
 8006510:	4b6d      	ldr	r3, [pc, #436]	; (80066c8 <pedidos_reconectadores+0x2e0>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	b29a      	uxth	r2, r3
 8006516:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800651a:	496c      	ldr	r1, [pc, #432]	; (80066cc <pedidos_reconectadores+0x2e4>)
 800651c:	4861      	ldr	r0, [pc, #388]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 800651e:	f007 ffc5 	bl	800e4ac <HAL_UART_Transmit>
				break;
 8006522:	e16d      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 7:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_007_REC + 1,*(uint8_t*) PAQ_007_REC, 500);  //
 8006524:	4b6a      	ldr	r3, [pc, #424]	; (80066d0 <pedidos_reconectadores+0x2e8>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	b29a      	uxth	r2, r3
 800652a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800652e:	4969      	ldr	r1, [pc, #420]	; (80066d4 <pedidos_reconectadores+0x2ec>)
 8006530:	485c      	ldr	r0, [pc, #368]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 8006532:	f007 ffbb 	bl	800e4ac <HAL_UART_Transmit>
				break;
 8006536:	e163      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 8:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_008_REC + 1,*(uint8_t*) PAQ_008_REC, 500);  //
 8006538:	4b67      	ldr	r3, [pc, #412]	; (80066d8 <pedidos_reconectadores+0x2f0>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	b29a      	uxth	r2, r3
 800653e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006542:	4966      	ldr	r1, [pc, #408]	; (80066dc <pedidos_reconectadores+0x2f4>)
 8006544:	4857      	ldr	r0, [pc, #348]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 8006546:	f007 ffb1 	bl	800e4ac <HAL_UART_Transmit>
				break;
 800654a:	e159      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 9:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_009_REC + 1,*(uint8_t*) PAQ_009_REC, 500);  //
 800654c:	4b64      	ldr	r3, [pc, #400]	; (80066e0 <pedidos_reconectadores+0x2f8>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	b29a      	uxth	r2, r3
 8006552:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006556:	4963      	ldr	r1, [pc, #396]	; (80066e4 <pedidos_reconectadores+0x2fc>)
 8006558:	4852      	ldr	r0, [pc, #328]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 800655a:	f007 ffa7 	bl	800e4ac <HAL_UART_Transmit>
				break;
 800655e:	e14f      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 10:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_010_REC + 1,*(uint8_t*) PAQ_010_REC, 500);  //
 8006560:	4b61      	ldr	r3, [pc, #388]	; (80066e8 <pedidos_reconectadores+0x300>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	b29a      	uxth	r2, r3
 8006566:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800656a:	4960      	ldr	r1, [pc, #384]	; (80066ec <pedidos_reconectadores+0x304>)
 800656c:	484d      	ldr	r0, [pc, #308]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 800656e:	f007 ff9d 	bl	800e4ac <HAL_UART_Transmit>
				break;
 8006572:	e145      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 11:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_011_REC + 1,*(uint8_t*) PAQ_011_REC, 500);  //
 8006574:	4b5e      	ldr	r3, [pc, #376]	; (80066f0 <pedidos_reconectadores+0x308>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	b29a      	uxth	r2, r3
 800657a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800657e:	495d      	ldr	r1, [pc, #372]	; (80066f4 <pedidos_reconectadores+0x30c>)
 8006580:	4848      	ldr	r0, [pc, #288]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 8006582:	f007 ff93 	bl	800e4ac <HAL_UART_Transmit>
				break;
 8006586:	e13b      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 12:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_012_REC + 1,*(uint8_t*) PAQ_012_REC, 500);  //
 8006588:	4b5b      	ldr	r3, [pc, #364]	; (80066f8 <pedidos_reconectadores+0x310>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	b29a      	uxth	r2, r3
 800658e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006592:	495a      	ldr	r1, [pc, #360]	; (80066fc <pedidos_reconectadores+0x314>)
 8006594:	4843      	ldr	r0, [pc, #268]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 8006596:	f007 ff89 	bl	800e4ac <HAL_UART_Transmit>
				break;
 800659a:	e131      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 13:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_013_REC + 1,*(uint8_t*) PAQ_013_REC, 500);  //
 800659c:	4b58      	ldr	r3, [pc, #352]	; (8006700 <pedidos_reconectadores+0x318>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80065a6:	4957      	ldr	r1, [pc, #348]	; (8006704 <pedidos_reconectadores+0x31c>)
 80065a8:	483e      	ldr	r0, [pc, #248]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 80065aa:	f007 ff7f 	bl	800e4ac <HAL_UART_Transmit>
				break;
 80065ae:	e127      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 14:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_014_REC + 1,*(uint8_t*) PAQ_014_REC, 500);  //
 80065b0:	4b55      	ldr	r3, [pc, #340]	; (8006708 <pedidos_reconectadores+0x320>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80065ba:	4954      	ldr	r1, [pc, #336]	; (800670c <pedidos_reconectadores+0x324>)
 80065bc:	4839      	ldr	r0, [pc, #228]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 80065be:	f007 ff75 	bl	800e4ac <HAL_UART_Transmit>
				break;
 80065c2:	e11d      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 15:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_015_REC + 1,*(uint8_t*) PAQ_015_REC, 500);  //
 80065c4:	4b52      	ldr	r3, [pc, #328]	; (8006710 <pedidos_reconectadores+0x328>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80065ce:	4951      	ldr	r1, [pc, #324]	; (8006714 <pedidos_reconectadores+0x32c>)
 80065d0:	4834      	ldr	r0, [pc, #208]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 80065d2:	f007 ff6b 	bl	800e4ac <HAL_UART_Transmit>
				break;
 80065d6:	e113      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 16:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_016_REC + 1,*(uint8_t*) PAQ_016_REC, 500);  //
 80065d8:	4b4f      	ldr	r3, [pc, #316]	; (8006718 <pedidos_reconectadores+0x330>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	b29a      	uxth	r2, r3
 80065de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80065e2:	494e      	ldr	r1, [pc, #312]	; (800671c <pedidos_reconectadores+0x334>)
 80065e4:	482f      	ldr	r0, [pc, #188]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 80065e6:	f007 ff61 	bl	800e4ac <HAL_UART_Transmit>
				break;
 80065ea:	e109      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 17:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_017_REC + 1,*(uint8_t*) PAQ_017_REC, 500);  //
 80065ec:	4b4c      	ldr	r3, [pc, #304]	; (8006720 <pedidos_reconectadores+0x338>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80065f6:	494b      	ldr	r1, [pc, #300]	; (8006724 <pedidos_reconectadores+0x33c>)
 80065f8:	482a      	ldr	r0, [pc, #168]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 80065fa:	f007 ff57 	bl	800e4ac <HAL_UART_Transmit>
				break;
 80065fe:	e0ff      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 18:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_018_REC + 1,*(uint8_t*) PAQ_018_REC, 500);  //
 8006600:	4b49      	ldr	r3, [pc, #292]	; (8006728 <pedidos_reconectadores+0x340>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	b29a      	uxth	r2, r3
 8006606:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800660a:	4948      	ldr	r1, [pc, #288]	; (800672c <pedidos_reconectadores+0x344>)
 800660c:	4825      	ldr	r0, [pc, #148]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 800660e:	f007 ff4d 	bl	800e4ac <HAL_UART_Transmit>
				break;
 8006612:	e0f5      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 19:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_019_REC + 1,*(uint8_t*) PAQ_019_REC, 500);  //
 8006614:	4b46      	ldr	r3, [pc, #280]	; (8006730 <pedidos_reconectadores+0x348>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	b29a      	uxth	r2, r3
 800661a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800661e:	4945      	ldr	r1, [pc, #276]	; (8006734 <pedidos_reconectadores+0x34c>)
 8006620:	4820      	ldr	r0, [pc, #128]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 8006622:	f007 ff43 	bl	800e4ac <HAL_UART_Transmit>
				break;
 8006626:	e0eb      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 20:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_020_REC + 1,*(uint8_t*) PAQ_020_REC, 500);  //
 8006628:	4b43      	ldr	r3, [pc, #268]	; (8006738 <pedidos_reconectadores+0x350>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	b29a      	uxth	r2, r3
 800662e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006632:	4942      	ldr	r1, [pc, #264]	; (800673c <pedidos_reconectadores+0x354>)
 8006634:	481b      	ldr	r0, [pc, #108]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 8006636:	f007 ff39 	bl	800e4ac <HAL_UART_Transmit>
				break;
 800663a:	e0e1      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 21:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_021_REC + 1,*(uint8_t*) PAQ_021_REC, 500);  //
 800663c:	4b40      	ldr	r3, [pc, #256]	; (8006740 <pedidos_reconectadores+0x358>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	b29a      	uxth	r2, r3
 8006642:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006646:	493f      	ldr	r1, [pc, #252]	; (8006744 <pedidos_reconectadores+0x35c>)
 8006648:	4816      	ldr	r0, [pc, #88]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 800664a:	f007 ff2f 	bl	800e4ac <HAL_UART_Transmit>
				break;
 800664e:	e0d7      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 22:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_022_REC + 1,*(uint8_t*) PAQ_022_REC, 500);  //
 8006650:	4b3d      	ldr	r3, [pc, #244]	; (8006748 <pedidos_reconectadores+0x360>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	b29a      	uxth	r2, r3
 8006656:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800665a:	493c      	ldr	r1, [pc, #240]	; (800674c <pedidos_reconectadores+0x364>)
 800665c:	4811      	ldr	r0, [pc, #68]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 800665e:	f007 ff25 	bl	800e4ac <HAL_UART_Transmit>
				break;
 8006662:	e0cd      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 23:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_023_REC + 1,*(uint8_t*) PAQ_023_REC, 500);  //
 8006664:	4b3a      	ldr	r3, [pc, #232]	; (8006750 <pedidos_reconectadores+0x368>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	b29a      	uxth	r2, r3
 800666a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800666e:	4939      	ldr	r1, [pc, #228]	; (8006754 <pedidos_reconectadores+0x36c>)
 8006670:	480c      	ldr	r0, [pc, #48]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 8006672:	f007 ff1b 	bl	800e4ac <HAL_UART_Transmit>
				break;
 8006676:	e0c3      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 24:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_024_REC + 1,*(uint8_t*) PAQ_024_REC, 500);  //
 8006678:	4b37      	ldr	r3, [pc, #220]	; (8006758 <pedidos_reconectadores+0x370>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	b29a      	uxth	r2, r3
 800667e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006682:	4936      	ldr	r1, [pc, #216]	; (800675c <pedidos_reconectadores+0x374>)
 8006684:	4807      	ldr	r0, [pc, #28]	; (80066a4 <pedidos_reconectadores+0x2bc>)
 8006686:	f007 ff11 	bl	800e4ac <HAL_UART_Transmit>
				break;
 800668a:	e0b9      	b.n	8006800 <pedidos_reconectadores+0x418>
 800668c:	20003294 	.word	0x20003294
 8006690:	20000924 	.word	0x20000924
 8006694:	2000c350 	.word	0x2000c350
 8006698:	40020c00 	.word	0x40020c00
 800669c:	080c0000 	.word	0x080c0000
 80066a0:	080c0001 	.word	0x080c0001
 80066a4:	200004a0 	.word	0x200004a0
 80066a8:	080c0080 	.word	0x080c0080
 80066ac:	080c0081 	.word	0x080c0081
 80066b0:	080c0100 	.word	0x080c0100
 80066b4:	080c0101 	.word	0x080c0101
 80066b8:	080c0180 	.word	0x080c0180
 80066bc:	080c0181 	.word	0x080c0181
 80066c0:	080c0200 	.word	0x080c0200
 80066c4:	080c0201 	.word	0x080c0201
 80066c8:	080c0280 	.word	0x080c0280
 80066cc:	080c0281 	.word	0x080c0281
 80066d0:	080c0300 	.word	0x080c0300
 80066d4:	080c0301 	.word	0x080c0301
 80066d8:	080c0380 	.word	0x080c0380
 80066dc:	080c0381 	.word	0x080c0381
 80066e0:	080c0400 	.word	0x080c0400
 80066e4:	080c0401 	.word	0x080c0401
 80066e8:	080c0480 	.word	0x080c0480
 80066ec:	080c0481 	.word	0x080c0481
 80066f0:	080c0500 	.word	0x080c0500
 80066f4:	080c0501 	.word	0x080c0501
 80066f8:	080c0580 	.word	0x080c0580
 80066fc:	080c0581 	.word	0x080c0581
 8006700:	080c0600 	.word	0x080c0600
 8006704:	080c0601 	.word	0x080c0601
 8006708:	080c0680 	.word	0x080c0680
 800670c:	080c0681 	.word	0x080c0681
 8006710:	080c0700 	.word	0x080c0700
 8006714:	080c0701 	.word	0x080c0701
 8006718:	080c0780 	.word	0x080c0780
 800671c:	080c0781 	.word	0x080c0781
 8006720:	080c0800 	.word	0x080c0800
 8006724:	080c0801 	.word	0x080c0801
 8006728:	080c0880 	.word	0x080c0880
 800672c:	080c0881 	.word	0x080c0881
 8006730:	080c0900 	.word	0x080c0900
 8006734:	080c0901 	.word	0x080c0901
 8006738:	080c0980 	.word	0x080c0980
 800673c:	080c0981 	.word	0x080c0981
 8006740:	080c0a00 	.word	0x080c0a00
 8006744:	080c0a01 	.word	0x080c0a01
 8006748:	080c0a80 	.word	0x080c0a80
 800674c:	080c0a81 	.word	0x080c0a81
 8006750:	080c0b00 	.word	0x080c0b00
 8006754:	080c0b01 	.word	0x080c0b01
 8006758:	080c0b80 	.word	0x080c0b80
 800675c:	080c0b81 	.word	0x080c0b81
			case 25:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_025_REC + 1,*(uint8_t*) PAQ_025_REC, 500);  //
 8006760:	4b33      	ldr	r3, [pc, #204]	; (8006830 <pedidos_reconectadores+0x448>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	b29a      	uxth	r2, r3
 8006766:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800676a:	4932      	ldr	r1, [pc, #200]	; (8006834 <pedidos_reconectadores+0x44c>)
 800676c:	4832      	ldr	r0, [pc, #200]	; (8006838 <pedidos_reconectadores+0x450>)
 800676e:	f007 fe9d 	bl	800e4ac <HAL_UART_Transmit>
				break;
 8006772:	e045      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 26:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_026_REC + 1,*(uint8_t*) PAQ_026_REC, 500);  //
 8006774:	4b31      	ldr	r3, [pc, #196]	; (800683c <pedidos_reconectadores+0x454>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	b29a      	uxth	r2, r3
 800677a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800677e:	4930      	ldr	r1, [pc, #192]	; (8006840 <pedidos_reconectadores+0x458>)
 8006780:	482d      	ldr	r0, [pc, #180]	; (8006838 <pedidos_reconectadores+0x450>)
 8006782:	f007 fe93 	bl	800e4ac <HAL_UART_Transmit>
				break;
 8006786:	e03b      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 27:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_027_REC + 1,*(uint8_t*) PAQ_027_REC, 500);  //
 8006788:	4b2e      	ldr	r3, [pc, #184]	; (8006844 <pedidos_reconectadores+0x45c>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	b29a      	uxth	r2, r3
 800678e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006792:	492d      	ldr	r1, [pc, #180]	; (8006848 <pedidos_reconectadores+0x460>)
 8006794:	4828      	ldr	r0, [pc, #160]	; (8006838 <pedidos_reconectadores+0x450>)
 8006796:	f007 fe89 	bl	800e4ac <HAL_UART_Transmit>
				break;
 800679a:	e031      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 28:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_028_REC + 1,*(uint8_t*) PAQ_028_REC, 500);  //
 800679c:	4b2b      	ldr	r3, [pc, #172]	; (800684c <pedidos_reconectadores+0x464>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80067a6:	492a      	ldr	r1, [pc, #168]	; (8006850 <pedidos_reconectadores+0x468>)
 80067a8:	4823      	ldr	r0, [pc, #140]	; (8006838 <pedidos_reconectadores+0x450>)
 80067aa:	f007 fe7f 	bl	800e4ac <HAL_UART_Transmit>
				break;
 80067ae:	e027      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 29:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_029_REC + 1,*(uint8_t*) PAQ_029_REC, 500);  //
 80067b0:	4b28      	ldr	r3, [pc, #160]	; (8006854 <pedidos_reconectadores+0x46c>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80067ba:	4927      	ldr	r1, [pc, #156]	; (8006858 <pedidos_reconectadores+0x470>)
 80067bc:	481e      	ldr	r0, [pc, #120]	; (8006838 <pedidos_reconectadores+0x450>)
 80067be:	f007 fe75 	bl	800e4ac <HAL_UART_Transmit>
				break;
 80067c2:	e01d      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 30:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_030_REC + 1,*(uint8_t*) PAQ_030_REC, 500);  //
 80067c4:	4b25      	ldr	r3, [pc, #148]	; (800685c <pedidos_reconectadores+0x474>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80067ce:	4924      	ldr	r1, [pc, #144]	; (8006860 <pedidos_reconectadores+0x478>)
 80067d0:	4819      	ldr	r0, [pc, #100]	; (8006838 <pedidos_reconectadores+0x450>)
 80067d2:	f007 fe6b 	bl	800e4ac <HAL_UART_Transmit>
				break;
 80067d6:	e013      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 31:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_031_REC + 1,*(uint8_t*) PAQ_031_REC, 500);  //
 80067d8:	4b22      	ldr	r3, [pc, #136]	; (8006864 <pedidos_reconectadores+0x47c>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	b29a      	uxth	r2, r3
 80067de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80067e2:	4921      	ldr	r1, [pc, #132]	; (8006868 <pedidos_reconectadores+0x480>)
 80067e4:	4814      	ldr	r0, [pc, #80]	; (8006838 <pedidos_reconectadores+0x450>)
 80067e6:	f007 fe61 	bl	800e4ac <HAL_UART_Transmit>
				break;
 80067ea:	e009      	b.n	8006800 <pedidos_reconectadores+0x418>
			case 32:
				HAL_UART_Transmit(&huart3, (uint8_t*) PAQ_032_REC + 1,*(uint8_t*) PAQ_032_REC, 500);  //
 80067ec:	4b1f      	ldr	r3, [pc, #124]	; (800686c <pedidos_reconectadores+0x484>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80067f6:	491e      	ldr	r1, [pc, #120]	; (8006870 <pedidos_reconectadores+0x488>)
 80067f8:	480f      	ldr	r0, [pc, #60]	; (8006838 <pedidos_reconectadores+0x450>)
 80067fa:	f007 fe57 	bl	800e4ac <HAL_UART_Transmit>
				break;
 80067fe:	bf00      	nop
		}
		Buffer_env_R [dispositivos_r-1] = 1;
 8006800:	4b1c      	ldr	r3, [pc, #112]	; (8006874 <pedidos_reconectadores+0x48c>)
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	3b01      	subs	r3, #1
 8006806:	4a1c      	ldr	r2, [pc, #112]	; (8006878 <pedidos_reconectadores+0x490>)
 8006808:	2101      	movs	r1, #1
 800680a:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(20);
 800680c:	2014      	movs	r0, #20
 800680e:	f003 fe65 	bl	800a4dc <HAL_Delay>

		HAL_GPIO_WritePin(USART3_DE_GPIO_Port, USART3_DE_Pin, GPIO_PIN_RESET);  //USART3_DE (RS485)
 8006812:	2200      	movs	r2, #0
 8006814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006818:	4818      	ldr	r0, [pc, #96]	; (800687c <pedidos_reconectadores+0x494>)
 800681a:	f005 fbd3 	bl	800bfc4 <HAL_GPIO_WritePin>
 800681e:	e002      	b.n	8006826 <pedidos_reconectadores+0x43e>

	}
	else
	{
		dispositivos_r = 0;
 8006820:	4b14      	ldr	r3, [pc, #80]	; (8006874 <pedidos_reconectadores+0x48c>)
 8006822:	2200      	movs	r2, #0
 8006824:	801a      	strh	r2, [r3, #0]
	}

	//TxTotal03_W = 0;
	TxTotal03_W_Debugger = 0;  // DEBUGGER >>>>>>>>>>>>>>>>>>
 8006826:	4b16      	ldr	r3, [pc, #88]	; (8006880 <pedidos_reconectadores+0x498>)
 8006828:	2200      	movs	r2, #0
 800682a:	801a      	strh	r2, [r3, #0]
}
 800682c:	bf00      	nop
 800682e:	bd80      	pop	{r7, pc}
 8006830:	080c0c00 	.word	0x080c0c00
 8006834:	080c0c01 	.word	0x080c0c01
 8006838:	200004a0 	.word	0x200004a0
 800683c:	080c0c80 	.word	0x080c0c80
 8006840:	080c0c81 	.word	0x080c0c81
 8006844:	080c0d00 	.word	0x080c0d00
 8006848:	080c0d01 	.word	0x080c0d01
 800684c:	080c0d80 	.word	0x080c0d80
 8006850:	080c0d81 	.word	0x080c0d81
 8006854:	080c0e00 	.word	0x080c0e00
 8006858:	080c0e01 	.word	0x080c0e01
 800685c:	080c0e80 	.word	0x080c0e80
 8006860:	080c0e81 	.word	0x080c0e81
 8006864:	080c0f00 	.word	0x080c0f00
 8006868:	080c0f01 	.word	0x080c0f01
 800686c:	080c0f80 	.word	0x080c0f80
 8006870:	080c0f81 	.word	0x080c0f81
 8006874:	20003294 	.word	0x20003294
 8006878:	200031f8 	.word	0x200031f8
 800687c:	40020c00 	.word	0x40020c00
 8006880:	2000c350 	.word	0x2000c350

08006884 <analizar_Rx_03_local>:

void analizar_Rx_03_local(void)  //MAIN ......
{
 8006884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006888:	b098      	sub	sp, #96	; 0x60
 800688a:	af00      	add	r7, sp, #0

	//uint8_t error_crc_06 = 0;
	if((Buffer_03_Rx_W[4] + 256 * Buffer_03_Rx_W[5]) == ID)
 800688c:	4b8e      	ldr	r3, [pc, #568]	; (8006ac8 <analizar_Rx_03_local+0x244>)
 800688e:	791b      	ldrb	r3, [r3, #4]
 8006890:	461a      	mov	r2, r3
 8006892:	4b8d      	ldr	r3, [pc, #564]	; (8006ac8 <analizar_Rx_03_local+0x244>)
 8006894:	795b      	ldrb	r3, [r3, #5]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	441a      	add	r2, r3
 800689a:	4b8c      	ldr	r3, [pc, #560]	; (8006acc <analizar_Rx_03_local+0x248>)
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	f040 873f 	bne.w	8007722 <analizar_Rx_03_local+0xe9e>
	{
		error_crc_03 = 0;
 80068a4:	4a8a      	ldr	r2, [pc, #552]	; (8006ad0 <analizar_Rx_03_local+0x24c>)
 80068a6:	2300      	movs	r3, #0
 80068a8:	7013      	strb	r3, [r2, #0]
		anal_recep_tot_crc_uart_03();  // Analizar el Buff 03 con
 80068aa:	f000 ff87 	bl	80077bc <anal_recep_tot_crc_uart_03>
		if(error_crc_03==0)
 80068ae:	4b88      	ldr	r3, [pc, #544]	; (8006ad0 <analizar_Rx_03_local+0x24c>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f040 833e 	bne.w	8006f34 <analizar_Rx_03_local+0x6b0>
		{
			//HAL_GPIO_TogglePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin);
			//AN_analizar_Rx_06_local();
			Flag_Fin_Buffer_03 = 0;
 80068b8:	4a86      	ldr	r2, [pc, #536]	; (8006ad4 <analizar_Rx_03_local+0x250>)
 80068ba:	2300      	movs	r3, #0
 80068bc:	8013      	strh	r3, [r2, #0]
			Prox_crc_Rx_03 = 26;
 80068be:	4a86      	ldr	r2, [pc, #536]	; (8006ad8 <analizar_Rx_03_local+0x254>)
 80068c0:	231a      	movs	r3, #26
 80068c2:	8013      	strh	r3, [r2, #0]

			Fin_Buffer_03 = RxTotal03_W - 2; //
 80068c4:	4b85      	ldr	r3, [pc, #532]	; (8006adc <analizar_Rx_03_local+0x258>)
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	3b02      	subs	r3, #2
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	4a84      	ldr	r2, [pc, #528]	; (8006ae0 <analizar_Rx_03_local+0x25c>)
 80068ce:	8013      	strh	r3, [r2, #0]
			Punt_buffer_03_Rx = 15;          //
 80068d0:	4a84      	ldr	r2, [pc, #528]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 80068d2:	230f      	movs	r3, #15
 80068d4:	8013      	strh	r3, [r2, #0]

			Punt_buffer_mem_D = 68 + (dispositivos_r - 1)* 32;
 80068d6:	4b84      	ldr	r3, [pc, #528]	; (8006ae8 <analizar_Rx_03_local+0x264>)
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29b      	uxth	r3, r3
 80068de:	015b      	lsls	r3, r3, #5
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3344      	adds	r3, #68	; 0x44
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	4a81      	ldr	r2, [pc, #516]	; (8006aec <analizar_Rx_03_local+0x268>)
 80068e8:	8013      	strh	r3, [r2, #0]
			//Punt_buffer_mem_A = 64 + (dispositivos_r - 1)* 64;
			Punt_buffer_mem_A = 64 + (dispositivos_r - 1)* 128;
 80068ea:	4b7f      	ldr	r3, [pc, #508]	; (8006ae8 <analizar_Rx_03_local+0x264>)
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	01db      	lsls	r3, r3, #7
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3340      	adds	r3, #64	; 0x40
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	4a7d      	ldr	r2, [pc, #500]	; (8006af0 <analizar_Rx_03_local+0x26c>)
 80068fc:	8013      	strh	r3, [r2, #0]


			if (Punt_buffer_03_Rx != Fin_Buffer_03)
 80068fe:	4b79      	ldr	r3, [pc, #484]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006900:	881a      	ldrh	r2, [r3, #0]
 8006902:	4b77      	ldr	r3, [pc, #476]	; (8006ae0 <analizar_Rx_03_local+0x25c>)
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	f000 8310 	beq.w	8006f2c <analizar_Rx_03_local+0x6a8>
			{
				if(Punt_buffer_03_Rx == Prox_crc_Rx_03)
 800690c:	4b75      	ldr	r3, [pc, #468]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 800690e:	881a      	ldrh	r2, [r3, #0]
 8006910:	4b71      	ldr	r3, [pc, #452]	; (8006ad8 <analizar_Rx_03_local+0x254>)
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	f040 8303 	bne.w	8006f20 <analizar_Rx_03_local+0x69c>
				{
					Prox_crc_Rx_03 = Prox_crc_Rx_03 + 18;
 800691a:	4b6f      	ldr	r3, [pc, #444]	; (8006ad8 <analizar_Rx_03_local+0x254>)
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	3312      	adds	r3, #18
 8006920:	b29b      	uxth	r3, r3
 8006922:	4a6d      	ldr	r2, [pc, #436]	; (8006ad8 <analizar_Rx_03_local+0x254>)
 8006924:	8013      	strh	r3, [r2, #0]
					Punt_buffer_03_Rx = Punt_buffer_03_Rx + 2;
 8006926:	4b6f      	ldr	r3, [pc, #444]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	3302      	adds	r3, #2
 800692c:	b29b      	uxth	r3, r3
 800692e:	4a6d      	ldr	r2, [pc, #436]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006930:	8013      	strh	r3, [r2, #0]
				}
				while (Flag_Fin_Buffer_03 == 0)
 8006932:	e2f5      	b.n	8006f20 <analizar_Rx_03_local+0x69c>
				{
					analizar_pos_crc_Rx_03();
 8006934:	f000 ff16 	bl	8007764 <analizar_pos_crc_Rx_03>
					if(Flag_Fin_Buffer_03 == 0)
 8006938:	4b66      	ldr	r3, [pc, #408]	; (8006ad4 <analizar_Rx_03_local+0x250>)
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 82ef 	bne.w	8006f20 <analizar_Rx_03_local+0x69c>
					{
						if(Buffer_03_Rx_W [Punt_buffer_03_Rx] == 1)  // 1 <> 30
 8006942:	4b68      	ldr	r3, [pc, #416]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	4b5f      	ldr	r3, [pc, #380]	; (8006ac8 <analizar_Rx_03_local+0x244>)
 800694a:	5c9b      	ldrb	r3, [r3, r2]
 800694c:	2b01      	cmp	r3, #1
 800694e:	f040 8215 	bne.w	8006d7c <analizar_Rx_03_local+0x4f8>
						{
							Punt_buffer_03_Rx++;
 8006952:	4b64      	ldr	r3, [pc, #400]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	3301      	adds	r3, #1
 8006958:	b29b      	uxth	r3, r3
 800695a:	4a62      	ldr	r2, [pc, #392]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 800695c:	8013      	strh	r3, [r2, #0]
							analizar_pos_crc_Rx_03();
 800695e:	f000 ff01 	bl	8007764 <analizar_pos_crc_Rx_03>
							if(Buffer_03_Rx_W [Punt_buffer_03_Rx] == 1)  //1
 8006962:	4b60      	ldr	r3, [pc, #384]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	4b57      	ldr	r3, [pc, #348]	; (8006ac8 <analizar_Rx_03_local+0x244>)
 800696a:	5c9b      	ldrb	r3, [r3, r2]
 800696c:	2b01      	cmp	r3, #1
 800696e:	f040 82d7 	bne.w	8006f20 <analizar_Rx_03_local+0x69c>
							{
								Punt_buffer_03_Rx++;
 8006972:	4b5c      	ldr	r3, [pc, #368]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	b29b      	uxth	r3, r3
 800697a:	4a5a      	ldr	r2, [pc, #360]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 800697c:	8013      	strh	r3, [r2, #0]
								analizar_pos_crc_Rx_03();
 800697e:	f000 fef1 	bl	8007764 <analizar_pos_crc_Rx_03>
								//==================================================================
								if(Buffer_03_Rx_W [Punt_buffer_03_Rx] == 1)  // 1 1 1
 8006982:	4b58      	ldr	r3, [pc, #352]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	4b4f      	ldr	r3, [pc, #316]	; (8006ac8 <analizar_Rx_03_local+0x244>)
 800698a:	5c9b      	ldrb	r3, [r3, r2]
 800698c:	2b01      	cmp	r3, #1
 800698e:	f040 810f 	bne.w	8006bb0 <analizar_Rx_03_local+0x32c>
								{
									Punt_buffer_03_Rx++;
 8006992:	4b54      	ldr	r3, [pc, #336]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	b29b      	uxth	r3, r3
 800699a:	4a52      	ldr	r2, [pc, #328]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 800699c:	8013      	strh	r3, [r2, #0]
									analizar_pos_crc_Rx_03();
 800699e:	f000 fee1 	bl	8007764 <analizar_pos_crc_Rx_03>
									Inicio_03 = Buffer_03_Rx_W [Punt_buffer_03_Rx];
 80069a2:	4b50      	ldr	r3, [pc, #320]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	4b47      	ldr	r3, [pc, #284]	; (8006ac8 <analizar_Rx_03_local+0x244>)
 80069aa:	5c9b      	ldrb	r3, [r3, r2]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	4a51      	ldr	r2, [pc, #324]	; (8006af4 <analizar_Rx_03_local+0x270>)
 80069b0:	8013      	strh	r3, [r2, #0]

									Punt_buffer_03_Rx++;
 80069b2:	4b4c      	ldr	r3, [pc, #304]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	4a4a      	ldr	r2, [pc, #296]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 80069bc:	8013      	strh	r3, [r2, #0]
									analizar_pos_crc_Rx_03();
 80069be:	f000 fed1 	bl	8007764 <analizar_pos_crc_Rx_03>
									Inicio_03 = Inicio_03 + 256 * Buffer_03_Rx_W [Punt_buffer_03_Rx];
 80069c2:	4b48      	ldr	r3, [pc, #288]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	4b3f      	ldr	r3, [pc, #252]	; (8006ac8 <analizar_Rx_03_local+0x244>)
 80069ca:	5c9b      	ldrb	r3, [r3, r2]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	4b48      	ldr	r3, [pc, #288]	; (8006af4 <analizar_Rx_03_local+0x270>)
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	4413      	add	r3, r2
 80069d8:	b29b      	uxth	r3, r3
 80069da:	4a46      	ldr	r2, [pc, #280]	; (8006af4 <analizar_Rx_03_local+0x270>)
 80069dc:	8013      	strh	r3, [r2, #0]

									Punt_buffer_03_Rx++;
 80069de:	4b41      	ldr	r3, [pc, #260]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	3301      	adds	r3, #1
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4a3f      	ldr	r2, [pc, #252]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 80069e8:	8013      	strh	r3, [r2, #0]
									analizar_pos_crc_Rx_03();
 80069ea:	f000 febb 	bl	8007764 <analizar_pos_crc_Rx_03>
									Final_03 = Buffer_03_Rx_W [Punt_buffer_03_Rx];
 80069ee:	4b3d      	ldr	r3, [pc, #244]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	4b34      	ldr	r3, [pc, #208]	; (8006ac8 <analizar_Rx_03_local+0x244>)
 80069f6:	5c9b      	ldrb	r3, [r3, r2]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	4a3f      	ldr	r2, [pc, #252]	; (8006af8 <analizar_Rx_03_local+0x274>)
 80069fc:	8013      	strh	r3, [r2, #0]

									Punt_buffer_03_Rx++;
 80069fe:	4b39      	ldr	r3, [pc, #228]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	4a37      	ldr	r2, [pc, #220]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006a08:	8013      	strh	r3, [r2, #0]
									analizar_pos_crc_Rx_03();
 8006a0a:	f000 feab 	bl	8007764 <analizar_pos_crc_Rx_03>
									Final_03 = Final_03 + 256 * Buffer_03_Rx_W [Punt_buffer_03_Rx];
 8006a0e:	4b35      	ldr	r3, [pc, #212]	; (8006ae4 <analizar_Rx_03_local+0x260>)
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	4b2c      	ldr	r3, [pc, #176]	; (8006ac8 <analizar_Rx_03_local+0x244>)
 8006a16:	5c9b      	ldrb	r3, [r3, r2]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	021b      	lsls	r3, r3, #8
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	4b36      	ldr	r3, [pc, #216]	; (8006af8 <analizar_Rx_03_local+0x274>)
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	4413      	add	r3, r2
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	4a34      	ldr	r2, [pc, #208]	; (8006af8 <analizar_Rx_03_local+0x274>)
 8006a28:	8013      	strh	r3, [r2, #0]
									///////cant_bits_06 = cant_bits_d (Inicio_06, Final_06);
									cant_bytes_03 = cant_bytes_d(Inicio_03, Final_03);
 8006a2a:	4b32      	ldr	r3, [pc, #200]	; (8006af4 <analizar_Rx_03_local+0x270>)
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <analizar_Rx_03_local+0x274>)
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f7fc fb3d 	bl	80030b4 <cant_bytes_d>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4a2f      	ldr	r2, [pc, #188]	; (8006afc <analizar_Rx_03_local+0x278>)
 8006a3e:	7013      	strb	r3, [r2, #0]
									primer_byte_03 = Inicio_03/8;
 8006a40:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <analizar_Rx_03_local+0x270>)
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	08db      	lsrs	r3, r3, #3
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	4a2d      	ldr	r2, [pc, #180]	; (8006b00 <analizar_Rx_03_local+0x27c>)
 8006a4c:	7013      	strb	r3, [r2, #0]

									switch(Inicio_03 % 8)
 8006a4e:	4b29      	ldr	r3, [pc, #164]	; (8006af4 <analizar_Rx_03_local+0x270>)
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	2b07      	cmp	r3, #7
 8006a58:	d832      	bhi.n	8006ac0 <analizar_Rx_03_local+0x23c>
 8006a5a:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <analizar_Rx_03_local+0x1dc>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006a81 	.word	0x08006a81
 8006a64:	08006a89 	.word	0x08006a89
 8006a68:	08006a91 	.word	0x08006a91
 8006a6c:	08006a99 	.word	0x08006a99
 8006a70:	08006aa1 	.word	0x08006aa1
 8006a74:	08006aa9 	.word	0x08006aa9
 8006a78:	08006ab1 	.word	0x08006ab1
 8006a7c:	08006ab9 	.word	0x08006ab9
									{
										case 0:
											mascara_03 = 0b11111111;
 8006a80:	4a20      	ldr	r2, [pc, #128]	; (8006b04 <analizar_Rx_03_local+0x280>)
 8006a82:	23ff      	movs	r3, #255	; 0xff
 8006a84:	7013      	strb	r3, [r2, #0]
											break;
 8006a86:	e01b      	b.n	8006ac0 <analizar_Rx_03_local+0x23c>
										case 1:
											mascara_03 = 0b11111110;
 8006a88:	4a1e      	ldr	r2, [pc, #120]	; (8006b04 <analizar_Rx_03_local+0x280>)
 8006a8a:	23fe      	movs	r3, #254	; 0xfe
 8006a8c:	7013      	strb	r3, [r2, #0]
											break;
 8006a8e:	e017      	b.n	8006ac0 <analizar_Rx_03_local+0x23c>
										case 2:
											mascara_03 = 0b11111100;
 8006a90:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <analizar_Rx_03_local+0x280>)
 8006a92:	23fc      	movs	r3, #252	; 0xfc
 8006a94:	7013      	strb	r3, [r2, #0]
											break;
 8006a96:	e013      	b.n	8006ac0 <analizar_Rx_03_local+0x23c>
										case 3:
											mascara_03 = 0b11111000;
 8006a98:	4a1a      	ldr	r2, [pc, #104]	; (8006b04 <analizar_Rx_03_local+0x280>)
 8006a9a:	23f8      	movs	r3, #248	; 0xf8
 8006a9c:	7013      	strb	r3, [r2, #0]
											break;
 8006a9e:	e00f      	b.n	8006ac0 <analizar_Rx_03_local+0x23c>
										case 4:
											mascara_03 = 0b11110000;
 8006aa0:	4a18      	ldr	r2, [pc, #96]	; (8006b04 <analizar_Rx_03_local+0x280>)
 8006aa2:	23f0      	movs	r3, #240	; 0xf0
 8006aa4:	7013      	strb	r3, [r2, #0]
											break;
 8006aa6:	e00b      	b.n	8006ac0 <analizar_Rx_03_local+0x23c>
										case 5:
											mascara_03 = 0b11100000;
 8006aa8:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <analizar_Rx_03_local+0x280>)
 8006aaa:	23e0      	movs	r3, #224	; 0xe0
 8006aac:	7013      	strb	r3, [r2, #0]
											break;
 8006aae:	e007      	b.n	8006ac0 <analizar_Rx_03_local+0x23c>
										case 6:
											mascara_03 = 0b11000000;
 8006ab0:	4a14      	ldr	r2, [pc, #80]	; (8006b04 <analizar_Rx_03_local+0x280>)
 8006ab2:	23c0      	movs	r3, #192	; 0xc0
 8006ab4:	7013      	strb	r3, [r2, #0]
											break;
 8006ab6:	e003      	b.n	8006ac0 <analizar_Rx_03_local+0x23c>
										case 7:
											mascara_03 = 0b10000000;
 8006ab8:	4a12      	ldr	r2, [pc, #72]	; (8006b04 <analizar_Rx_03_local+0x280>)
 8006aba:	2380      	movs	r3, #128	; 0x80
 8006abc:	7013      	strb	r3, [r2, #0]
											break;
 8006abe:	bf00      	nop
									}
									for (uint8_t i=0; i<cant_bytes_03; i++)
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ac6:	e06d      	b.n	8006ba4 <analizar_Rx_03_local+0x320>
 8006ac8:	2000c23c 	.word	0x2000c23c
 8006acc:	2000091e 	.word	0x2000091e
 8006ad0:	2000c352 	.word	0x2000c352
 8006ad4:	2000c348 	.word	0x2000c348
 8006ad8:	20000018 	.word	0x20000018
 8006adc:	2000c238 	.word	0x2000c238
 8006ae0:	2000c342 	.word	0x2000c342
 8006ae4:	2000c340 	.word	0x2000c340
 8006ae8:	20003294 	.word	0x20003294
 8006aec:	20003278 	.word	0x20003278
 8006af0:	2000327a 	.word	0x2000327a
 8006af4:	2000c344 	.word	0x2000c344
 8006af8:	2000c346 	.word	0x2000c346
 8006afc:	2000c34a 	.word	0x2000c34a
 8006b00:	2000c34b 	.word	0x2000c34b
 8006b04:	2000c34c 	.word	0x2000c34c
									{
										analizar_pos_crc_Rx_03();
 8006b08:	f000 fe2c 	bl	8007764 <analizar_pos_crc_Rx_03>
										var_orig_03 = Buffer_03_Rx_W [Punt_buffer_03_Rx];
 8006b0c:	4b8e      	ldr	r3, [pc, #568]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	4b8e      	ldr	r3, [pc, #568]	; (8006d4c <analizar_Rx_03_local+0x4c8>)
 8006b14:	5c9b      	ldrb	r3, [r3, r2]
 8006b16:	4a8e      	ldr	r2, [pc, #568]	; (8006d50 <analizar_Rx_03_local+0x4cc>)
 8006b18:	7013      	strb	r3, [r2, #0]

										var_dest_03 = Buffer_mem_D [Punt_buffer_mem_D + primer_byte_03 + i];
 8006b1a:	4b8e      	ldr	r3, [pc, #568]	; (8006d54 <analizar_Rx_03_local+0x4d0>)
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	4b8d      	ldr	r3, [pc, #564]	; (8006d58 <analizar_Rx_03_local+0x4d4>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	441a      	add	r2, r3
 8006b26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b2a:	441a      	add	r2, r3
 8006b2c:	4b8b      	ldr	r3, [pc, #556]	; (8006d5c <analizar_Rx_03_local+0x4d8>)
 8006b2e:	5c9b      	ldrb	r3, [r3, r2]
 8006b30:	4a8b      	ldr	r2, [pc, #556]	; (8006d60 <analizar_Rx_03_local+0x4dc>)
 8006b32:	7013      	strb	r3, [r2, #0]

										var_final_03 = (var_orig_03 & mascara_03) | (var_dest_03 & !mascara_03);
 8006b34:	4b86      	ldr	r3, [pc, #536]	; (8006d50 <analizar_Rx_03_local+0x4cc>)
 8006b36:	781a      	ldrb	r2, [r3, #0]
 8006b38:	4b8a      	ldr	r3, [pc, #552]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	b259      	sxtb	r1, r3
 8006b42:	4b88      	ldr	r3, [pc, #544]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bf0c      	ite	eq
 8006b4a:	2301      	moveq	r3, #1
 8006b4c:	2300      	movne	r3, #0
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	b25a      	sxtb	r2, r3
 8006b52:	4b83      	ldr	r3, [pc, #524]	; (8006d60 <analizar_Rx_03_local+0x4dc>)
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	b25b      	sxtb	r3, r3
 8006b58:	4013      	ands	r3, r2
 8006b5a:	b25b      	sxtb	r3, r3
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	b25b      	sxtb	r3, r3
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	4a81      	ldr	r2, [pc, #516]	; (8006d68 <analizar_Rx_03_local+0x4e4>)
 8006b64:	7013      	strb	r3, [r2, #0]

										Buffer_mem_D [Punt_buffer_mem_D + primer_byte_03 + i] = var_final_03;
 8006b66:	4b7b      	ldr	r3, [pc, #492]	; (8006d54 <analizar_Rx_03_local+0x4d0>)
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	4b7a      	ldr	r3, [pc, #488]	; (8006d58 <analizar_Rx_03_local+0x4d4>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	441a      	add	r2, r3
 8006b72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b76:	18d1      	adds	r1, r2, r3
 8006b78:	4b7b      	ldr	r3, [pc, #492]	; (8006d68 <analizar_Rx_03_local+0x4e4>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	4a77      	ldr	r2, [pc, #476]	; (8006d5c <analizar_Rx_03_local+0x4d8>)
 8006b7e:	5453      	strb	r3, [r2, r1]
										Buffer_mem_D_temp [Punt_buffer_mem_D + primer_byte_03 + i] = var_final_03;
 8006b80:	4b74      	ldr	r3, [pc, #464]	; (8006d54 <analizar_Rx_03_local+0x4d0>)
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	4b74      	ldr	r3, [pc, #464]	; (8006d58 <analizar_Rx_03_local+0x4d4>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	441a      	add	r2, r3
 8006b8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b90:	18d1      	adds	r1, r2, r3
 8006b92:	4b75      	ldr	r3, [pc, #468]	; (8006d68 <analizar_Rx_03_local+0x4e4>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	4a75      	ldr	r2, [pc, #468]	; (8006d6c <analizar_Rx_03_local+0x4e8>)
 8006b98:	5453      	strb	r3, [r2, r1]
									for (uint8_t i=0; i<cant_bytes_03; i++)
 8006b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ba4:	4b72      	ldr	r3, [pc, #456]	; (8006d70 <analizar_Rx_03_local+0x4ec>)
 8006ba6:	781a      	ldrb	r2, [r3, #0]
 8006ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d3ab      	bcc.n	8006b08 <analizar_Rx_03_local+0x284>
									}

								}
								//==================================================================
								if(Buffer_03_Rx_W [Punt_buffer_03_Rx] == 0)  // 1 1 0
 8006bb0:	4b65      	ldr	r3, [pc, #404]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	4b65      	ldr	r3, [pc, #404]	; (8006d4c <analizar_Rx_03_local+0x4c8>)
 8006bb8:	5c9b      	ldrb	r3, [r3, r2]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f040 80bd 	bne.w	8006d3a <analizar_Rx_03_local+0x4b6>
								{
									Punt_buffer_03_Rx++;
 8006bc0:	4b61      	ldr	r3, [pc, #388]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	4a5f      	ldr	r2, [pc, #380]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006bca:	8013      	strh	r3, [r2, #0]
									analizar_pos_crc_Rx_03();
 8006bcc:	f000 fdca 	bl	8007764 <analizar_pos_crc_Rx_03>
									Inicio_03 = Buffer_03_Rx_W [Punt_buffer_03_Rx];
 8006bd0:	4b5d      	ldr	r3, [pc, #372]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4b5d      	ldr	r3, [pc, #372]	; (8006d4c <analizar_Rx_03_local+0x4c8>)
 8006bd8:	5c9b      	ldrb	r3, [r3, r2]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	4a65      	ldr	r2, [pc, #404]	; (8006d74 <analizar_Rx_03_local+0x4f0>)
 8006bde:	8013      	strh	r3, [r2, #0]

									Punt_buffer_03_Rx++;
 8006be0:	4b59      	ldr	r3, [pc, #356]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	3301      	adds	r3, #1
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4a57      	ldr	r2, [pc, #348]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006bea:	8013      	strh	r3, [r2, #0]
									analizar_pos_crc_Rx_03();  ////%%%%%%%%
 8006bec:	f000 fdba 	bl	8007764 <analizar_pos_crc_Rx_03>
									Final_03 = Buffer_03_Rx_W [Punt_buffer_03_Rx];
 8006bf0:	4b55      	ldr	r3, [pc, #340]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	4b55      	ldr	r3, [pc, #340]	; (8006d4c <analizar_Rx_03_local+0x4c8>)
 8006bf8:	5c9b      	ldrb	r3, [r3, r2]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	4a5e      	ldr	r2, [pc, #376]	; (8006d78 <analizar_Rx_03_local+0x4f4>)
 8006bfe:	8013      	strh	r3, [r2, #0]

									//Punt_buffer_06_Rx++;
									//analizar_pos_crc_Rx_06();

									cant_bytes_03 = cant_bytes_d (Inicio_03, Final_03);
 8006c00:	4b5c      	ldr	r3, [pc, #368]	; (8006d74 <analizar_Rx_03_local+0x4f0>)
 8006c02:	881a      	ldrh	r2, [r3, #0]
 8006c04:	4b5c      	ldr	r3, [pc, #368]	; (8006d78 <analizar_Rx_03_local+0x4f4>)
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7fc fa52 	bl	80030b4 <cant_bytes_d>
 8006c10:	4603      	mov	r3, r0
 8006c12:	4a57      	ldr	r2, [pc, #348]	; (8006d70 <analizar_Rx_03_local+0x4ec>)
 8006c14:	7013      	strb	r3, [r2, #0]
									primer_byte_03 = Inicio_03/8;
 8006c16:	4b57      	ldr	r3, [pc, #348]	; (8006d74 <analizar_Rx_03_local+0x4f0>)
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	08db      	lsrs	r3, r3, #3
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	4a4d      	ldr	r2, [pc, #308]	; (8006d58 <analizar_Rx_03_local+0x4d4>)
 8006c22:	7013      	strb	r3, [r2, #0]

									switch(Inicio_03 % 8)
 8006c24:	4b53      	ldr	r3, [pc, #332]	; (8006d74 <analizar_Rx_03_local+0x4f0>)
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	2b07      	cmp	r3, #7
 8006c2e:	d833      	bhi.n	8006c98 <analizar_Rx_03_local+0x414>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <analizar_Rx_03_local+0x3b4>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c59 	.word	0x08006c59
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c69 	.word	0x08006c69
 8006c44:	08006c71 	.word	0x08006c71
 8006c48:	08006c79 	.word	0x08006c79
 8006c4c:	08006c81 	.word	0x08006c81
 8006c50:	08006c89 	.word	0x08006c89
 8006c54:	08006c91 	.word	0x08006c91
									{
										case 0:
											mascara_03 = 0b11111111;
 8006c58:	4a42      	ldr	r2, [pc, #264]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006c5a:	23ff      	movs	r3, #255	; 0xff
 8006c5c:	7013      	strb	r3, [r2, #0]
											break;
 8006c5e:	e01b      	b.n	8006c98 <analizar_Rx_03_local+0x414>
										case 1:
											mascara_03 = 0b11111110;
 8006c60:	4a40      	ldr	r2, [pc, #256]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006c62:	23fe      	movs	r3, #254	; 0xfe
 8006c64:	7013      	strb	r3, [r2, #0]
											break;
 8006c66:	e017      	b.n	8006c98 <analizar_Rx_03_local+0x414>
										case 2:
											mascara_03 = 0b11111100;
 8006c68:	4a3e      	ldr	r2, [pc, #248]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006c6a:	23fc      	movs	r3, #252	; 0xfc
 8006c6c:	7013      	strb	r3, [r2, #0]
											break;
 8006c6e:	e013      	b.n	8006c98 <analizar_Rx_03_local+0x414>
										case 3:
											mascara_03 = 0b11111000;
 8006c70:	4a3c      	ldr	r2, [pc, #240]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006c72:	23f8      	movs	r3, #248	; 0xf8
 8006c74:	7013      	strb	r3, [r2, #0]
											break;
 8006c76:	e00f      	b.n	8006c98 <analizar_Rx_03_local+0x414>
										case 4:
											mascara_03 = 0b11110000;
 8006c78:	4a3a      	ldr	r2, [pc, #232]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006c7a:	23f0      	movs	r3, #240	; 0xf0
 8006c7c:	7013      	strb	r3, [r2, #0]
											break;
 8006c7e:	e00b      	b.n	8006c98 <analizar_Rx_03_local+0x414>
										case 5:
											mascara_03 = 0b11100000;
 8006c80:	4a38      	ldr	r2, [pc, #224]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006c82:	23e0      	movs	r3, #224	; 0xe0
 8006c84:	7013      	strb	r3, [r2, #0]
											break;
 8006c86:	e007      	b.n	8006c98 <analizar_Rx_03_local+0x414>
										case 6:
											mascara_03 = 0b11000000;
 8006c88:	4a36      	ldr	r2, [pc, #216]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006c8a:	23c0      	movs	r3, #192	; 0xc0
 8006c8c:	7013      	strb	r3, [r2, #0]
											break;
 8006c8e:	e003      	b.n	8006c98 <analizar_Rx_03_local+0x414>
										case 7:
											mascara_03 = 0b10000000;
 8006c90:	4a34      	ldr	r2, [pc, #208]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006c92:	2380      	movs	r3, #128	; 0x80
 8006c94:	7013      	strb	r3, [r2, #0]
											break;
 8006c96:	bf00      	nop
									}
									for (uint8_t i=0; i<cant_bytes_03; i++)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8006c9e:	e046      	b.n	8006d2e <analizar_Rx_03_local+0x4aa>
									{
										Punt_buffer_03_Rx++;
 8006ca0:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	4a27      	ldr	r2, [pc, #156]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006caa:	8013      	strh	r3, [r2, #0]
										analizar_pos_crc_Rx_03();
 8006cac:	f000 fd5a 	bl	8007764 <analizar_pos_crc_Rx_03>
										var_orig_03 = Buffer_03_Rx_W [Punt_buffer_03_Rx];
 8006cb0:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <analizar_Rx_03_local+0x4c8>)
 8006cb8:	5c9b      	ldrb	r3, [r3, r2]
 8006cba:	4a25      	ldr	r2, [pc, #148]	; (8006d50 <analizar_Rx_03_local+0x4cc>)
 8006cbc:	7013      	strb	r3, [r2, #0]

										var_dest_03 = Buffer_mem_D [Punt_buffer_mem_D + primer_byte_03 + i];
 8006cbe:	4b25      	ldr	r3, [pc, #148]	; (8006d54 <analizar_Rx_03_local+0x4d0>)
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	4b24      	ldr	r3, [pc, #144]	; (8006d58 <analizar_Rx_03_local+0x4d4>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	441a      	add	r2, r3
 8006cca:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006cce:	441a      	add	r2, r3
 8006cd0:	4b22      	ldr	r3, [pc, #136]	; (8006d5c <analizar_Rx_03_local+0x4d8>)
 8006cd2:	5c9b      	ldrb	r3, [r3, r2]
 8006cd4:	4a22      	ldr	r2, [pc, #136]	; (8006d60 <analizar_Rx_03_local+0x4dc>)
 8006cd6:	7013      	strb	r3, [r2, #0]

										var_final_03 = (var_orig_03 & mascara_03) | (var_dest_03 & !mascara_03);
 8006cd8:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <analizar_Rx_03_local+0x4cc>)
 8006cda:	781a      	ldrb	r2, [r3, #0]
 8006cdc:	4b21      	ldr	r3, [pc, #132]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	b259      	sxtb	r1, r3
 8006ce6:	4b1f      	ldr	r3, [pc, #124]	; (8006d64 <analizar_Rx_03_local+0x4e0>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bf0c      	ite	eq
 8006cee:	2301      	moveq	r3, #1
 8006cf0:	2300      	movne	r3, #0
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	b25a      	sxtb	r2, r3
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <analizar_Rx_03_local+0x4dc>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	b25b      	sxtb	r3, r3
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	b25b      	sxtb	r3, r3
 8006d00:	430b      	orrs	r3, r1
 8006d02:	b25b      	sxtb	r3, r3
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <analizar_Rx_03_local+0x4e4>)
 8006d08:	7013      	strb	r3, [r2, #0]

										Buffer_mem_D [Punt_buffer_mem_D + primer_byte_03 + i] = var_final_03;
 8006d0a:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <analizar_Rx_03_local+0x4d0>)
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <analizar_Rx_03_local+0x4d4>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	441a      	add	r2, r3
 8006d16:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006d1a:	18d1      	adds	r1, r2, r3
 8006d1c:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <analizar_Rx_03_local+0x4e4>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	4a0e      	ldr	r2, [pc, #56]	; (8006d5c <analizar_Rx_03_local+0x4d8>)
 8006d22:	5453      	strb	r3, [r2, r1]
									for (uint8_t i=0; i<cant_bytes_03; i++)
 8006d24:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006d28:	3301      	adds	r3, #1
 8006d2a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8006d2e:	4b10      	ldr	r3, [pc, #64]	; (8006d70 <analizar_Rx_03_local+0x4ec>)
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d3b2      	bcc.n	8006ca0 <analizar_Rx_03_local+0x41c>
									}
								}
								Punt_buffer_03_Rx++;
 8006d3a:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	4a01      	ldr	r2, [pc, #4]	; (8006d48 <analizar_Rx_03_local+0x4c4>)
 8006d44:	8013      	strh	r3, [r2, #0]
 8006d46:	e0eb      	b.n	8006f20 <analizar_Rx_03_local+0x69c>
 8006d48:	2000c340 	.word	0x2000c340
 8006d4c:	2000c23c 	.word	0x2000c23c
 8006d50:	2000c34d 	.word	0x2000c34d
 8006d54:	20003278 	.word	0x20003278
 8006d58:	2000c34b 	.word	0x2000c34b
 8006d5c:	20000930 	.word	0x20000930
 8006d60:	2000c34e 	.word	0x2000c34e
 8006d64:	2000c34c 	.word	0x2000c34c
 8006d68:	2000c34f 	.word	0x2000c34f
 8006d6c:	20002db4 	.word	0x20002db4
 8006d70:	2000c34a 	.word	0x2000c34a
 8006d74:	2000c344 	.word	0x2000c344
 8006d78:	2000c346 	.word	0x2000c346
							}
						}
						else   // 30/4/0  ==================================================
						{
							if(Buffer_03_Rx_W [Punt_buffer_03_Rx] == 30)  // = 30
 8006d7c:	4b85      	ldr	r3, [pc, #532]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	4b85      	ldr	r3, [pc, #532]	; (8006f98 <analizar_Rx_03_local+0x714>)
 8006d84:	5c9b      	ldrb	r3, [r3, r2]
 8006d86:	2b1e      	cmp	r3, #30
 8006d88:	f040 80c7 	bne.w	8006f1a <analizar_Rx_03_local+0x696>
							{
								Punt_buffer_03_Rx++;
 8006d8c:	4b81      	ldr	r3, [pc, #516]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	4a7f      	ldr	r2, [pc, #508]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006d96:	8013      	strh	r3, [r2, #0]
								analizar_pos_crc_Rx_03();
 8006d98:	f000 fce4 	bl	8007764 <analizar_pos_crc_Rx_03>

								if(Buffer_03_Rx_W [Punt_buffer_03_Rx] == 4)  //4
 8006d9c:	4b7d      	ldr	r3, [pc, #500]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	4b7d      	ldr	r3, [pc, #500]	; (8006f98 <analizar_Rx_03_local+0x714>)
 8006da4:	5c9b      	ldrb	r3, [r3, r2]
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	f040 80ba 	bne.w	8006f20 <analizar_Rx_03_local+0x69c>
								{
									Punt_buffer_03_Rx++;
 8006dac:	4b79      	ldr	r3, [pc, #484]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	4a77      	ldr	r2, [pc, #476]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006db6:	8013      	strh	r3, [r2, #0]
									analizar_pos_crc_Rx_03();
 8006db8:	f000 fcd4 	bl	8007764 <analizar_pos_crc_Rx_03>
									if(Buffer_03_Rx_W [Punt_buffer_03_Rx] == 0)  // 30 4 0
 8006dbc:	4b75      	ldr	r3, [pc, #468]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4b75      	ldr	r3, [pc, #468]	; (8006f98 <analizar_Rx_03_local+0x714>)
 8006dc4:	5c9b      	ldrb	r3, [r3, r2]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f040 80a0 	bne.w	8006f0c <analizar_Rx_03_local+0x688>
									{
											Punt_buffer_03_Rx++;
 8006dcc:	4b71      	ldr	r3, [pc, #452]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	4a6f      	ldr	r2, [pc, #444]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006dd6:	8013      	strh	r3, [r2, #0]
											analizar_pos_crc_Rx_03();
 8006dd8:	f000 fcc4 	bl	8007764 <analizar_pos_crc_Rx_03>
											Inicio_03 = Buffer_03_Rx_W [Punt_buffer_03_Rx];
 8006ddc:	4b6d      	ldr	r3, [pc, #436]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	4b6d      	ldr	r3, [pc, #436]	; (8006f98 <analizar_Rx_03_local+0x714>)
 8006de4:	5c9b      	ldrb	r3, [r3, r2]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	4a6c      	ldr	r2, [pc, #432]	; (8006f9c <analizar_Rx_03_local+0x718>)
 8006dea:	8013      	strh	r3, [r2, #0]

											Punt_buffer_03_Rx++;
 8006dec:	4b69      	ldr	r3, [pc, #420]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	3301      	adds	r3, #1
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	4a67      	ldr	r2, [pc, #412]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006df6:	8013      	strh	r3, [r2, #0]
											analizar_pos_crc_Rx_03();
 8006df8:	f000 fcb4 	bl	8007764 <analizar_pos_crc_Rx_03>
											Final_03 = Buffer_03_Rx_W [Punt_buffer_03_Rx];
 8006dfc:	4b65      	ldr	r3, [pc, #404]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	4b65      	ldr	r3, [pc, #404]	; (8006f98 <analizar_Rx_03_local+0x714>)
 8006e04:	5c9b      	ldrb	r3, [r3, r2]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	4a65      	ldr	r2, [pc, #404]	; (8006fa0 <analizar_Rx_03_local+0x71c>)
 8006e0a:	8013      	strh	r3, [r2, #0]

											cant_bytes_03 = 2 * cant_bytes_a(Inicio_03, Final_03);
 8006e0c:	4b63      	ldr	r3, [pc, #396]	; (8006f9c <analizar_Rx_03_local+0x718>)
 8006e0e:	881a      	ldrh	r2, [r3, #0]
 8006e10:	4b63      	ldr	r3, [pc, #396]	; (8006fa0 <analizar_Rx_03_local+0x71c>)
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	4619      	mov	r1, r3
 8006e16:	4610      	mov	r0, r2
 8006e18:	f7fc f968 	bl	80030ec <cant_bytes_a>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	4a60      	ldr	r2, [pc, #384]	; (8006fa4 <analizar_Rx_03_local+0x720>)
 8006e24:	7013      	strb	r3, [r2, #0]
											primer_byte_03 = Inicio_03;
 8006e26:	4b5d      	ldr	r3, [pc, #372]	; (8006f9c <analizar_Rx_03_local+0x718>)
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	4a5e      	ldr	r2, [pc, #376]	; (8006fa8 <analizar_Rx_03_local+0x724>)
 8006e2e:	7013      	strb	r3, [r2, #0]

											for (uint8_t i=0; i<cant_bytes_03; i++)
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8006e36:	e063      	b.n	8006f00 <analizar_Rx_03_local+0x67c>
											{
												Buffer_mem_A [Punt_buffer_mem_A + primer_byte_03 + i] = 0;
 8006e38:	4b5c      	ldr	r3, [pc, #368]	; (8006fac <analizar_Rx_03_local+0x728>)
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	4b5a      	ldr	r3, [pc, #360]	; (8006fa8 <analizar_Rx_03_local+0x724>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	441a      	add	r2, r3
 8006e44:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006e48:	441a      	add	r2, r3
 8006e4a:	4959      	ldr	r1, [pc, #356]	; (8006fb0 <analizar_Rx_03_local+0x72c>)
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	548b      	strb	r3, [r1, r2]
												i++;
 8006e50:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006e54:	3301      	adds	r3, #1
 8006e56:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
												Buffer_mem_A [Punt_buffer_mem_A + primer_byte_03 + i] = 0;
 8006e5a:	4b54      	ldr	r3, [pc, #336]	; (8006fac <analizar_Rx_03_local+0x728>)
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	4b51      	ldr	r3, [pc, #324]	; (8006fa8 <analizar_Rx_03_local+0x724>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	441a      	add	r2, r3
 8006e66:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006e6a:	441a      	add	r2, r3
 8006e6c:	4950      	ldr	r1, [pc, #320]	; (8006fb0 <analizar_Rx_03_local+0x72c>)
 8006e6e:	2300      	movs	r3, #0
 8006e70:	548b      	strb	r3, [r1, r2]
												i++;
 8006e72:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006e76:	3301      	adds	r3, #1
 8006e78:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
												Punt_buffer_03_Rx++;
 8006e7c:	4b45      	ldr	r3, [pc, #276]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	3301      	adds	r3, #1
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	4a43      	ldr	r2, [pc, #268]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006e86:	8013      	strh	r3, [r2, #0]
												analizar_pos_crc_Rx_03();
 8006e88:	f000 fc6c 	bl	8007764 <analizar_pos_crc_Rx_03>
												var_orig_03 = Buffer_03_Rx_W [Punt_buffer_03_Rx];
 8006e8c:	4b41      	ldr	r3, [pc, #260]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	461a      	mov	r2, r3
 8006e92:	4b41      	ldr	r3, [pc, #260]	; (8006f98 <analizar_Rx_03_local+0x714>)
 8006e94:	5c9b      	ldrb	r3, [r3, r2]
 8006e96:	4a47      	ldr	r2, [pc, #284]	; (8006fb4 <analizar_Rx_03_local+0x730>)
 8006e98:	7013      	strb	r3, [r2, #0]
												Buffer_mem_A [Punt_buffer_mem_A + primer_byte_03 + i] = var_orig_03;
 8006e9a:	4b44      	ldr	r3, [pc, #272]	; (8006fac <analizar_Rx_03_local+0x728>)
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	4b41      	ldr	r3, [pc, #260]	; (8006fa8 <analizar_Rx_03_local+0x724>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	441a      	add	r2, r3
 8006ea6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006eaa:	18d1      	adds	r1, r2, r3
 8006eac:	4b41      	ldr	r3, [pc, #260]	; (8006fb4 <analizar_Rx_03_local+0x730>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	4a3f      	ldr	r2, [pc, #252]	; (8006fb0 <analizar_Rx_03_local+0x72c>)
 8006eb2:	5453      	strb	r3, [r2, r1]
												i++;
 8006eb4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006eb8:	3301      	adds	r3, #1
 8006eba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
												Punt_buffer_03_Rx++;
 8006ebe:	4b35      	ldr	r3, [pc, #212]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	4a33      	ldr	r2, [pc, #204]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006ec8:	8013      	strh	r3, [r2, #0]
												analizar_pos_crc_Rx_03();
 8006eca:	f000 fc4b 	bl	8007764 <analizar_pos_crc_Rx_03>
												var_orig_03 = Buffer_03_Rx_W [Punt_buffer_03_Rx];
 8006ece:	4b31      	ldr	r3, [pc, #196]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4b30      	ldr	r3, [pc, #192]	; (8006f98 <analizar_Rx_03_local+0x714>)
 8006ed6:	5c9b      	ldrb	r3, [r3, r2]
 8006ed8:	4a36      	ldr	r2, [pc, #216]	; (8006fb4 <analizar_Rx_03_local+0x730>)
 8006eda:	7013      	strb	r3, [r2, #0]
												Buffer_mem_A [Punt_buffer_mem_A + primer_byte_03 + i] = var_orig_03;
 8006edc:	4b33      	ldr	r3, [pc, #204]	; (8006fac <analizar_Rx_03_local+0x728>)
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4b31      	ldr	r3, [pc, #196]	; (8006fa8 <analizar_Rx_03_local+0x724>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	441a      	add	r2, r3
 8006ee8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006eec:	18d1      	adds	r1, r2, r3
 8006eee:	4b31      	ldr	r3, [pc, #196]	; (8006fb4 <analizar_Rx_03_local+0x730>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	4a2f      	ldr	r2, [pc, #188]	; (8006fb0 <analizar_Rx_03_local+0x72c>)
 8006ef4:	5453      	strb	r3, [r2, r1]
											for (uint8_t i=0; i<cant_bytes_03; i++)
 8006ef6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006efa:	3301      	adds	r3, #1
 8006efc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8006f00:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <analizar_Rx_03_local+0x720>)
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d395      	bcc.n	8006e38 <analizar_Rx_03_local+0x5b4>
											}
									}
									Punt_buffer_03_Rx++;
 8006f0c:	4b21      	ldr	r3, [pc, #132]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	3301      	adds	r3, #1
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4a1f      	ldr	r2, [pc, #124]	; (8006f94 <analizar_Rx_03_local+0x710>)
 8006f16:	8013      	strh	r3, [r2, #0]
 8006f18:	e002      	b.n	8006f20 <analizar_Rx_03_local+0x69c>
								}
							} // 30/
							else   // 12/1/40 --> (Buffer_03_Rx_W [Punt_buffer_03_Rx] == 12)
							{
								Flag_Fin_Buffer_03 = 1;
 8006f1a:	4a27      	ldr	r2, [pc, #156]	; (8006fb8 <analizar_Rx_03_local+0x734>)
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	8013      	strh	r3, [r2, #0]
				while (Flag_Fin_Buffer_03 == 0)
 8006f20:	4b25      	ldr	r3, [pc, #148]	; (8006fb8 <analizar_Rx_03_local+0x734>)
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f43f ad05 	beq.w	8006934 <analizar_Rx_03_local+0xb0>
 8006f2a:	e007      	b.n	8006f3c <analizar_Rx_03_local+0x6b8>
					}  //(Flag_Fin_Buffer_03 == 0)
				}  // While .....final
			}
			else
			{
				Flag_Fin_Buffer_03 = 1;
 8006f2c:	4a22      	ldr	r2, [pc, #136]	; (8006fb8 <analizar_Rx_03_local+0x734>)
 8006f2e:	2301      	movs	r3, #1
 8006f30:	8013      	strh	r3, [r2, #0]
 8006f32:	e003      	b.n	8006f3c <analizar_Rx_03_local+0x6b8>
			}
			//RxTotal06_W = 0;  //DEBUGGER
		}
		else
		{
			HAL_GPIO_TogglePin(Led_Azul_GPIO_Port, Led_Azul_Pin);
 8006f34:	2120      	movs	r1, #32
 8006f36:	4821      	ldr	r0, [pc, #132]	; (8006fbc <analizar_Rx_03_local+0x738>)
 8006f38:	f005 f85d 	bl	800bff6 <HAL_GPIO_TogglePin>
		}
		//=======================================================================================
		//  DETECCION DE VARIACION EN LAS ENTRADAS PARA RESPUESTA NO SOLICITADA
		// Punt_Buffer_UR_Rec = 0;
		for(uint16_t j=68 + (dispositivos_r - 1) * 32; j<68 + (dispositivos_r - 1) * 32 + 32; j++)  // 1092 bytes //(68 + CANT_DISP_R * 32 )
 8006f3c:	4b20      	ldr	r3, [pc, #128]	; (8006fc0 <analizar_Rx_03_local+0x73c>)
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	015b      	lsls	r3, r3, #5
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3344      	adds	r3, #68	; 0x44
 8006f4a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006f4e:	e1f5      	b.n	800733c <analizar_Rx_03_local+0xab8>
		{
				if (Buffer_mem_D [j] != Buffer_mem_D_temp [j])
 8006f50:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8006f54:	4b1b      	ldr	r3, [pc, #108]	; (8006fc4 <analizar_Rx_03_local+0x740>)
 8006f56:	5c99      	ldrb	r1, [r3, r2]
 8006f58:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8006f5c:	4b1a      	ldr	r3, [pc, #104]	; (8006fc8 <analizar_Rx_03_local+0x744>)
 8006f5e:	5c9b      	ldrb	r3, [r3, r2]
 8006f60:	4299      	cmp	r1, r3
 8006f62:	f000 81e6 	beq.w	8007332 <analizar_Rx_03_local+0xaae>
				{
					//Flag_mem_D_temp = 1;
					Var_aux_UR = Buffer_mem_D [j] ^ Buffer_mem_D_temp [j];
 8006f66:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8006f6a:	4b16      	ldr	r3, [pc, #88]	; (8006fc4 <analizar_Rx_03_local+0x740>)
 8006f6c:	5c99      	ldrb	r1, [r3, r2]
 8006f6e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8006f72:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <analizar_Rx_03_local+0x744>)
 8006f74:	5c9b      	ldrb	r3, [r3, r2]
 8006f76:	404b      	eors	r3, r1
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	4a13      	ldr	r2, [pc, #76]	; (8006fcc <analizar_Rx_03_local+0x748>)
 8006f7e:	8013      	strh	r3, [r2, #0]
					if (Var_aux_UR)
 8006f80:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <analizar_Rx_03_local+0x748>)
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 81cc 	beq.w	8007322 <analizar_Rx_03_local+0xa9e>
					{
						for(uint8_t k=0; k<8; k++)
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8006f90:	e1c2      	b.n	8007318 <analizar_Rx_03_local+0xa94>
 8006f92:	bf00      	nop
 8006f94:	2000c340 	.word	0x2000c340
 8006f98:	2000c23c 	.word	0x2000c23c
 8006f9c:	2000c344 	.word	0x2000c344
 8006fa0:	2000c346 	.word	0x2000c346
 8006fa4:	2000c34a 	.word	0x2000c34a
 8006fa8:	2000c34b 	.word	0x2000c34b
 8006fac:	2000327a 	.word	0x2000327a
 8006fb0:	20000d74 	.word	0x20000d74
 8006fb4:	2000c34d 	.word	0x2000c34d
 8006fb8:	2000c348 	.word	0x2000c348
 8006fbc:	40020400 	.word	0x40020400
 8006fc0:	20003294 	.word	0x20003294
 8006fc4:	20000930 	.word	0x20000930
 8006fc8:	20002db4 	.word	0x20002db4
 8006fcc:	20003ba2 	.word	0x20003ba2
						{
							if(Var_aux_UR & 1)
 8006fd0:	4b24      	ldr	r3, [pc, #144]	; (8007064 <analizar_Rx_03_local+0x7e0>)
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 8192 	beq.w	8007302 <analizar_Rx_03_local+0xa7e>
							{
								conv_a_epoch();  //
 8006fde:	f7ff f8ff 	bl	80061e0 <conv_a_epoch>
								Ent_dnp_UR = j * 8  + k;  //crc_h = crc >> 8;
 8006fe2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	4413      	add	r3, r2
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	4a1c      	ldr	r2, [pc, #112]	; (8007068 <analizar_Rx_03_local+0x7e4>)
 8006ff6:	8013      	strh	r3, [r2, #0]


								Buffer_UR [Punt_Buffer_UR_Rec][0] = Ent_dnp_UR % 256; // Parte baja (módulo 256)
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <analizar_Rx_03_local+0x7e4>)
 8006ffa:	881a      	ldrh	r2, [r3, #0]
 8006ffc:	4b1b      	ldr	r3, [pc, #108]	; (800706c <analizar_Rx_03_local+0x7e8>)
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	4619      	mov	r1, r3
 8007002:	b2d0      	uxtb	r0, r2
 8007004:	4a1a      	ldr	r2, [pc, #104]	; (8007070 <analizar_Rx_03_local+0x7ec>)
 8007006:	460b      	mov	r3, r1
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	440b      	add	r3, r1
 800700c:	441a      	add	r2, r3
 800700e:	4603      	mov	r3, r0
 8007010:	7013      	strb	r3, [r2, #0]
								Buffer_UR [Punt_Buffer_UR_Rec][1] = Ent_dnp_UR >> 8;  // Parte alta (División entera)
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <analizar_Rx_03_local+0x7e4>)
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	0a1b      	lsrs	r3, r3, #8
 8007018:	b29a      	uxth	r2, r3
 800701a:	4b14      	ldr	r3, [pc, #80]	; (800706c <analizar_Rx_03_local+0x7e8>)
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	4619      	mov	r1, r3
 8007020:	b2d0      	uxtb	r0, r2
 8007022:	4a13      	ldr	r2, [pc, #76]	; (8007070 <analizar_Rx_03_local+0x7ec>)
 8007024:	460b      	mov	r3, r1
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	440b      	add	r3, r1
 800702a:	4413      	add	r3, r2
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	4603      	mov	r3, r0
 8007030:	7013      	strb	r3, [r2, #0]

								if(Buffer_mem_D [j] & (1<<k))
 8007032:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8007036:	4b0f      	ldr	r3, [pc, #60]	; (8007074 <analizar_Rx_03_local+0x7f0>)
 8007038:	5c9b      	ldrb	r3, [r3, r2]
 800703a:	461a      	mov	r2, r3
 800703c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8007040:	fa42 f303 	asr.w	r3, r2, r3
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d015      	beq.n	8007078 <analizar_Rx_03_local+0x7f4>
								{
									Buffer_UR [Punt_Buffer_UR_Rec][2] = 129; //1;
 800704c:	4b07      	ldr	r3, [pc, #28]	; (800706c <analizar_Rx_03_local+0x7e8>)
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	4619      	mov	r1, r3
 8007052:	4a07      	ldr	r2, [pc, #28]	; (8007070 <analizar_Rx_03_local+0x7ec>)
 8007054:	460b      	mov	r3, r1
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	440b      	add	r3, r1
 800705a:	4413      	add	r3, r2
 800705c:	1c9a      	adds	r2, r3, #2
 800705e:	2381      	movs	r3, #129	; 0x81
 8007060:	7013      	strb	r3, [r2, #0]
 8007062:	e014      	b.n	800708e <analizar_Rx_03_local+0x80a>
 8007064:	20003ba2 	.word	0x20003ba2
 8007068:	20003ba0 	.word	0x20003ba0
 800706c:	20003b9e 	.word	0x20003b9e
 8007070:	2000329c 	.word	0x2000329c
 8007074:	20000930 	.word	0x20000930
								}
								else
								{
									Buffer_UR [Punt_Buffer_UR_Rec][2] = 128; //0;
 8007078:	4bc9      	ldr	r3, [pc, #804]	; (80073a0 <analizar_Rx_03_local+0xb1c>)
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	4619      	mov	r1, r3
 800707e:	4ac9      	ldr	r2, [pc, #804]	; (80073a4 <analizar_Rx_03_local+0xb20>)
 8007080:	460b      	mov	r3, r1
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	440b      	add	r3, r1
 8007086:	4413      	add	r3, r2
 8007088:	1c9a      	adds	r2, r3, #2
 800708a:	2380      	movs	r3, #128	; 0x80
 800708c:	7013      	strb	r3, [r2, #0]
								}

								tiempo_epoch_aux = tiempo_epoch*1000 + calendario [3]/256*1000; // En milisegundos
 800708e:	4bc6      	ldr	r3, [pc, #792]	; (80073a8 <analizar_Rx_03_local+0xb24>)
 8007090:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007094:	4622      	mov	r2, r4
 8007096:	462b      	mov	r3, r5
 8007098:	f04f 0000 	mov.w	r0, #0
 800709c:	f04f 0100 	mov.w	r1, #0
 80070a0:	0159      	lsls	r1, r3, #5
 80070a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070a6:	0150      	lsls	r0, r2, #5
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	ebb2 0804 	subs.w	r8, r2, r4
 80070b0:	eb63 0905 	sbc.w	r9, r3, r5
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80070c0:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80070c4:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80070c8:	4690      	mov	r8, r2
 80070ca:	4699      	mov	r9, r3
 80070cc:	eb18 0304 	adds.w	r3, r8, r4
 80070d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80070d2:	eb49 0305 	adc.w	r3, r9, r5
 80070d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80070e4:	4629      	mov	r1, r5
 80070e6:	00cb      	lsls	r3, r1, #3
 80070e8:	4621      	mov	r1, r4
 80070ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ee:	4621      	mov	r1, r4
 80070f0:	00ca      	lsls	r2, r1, #3
 80070f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	4bac      	ldr	r3, [pc, #688]	; (80073ac <analizar_Rx_03_local+0xb28>)
 80070fc:	78db      	ldrb	r3, [r3, #3]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	da00      	bge.n	8007104 <analizar_Rx_03_local+0x880>
 8007102:	33ff      	adds	r3, #255	; 0xff
 8007104:	121b      	asrs	r3, r3, #8
 8007106:	461a      	mov	r2, r3
 8007108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	17da      	asrs	r2, r3, #31
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28
 8007114:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007116:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800711a:	4623      	mov	r3, r4
 800711c:	18c3      	adds	r3, r0, r3
 800711e:	623b      	str	r3, [r7, #32]
 8007120:	462b      	mov	r3, r5
 8007122:	eb41 0303 	adc.w	r3, r1, r3
 8007126:	627b      	str	r3, [r7, #36]	; 0x24
 8007128:	4ba1      	ldr	r3, [pc, #644]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 800712a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800712e:	e9c3 1200 	strd	r1, r2, [r3]
								Buffer_UR [Punt_Buffer_UR_Rec][8] = tiempo_epoch_aux/1099511627776; //256^5
 8007132:	4b9f      	ldr	r3, [pc, #636]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	f04f 0000 	mov.w	r0, #0
 800713c:	f04f 0100 	mov.w	r1, #0
 8007140:	0a18      	lsrs	r0, r3, #8
 8007142:	2100      	movs	r1, #0
 8007144:	4b96      	ldr	r3, [pc, #600]	; (80073a0 <analizar_Rx_03_local+0xb1c>)
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	461c      	mov	r4, r3
 800714a:	b2c1      	uxtb	r1, r0
 800714c:	4a95      	ldr	r2, [pc, #596]	; (80073a4 <analizar_Rx_03_local+0xb20>)
 800714e:	4623      	mov	r3, r4
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	4423      	add	r3, r4
 8007154:	4413      	add	r3, r2
 8007156:	f103 0208 	add.w	r2, r3, #8
 800715a:	460b      	mov	r3, r1
 800715c:	7013      	strb	r3, [r2, #0]
								tiempo_epoch_aux = tiempo_epoch*1000 % 1099511627776;
 800715e:	4b92      	ldr	r3, [pc, #584]	; (80073a8 <analizar_Rx_03_local+0xb24>)
 8007160:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007164:	4622      	mov	r2, r4
 8007166:	462b      	mov	r3, r5
 8007168:	f04f 0000 	mov.w	r0, #0
 800716c:	f04f 0100 	mov.w	r1, #0
 8007170:	0159      	lsls	r1, r3, #5
 8007172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007176:	0150      	lsls	r0, r2, #5
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	ebb2 0a04 	subs.w	sl, r2, r4
 8007180:	eb63 0b05 	sbc.w	fp, r3, r5
 8007184:	f04f 0200 	mov.w	r2, #0
 8007188:	f04f 0300 	mov.w	r3, #0
 800718c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007190:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8007194:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8007198:	4692      	mov	sl, r2
 800719a:	469b      	mov	fp, r3
 800719c:	eb1a 0304 	adds.w	r3, sl, r4
 80071a0:	633b      	str	r3, [r7, #48]	; 0x30
 80071a2:	eb4b 0305 	adc.w	r3, fp, r5
 80071a6:	637b      	str	r3, [r7, #52]	; 0x34
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	f04f 0300 	mov.w	r3, #0
 80071b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80071b4:	4629      	mov	r1, r5
 80071b6:	00cb      	lsls	r3, r1, #3
 80071b8:	4621      	mov	r1, r4
 80071ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071be:	4621      	mov	r1, r4
 80071c0:	00ca      	lsls	r2, r1, #3
 80071c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80071c6:	f022 0107 	bic.w	r1, r2, #7
 80071ca:	61b9      	str	r1, [r7, #24]
 80071cc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80071d0:	61fb      	str	r3, [r7, #28]
 80071d2:	4b77      	ldr	r3, [pc, #476]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 80071d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80071d8:	e9c3 1200 	strd	r1, r2, [r3]
								Buffer_UR [Punt_Buffer_UR_Rec][7] = tiempo_epoch_aux/4294967296;    //256^4
 80071dc:	4b74      	ldr	r3, [pc, #464]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f04f 0100 	mov.w	r1, #0
 80071ea:	0018      	movs	r0, r3
 80071ec:	2100      	movs	r1, #0
 80071ee:	4b6c      	ldr	r3, [pc, #432]	; (80073a0 <analizar_Rx_03_local+0xb1c>)
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	461c      	mov	r4, r3
 80071f4:	b2c1      	uxtb	r1, r0
 80071f6:	4a6b      	ldr	r2, [pc, #428]	; (80073a4 <analizar_Rx_03_local+0xb20>)
 80071f8:	4623      	mov	r3, r4
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	4423      	add	r3, r4
 80071fe:	4413      	add	r3, r2
 8007200:	1dda      	adds	r2, r3, #7
 8007202:	460b      	mov	r3, r1
 8007204:	7013      	strb	r3, [r2, #0]
								tiempo_epoch_aux = tiempo_epoch_aux % 4294967296;
 8007206:	4b6a      	ldr	r3, [pc, #424]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	613a      	str	r2, [r7, #16]
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	4b67      	ldr	r3, [pc, #412]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 8007214:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007218:	e9c3 1200 	strd	r1, r2, [r3]
								Buffer_UR [Punt_Buffer_UR_Rec][6] = tiempo_epoch_aux/16777216;      //256^3
 800721c:	4b64      	ldr	r3, [pc, #400]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	f04f 0000 	mov.w	r0, #0
 8007226:	f04f 0100 	mov.w	r1, #0
 800722a:	0e10      	lsrs	r0, r2, #24
 800722c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007230:	0e19      	lsrs	r1, r3, #24
 8007232:	4b5b      	ldr	r3, [pc, #364]	; (80073a0 <analizar_Rx_03_local+0xb1c>)
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	461c      	mov	r4, r3
 8007238:	b2c1      	uxtb	r1, r0
 800723a:	4a5a      	ldr	r2, [pc, #360]	; (80073a4 <analizar_Rx_03_local+0xb20>)
 800723c:	4623      	mov	r3, r4
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	4423      	add	r3, r4
 8007242:	4413      	add	r3, r2
 8007244:	1d9a      	adds	r2, r3, #6
 8007246:	460b      	mov	r3, r1
 8007248:	7013      	strb	r3, [r2, #0]
								tiempo_epoch_aux = tiempo_epoch_aux % 16777216;
 800724a:	4b59      	ldr	r3, [pc, #356]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 8007254:	60bb      	str	r3, [r7, #8]
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	4b55      	ldr	r3, [pc, #340]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 800725c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007260:	e9c3 1200 	strd	r1, r2, [r3]
								Buffer_UR [Punt_Buffer_UR_Rec][5] = tiempo_epoch_aux/65536;         //256^2
 8007264:	4b52      	ldr	r3, [pc, #328]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f04f 0000 	mov.w	r0, #0
 800726e:	f04f 0100 	mov.w	r1, #0
 8007272:	0c10      	lsrs	r0, r2, #16
 8007274:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8007278:	0c19      	lsrs	r1, r3, #16
 800727a:	4b49      	ldr	r3, [pc, #292]	; (80073a0 <analizar_Rx_03_local+0xb1c>)
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	461c      	mov	r4, r3
 8007280:	b2c1      	uxtb	r1, r0
 8007282:	4a48      	ldr	r2, [pc, #288]	; (80073a4 <analizar_Rx_03_local+0xb20>)
 8007284:	4623      	mov	r3, r4
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4423      	add	r3, r4
 800728a:	4413      	add	r3, r2
 800728c:	1d5a      	adds	r2, r3, #5
 800728e:	460b      	mov	r3, r1
 8007290:	7013      	strb	r3, [r2, #0]
								tiempo_epoch_aux = tiempo_epoch_aux % 65536;
 8007292:	4b47      	ldr	r3, [pc, #284]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	b293      	uxth	r3, r2
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	2300      	movs	r3, #0
 800729e:	607b      	str	r3, [r7, #4]
 80072a0:	4b43      	ldr	r3, [pc, #268]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 80072a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80072a6:	e9c3 1200 	strd	r1, r2, [r3]
								Buffer_UR [Punt_Buffer_UR_Rec][4] = tiempo_epoch_aux/256;           //256^1
 80072aa:	4b41      	ldr	r3, [pc, #260]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f04f 0000 	mov.w	r0, #0
 80072b4:	f04f 0100 	mov.w	r1, #0
 80072b8:	0a10      	lsrs	r0, r2, #8
 80072ba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80072be:	0a19      	lsrs	r1, r3, #8
 80072c0:	4b37      	ldr	r3, [pc, #220]	; (80073a0 <analizar_Rx_03_local+0xb1c>)
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	461c      	mov	r4, r3
 80072c6:	b2c1      	uxtb	r1, r0
 80072c8:	4a36      	ldr	r2, [pc, #216]	; (80073a4 <analizar_Rx_03_local+0xb20>)
 80072ca:	4623      	mov	r3, r4
 80072cc:	00db      	lsls	r3, r3, #3
 80072ce:	4423      	add	r3, r4
 80072d0:	4413      	add	r3, r2
 80072d2:	1d1a      	adds	r2, r3, #4
 80072d4:	460b      	mov	r3, r1
 80072d6:	7013      	strb	r3, [r2, #0]
								Buffer_UR [Punt_Buffer_UR_Rec][3] = tiempo_epoch_aux % 256;         //256^0
 80072d8:	4b35      	ldr	r3, [pc, #212]	; (80073b0 <analizar_Rx_03_local+0xb2c>)
 80072da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072de:	4b30      	ldr	r3, [pc, #192]	; (80073a0 <analizar_Rx_03_local+0xb1c>)
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	461c      	mov	r4, r3
 80072e4:	b2c1      	uxtb	r1, r0
 80072e6:	4a2f      	ldr	r2, [pc, #188]	; (80073a4 <analizar_Rx_03_local+0xb20>)
 80072e8:	4623      	mov	r3, r4
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	4423      	add	r3, r4
 80072ee:	4413      	add	r3, r2
 80072f0:	1cda      	adds	r2, r3, #3
 80072f2:	460b      	mov	r3, r1
 80072f4:	7013      	strb	r3, [r2, #0]

								Punt_Buffer_UR_Rec++;  //// ok
 80072f6:	4b2a      	ldr	r3, [pc, #168]	; (80073a0 <analizar_Rx_03_local+0xb1c>)
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	3301      	adds	r3, #1
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	4a28      	ldr	r2, [pc, #160]	; (80073a0 <analizar_Rx_03_local+0xb1c>)
 8007300:	8013      	strh	r3, [r2, #0]
							}
							Var_aux_UR = Var_aux_UR >> 1;
 8007302:	4b2c      	ldr	r3, [pc, #176]	; (80073b4 <analizar_Rx_03_local+0xb30>)
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	085b      	lsrs	r3, r3, #1
 8007308:	b29b      	uxth	r3, r3
 800730a:	4a2a      	ldr	r2, [pc, #168]	; (80073b4 <analizar_Rx_03_local+0xb30>)
 800730c:	8013      	strh	r3, [r2, #0]
						for(uint8_t k=0; k<8; k++)
 800730e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8007312:	3301      	adds	r3, #1
 8007314:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8007318:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800731c:	2b07      	cmp	r3, #7
 800731e:	f67f ae57 	bls.w	8006fd0 <analizar_Rx_03_local+0x74c>
						}
					}
					Buffer_mem_D_temp [j] = Buffer_mem_D [j];
 8007322:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8007326:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 800732a:	4b23      	ldr	r3, [pc, #140]	; (80073b8 <analizar_Rx_03_local+0xb34>)
 800732c:	5c9b      	ldrb	r3, [r3, r2]
 800732e:	4a23      	ldr	r2, [pc, #140]	; (80073bc <analizar_Rx_03_local+0xb38>)
 8007330:	5453      	strb	r3, [r2, r1]
		for(uint16_t j=68 + (dispositivos_r - 1) * 32; j<68 + (dispositivos_r - 1) * 32 + 32; j++)  // 1092 bytes //(68 + CANT_DISP_R * 32 )
 8007332:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007336:	3301      	adds	r3, #1
 8007338:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800733c:	4b20      	ldr	r3, [pc, #128]	; (80073c0 <analizar_Rx_03_local+0xb3c>)
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	3b01      	subs	r3, #1
 8007342:	015b      	lsls	r3, r3, #5
 8007344:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8007348:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800734c:	429a      	cmp	r2, r3
 800734e:	f6bf adff 	bge.w	8006f50 <analizar_Rx_03_local+0x6cc>
					 //Punt_Buffer_UR_Rec++;
				}
		}
		//RxTotal06_W = 0;  //DEBUGGER

		if(dispositivos_r == CANT_DISP_R)
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <analizar_Rx_03_local+0xb40>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	b29a      	uxth	r2, r3
 8007358:	4b19      	ldr	r3, [pc, #100]	; (80073c0 <analizar_Rx_03_local+0xb3c>)
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	f040 81e0 	bne.w	8007722 <analizar_Rx_03_local+0xe9e>
		{
			//Ver si hay variaciones, y si las hay, enviar respuesta ---------

			if (Punt_Buffer_UR_Rec)    //Punt_Buffer_UR_Rec
 8007362:	4b0f      	ldr	r3, [pc, #60]	; (80073a0 <analizar_Rx_03_local+0xb1c>)
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 81db 	beq.w	8007722 <analizar_Rx_03_local+0xe9e>
			{
				//Armar respuesta
				Paq_UR [0] = 5;
 800736c:	4b16      	ldr	r3, [pc, #88]	; (80073c8 <analizar_Rx_03_local+0xb44>)
 800736e:	2205      	movs	r2, #5
 8007370:	701a      	strb	r2, [r3, #0]
				Paq_UR [1] = 100;
 8007372:	4b15      	ldr	r3, [pc, #84]	; (80073c8 <analizar_Rx_03_local+0xb44>)
 8007374:	2264      	movs	r2, #100	; 0x64
 8007376:	705a      	strb	r2, [r3, #1]
				// [2] --> Long
				Paq_UR [3] = 68;
 8007378:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <analizar_Rx_03_local+0xb44>)
 800737a:	2244      	movs	r2, #68	; 0x44
 800737c:	70da      	strb	r2, [r3, #3]
				Paq_UR [4] = MASTER & 255; // MASTER_L
 800737e:	4b13      	ldr	r3, [pc, #76]	; (80073cc <analizar_Rx_03_local+0xb48>)
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b2da      	uxtb	r2, r3
 8007384:	4b10      	ldr	r3, [pc, #64]	; (80073c8 <analizar_Rx_03_local+0xb44>)
 8007386:	711a      	strb	r2, [r3, #4]
				Paq_UR [5] = MASTER / 256; // MASTER_H
 8007388:	4b10      	ldr	r3, [pc, #64]	; (80073cc <analizar_Rx_03_local+0xb48>)
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	0a1b      	lsrs	r3, r3, #8
 800738e:	b29b      	uxth	r3, r3
 8007390:	b2da      	uxtb	r2, r3
 8007392:	4b0d      	ldr	r3, [pc, #52]	; (80073c8 <analizar_Rx_03_local+0xb44>)
 8007394:	715a      	strb	r2, [r3, #5]
				Paq_UR [6] = ID & 255; // ID_L
 8007396:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <analizar_Rx_03_local+0xb4c>)
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b2da      	uxtb	r2, r3
 800739c:	e01a      	b.n	80073d4 <analizar_Rx_03_local+0xb50>
 800739e:	bf00      	nop
 80073a0:	20003b9e 	.word	0x20003b9e
 80073a4:	2000329c 	.word	0x2000329c
 80073a8:	20003cb8 	.word	0x20003cb8
 80073ac:	20003cac 	.word	0x20003cac
 80073b0:	20003cc0 	.word	0x20003cc0
 80073b4:	20003ba2 	.word	0x20003ba2
 80073b8:	20000930 	.word	0x20000930
 80073bc:	20002db4 	.word	0x20002db4
 80073c0:	20003294 	.word	0x20003294
 80073c4:	20000924 	.word	0x20000924
 80073c8:	20003ba4 	.word	0x20003ba4
 80073cc:	20000920 	.word	0x20000920
 80073d0:	2000091e 	.word	0x2000091e
 80073d4:	4b9a      	ldr	r3, [pc, #616]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 80073d6:	719a      	strb	r2, [r3, #6]
				Paq_UR [7] = ID / 256; // ID_H
 80073d8:	4b9a      	ldr	r3, [pc, #616]	; (8007644 <analizar_Rx_03_local+0xdc0>)
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	0a1b      	lsrs	r3, r3, #8
 80073de:	b29b      	uxth	r3, r3
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	4b97      	ldr	r3, [pc, #604]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 80073e4:	71da      	strb	r2, [r3, #7]
				// [8] --> CRC
				// [9] --> CRC
				Paq_UR [10] = 192;      // Preguntar cuál sería la secuencia
 80073e6:	4b96      	ldr	r3, [pc, #600]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 80073e8:	22c0      	movs	r2, #192	; 0xc0
 80073ea:	729a      	strb	r2, [r3, #10]
				Paq_UR [11] = 192 | 16; // Preguntar cuál sería la secuencia
 80073ec:	4b94      	ldr	r3, [pc, #592]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 80073ee:	22d0      	movs	r2, #208	; 0xd0
 80073f0:	72da      	strb	r2, [r3, #11]
				Paq_UR [12] = 130;
 80073f2:	4b93      	ldr	r3, [pc, #588]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 80073f4:	2282      	movs	r2, #130	; 0x82
 80073f6:	731a      	strb	r2, [r3, #12]
				Paq_UR [13] = 0b10010000;  // INN
 80073f8:	4b91      	ldr	r3, [pc, #580]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 80073fa:	2290      	movs	r2, #144	; 0x90
 80073fc:	735a      	strb	r2, [r3, #13]
				Paq_UR [14] = 0b00000000;  // INN
 80073fe:	4b90      	ldr	r3, [pc, #576]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 8007400:	2200      	movs	r2, #0
 8007402:	739a      	strb	r2, [r3, #14]
				Paq_UR [15] = 2;
 8007404:	4b8e      	ldr	r3, [pc, #568]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 8007406:	2202      	movs	r2, #2
 8007408:	73da      	strb	r2, [r3, #15]
				Paq_UR [16] = 2;
 800740a:	4b8d      	ldr	r3, [pc, #564]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 800740c:	2202      	movs	r2, #2
 800740e:	741a      	strb	r2, [r3, #16]
				Paq_UR [17] = 40;  //40
 8007410:	4b8b      	ldr	r3, [pc, #556]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 8007412:	2228      	movs	r2, #40	; 0x28
 8007414:	745a      	strb	r2, [r3, #17]
				Paq_UR [18] = Punt_Buffer_UR_Rec;
 8007416:	4b8c      	ldr	r3, [pc, #560]	; (8007648 <analizar_Rx_03_local+0xdc4>)
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b2da      	uxtb	r2, r3
 800741c:	4b88      	ldr	r3, [pc, #544]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 800741e:	749a      	strb	r2, [r3, #18]

				Punt_Buffer_UR_Tx = 18;  //19
 8007420:	4b8a      	ldr	r3, [pc, #552]	; (800764c <analizar_Rx_03_local+0xdc8>)
 8007422:	2212      	movs	r2, #18
 8007424:	801a      	strh	r2, [r3, #0]

				Prox_crc_UR_Tx = 26;
 8007426:	4b8a      	ldr	r3, [pc, #552]	; (8007650 <analizar_Rx_03_local+0xdcc>)
 8007428:	221a      	movs	r2, #26
 800742a:	801a      	strh	r2, [r3, #0]

				for(uint8_t l=0; l<Punt_Buffer_UR_Rec; l++)
 800742c:	2300      	movs	r3, #0
 800742e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8007432:	e029      	b.n	8007488 <analizar_Rx_03_local+0xc04>
				{
					for	(uint8_t c=0; c<9; c++)
 8007434:	2300      	movs	r3, #0
 8007436:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800743a:	e01c      	b.n	8007476 <analizar_Rx_03_local+0xbf2>
					{
						Punt_Buffer_UR_Tx++;
 800743c:	4b83      	ldr	r3, [pc, #524]	; (800764c <analizar_Rx_03_local+0xdc8>)
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	4b81      	ldr	r3, [pc, #516]	; (800764c <analizar_Rx_03_local+0xdc8>)
 8007446:	801a      	strh	r2, [r3, #0]
						analizar_UR_Tx();
 8007448:	f7fc fdca 	bl	8003fe0 <analizar_UR_Tx>
						Paq_UR [Punt_Buffer_UR_Tx] = Buffer_UR [l][c];
 800744c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8007450:	f897 1057 	ldrb.w	r1, [r7, #87]	; 0x57
 8007454:	4b7d      	ldr	r3, [pc, #500]	; (800764c <analizar_Rx_03_local+0xdc8>)
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	461c      	mov	r4, r3
 800745a:	487e      	ldr	r0, [pc, #504]	; (8007654 <analizar_Rx_03_local+0xdd0>)
 800745c:	4613      	mov	r3, r2
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	4413      	add	r3, r2
 8007462:	4403      	add	r3, r0
 8007464:	440b      	add	r3, r1
 8007466:	781a      	ldrb	r2, [r3, #0]
 8007468:	4b75      	ldr	r3, [pc, #468]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 800746a:	551a      	strb	r2, [r3, r4]
					for	(uint8_t c=0; c<9; c++)
 800746c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007470:	3301      	adds	r3, #1
 8007472:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007476:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800747a:	2b08      	cmp	r3, #8
 800747c:	d9de      	bls.n	800743c <analizar_Rx_03_local+0xbb8>
				for(uint8_t l=0; l<Punt_Buffer_UR_Rec; l++)
 800747e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8007482:	3301      	adds	r3, #1
 8007484:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8007488:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800748c:	b29a      	uxth	r2, r3
 800748e:	4b6e      	ldr	r3, [pc, #440]	; (8007648 <analizar_Rx_03_local+0xdc4>)
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d3ce      	bcc.n	8007434 <analizar_Rx_03_local+0xbb0>
					}
				}
				Punt_Buffer_UR_Tx++;
 8007496:	4b6d      	ldr	r3, [pc, #436]	; (800764c <analizar_Rx_03_local+0xdc8>)
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	3301      	adds	r3, #1
 800749c:	b29a      	uxth	r2, r3
 800749e:	4b6b      	ldr	r3, [pc, #428]	; (800764c <analizar_Rx_03_local+0xdc8>)
 80074a0:	801a      	strh	r2, [r3, #0]
				Paq_UR [2] = calc_long_tx (Punt_Buffer_UR_Tx + 2);
 80074a2:	4b6a      	ldr	r3, [pc, #424]	; (800764c <analizar_Rx_03_local+0xdc8>)
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	3302      	adds	r3, #2
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fb fdcf 	bl	8003050 <calc_long_tx>
 80074b2:	4603      	mov	r3, r0
 80074b4:	461a      	mov	r2, r3
 80074b6:	4b62      	ldr	r3, [pc, #392]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 80074b8:	709a      	strb	r2, [r3, #2]

				//====================CALCULO CRC DNP / CRC 01====================
				crc=0x0000;
 80074ba:	4b67      	ldr	r3, [pc, #412]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 80074bc:	2200      	movs	r2, #0
 80074be:	801a      	strh	r2, [r3, #0]
				n=8;
 80074c0:	4b66      	ldr	r3, [pc, #408]	; (800765c <analizar_Rx_03_local+0xdd8>)
 80074c2:	2208      	movs	r2, #8
 80074c4:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<n; j++)
 80074c6:	2300      	movs	r3, #0
 80074c8:	653b      	str	r3, [r7, #80]	; 0x50
 80074ca:	e010      	b.n	80074ee <analizar_Rx_03_local+0xc6a>
				{
					variable = Paq_UR [j];
 80074cc:	4a5c      	ldr	r2, [pc, #368]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 80074ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d0:	4413      	add	r3, r2
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	4b62      	ldr	r3, [pc, #392]	; (8007660 <analizar_Rx_03_local+0xddc>)
 80074d8:	801a      	strh	r2, [r3, #0]
					computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 80074da:	4b61      	ldr	r3, [pc, #388]	; (8007660 <analizar_Rx_03_local+0xddc>)
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	4619      	mov	r1, r3
 80074e2:	485d      	ldr	r0, [pc, #372]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 80074e4:	f7f9 fcf2 	bl	8000ecc <computeCRC>
				for(int j=0; j<n; j++)
 80074e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ea:	3301      	adds	r3, #1
 80074ec:	653b      	str	r3, [r7, #80]	; 0x50
 80074ee:	4b5b      	ldr	r3, [pc, #364]	; (800765c <analizar_Rx_03_local+0xdd8>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f6:	4293      	cmp	r3, r2
 80074f8:	dbe8      	blt.n	80074cc <analizar_Rx_03_local+0xc48>
				}
				crc = ~crc;
 80074fa:	4b57      	ldr	r3, [pc, #348]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	43db      	mvns	r3, r3
 8007500:	b29a      	uxth	r2, r3
 8007502:	4b55      	ldr	r3, [pc, #340]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 8007504:	801a      	strh	r2, [r3, #0]
				crc_l = crc;
 8007506:	4b54      	ldr	r3, [pc, #336]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b2da      	uxtb	r2, r3
 800750c:	4b55      	ldr	r3, [pc, #340]	; (8007664 <analizar_Rx_03_local+0xde0>)
 800750e:	701a      	strb	r2, [r3, #0]
				crc_h = crc >> 8;
 8007510:	4b51      	ldr	r3, [pc, #324]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	b29b      	uxth	r3, r3
 8007518:	b2da      	uxtb	r2, r3
 800751a:	4b53      	ldr	r3, [pc, #332]	; (8007668 <analizar_Rx_03_local+0xde4>)
 800751c:	701a      	strb	r2, [r3, #0]
				Paq_UR [8] = crc_l;
 800751e:	4b51      	ldr	r3, [pc, #324]	; (8007664 <analizar_Rx_03_local+0xde0>)
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	4b47      	ldr	r3, [pc, #284]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 8007524:	721a      	strb	r2, [r3, #8]
				Paq_UR [9] = crc_h;
 8007526:	4b50      	ldr	r3, [pc, #320]	; (8007668 <analizar_Rx_03_local+0xde4>)
 8007528:	781a      	ldrb	r2, [r3, #0]
 800752a:	4b45      	ldr	r3, [pc, #276]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 800752c:	725a      	strb	r2, [r3, #9]
				//====================CALCULO CRC DNP / CRC 02. 03. ..nX=============
				uint8_t punt_crc= 10;
 800752e:	230a      	movs	r3, #10
 8007530:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

				cant_crc_UR = (Punt_Buffer_UR_Tx + 2 - 11)/18+1;  // 2
 8007534:	4b45      	ldr	r3, [pc, #276]	; (800764c <analizar_Rx_03_local+0xdc8>)
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	3b09      	subs	r3, #9
 800753a:	4a4c      	ldr	r2, [pc, #304]	; (800766c <analizar_Rx_03_local+0xde8>)
 800753c:	fb82 1203 	smull	r1, r2, r2, r3
 8007540:	1092      	asrs	r2, r2, #2
 8007542:	17db      	asrs	r3, r3, #31
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	b2db      	uxtb	r3, r3
 8007548:	3301      	adds	r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	4b48      	ldr	r3, [pc, #288]	; (8007670 <analizar_Rx_03_local+0xdec>)
 800754e:	701a      	strb	r2, [r3, #0]
				cola_crc_UR = Punt_Buffer_UR_Tx + 2 - 10 - (cant_crc_UR - 1)*18 - 2;
 8007550:	4b3e      	ldr	r3, [pc, #248]	; (800764c <analizar_Rx_03_local+0xdc8>)
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b2da      	uxtb	r2, r3
 8007556:	4b46      	ldr	r3, [pc, #280]	; (8007670 <analizar_Rx_03_local+0xdec>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	4619      	mov	r1, r3
 800755c:	00c9      	lsls	r1, r1, #3
 800755e:	1acb      	subs	r3, r1, r3
 8007560:	4619      	mov	r1, r3
 8007562:	0108      	lsls	r0, r1, #4
 8007564:	4619      	mov	r1, r3
 8007566:	4603      	mov	r3, r0
 8007568:	440b      	add	r3, r1
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	b2db      	uxtb	r3, r3
 800756e:	4413      	add	r3, r2
 8007570:	b2db      	uxtb	r3, r3
 8007572:	3308      	adds	r3, #8
 8007574:	b2da      	uxtb	r2, r3
 8007576:	4b3f      	ldr	r3, [pc, #252]	; (8007674 <analizar_Rx_03_local+0xdf0>)
 8007578:	701a      	strb	r2, [r3, #0]

				cant_crc_UR = cant_crc_UR - 1;
 800757a:	4b3d      	ldr	r3, [pc, #244]	; (8007670 <analizar_Rx_03_local+0xdec>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	3b01      	subs	r3, #1
 8007580:	b2da      	uxtb	r2, r3
 8007582:	4b3b      	ldr	r3, [pc, #236]	; (8007670 <analizar_Rx_03_local+0xdec>)
 8007584:	701a      	strb	r2, [r3, #0]
				for(int k=cant_crc_UR; k>0; k--)
 8007586:	4b3a      	ldr	r3, [pc, #232]	; (8007670 <analizar_Rx_03_local+0xdec>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	64bb      	str	r3, [r7, #72]	; 0x48
 800758c:	e04a      	b.n	8007624 <analizar_Rx_03_local+0xda0>
				{
				//============================CALCULO CRC DNP====================
					crc=0x0000;
 800758e:	4b32      	ldr	r3, [pc, #200]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 8007590:	2200      	movs	r2, #0
 8007592:	801a      	strh	r2, [r3, #0]
					n=16;
 8007594:	4b31      	ldr	r3, [pc, #196]	; (800765c <analizar_Rx_03_local+0xdd8>)
 8007596:	2210      	movs	r2, #16
 8007598:	701a      	strb	r2, [r3, #0]
					for(int j=0; j<n; j++)
 800759a:	2300      	movs	r3, #0
 800759c:	647b      	str	r3, [r7, #68]	; 0x44
 800759e:	e013      	b.n	80075c8 <analizar_Rx_03_local+0xd44>
					{
						variable = (Paq_UR + punt_crc)[j];
 80075a0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80075a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a6:	4413      	add	r3, r2
 80075a8:	4a25      	ldr	r2, [pc, #148]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 80075aa:	4413      	add	r3, r2
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	4b2b      	ldr	r3, [pc, #172]	; (8007660 <analizar_Rx_03_local+0xddc>)
 80075b2:	801a      	strh	r2, [r3, #0]
						computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 80075b4:	4b2a      	ldr	r3, [pc, #168]	; (8007660 <analizar_Rx_03_local+0xddc>)
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	4619      	mov	r1, r3
 80075bc:	4826      	ldr	r0, [pc, #152]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 80075be:	f7f9 fc85 	bl	8000ecc <computeCRC>
					for(int j=0; j<n; j++)
 80075c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075c4:	3301      	adds	r3, #1
 80075c6:	647b      	str	r3, [r7, #68]	; 0x44
 80075c8:	4b24      	ldr	r3, [pc, #144]	; (800765c <analizar_Rx_03_local+0xdd8>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d0:	4293      	cmp	r3, r2
 80075d2:	dbe5      	blt.n	80075a0 <analizar_Rx_03_local+0xd1c>
					}
					crc = ~crc;
 80075d4:	4b20      	ldr	r3, [pc, #128]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	43db      	mvns	r3, r3
 80075da:	b29a      	uxth	r2, r3
 80075dc:	4b1e      	ldr	r3, [pc, #120]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 80075de:	801a      	strh	r2, [r3, #0]
					crc_l = crc;
 80075e0:	4b1d      	ldr	r3, [pc, #116]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	4b1f      	ldr	r3, [pc, #124]	; (8007664 <analizar_Rx_03_local+0xde0>)
 80075e8:	701a      	strb	r2, [r3, #0]
					crc_h = crc >> 8;
 80075ea:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	0a1b      	lsrs	r3, r3, #8
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	4b1c      	ldr	r3, [pc, #112]	; (8007668 <analizar_Rx_03_local+0xde4>)
 80075f6:	701a      	strb	r2, [r3, #0]
					Paq_UR [punt_crc + 16] = crc_l;
 80075f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80075fc:	3310      	adds	r3, #16
 80075fe:	4a19      	ldr	r2, [pc, #100]	; (8007664 <analizar_Rx_03_local+0xde0>)
 8007600:	7811      	ldrb	r1, [r2, #0]
 8007602:	4a0f      	ldr	r2, [pc, #60]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 8007604:	54d1      	strb	r1, [r2, r3]
					Paq_UR [punt_crc + 17] = crc_h;
 8007606:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800760a:	3311      	adds	r3, #17
 800760c:	4a16      	ldr	r2, [pc, #88]	; (8007668 <analizar_Rx_03_local+0xde4>)
 800760e:	7811      	ldrb	r1, [r2, #0]
 8007610:	4a0b      	ldr	r2, [pc, #44]	; (8007640 <analizar_Rx_03_local+0xdbc>)
 8007612:	54d1      	strb	r1, [r2, r3]
				//===============================================================
					punt_crc = punt_crc + 18;
 8007614:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007618:	3312      	adds	r3, #18
 800761a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				for(int k=cant_crc_UR; k>0; k--)
 800761e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007620:	3b01      	subs	r3, #1
 8007622:	64bb      	str	r3, [r7, #72]	; 0x48
 8007624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007626:	2b00      	cmp	r3, #0
 8007628:	dcb1      	bgt.n	800758e <analizar_Rx_03_local+0xd0a>
				}
				//====================CALCULO CRC DNP / CRC .nX FINAL================
				crc=0x0000;
 800762a:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <analizar_Rx_03_local+0xdd4>)
 800762c:	2200      	movs	r2, #0
 800762e:	801a      	strh	r2, [r3, #0]
				n = cola_crc_UR;
 8007630:	4b10      	ldr	r3, [pc, #64]	; (8007674 <analizar_Rx_03_local+0xdf0>)
 8007632:	781a      	ldrb	r2, [r3, #0]
 8007634:	4b09      	ldr	r3, [pc, #36]	; (800765c <analizar_Rx_03_local+0xdd8>)
 8007636:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<n; j++)
 8007638:	2300      	movs	r3, #0
 800763a:	643b      	str	r3, [r7, #64]	; 0x40
 800763c:	e030      	b.n	80076a0 <analizar_Rx_03_local+0xe1c>
 800763e:	bf00      	nop
 8007640:	20003ba4 	.word	0x20003ba4
 8007644:	2000091e 	.word	0x2000091e
 8007648:	20003b9e 	.word	0x20003b9e
 800764c:	20003ca4 	.word	0x20003ca4
 8007650:	20003ca6 	.word	0x20003ca6
 8007654:	2000329c 	.word	0x2000329c
 8007658:	20003ce0 	.word	0x20003ce0
 800765c:	20000012 	.word	0x20000012
 8007660:	20003ce4 	.word	0x20003ce4
 8007664:	20003ce3 	.word	0x20003ce3
 8007668:	20003ce2 	.word	0x20003ce2
 800766c:	38e38e39 	.word	0x38e38e39
 8007670:	20003ca8 	.word	0x20003ca8
 8007674:	20003ca9 	.word	0x20003ca9
				{
					variable = (Paq_UR + punt_crc)[j];
 8007678:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800767c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800767e:	4413      	add	r3, r2
 8007680:	4a2c      	ldr	r2, [pc, #176]	; (8007734 <analizar_Rx_03_local+0xeb0>)
 8007682:	4413      	add	r3, r2
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	b29a      	uxth	r2, r3
 8007688:	4b2b      	ldr	r3, [pc, #172]	; (8007738 <analizar_Rx_03_local+0xeb4>)
 800768a:	801a      	strh	r2, [r3, #0]
					computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 800768c:	4b2a      	ldr	r3, [pc, #168]	; (8007738 <analizar_Rx_03_local+0xeb4>)
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	4619      	mov	r1, r3
 8007694:	4829      	ldr	r0, [pc, #164]	; (800773c <analizar_Rx_03_local+0xeb8>)
 8007696:	f7f9 fc19 	bl	8000ecc <computeCRC>
				for(int j=0; j<n; j++)
 800769a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800769c:	3301      	adds	r3, #1
 800769e:	643b      	str	r3, [r7, #64]	; 0x40
 80076a0:	4b27      	ldr	r3, [pc, #156]	; (8007740 <analizar_Rx_03_local+0xebc>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a8:	4293      	cmp	r3, r2
 80076aa:	dbe5      	blt.n	8007678 <analizar_Rx_03_local+0xdf4>
				}
				crc = ~crc;
 80076ac:	4b23      	ldr	r3, [pc, #140]	; (800773c <analizar_Rx_03_local+0xeb8>)
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	43db      	mvns	r3, r3
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	4b21      	ldr	r3, [pc, #132]	; (800773c <analizar_Rx_03_local+0xeb8>)
 80076b6:	801a      	strh	r2, [r3, #0]
				crc_l = crc;
 80076b8:	4b20      	ldr	r3, [pc, #128]	; (800773c <analizar_Rx_03_local+0xeb8>)
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	4b21      	ldr	r3, [pc, #132]	; (8007744 <analizar_Rx_03_local+0xec0>)
 80076c0:	701a      	strb	r2, [r3, #0]
				crc_h = crc >> 8;
 80076c2:	4b1e      	ldr	r3, [pc, #120]	; (800773c <analizar_Rx_03_local+0xeb8>)
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	0a1b      	lsrs	r3, r3, #8
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	4b1e      	ldr	r3, [pc, #120]	; (8007748 <analizar_Rx_03_local+0xec4>)
 80076ce:	701a      	strb	r2, [r3, #0]
				Paq_UR [punt_crc + cola_crc_UR] = crc_l;
 80076d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80076d4:	4a1d      	ldr	r2, [pc, #116]	; (800774c <analizar_Rx_03_local+0xec8>)
 80076d6:	7812      	ldrb	r2, [r2, #0]
 80076d8:	4413      	add	r3, r2
 80076da:	4a1a      	ldr	r2, [pc, #104]	; (8007744 <analizar_Rx_03_local+0xec0>)
 80076dc:	7811      	ldrb	r1, [r2, #0]
 80076de:	4a15      	ldr	r2, [pc, #84]	; (8007734 <analizar_Rx_03_local+0xeb0>)
 80076e0:	54d1      	strb	r1, [r2, r3]
				Paq_UR [punt_crc + (cola_crc_UR + 1)] = crc_h;
 80076e2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80076e6:	4b19      	ldr	r3, [pc, #100]	; (800774c <analizar_Rx_03_local+0xec8>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	3301      	adds	r3, #1
 80076ec:	4413      	add	r3, r2
 80076ee:	4a16      	ldr	r2, [pc, #88]	; (8007748 <analizar_Rx_03_local+0xec4>)
 80076f0:	7811      	ldrb	r1, [r2, #0]
 80076f2:	4a10      	ldr	r2, [pc, #64]	; (8007734 <analizar_Rx_03_local+0xeb0>)
 80076f4:	54d1      	strb	r1, [r2, r3]
				//===============================================================
				// Paso Buffer a otro
				memcpy(Buffer_08_Tx, Paq_UR, sizeof(Paq_UR));
 80076f6:	4a16      	ldr	r2, [pc, #88]	; (8007750 <analizar_Rx_03_local+0xecc>)
 80076f8:	4b0e      	ldr	r3, [pc, #56]	; (8007734 <analizar_Rx_03_local+0xeb0>)
 80076fa:	4610      	mov	r0, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007702:	461a      	mov	r2, r3
 8007704:	f008 fa10 	bl	800fb28 <memcpy>

//******* deshabilitado para que funcione como el proyecto SAT *^*******
				HAL_UART_Transmit(&huart8, Buffer_08_Tx, Punt_Buffer_UR_Tx + 2, 300);
 8007708:	4b12      	ldr	r3, [pc, #72]	; (8007754 <analizar_Rx_03_local+0xed0>)
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	3302      	adds	r3, #2
 800770e:	b29a      	uxth	r2, r3
 8007710:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007714:	490e      	ldr	r1, [pc, #56]	; (8007750 <analizar_Rx_03_local+0xecc>)
 8007716:	4810      	ldr	r0, [pc, #64]	; (8007758 <analizar_Rx_03_local+0xed4>)
 8007718:	f006 fec8 	bl	800e4ac <HAL_UART_Transmit>

				Punt_Buffer_UR_Rec = 0;
 800771c:	4b0f      	ldr	r3, [pc, #60]	; (800775c <analizar_Rx_03_local+0xed8>)
 800771e:	2200      	movs	r2, #0
 8007720:	801a      	strh	r2, [r3, #0]
				//#################################################################
			}  //IF Punt_
		} //IF disp_r = cant_disp
	}  // If ID

	RxTotal03_W_Debugger = 0; // Debugger >>>>>>>>>>>>>>>>>>>>>>>
 8007722:	4b0f      	ldr	r3, [pc, #60]	; (8007760 <analizar_Rx_03_local+0xedc>)
 8007724:	2200      	movs	r2, #0
 8007726:	801a      	strh	r2, [r3, #0]

} //MAIN
 8007728:	bf00      	nop
 800772a:	3760      	adds	r7, #96	; 0x60
 800772c:	46bd      	mov	sp, r7
 800772e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007732:	bf00      	nop
 8007734:	20003ba4 	.word	0x20003ba4
 8007738:	20003ce4 	.word	0x20003ce4
 800773c:	20003ce0 	.word	0x20003ce0
 8007740:	20000012 	.word	0x20000012
 8007744:	20003ce3 	.word	0x20003ce3
 8007748:	20003ce2 	.word	0x20003ce2
 800774c:	20003ca9 	.word	0x20003ca9
 8007750:	20003f20 	.word	0x20003f20
 8007754:	20003ca4 	.word	0x20003ca4
 8007758:	20000390 	.word	0x20000390
 800775c:	20003b9e 	.word	0x20003b9e
 8007760:	2000c33e 	.word	0x2000c33e

08007764 <analizar_pos_crc_Rx_03>:

void analizar_pos_crc_Rx_03 (void)
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
	if (Punt_buffer_03_Rx != Fin_Buffer_03)
 8007768:	4b10      	ldr	r3, [pc, #64]	; (80077ac <analizar_pos_crc_Rx_03+0x48>)
 800776a:	881a      	ldrh	r2, [r3, #0]
 800776c:	4b10      	ldr	r3, [pc, #64]	; (80077b0 <analizar_pos_crc_Rx_03+0x4c>)
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	429a      	cmp	r2, r3
 8007772:	d012      	beq.n	800779a <analizar_pos_crc_Rx_03+0x36>
	{
		if(Punt_buffer_03_Rx == Prox_crc_Rx_03)
 8007774:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <analizar_pos_crc_Rx_03+0x48>)
 8007776:	881a      	ldrh	r2, [r3, #0]
 8007778:	4b0e      	ldr	r3, [pc, #56]	; (80077b4 <analizar_pos_crc_Rx_03+0x50>)
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d10f      	bne.n	80077a0 <analizar_pos_crc_Rx_03+0x3c>
		{
			Prox_crc_Rx_03 = Prox_crc_Rx_03 + 18;
 8007780:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <analizar_pos_crc_Rx_03+0x50>)
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	3312      	adds	r3, #18
 8007786:	b29a      	uxth	r2, r3
 8007788:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <analizar_pos_crc_Rx_03+0x50>)
 800778a:	801a      	strh	r2, [r3, #0]
			Punt_buffer_03_Rx = Punt_buffer_03_Rx + 2;
 800778c:	4b07      	ldr	r3, [pc, #28]	; (80077ac <analizar_pos_crc_Rx_03+0x48>)
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	3302      	adds	r3, #2
 8007792:	b29a      	uxth	r2, r3
 8007794:	4b05      	ldr	r3, [pc, #20]	; (80077ac <analizar_pos_crc_Rx_03+0x48>)
 8007796:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		Flag_Fin_Buffer_03 = 1;
	}
}
 8007798:	e002      	b.n	80077a0 <analizar_pos_crc_Rx_03+0x3c>
		Flag_Fin_Buffer_03 = 1;
 800779a:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <analizar_pos_crc_Rx_03+0x54>)
 800779c:	2201      	movs	r2, #1
 800779e:	801a      	strh	r2, [r3, #0]
}
 80077a0:	bf00      	nop
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	2000c340 	.word	0x2000c340
 80077b0:	2000c342 	.word	0x2000c342
 80077b4:	20000018 	.word	0x20000018
 80077b8:	2000c348 	.word	0x2000c348

080077bc <anal_recep_tot_crc_uart_03>:

void anal_recep_tot_crc_uart_03(void)  //Calcular CRC para uart 06
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
	if (calc_long_rx(Buffer_03_Rx_W [2]) != RxTotal03_W)  //
 80077c2:	4b94      	ldr	r3, [pc, #592]	; (8007a14 <anal_recep_tot_crc_uart_03+0x258>)
 80077c4:	789b      	ldrb	r3, [r3, #2]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fb fc14 	bl	8002ff4 <calc_long_rx>
 80077cc:	4603      	mov	r3, r0
 80077ce:	461a      	mov	r2, r3
 80077d0:	4b91      	ldr	r3, [pc, #580]	; (8007a18 <anal_recep_tot_crc_uart_03+0x25c>)
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d003      	beq.n	80077e0 <anal_recep_tot_crc_uart_03+0x24>
	{
		error_crc_03 = 1;
 80077d8:	4b90      	ldr	r3, [pc, #576]	; (8007a1c <anal_recep_tot_crc_uart_03+0x260>)
 80077da:	2201      	movs	r2, #1
 80077dc:	701a      	strb	r2, [r3, #0]
		crc_h = crc >> 8;
		if (Buffer_03_Rx_W [punt_crc + cola_crc_03] != crc_l){error_crc_03 = 1;}
		if (Buffer_03_Rx_W [punt_crc + (cola_crc_03 + 1)] != crc_h){error_crc_03 = 1;}
		//===============================================================
	}
}
 80077de:	e115      	b.n	8007a0c <anal_recep_tot_crc_uart_03+0x250>
		cant_crc_03 = (RxTotal03_W-11)/18+1;  // 2
 80077e0:	4b8d      	ldr	r3, [pc, #564]	; (8007a18 <anal_recep_tot_crc_uart_03+0x25c>)
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	3b0b      	subs	r3, #11
 80077e6:	4a8e      	ldr	r2, [pc, #568]	; (8007a20 <anal_recep_tot_crc_uart_03+0x264>)
 80077e8:	fb82 1203 	smull	r1, r2, r2, r3
 80077ec:	1092      	asrs	r2, r2, #2
 80077ee:	17db      	asrs	r3, r3, #31
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	3301      	adds	r3, #1
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	4b8a      	ldr	r3, [pc, #552]	; (8007a24 <anal_recep_tot_crc_uart_03+0x268>)
 80077fa:	701a      	strb	r2, [r3, #0]
		cola_crc_03 = RxTotal03_W - 10 - (cant_crc_03 - 1)*18 - 2;
 80077fc:	4b86      	ldr	r3, [pc, #536]	; (8007a18 <anal_recep_tot_crc_uart_03+0x25c>)
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b2da      	uxtb	r2, r3
 8007802:	4b88      	ldr	r3, [pc, #544]	; (8007a24 <anal_recep_tot_crc_uart_03+0x268>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	4619      	mov	r1, r3
 8007808:	00c9      	lsls	r1, r1, #3
 800780a:	1acb      	subs	r3, r1, r3
 800780c:	4619      	mov	r1, r3
 800780e:	0108      	lsls	r0, r1, #4
 8007810:	4619      	mov	r1, r3
 8007812:	4603      	mov	r3, r0
 8007814:	440b      	add	r3, r1
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	b2db      	uxtb	r3, r3
 800781a:	4413      	add	r3, r2
 800781c:	b2db      	uxtb	r3, r3
 800781e:	3306      	adds	r3, #6
 8007820:	b2da      	uxtb	r2, r3
 8007822:	4b81      	ldr	r3, [pc, #516]	; (8007a28 <anal_recep_tot_crc_uart_03+0x26c>)
 8007824:	701a      	strb	r2, [r3, #0]
		crc=0x0000;
 8007826:	4b81      	ldr	r3, [pc, #516]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 8007828:	2200      	movs	r2, #0
 800782a:	801a      	strh	r2, [r3, #0]
		n=8;
 800782c:	4b80      	ldr	r3, [pc, #512]	; (8007a30 <anal_recep_tot_crc_uart_03+0x274>)
 800782e:	2208      	movs	r2, #8
 8007830:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<n; j++)
 8007832:	2300      	movs	r3, #0
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e010      	b.n	800785a <anal_recep_tot_crc_uart_03+0x9e>
			variable = Buffer_03_Rx_W[j];
 8007838:	4a76      	ldr	r2, [pc, #472]	; (8007a14 <anal_recep_tot_crc_uart_03+0x258>)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	4413      	add	r3, r2
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b29a      	uxth	r2, r3
 8007842:	4b7c      	ldr	r3, [pc, #496]	; (8007a34 <anal_recep_tot_crc_uart_03+0x278>)
 8007844:	801a      	strh	r2, [r3, #0]
			computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8007846:	4b7b      	ldr	r3, [pc, #492]	; (8007a34 <anal_recep_tot_crc_uart_03+0x278>)
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	4619      	mov	r1, r3
 800784e:	4877      	ldr	r0, [pc, #476]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 8007850:	f7f9 fb3c 	bl	8000ecc <computeCRC>
		for(int j=0; j<n; j++)
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	3301      	adds	r3, #1
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	4b75      	ldr	r3, [pc, #468]	; (8007a30 <anal_recep_tot_crc_uart_03+0x274>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	4293      	cmp	r3, r2
 8007864:	dbe8      	blt.n	8007838 <anal_recep_tot_crc_uart_03+0x7c>
		crc = ~crc;
 8007866:	4b71      	ldr	r3, [pc, #452]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	43db      	mvns	r3, r3
 800786c:	b29a      	uxth	r2, r3
 800786e:	4b6f      	ldr	r3, [pc, #444]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 8007870:	801a      	strh	r2, [r3, #0]
		crc_l = crc;
 8007872:	4b6e      	ldr	r3, [pc, #440]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b2da      	uxtb	r2, r3
 8007878:	4b6f      	ldr	r3, [pc, #444]	; (8007a38 <anal_recep_tot_crc_uart_03+0x27c>)
 800787a:	701a      	strb	r2, [r3, #0]
		crc_h = crc >> 8;
 800787c:	4b6b      	ldr	r3, [pc, #428]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	0a1b      	lsrs	r3, r3, #8
 8007882:	b29b      	uxth	r3, r3
 8007884:	b2da      	uxtb	r2, r3
 8007886:	4b6d      	ldr	r3, [pc, #436]	; (8007a3c <anal_recep_tot_crc_uart_03+0x280>)
 8007888:	701a      	strb	r2, [r3, #0]
		if (Buffer_03_Rx_W [8] != crc_l){error_crc_03 = 1;}
 800788a:	4b62      	ldr	r3, [pc, #392]	; (8007a14 <anal_recep_tot_crc_uart_03+0x258>)
 800788c:	7a1a      	ldrb	r2, [r3, #8]
 800788e:	4b6a      	ldr	r3, [pc, #424]	; (8007a38 <anal_recep_tot_crc_uart_03+0x27c>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d002      	beq.n	800789c <anal_recep_tot_crc_uart_03+0xe0>
 8007896:	4b61      	ldr	r3, [pc, #388]	; (8007a1c <anal_recep_tot_crc_uart_03+0x260>)
 8007898:	2201      	movs	r2, #1
 800789a:	701a      	strb	r2, [r3, #0]
		if (Buffer_03_Rx_W [9] != crc_h){error_crc_03 = 1;}
 800789c:	4b5d      	ldr	r3, [pc, #372]	; (8007a14 <anal_recep_tot_crc_uart_03+0x258>)
 800789e:	7a5a      	ldrb	r2, [r3, #9]
 80078a0:	4b66      	ldr	r3, [pc, #408]	; (8007a3c <anal_recep_tot_crc_uart_03+0x280>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d002      	beq.n	80078ae <anal_recep_tot_crc_uart_03+0xf2>
 80078a8:	4b5c      	ldr	r3, [pc, #368]	; (8007a1c <anal_recep_tot_crc_uart_03+0x260>)
 80078aa:	2201      	movs	r2, #1
 80078ac:	701a      	strb	r2, [r3, #0]
		uint8_t punt_crc= 10;
 80078ae:	230a      	movs	r3, #10
 80078b0:	74fb      	strb	r3, [r7, #19]
		cant_crc_03 = cant_crc_03-1;
 80078b2:	4b5c      	ldr	r3, [pc, #368]	; (8007a24 <anal_recep_tot_crc_uart_03+0x268>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	4b5a      	ldr	r3, [pc, #360]	; (8007a24 <anal_recep_tot_crc_uart_03+0x268>)
 80078bc:	701a      	strb	r2, [r3, #0]
		for(int k=cant_crc_03; k>0; k--)
 80078be:	4b59      	ldr	r3, [pc, #356]	; (8007a24 <anal_recep_tot_crc_uart_03+0x268>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e04f      	b.n	8007966 <anal_recep_tot_crc_uart_03+0x1aa>
			crc=0x0000;
 80078c6:	4b59      	ldr	r3, [pc, #356]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	801a      	strh	r2, [r3, #0]
			n=16;
 80078cc:	4b58      	ldr	r3, [pc, #352]	; (8007a30 <anal_recep_tot_crc_uart_03+0x274>)
 80078ce:	2210      	movs	r2, #16
 80078d0:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<n; j++)
 80078d2:	2300      	movs	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]
 80078d6:	e012      	b.n	80078fe <anal_recep_tot_crc_uart_03+0x142>
				variable = (Buffer_03_Rx_W + punt_crc)[j];
 80078d8:	7cfa      	ldrb	r2, [r7, #19]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	4413      	add	r3, r2
 80078de:	4a4d      	ldr	r2, [pc, #308]	; (8007a14 <anal_recep_tot_crc_uart_03+0x258>)
 80078e0:	4413      	add	r3, r2
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	4b53      	ldr	r3, [pc, #332]	; (8007a34 <anal_recep_tot_crc_uart_03+0x278>)
 80078e8:	801a      	strh	r2, [r3, #0]
				computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 80078ea:	4b52      	ldr	r3, [pc, #328]	; (8007a34 <anal_recep_tot_crc_uart_03+0x278>)
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	4619      	mov	r1, r3
 80078f2:	484e      	ldr	r0, [pc, #312]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 80078f4:	f7f9 faea 	bl	8000ecc <computeCRC>
			for(int j=0; j<n; j++)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	3301      	adds	r3, #1
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	4b4c      	ldr	r3, [pc, #304]	; (8007a30 <anal_recep_tot_crc_uart_03+0x274>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4293      	cmp	r3, r2
 8007908:	dbe6      	blt.n	80078d8 <anal_recep_tot_crc_uart_03+0x11c>
			crc = ~crc;
 800790a:	4b48      	ldr	r3, [pc, #288]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	43db      	mvns	r3, r3
 8007910:	b29a      	uxth	r2, r3
 8007912:	4b46      	ldr	r3, [pc, #280]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 8007914:	801a      	strh	r2, [r3, #0]
			crc_l = crc;
 8007916:	4b45      	ldr	r3, [pc, #276]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	b2da      	uxtb	r2, r3
 800791c:	4b46      	ldr	r3, [pc, #280]	; (8007a38 <anal_recep_tot_crc_uart_03+0x27c>)
 800791e:	701a      	strb	r2, [r3, #0]
			crc_h = crc >> 8;
 8007920:	4b42      	ldr	r3, [pc, #264]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	0a1b      	lsrs	r3, r3, #8
 8007926:	b29b      	uxth	r3, r3
 8007928:	b2da      	uxtb	r2, r3
 800792a:	4b44      	ldr	r3, [pc, #272]	; (8007a3c <anal_recep_tot_crc_uart_03+0x280>)
 800792c:	701a      	strb	r2, [r3, #0]
			if (Buffer_03_Rx_W [punt_crc + 16] != crc_l){error_crc_03 = 1;}
 800792e:	7cfb      	ldrb	r3, [r7, #19]
 8007930:	3310      	adds	r3, #16
 8007932:	4a38      	ldr	r2, [pc, #224]	; (8007a14 <anal_recep_tot_crc_uart_03+0x258>)
 8007934:	5cd2      	ldrb	r2, [r2, r3]
 8007936:	4b40      	ldr	r3, [pc, #256]	; (8007a38 <anal_recep_tot_crc_uart_03+0x27c>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	429a      	cmp	r2, r3
 800793c:	d002      	beq.n	8007944 <anal_recep_tot_crc_uart_03+0x188>
 800793e:	4b37      	ldr	r3, [pc, #220]	; (8007a1c <anal_recep_tot_crc_uart_03+0x260>)
 8007940:	2201      	movs	r2, #1
 8007942:	701a      	strb	r2, [r3, #0]
			if (Buffer_03_Rx_W [punt_crc + 17] != crc_h){error_crc_03 = 1;}
 8007944:	7cfb      	ldrb	r3, [r7, #19]
 8007946:	3311      	adds	r3, #17
 8007948:	4a32      	ldr	r2, [pc, #200]	; (8007a14 <anal_recep_tot_crc_uart_03+0x258>)
 800794a:	5cd2      	ldrb	r2, [r2, r3]
 800794c:	4b3b      	ldr	r3, [pc, #236]	; (8007a3c <anal_recep_tot_crc_uart_03+0x280>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	429a      	cmp	r2, r3
 8007952:	d002      	beq.n	800795a <anal_recep_tot_crc_uart_03+0x19e>
 8007954:	4b31      	ldr	r3, [pc, #196]	; (8007a1c <anal_recep_tot_crc_uart_03+0x260>)
 8007956:	2201      	movs	r2, #1
 8007958:	701a      	strb	r2, [r3, #0]
			punt_crc = punt_crc + 18;
 800795a:	7cfb      	ldrb	r3, [r7, #19]
 800795c:	3312      	adds	r3, #18
 800795e:	74fb      	strb	r3, [r7, #19]
		for(int k=cant_crc_03; k>0; k--)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3b01      	subs	r3, #1
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	dcac      	bgt.n	80078c6 <anal_recep_tot_crc_uart_03+0x10a>
		crc=0x0000;
 800796c:	4b2f      	ldr	r3, [pc, #188]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 800796e:	2200      	movs	r2, #0
 8007970:	801a      	strh	r2, [r3, #0]
		n = cola_crc_03;
 8007972:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <anal_recep_tot_crc_uart_03+0x26c>)
 8007974:	781a      	ldrb	r2, [r3, #0]
 8007976:	4b2e      	ldr	r3, [pc, #184]	; (8007a30 <anal_recep_tot_crc_uart_03+0x274>)
 8007978:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<n; j++)
 800797a:	2300      	movs	r3, #0
 800797c:	607b      	str	r3, [r7, #4]
 800797e:	e012      	b.n	80079a6 <anal_recep_tot_crc_uart_03+0x1ea>
			variable = (Buffer_03_Rx_W + punt_crc)[j];
 8007980:	7cfa      	ldrb	r2, [r7, #19]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	4a23      	ldr	r2, [pc, #140]	; (8007a14 <anal_recep_tot_crc_uart_03+0x258>)
 8007988:	4413      	add	r3, r2
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b29a      	uxth	r2, r3
 800798e:	4b29      	ldr	r3, [pc, #164]	; (8007a34 <anal_recep_tot_crc_uart_03+0x278>)
 8007990:	801a      	strh	r2, [r3, #0]
			computeCRC (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8007992:	4b28      	ldr	r3, [pc, #160]	; (8007a34 <anal_recep_tot_crc_uart_03+0x278>)
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	4619      	mov	r1, r3
 800799a:	4824      	ldr	r0, [pc, #144]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 800799c:	f7f9 fa96 	bl	8000ecc <computeCRC>
		for(int j=0; j<n; j++)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3301      	adds	r3, #1
 80079a4:	607b      	str	r3, [r7, #4]
 80079a6:	4b22      	ldr	r3, [pc, #136]	; (8007a30 <anal_recep_tot_crc_uart_03+0x274>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4293      	cmp	r3, r2
 80079b0:	dbe6      	blt.n	8007980 <anal_recep_tot_crc_uart_03+0x1c4>
		crc = ~crc;
 80079b2:	4b1e      	ldr	r3, [pc, #120]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	43db      	mvns	r3, r3
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	4b1c      	ldr	r3, [pc, #112]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 80079bc:	801a      	strh	r2, [r3, #0]
		crc_l = crc;
 80079be:	4b1b      	ldr	r3, [pc, #108]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	4b1c      	ldr	r3, [pc, #112]	; (8007a38 <anal_recep_tot_crc_uart_03+0x27c>)
 80079c6:	701a      	strb	r2, [r3, #0]
		crc_h = crc >> 8;
 80079c8:	4b18      	ldr	r3, [pc, #96]	; (8007a2c <anal_recep_tot_crc_uart_03+0x270>)
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	0a1b      	lsrs	r3, r3, #8
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	4b1a      	ldr	r3, [pc, #104]	; (8007a3c <anal_recep_tot_crc_uart_03+0x280>)
 80079d4:	701a      	strb	r2, [r3, #0]
		if (Buffer_03_Rx_W [punt_crc + cola_crc_03] != crc_l){error_crc_03 = 1;}
 80079d6:	7cfb      	ldrb	r3, [r7, #19]
 80079d8:	4a13      	ldr	r2, [pc, #76]	; (8007a28 <anal_recep_tot_crc_uart_03+0x26c>)
 80079da:	7812      	ldrb	r2, [r2, #0]
 80079dc:	4413      	add	r3, r2
 80079de:	4a0d      	ldr	r2, [pc, #52]	; (8007a14 <anal_recep_tot_crc_uart_03+0x258>)
 80079e0:	5cd2      	ldrb	r2, [r2, r3]
 80079e2:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <anal_recep_tot_crc_uart_03+0x27c>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d002      	beq.n	80079f0 <anal_recep_tot_crc_uart_03+0x234>
 80079ea:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <anal_recep_tot_crc_uart_03+0x260>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	701a      	strb	r2, [r3, #0]
		if (Buffer_03_Rx_W [punt_crc + (cola_crc_03 + 1)] != crc_h){error_crc_03 = 1;}
 80079f0:	7cfa      	ldrb	r2, [r7, #19]
 80079f2:	4b0d      	ldr	r3, [pc, #52]	; (8007a28 <anal_recep_tot_crc_uart_03+0x26c>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	3301      	adds	r3, #1
 80079f8:	4413      	add	r3, r2
 80079fa:	4a06      	ldr	r2, [pc, #24]	; (8007a14 <anal_recep_tot_crc_uart_03+0x258>)
 80079fc:	5cd2      	ldrb	r2, [r2, r3]
 80079fe:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <anal_recep_tot_crc_uart_03+0x280>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d002      	beq.n	8007a0c <anal_recep_tot_crc_uart_03+0x250>
 8007a06:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <anal_recep_tot_crc_uart_03+0x260>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	701a      	strb	r2, [r3, #0]
}
 8007a0c:	bf00      	nop
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	2000c23c 	.word	0x2000c23c
 8007a18:	2000c238 	.word	0x2000c238
 8007a1c:	2000c352 	.word	0x2000c352
 8007a20:	38e38e39 	.word	0x38e38e39
 8007a24:	2000c353 	.word	0x2000c353
 8007a28:	2000c354 	.word	0x2000c354
 8007a2c:	20003ce0 	.word	0x20003ce0
 8007a30:	20000012 	.word	0x20000012
 8007a34:	20003ce4 	.word	0x20003ce4
 8007a38:	20003ce3 	.word	0x20003ce3
 8007a3c:	20003ce2 	.word	0x20003ce2

08007a40 <analizar_Rx_04_local>:
	TxTotal04_W_Debugger = 0;  // DEBUGGER >>>>>>>>>>>>>>>>>>

}

void analizar_Rx_04_local(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
	anal_recep_tot_crc_uart_04();
 8007a46:	f000 f853 	bl	8007af0 <anal_recep_tot_crc_uart_04>
	if(error_crc_04==0)
 8007a4a:	4b1f      	ldr	r3, [pc, #124]	; (8007ac8 <analizar_Rx_04_local+0x88>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d12e      	bne.n	8007ab0 <analizar_Rx_04_local+0x70>
	{
		//HAL_GPIO_TogglePin(Led_Amarillo_GPIO_Port, Led_Amarillo_Pin);
		//Fin_Buffer_04 = RxTotal04_W - 2; //
		//Flag_Fin_Buffer_04 = 0;
		Punt_buffer_04_Rx = 2;          //
 8007a52:	4b1e      	ldr	r3, [pc, #120]	; (8007acc <analizar_Rx_04_local+0x8c>)
 8007a54:	2202      	movs	r2, #2
 8007a56:	801a      	strh	r2, [r3, #0]
		//Punt_buffer_mem_A = 2112 + (dispositivos_m - 1)* 64;
		Punt_buffer_mem_A = 4160 + (dispositivos_m - 1)* 128;   //--> --> --> --> --> --> -->
 8007a58:	4b1d      	ldr	r3, [pc, #116]	; (8007ad0 <analizar_Rx_04_local+0x90>)
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	01db      	lsls	r3, r3, #7
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	4b1a      	ldr	r3, [pc, #104]	; (8007ad4 <analizar_Rx_04_local+0x94>)
 8007a6c:	801a      	strh	r2, [r3, #0]

		for (uint8_t i=0; i<cant_bytes_04; i++)
 8007a6e:	2300      	movs	r3, #0
 8007a70:	71fb      	strb	r3, [r7, #7]
 8007a72:	e017      	b.n	8007aa4 <analizar_Rx_04_local+0x64>
		{
			Punt_buffer_04_Rx++;
 8007a74:	4b15      	ldr	r3, [pc, #84]	; (8007acc <analizar_Rx_04_local+0x8c>)
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	4b13      	ldr	r3, [pc, #76]	; (8007acc <analizar_Rx_04_local+0x8c>)
 8007a7e:	801a      	strh	r2, [r3, #0]
			Buffer_mem_A [Punt_buffer_mem_A + primer_byte_04 + i] = Buffer_04_Rx_W [Punt_buffer_04_Rx];
 8007a80:	4b12      	ldr	r3, [pc, #72]	; (8007acc <analizar_Rx_04_local+0x8c>)
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <analizar_Rx_04_local+0x94>)
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <analizar_Rx_04_local+0x98>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	441a      	add	r2, r3
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	4413      	add	r3, r2
 8007a96:	4a11      	ldr	r2, [pc, #68]	; (8007adc <analizar_Rx_04_local+0x9c>)
 8007a98:	5c51      	ldrb	r1, [r2, r1]
 8007a9a:	4a11      	ldr	r2, [pc, #68]	; (8007ae0 <analizar_Rx_04_local+0xa0>)
 8007a9c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0; i<cant_bytes_04; i++)
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	71fb      	strb	r3, [r7, #7]
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <analizar_Rx_04_local+0xa4>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	79fa      	ldrb	r2, [r7, #7]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d3e2      	bcc.n	8007a74 <analizar_Rx_04_local+0x34>
 8007aae:	e003      	b.n	8007ab8 <analizar_Rx_04_local+0x78>
		}
	}
	else
	{
		HAL_GPIO_TogglePin(Led_Azul_GPIO_Port, Led_Azul_Pin);
 8007ab0:	2120      	movs	r1, #32
 8007ab2:	480d      	ldr	r0, [pc, #52]	; (8007ae8 <analizar_Rx_04_local+0xa8>)
 8007ab4:	f004 fa9f 	bl	800bff6 <HAL_GPIO_TogglePin>
	}
	////RxTotal04_W = 0;  //DEBUGGER
	RxTotal04_W_Debugger = 0;  // DEBUGGER >>>>>>>>>>>>>>>>>>
 8007ab8:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <analizar_Rx_04_local+0xac>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	801a      	strh	r2, [r3, #0]
}
 8007abe:	bf00      	nop
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	2000c562 	.word	0x2000c562
 8007acc:	2000c560 	.word	0x2000c560
 8007ad0:	20003296 	.word	0x20003296
 8007ad4:	2000327a 	.word	0x2000327a
 8007ad8:	2000c564 	.word	0x2000c564
 8007adc:	2000c45c 	.word	0x2000c45c
 8007ae0:	20000d74 	.word	0x20000d74
 8007ae4:	2000c563 	.word	0x2000c563
 8007ae8:	40020400 	.word	0x40020400
 8007aec:	2000c55e 	.word	0x2000c55e

08007af0 <anal_recep_tot_crc_uart_04>:

void anal_recep_tot_crc_uart_04(void)  //Calcular CRC para uart 04
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
	error_crc_04 = 0;
 8007af6:	4b2d      	ldr	r3, [pc, #180]	; (8007bac <anal_recep_tot_crc_uart_04+0xbc>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	701a      	strb	r2, [r3, #0]
	if (Buffer_04_Rx_W [2] + 5 != RxTotal04_W)  //
 8007afc:	4b2c      	ldr	r3, [pc, #176]	; (8007bb0 <anal_recep_tot_crc_uart_04+0xc0>)
 8007afe:	789b      	ldrb	r3, [r3, #2]
 8007b00:	3305      	adds	r3, #5
 8007b02:	4a2c      	ldr	r2, [pc, #176]	; (8007bb4 <anal_recep_tot_crc_uart_04+0xc4>)
 8007b04:	8812      	ldrh	r2, [r2, #0]
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d003      	beq.n	8007b12 <anal_recep_tot_crc_uart_04+0x22>
	{
		error_crc_04 = 1;
 8007b0a:	4b28      	ldr	r3, [pc, #160]	; (8007bac <anal_recep_tot_crc_uart_04+0xbc>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]

		if (Buffer_04_Rx_W [RxTotal04_W - 2] != crc_l){error_crc_04 = 1;}
		if (Buffer_04_Rx_W [RxTotal04_W - 1] != crc_h){error_crc_04 = 1;}
	}

}
 8007b10:	e047      	b.n	8007ba2 <anal_recep_tot_crc_uart_04+0xb2>
		crc = 0xFFFF;
 8007b12:	4b29      	ldr	r3, [pc, #164]	; (8007bb8 <anal_recep_tot_crc_uart_04+0xc8>)
 8007b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b18:	801a      	strh	r2, [r3, #0]
		n = Buffer_04_Rx_W [2] + 3;
 8007b1a:	4b25      	ldr	r3, [pc, #148]	; (8007bb0 <anal_recep_tot_crc_uart_04+0xc0>)
 8007b1c:	789b      	ldrb	r3, [r3, #2]
 8007b1e:	3303      	adds	r3, #3
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	4b26      	ldr	r3, [pc, #152]	; (8007bbc <anal_recep_tot_crc_uart_04+0xcc>)
 8007b24:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<n; j++)
 8007b26:	2300      	movs	r3, #0
 8007b28:	607b      	str	r3, [r7, #4]
 8007b2a:	e010      	b.n	8007b4e <anal_recep_tot_crc_uart_04+0x5e>
			variable = Buffer_04_Rx_W[j];
 8007b2c:	4a20      	ldr	r2, [pc, #128]	; (8007bb0 <anal_recep_tot_crc_uart_04+0xc0>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4413      	add	r3, r2
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	4b22      	ldr	r3, [pc, #136]	; (8007bc0 <anal_recep_tot_crc_uart_04+0xd0>)
 8007b38:	801a      	strh	r2, [r3, #0]
			cmpt_crcMODBUS (&crc, variable);  //calcula CRC DNP de un vector de n bytes
 8007b3a:	4b21      	ldr	r3, [pc, #132]	; (8007bc0 <anal_recep_tot_crc_uart_04+0xd0>)
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	4619      	mov	r1, r3
 8007b42:	481d      	ldr	r0, [pc, #116]	; (8007bb8 <anal_recep_tot_crc_uart_04+0xc8>)
 8007b44:	f7f9 f9f6 	bl	8000f34 <cmpt_crcMODBUS>
		for(int j=0; j<n; j++)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	607b      	str	r3, [r7, #4]
 8007b4e:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <anal_recep_tot_crc_uart_04+0xcc>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4293      	cmp	r3, r2
 8007b58:	dbe8      	blt.n	8007b2c <anal_recep_tot_crc_uart_04+0x3c>
		crc_l = crc;
 8007b5a:	4b17      	ldr	r3, [pc, #92]	; (8007bb8 <anal_recep_tot_crc_uart_04+0xc8>)
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	4b18      	ldr	r3, [pc, #96]	; (8007bc4 <anal_recep_tot_crc_uart_04+0xd4>)
 8007b62:	701a      	strb	r2, [r3, #0]
		crc_h = crc >> 8;
 8007b64:	4b14      	ldr	r3, [pc, #80]	; (8007bb8 <anal_recep_tot_crc_uart_04+0xc8>)
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	0a1b      	lsrs	r3, r3, #8
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	4b16      	ldr	r3, [pc, #88]	; (8007bc8 <anal_recep_tot_crc_uart_04+0xd8>)
 8007b70:	701a      	strb	r2, [r3, #0]
		if (Buffer_04_Rx_W [RxTotal04_W - 2] != crc_l){error_crc_04 = 1;}
 8007b72:	4b10      	ldr	r3, [pc, #64]	; (8007bb4 <anal_recep_tot_crc_uart_04+0xc4>)
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	3b02      	subs	r3, #2
 8007b78:	4a0d      	ldr	r2, [pc, #52]	; (8007bb0 <anal_recep_tot_crc_uart_04+0xc0>)
 8007b7a:	5cd2      	ldrb	r2, [r2, r3]
 8007b7c:	4b11      	ldr	r3, [pc, #68]	; (8007bc4 <anal_recep_tot_crc_uart_04+0xd4>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d002      	beq.n	8007b8a <anal_recep_tot_crc_uart_04+0x9a>
 8007b84:	4b09      	ldr	r3, [pc, #36]	; (8007bac <anal_recep_tot_crc_uart_04+0xbc>)
 8007b86:	2201      	movs	r2, #1
 8007b88:	701a      	strb	r2, [r3, #0]
		if (Buffer_04_Rx_W [RxTotal04_W - 1] != crc_h){error_crc_04 = 1;}
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <anal_recep_tot_crc_uart_04+0xc4>)
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	4a07      	ldr	r2, [pc, #28]	; (8007bb0 <anal_recep_tot_crc_uart_04+0xc0>)
 8007b92:	5cd2      	ldrb	r2, [r2, r3]
 8007b94:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <anal_recep_tot_crc_uart_04+0xd8>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d002      	beq.n	8007ba2 <anal_recep_tot_crc_uart_04+0xb2>
 8007b9c:	4b03      	ldr	r3, [pc, #12]	; (8007bac <anal_recep_tot_crc_uart_04+0xbc>)
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	701a      	strb	r2, [r3, #0]
}
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	2000c562 	.word	0x2000c562
 8007bb0:	2000c45c 	.word	0x2000c45c
 8007bb4:	2000c458 	.word	0x2000c458
 8007bb8:	20003ce0 	.word	0x20003ce0
 8007bbc:	20000012 	.word	0x20000012
 8007bc0:	20003ce4 	.word	0x20003ce4
 8007bc4:	20003ce3 	.word	0x20003ce3
 8007bc8:	20003ce2 	.word	0x20003ce2

08007bcc <pedidos_reco_medi>:

//==========================================================================================
//  USART 06 - RECONECTADORES y MEDIDORES [06]
//==========================================================================================
void pedidos_reco_medi(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
//	if(dispositivos_c == 1)			//cvm - Para probar sin que salgan para recos.
	if(dispositivos_c == 0)			//cvm - Inicialmente c=0 (para recos)
 8007bd0:	4ba5      	ldr	r3, [pc, #660]	; (8007e68 <pedidos_reco_medi+0x29c>)
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f040 8212 	bne.w	8007ffe <pedidos_reco_medi+0x432>
	{
		dispositivos_r++;
 8007bda:	4ba4      	ldr	r3, [pc, #656]	; (8007e6c <pedidos_reco_medi+0x2a0>)
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	3301      	adds	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	4ba2      	ldr	r3, [pc, #648]	; (8007e6c <pedidos_reco_medi+0x2a0>)
 8007be4:	801a      	strh	r2, [r3, #0]
		if (dispositivos_r <= CANT_DISP_R)
 8007be6:	4ba2      	ldr	r3, [pc, #648]	; (8007e70 <pedidos_reco_medi+0x2a4>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	4b9f      	ldr	r3, [pc, #636]	; (8007e6c <pedidos_reco_medi+0x2a0>)
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	f0c0 81fc 	bcc.w	8007fee <pedidos_reco_medi+0x422>
		{
			switch(dispositivos_r)
 8007bf6:	4b9d      	ldr	r3, [pc, #628]	; (8007e6c <pedidos_reco_medi+0x2a0>)
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	2b1f      	cmp	r3, #31
 8007bfe:	f200 81eb 	bhi.w	8007fd8 <pedidos_reco_medi+0x40c>
 8007c02:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <pedidos_reco_medi+0x3c>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c89 	.word	0x08007c89
 8007c0c:	08007c9d 	.word	0x08007c9d
 8007c10:	08007cb1 	.word	0x08007cb1
 8007c14:	08007cc5 	.word	0x08007cc5
 8007c18:	08007cd9 	.word	0x08007cd9
 8007c1c:	08007ced 	.word	0x08007ced
 8007c20:	08007d01 	.word	0x08007d01
 8007c24:	08007d15 	.word	0x08007d15
 8007c28:	08007d29 	.word	0x08007d29
 8007c2c:	08007d3d 	.word	0x08007d3d
 8007c30:	08007d51 	.word	0x08007d51
 8007c34:	08007d65 	.word	0x08007d65
 8007c38:	08007d79 	.word	0x08007d79
 8007c3c:	08007d8d 	.word	0x08007d8d
 8007c40:	08007da1 	.word	0x08007da1
 8007c44:	08007db5 	.word	0x08007db5
 8007c48:	08007dc9 	.word	0x08007dc9
 8007c4c:	08007ddd 	.word	0x08007ddd
 8007c50:	08007df1 	.word	0x08007df1
 8007c54:	08007e05 	.word	0x08007e05
 8007c58:	08007e19 	.word	0x08007e19
 8007c5c:	08007e2d 	.word	0x08007e2d
 8007c60:	08007e41 	.word	0x08007e41
 8007c64:	08007e55 	.word	0x08007e55
 8007c68:	08007f39 	.word	0x08007f39
 8007c6c:	08007f4d 	.word	0x08007f4d
 8007c70:	08007f61 	.word	0x08007f61
 8007c74:	08007f75 	.word	0x08007f75
 8007c78:	08007f89 	.word	0x08007f89
 8007c7c:	08007f9d 	.word	0x08007f9d
 8007c80:	08007fb1 	.word	0x08007fb1
 8007c84:	08007fc5 	.word	0x08007fc5
			{
				case 1:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_001_REC + 1,*(uint8_t*) PAQ_001_REC, 500);  //(uint8_t*) PAQ_001_REC
 8007c88:	4b7a      	ldr	r3, [pc, #488]	; (8007e74 <pedidos_reco_medi+0x2a8>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007c92:	4979      	ldr	r1, [pc, #484]	; (8007e78 <pedidos_reco_medi+0x2ac>)
 8007c94:	4879      	ldr	r0, [pc, #484]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007c96:	f006 fc09 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007c9a:	e19d      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 2:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_002_REC + 1,*(uint8_t*) PAQ_002_REC, 500);  //
 8007c9c:	4b78      	ldr	r3, [pc, #480]	; (8007e80 <pedidos_reco_medi+0x2b4>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007ca6:	4977      	ldr	r1, [pc, #476]	; (8007e84 <pedidos_reco_medi+0x2b8>)
 8007ca8:	4874      	ldr	r0, [pc, #464]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007caa:	f006 fbff 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007cae:	e193      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 3:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_003_REC + 1,*(uint8_t*) PAQ_003_REC, 500);  //
 8007cb0:	4b75      	ldr	r3, [pc, #468]	; (8007e88 <pedidos_reco_medi+0x2bc>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007cba:	4974      	ldr	r1, [pc, #464]	; (8007e8c <pedidos_reco_medi+0x2c0>)
 8007cbc:	486f      	ldr	r0, [pc, #444]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007cbe:	f006 fbf5 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007cc2:	e189      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 4:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_004_REC + 1,*(uint8_t*) PAQ_004_REC, 500);  //
 8007cc4:	4b72      	ldr	r3, [pc, #456]	; (8007e90 <pedidos_reco_medi+0x2c4>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007cce:	4971      	ldr	r1, [pc, #452]	; (8007e94 <pedidos_reco_medi+0x2c8>)
 8007cd0:	486a      	ldr	r0, [pc, #424]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007cd2:	f006 fbeb 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007cd6:	e17f      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 5:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_005_REC + 1,*(uint8_t*) PAQ_005_REC, 500);  //
 8007cd8:	4b6f      	ldr	r3, [pc, #444]	; (8007e98 <pedidos_reco_medi+0x2cc>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007ce2:	496e      	ldr	r1, [pc, #440]	; (8007e9c <pedidos_reco_medi+0x2d0>)
 8007ce4:	4865      	ldr	r0, [pc, #404]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007ce6:	f006 fbe1 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007cea:	e175      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 6:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_006_REC + 1,*(uint8_t*) PAQ_006_REC, 500);  //
 8007cec:	4b6c      	ldr	r3, [pc, #432]	; (8007ea0 <pedidos_reco_medi+0x2d4>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007cf6:	496b      	ldr	r1, [pc, #428]	; (8007ea4 <pedidos_reco_medi+0x2d8>)
 8007cf8:	4860      	ldr	r0, [pc, #384]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007cfa:	f006 fbd7 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007cfe:	e16b      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 7:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_007_REC + 1,*(uint8_t*) PAQ_007_REC, 500);  //
 8007d00:	4b69      	ldr	r3, [pc, #420]	; (8007ea8 <pedidos_reco_medi+0x2dc>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d0a:	4968      	ldr	r1, [pc, #416]	; (8007eac <pedidos_reco_medi+0x2e0>)
 8007d0c:	485b      	ldr	r0, [pc, #364]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007d0e:	f006 fbcd 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007d12:	e161      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 8:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_008_REC + 1,*(uint8_t*) PAQ_008_REC, 500);  //
 8007d14:	4b66      	ldr	r3, [pc, #408]	; (8007eb0 <pedidos_reco_medi+0x2e4>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d1e:	4965      	ldr	r1, [pc, #404]	; (8007eb4 <pedidos_reco_medi+0x2e8>)
 8007d20:	4856      	ldr	r0, [pc, #344]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007d22:	f006 fbc3 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007d26:	e157      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 9:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_009_REC + 1,*(uint8_t*) PAQ_009_REC, 500);  //
 8007d28:	4b63      	ldr	r3, [pc, #396]	; (8007eb8 <pedidos_reco_medi+0x2ec>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d32:	4962      	ldr	r1, [pc, #392]	; (8007ebc <pedidos_reco_medi+0x2f0>)
 8007d34:	4851      	ldr	r0, [pc, #324]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007d36:	f006 fbb9 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007d3a:	e14d      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 10:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_010_REC + 1,*(uint8_t*) PAQ_010_REC, 500);  //
 8007d3c:	4b60      	ldr	r3, [pc, #384]	; (8007ec0 <pedidos_reco_medi+0x2f4>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d46:	495f      	ldr	r1, [pc, #380]	; (8007ec4 <pedidos_reco_medi+0x2f8>)
 8007d48:	484c      	ldr	r0, [pc, #304]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007d4a:	f006 fbaf 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007d4e:	e143      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 11:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_011_REC + 1,*(uint8_t*) PAQ_011_REC, 500);  //
 8007d50:	4b5d      	ldr	r3, [pc, #372]	; (8007ec8 <pedidos_reco_medi+0x2fc>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d5a:	495c      	ldr	r1, [pc, #368]	; (8007ecc <pedidos_reco_medi+0x300>)
 8007d5c:	4847      	ldr	r0, [pc, #284]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007d5e:	f006 fba5 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007d62:	e139      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 12:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_012_REC + 1,*(uint8_t*) PAQ_012_REC, 500);  //
 8007d64:	4b5a      	ldr	r3, [pc, #360]	; (8007ed0 <pedidos_reco_medi+0x304>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d6e:	4959      	ldr	r1, [pc, #356]	; (8007ed4 <pedidos_reco_medi+0x308>)
 8007d70:	4842      	ldr	r0, [pc, #264]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007d72:	f006 fb9b 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007d76:	e12f      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 13:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_013_REC + 1,*(uint8_t*) PAQ_013_REC, 500);  //
 8007d78:	4b57      	ldr	r3, [pc, #348]	; (8007ed8 <pedidos_reco_medi+0x30c>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d82:	4956      	ldr	r1, [pc, #344]	; (8007edc <pedidos_reco_medi+0x310>)
 8007d84:	483d      	ldr	r0, [pc, #244]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007d86:	f006 fb91 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007d8a:	e125      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 14:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_014_REC + 1,*(uint8_t*) PAQ_014_REC, 500);  //
 8007d8c:	4b54      	ldr	r3, [pc, #336]	; (8007ee0 <pedidos_reco_medi+0x314>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d96:	4953      	ldr	r1, [pc, #332]	; (8007ee4 <pedidos_reco_medi+0x318>)
 8007d98:	4838      	ldr	r0, [pc, #224]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007d9a:	f006 fb87 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007d9e:	e11b      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 15:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_015_REC + 1,*(uint8_t*) PAQ_015_REC, 500);  //
 8007da0:	4b51      	ldr	r3, [pc, #324]	; (8007ee8 <pedidos_reco_medi+0x31c>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007daa:	4950      	ldr	r1, [pc, #320]	; (8007eec <pedidos_reco_medi+0x320>)
 8007dac:	4833      	ldr	r0, [pc, #204]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007dae:	f006 fb7d 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007db2:	e111      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 16:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_016_REC + 1,*(uint8_t*) PAQ_016_REC, 500);  //
 8007db4:	4b4e      	ldr	r3, [pc, #312]	; (8007ef0 <pedidos_reco_medi+0x324>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007dbe:	494d      	ldr	r1, [pc, #308]	; (8007ef4 <pedidos_reco_medi+0x328>)
 8007dc0:	482e      	ldr	r0, [pc, #184]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007dc2:	f006 fb73 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007dc6:	e107      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 17:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_017_REC + 1,*(uint8_t*) PAQ_017_REC, 500);  //
 8007dc8:	4b4b      	ldr	r3, [pc, #300]	; (8007ef8 <pedidos_reco_medi+0x32c>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007dd2:	494a      	ldr	r1, [pc, #296]	; (8007efc <pedidos_reco_medi+0x330>)
 8007dd4:	4829      	ldr	r0, [pc, #164]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007dd6:	f006 fb69 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007dda:	e0fd      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 18:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_018_REC + 1,*(uint8_t*) PAQ_018_REC, 500);  //
 8007ddc:	4b48      	ldr	r3, [pc, #288]	; (8007f00 <pedidos_reco_medi+0x334>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007de6:	4947      	ldr	r1, [pc, #284]	; (8007f04 <pedidos_reco_medi+0x338>)
 8007de8:	4824      	ldr	r0, [pc, #144]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007dea:	f006 fb5f 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007dee:	e0f3      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 19:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_019_REC + 1,*(uint8_t*) PAQ_019_REC, 500);  //
 8007df0:	4b45      	ldr	r3, [pc, #276]	; (8007f08 <pedidos_reco_medi+0x33c>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007dfa:	4944      	ldr	r1, [pc, #272]	; (8007f0c <pedidos_reco_medi+0x340>)
 8007dfc:	481f      	ldr	r0, [pc, #124]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007dfe:	f006 fb55 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007e02:	e0e9      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 20:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_020_REC + 1,*(uint8_t*) PAQ_020_REC, 500);  //
 8007e04:	4b42      	ldr	r3, [pc, #264]	; (8007f10 <pedidos_reco_medi+0x344>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007e0e:	4941      	ldr	r1, [pc, #260]	; (8007f14 <pedidos_reco_medi+0x348>)
 8007e10:	481a      	ldr	r0, [pc, #104]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007e12:	f006 fb4b 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007e16:	e0df      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 21:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_021_REC + 1,*(uint8_t*) PAQ_021_REC, 500);  //
 8007e18:	4b3f      	ldr	r3, [pc, #252]	; (8007f18 <pedidos_reco_medi+0x34c>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007e22:	493e      	ldr	r1, [pc, #248]	; (8007f1c <pedidos_reco_medi+0x350>)
 8007e24:	4815      	ldr	r0, [pc, #84]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007e26:	f006 fb41 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007e2a:	e0d5      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 22:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_022_REC + 1,*(uint8_t*) PAQ_022_REC, 500);  //
 8007e2c:	4b3c      	ldr	r3, [pc, #240]	; (8007f20 <pedidos_reco_medi+0x354>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007e36:	493b      	ldr	r1, [pc, #236]	; (8007f24 <pedidos_reco_medi+0x358>)
 8007e38:	4810      	ldr	r0, [pc, #64]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007e3a:	f006 fb37 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007e3e:	e0cb      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 23:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_023_REC + 1,*(uint8_t*) PAQ_023_REC, 500);  //
 8007e40:	4b39      	ldr	r3, [pc, #228]	; (8007f28 <pedidos_reco_medi+0x35c>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007e4a:	4938      	ldr	r1, [pc, #224]	; (8007f2c <pedidos_reco_medi+0x360>)
 8007e4c:	480b      	ldr	r0, [pc, #44]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007e4e:	f006 fb2d 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007e52:	e0c1      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 24:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_024_REC + 1,*(uint8_t*) PAQ_024_REC, 500);  //
 8007e54:	4b36      	ldr	r3, [pc, #216]	; (8007f30 <pedidos_reco_medi+0x364>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007e5e:	4935      	ldr	r1, [pc, #212]	; (8007f34 <pedidos_reco_medi+0x368>)
 8007e60:	4806      	ldr	r0, [pc, #24]	; (8007e7c <pedidos_reco_medi+0x2b0>)
 8007e62:	f006 fb23 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007e66:	e0b7      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
 8007e68:	20003298 	.word	0x20003298
 8007e6c:	20003294 	.word	0x20003294
 8007e70:	20000924 	.word	0x20000924
 8007e74:	080c0000 	.word	0x080c0000
 8007e78:	080c0001 	.word	0x080c0001
 8007e7c:	20000528 	.word	0x20000528
 8007e80:	080c0080 	.word	0x080c0080
 8007e84:	080c0081 	.word	0x080c0081
 8007e88:	080c0100 	.word	0x080c0100
 8007e8c:	080c0101 	.word	0x080c0101
 8007e90:	080c0180 	.word	0x080c0180
 8007e94:	080c0181 	.word	0x080c0181
 8007e98:	080c0200 	.word	0x080c0200
 8007e9c:	080c0201 	.word	0x080c0201
 8007ea0:	080c0280 	.word	0x080c0280
 8007ea4:	080c0281 	.word	0x080c0281
 8007ea8:	080c0300 	.word	0x080c0300
 8007eac:	080c0301 	.word	0x080c0301
 8007eb0:	080c0380 	.word	0x080c0380
 8007eb4:	080c0381 	.word	0x080c0381
 8007eb8:	080c0400 	.word	0x080c0400
 8007ebc:	080c0401 	.word	0x080c0401
 8007ec0:	080c0480 	.word	0x080c0480
 8007ec4:	080c0481 	.word	0x080c0481
 8007ec8:	080c0500 	.word	0x080c0500
 8007ecc:	080c0501 	.word	0x080c0501
 8007ed0:	080c0580 	.word	0x080c0580
 8007ed4:	080c0581 	.word	0x080c0581
 8007ed8:	080c0600 	.word	0x080c0600
 8007edc:	080c0601 	.word	0x080c0601
 8007ee0:	080c0680 	.word	0x080c0680
 8007ee4:	080c0681 	.word	0x080c0681
 8007ee8:	080c0700 	.word	0x080c0700
 8007eec:	080c0701 	.word	0x080c0701
 8007ef0:	080c0780 	.word	0x080c0780
 8007ef4:	080c0781 	.word	0x080c0781
 8007ef8:	080c0800 	.word	0x080c0800
 8007efc:	080c0801 	.word	0x080c0801
 8007f00:	080c0880 	.word	0x080c0880
 8007f04:	080c0881 	.word	0x080c0881
 8007f08:	080c0900 	.word	0x080c0900
 8007f0c:	080c0901 	.word	0x080c0901
 8007f10:	080c0980 	.word	0x080c0980
 8007f14:	080c0981 	.word	0x080c0981
 8007f18:	080c0a00 	.word	0x080c0a00
 8007f1c:	080c0a01 	.word	0x080c0a01
 8007f20:	080c0a80 	.word	0x080c0a80
 8007f24:	080c0a81 	.word	0x080c0a81
 8007f28:	080c0b00 	.word	0x080c0b00
 8007f2c:	080c0b01 	.word	0x080c0b01
 8007f30:	080c0b80 	.word	0x080c0b80
 8007f34:	080c0b81 	.word	0x080c0b81
				case 25:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_025_REC + 1,*(uint8_t*) PAQ_025_REC, 500);  //
 8007f38:	4ba9      	ldr	r3, [pc, #676]	; (80081e0 <pedidos_reco_medi+0x614>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f42:	49a8      	ldr	r1, [pc, #672]	; (80081e4 <pedidos_reco_medi+0x618>)
 8007f44:	48a8      	ldr	r0, [pc, #672]	; (80081e8 <pedidos_reco_medi+0x61c>)
 8007f46:	f006 fab1 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007f4a:	e045      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 26:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_026_REC + 1,*(uint8_t*) PAQ_026_REC, 500);  //
 8007f4c:	4ba7      	ldr	r3, [pc, #668]	; (80081ec <pedidos_reco_medi+0x620>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f56:	49a6      	ldr	r1, [pc, #664]	; (80081f0 <pedidos_reco_medi+0x624>)
 8007f58:	48a3      	ldr	r0, [pc, #652]	; (80081e8 <pedidos_reco_medi+0x61c>)
 8007f5a:	f006 faa7 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007f5e:	e03b      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 27:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_027_REC + 1,*(uint8_t*) PAQ_027_REC, 500);  //
 8007f60:	4ba4      	ldr	r3, [pc, #656]	; (80081f4 <pedidos_reco_medi+0x628>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f6a:	49a3      	ldr	r1, [pc, #652]	; (80081f8 <pedidos_reco_medi+0x62c>)
 8007f6c:	489e      	ldr	r0, [pc, #632]	; (80081e8 <pedidos_reco_medi+0x61c>)
 8007f6e:	f006 fa9d 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007f72:	e031      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 28:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_028_REC + 1,*(uint8_t*) PAQ_028_REC, 500);  //
 8007f74:	4ba1      	ldr	r3, [pc, #644]	; (80081fc <pedidos_reco_medi+0x630>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f7e:	49a0      	ldr	r1, [pc, #640]	; (8008200 <pedidos_reco_medi+0x634>)
 8007f80:	4899      	ldr	r0, [pc, #612]	; (80081e8 <pedidos_reco_medi+0x61c>)
 8007f82:	f006 fa93 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007f86:	e027      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 29:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_029_REC + 1,*(uint8_t*) PAQ_029_REC, 500);  //
 8007f88:	4b9e      	ldr	r3, [pc, #632]	; (8008204 <pedidos_reco_medi+0x638>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f92:	499d      	ldr	r1, [pc, #628]	; (8008208 <pedidos_reco_medi+0x63c>)
 8007f94:	4894      	ldr	r0, [pc, #592]	; (80081e8 <pedidos_reco_medi+0x61c>)
 8007f96:	f006 fa89 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007f9a:	e01d      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 30:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_030_REC + 1,*(uint8_t*) PAQ_030_REC, 500);  //
 8007f9c:	4b9b      	ldr	r3, [pc, #620]	; (800820c <pedidos_reco_medi+0x640>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007fa6:	499a      	ldr	r1, [pc, #616]	; (8008210 <pedidos_reco_medi+0x644>)
 8007fa8:	488f      	ldr	r0, [pc, #572]	; (80081e8 <pedidos_reco_medi+0x61c>)
 8007faa:	f006 fa7f 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007fae:	e013      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 31:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_031_REC + 1,*(uint8_t*) PAQ_031_REC, 500);  //
 8007fb0:	4b98      	ldr	r3, [pc, #608]	; (8008214 <pedidos_reco_medi+0x648>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007fba:	4997      	ldr	r1, [pc, #604]	; (8008218 <pedidos_reco_medi+0x64c>)
 8007fbc:	488a      	ldr	r0, [pc, #552]	; (80081e8 <pedidos_reco_medi+0x61c>)
 8007fbe:	f006 fa75 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007fc2:	e009      	b.n	8007fd8 <pedidos_reco_medi+0x40c>
				case 32:
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_032_REC + 1,*(uint8_t*) PAQ_032_REC, 500);  //
 8007fc4:	4b95      	ldr	r3, [pc, #596]	; (800821c <pedidos_reco_medi+0x650>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007fce:	4994      	ldr	r1, [pc, #592]	; (8008220 <pedidos_reco_medi+0x654>)
 8007fd0:	4885      	ldr	r0, [pc, #532]	; (80081e8 <pedidos_reco_medi+0x61c>)
 8007fd2:	f006 fa6b 	bl	800e4ac <HAL_UART_Transmit>
					break;
 8007fd6:	bf00      	nop
			}
			Buffer_env_R [dispositivos_r-1] = 1;
 8007fd8:	4b92      	ldr	r3, [pc, #584]	; (8008224 <pedidos_reco_medi+0x658>)
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	4a92      	ldr	r2, [pc, #584]	; (8008228 <pedidos_reco_medi+0x65c>)
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	54d1      	strb	r1, [r2, r3]
			HAL_Delay(20);
 8007fe4:	2014      	movs	r0, #20
 8007fe6:	f002 fa79 	bl	800a4dc <HAL_Delay>
		{
			dispositivos_m = 0;
			dispositivos_c = 0;
		}
	}
}
 8007fea:	f000 bc0a 	b.w	8008802 <pedidos_reco_medi+0xc36>
			dispositivos_r = 0;
 8007fee:	4b8d      	ldr	r3, [pc, #564]	; (8008224 <pedidos_reco_medi+0x658>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	801a      	strh	r2, [r3, #0]
			dispositivos_c = 1;
 8007ff4:	4b8d      	ldr	r3, [pc, #564]	; (800822c <pedidos_reco_medi+0x660>)
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	801a      	strh	r2, [r3, #0]
}
 8007ffa:	f000 bc02 	b.w	8008802 <pedidos_reco_medi+0xc36>
		dispositivos_m++;
 8007ffe:	4b8c      	ldr	r3, [pc, #560]	; (8008230 <pedidos_reco_medi+0x664>)
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	3301      	adds	r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	4b8a      	ldr	r3, [pc, #552]	; (8008230 <pedidos_reco_medi+0x664>)
 8008008:	801a      	strh	r2, [r3, #0]
		if (dispositivos_m <= CANT_DISP_M)
 800800a:	4b8a      	ldr	r3, [pc, #552]	; (8008234 <pedidos_reco_medi+0x668>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b29a      	uxth	r2, r3
 8008010:	4b87      	ldr	r3, [pc, #540]	; (8008230 <pedidos_reco_medi+0x664>)
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	f0c0 83ee 	bcc.w	80087f6 <pedidos_reco_medi+0xc2a>
			switch(dispositivos_m)
 800801a:	4b85      	ldr	r3, [pc, #532]	; (8008230 <pedidos_reco_medi+0x664>)
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	3b01      	subs	r3, #1
 8008020:	2b1f      	cmp	r3, #31
 8008022:	f200 83e1 	bhi.w	80087e8 <pedidos_reco_medi+0xc1c>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <pedidos_reco_medi+0x460>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	080080ad 	.word	0x080080ad
 8008030:	080080d9 	.word	0x080080d9
 8008034:	08008105 	.word	0x08008105
 8008038:	08008131 	.word	0x08008131
 800803c:	0800815d 	.word	0x0800815d
 8008040:	08008189 	.word	0x08008189
 8008044:	080081b5 	.word	0x080081b5
 8008048:	080082b1 	.word	0x080082b1
 800804c:	080082dd 	.word	0x080082dd
 8008050:	08008309 	.word	0x08008309
 8008054:	08008335 	.word	0x08008335
 8008058:	08008361 	.word	0x08008361
 800805c:	0800838d 	.word	0x0800838d
 8008060:	080083b9 	.word	0x080083b9
 8008064:	080083e5 	.word	0x080083e5
 8008068:	08008411 	.word	0x08008411
 800806c:	0800843d 	.word	0x0800843d
 8008070:	08008469 	.word	0x08008469
 8008074:	08008495 	.word	0x08008495
 8008078:	080084c1 	.word	0x080084c1
 800807c:	080084ed 	.word	0x080084ed
 8008080:	08008605 	.word	0x08008605
 8008084:	08008631 	.word	0x08008631
 8008088:	0800865d 	.word	0x0800865d
 800808c:	08008689 	.word	0x08008689
 8008090:	080086b5 	.word	0x080086b5
 8008094:	080086e1 	.word	0x080086e1
 8008098:	0800870d 	.word	0x0800870d
 800809c:	08008739 	.word	0x08008739
 80080a0:	08008765 	.word	0x08008765
 80080a4:	08008791 	.word	0x08008791
 80080a8:	080087bd 	.word	0x080087bd
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_001_MED + 1,*(uint8_t*) PAQ_001_MED, 500);  //
 80080ac:	4b62      	ldr	r3, [pc, #392]	; (8008238 <pedidos_reco_medi+0x66c>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80080b6:	4961      	ldr	r1, [pc, #388]	; (800823c <pedidos_reco_medi+0x670>)
 80080b8:	484b      	ldr	r0, [pc, #300]	; (80081e8 <pedidos_reco_medi+0x61c>)
 80080ba:	f006 f9f7 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_001_MED + 4) * 2;
 80080be:	4b60      	ldr	r3, [pc, #384]	; (8008240 <pedidos_reco_medi+0x674>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	4b5f      	ldr	r3, [pc, #380]	; (8008244 <pedidos_reco_medi+0x678>)
 80080c8:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_001_MED + 6) * 2;
 80080ca:	4b5f      	ldr	r3, [pc, #380]	; (8008248 <pedidos_reco_medi+0x67c>)
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	4b5e      	ldr	r3, [pc, #376]	; (800824c <pedidos_reco_medi+0x680>)
 80080d4:	701a      	strb	r2, [r3, #0]
					break;
 80080d6:	e387      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_002_MED + 1,*(uint8_t*) PAQ_002_MED, 500);  //
 80080d8:	4b5d      	ldr	r3, [pc, #372]	; (8008250 <pedidos_reco_medi+0x684>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	b29a      	uxth	r2, r3
 80080de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80080e2:	495c      	ldr	r1, [pc, #368]	; (8008254 <pedidos_reco_medi+0x688>)
 80080e4:	4840      	ldr	r0, [pc, #256]	; (80081e8 <pedidos_reco_medi+0x61c>)
 80080e6:	f006 f9e1 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_002_MED + 4) * 2;
 80080ea:	4b5b      	ldr	r3, [pc, #364]	; (8008258 <pedidos_reco_medi+0x68c>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	4b54      	ldr	r3, [pc, #336]	; (8008244 <pedidos_reco_medi+0x678>)
 80080f4:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_002_MED + 6) * 2;
 80080f6:	4b59      	ldr	r3, [pc, #356]	; (800825c <pedidos_reco_medi+0x690>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	4b53      	ldr	r3, [pc, #332]	; (800824c <pedidos_reco_medi+0x680>)
 8008100:	701a      	strb	r2, [r3, #0]
					break;
 8008102:	e371      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_003_MED + 1,*(uint8_t*) PAQ_003_MED, 500);  //
 8008104:	4b56      	ldr	r3, [pc, #344]	; (8008260 <pedidos_reco_medi+0x694>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	b29a      	uxth	r2, r3
 800810a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800810e:	4955      	ldr	r1, [pc, #340]	; (8008264 <pedidos_reco_medi+0x698>)
 8008110:	4835      	ldr	r0, [pc, #212]	; (80081e8 <pedidos_reco_medi+0x61c>)
 8008112:	f006 f9cb 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_003_MED + 4) * 2;
 8008116:	4b54      	ldr	r3, [pc, #336]	; (8008268 <pedidos_reco_medi+0x69c>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	b2da      	uxtb	r2, r3
 800811e:	4b49      	ldr	r3, [pc, #292]	; (8008244 <pedidos_reco_medi+0x678>)
 8008120:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_003_MED + 6) * 2;
 8008122:	4b52      	ldr	r3, [pc, #328]	; (800826c <pedidos_reco_medi+0x6a0>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	b2da      	uxtb	r2, r3
 800812a:	4b48      	ldr	r3, [pc, #288]	; (800824c <pedidos_reco_medi+0x680>)
 800812c:	701a      	strb	r2, [r3, #0]
					break;
 800812e:	e35b      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_004_MED + 1,*(uint8_t*) PAQ_004_MED, 500);  //
 8008130:	4b4f      	ldr	r3, [pc, #316]	; (8008270 <pedidos_reco_medi+0x6a4>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	b29a      	uxth	r2, r3
 8008136:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800813a:	494e      	ldr	r1, [pc, #312]	; (8008274 <pedidos_reco_medi+0x6a8>)
 800813c:	482a      	ldr	r0, [pc, #168]	; (80081e8 <pedidos_reco_medi+0x61c>)
 800813e:	f006 f9b5 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_004_MED + 4) * 2;
 8008142:	4b4d      	ldr	r3, [pc, #308]	; (8008278 <pedidos_reco_medi+0x6ac>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	005b      	lsls	r3, r3, #1
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4b3e      	ldr	r3, [pc, #248]	; (8008244 <pedidos_reco_medi+0x678>)
 800814c:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_004_MED + 6) * 2;
 800814e:	4b4b      	ldr	r3, [pc, #300]	; (800827c <pedidos_reco_medi+0x6b0>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	b2da      	uxtb	r2, r3
 8008156:	4b3d      	ldr	r3, [pc, #244]	; (800824c <pedidos_reco_medi+0x680>)
 8008158:	701a      	strb	r2, [r3, #0]
					break;
 800815a:	e345      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_005_MED + 1,*(uint8_t*) PAQ_005_MED, 500);  //
 800815c:	4b48      	ldr	r3, [pc, #288]	; (8008280 <pedidos_reco_medi+0x6b4>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	b29a      	uxth	r2, r3
 8008162:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008166:	4947      	ldr	r1, [pc, #284]	; (8008284 <pedidos_reco_medi+0x6b8>)
 8008168:	481f      	ldr	r0, [pc, #124]	; (80081e8 <pedidos_reco_medi+0x61c>)
 800816a:	f006 f99f 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_005_MED + 4) * 2;
 800816e:	4b46      	ldr	r3, [pc, #280]	; (8008288 <pedidos_reco_medi+0x6bc>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	005b      	lsls	r3, r3, #1
 8008174:	b2da      	uxtb	r2, r3
 8008176:	4b33      	ldr	r3, [pc, #204]	; (8008244 <pedidos_reco_medi+0x678>)
 8008178:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_005_MED + 6) * 2;
 800817a:	4b44      	ldr	r3, [pc, #272]	; (800828c <pedidos_reco_medi+0x6c0>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	b2da      	uxtb	r2, r3
 8008182:	4b32      	ldr	r3, [pc, #200]	; (800824c <pedidos_reco_medi+0x680>)
 8008184:	701a      	strb	r2, [r3, #0]
					break;
 8008186:	e32f      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_006_MED + 1,*(uint8_t*) PAQ_006_MED, 500);  //
 8008188:	4b41      	ldr	r3, [pc, #260]	; (8008290 <pedidos_reco_medi+0x6c4>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	b29a      	uxth	r2, r3
 800818e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008192:	4940      	ldr	r1, [pc, #256]	; (8008294 <pedidos_reco_medi+0x6c8>)
 8008194:	4814      	ldr	r0, [pc, #80]	; (80081e8 <pedidos_reco_medi+0x61c>)
 8008196:	f006 f989 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_006_MED + 4) * 2;
 800819a:	4b3f      	ldr	r3, [pc, #252]	; (8008298 <pedidos_reco_medi+0x6cc>)
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	4b28      	ldr	r3, [pc, #160]	; (8008244 <pedidos_reco_medi+0x678>)
 80081a4:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_006_MED + 6) * 2;
 80081a6:	4b3d      	ldr	r3, [pc, #244]	; (800829c <pedidos_reco_medi+0x6d0>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	4b27      	ldr	r3, [pc, #156]	; (800824c <pedidos_reco_medi+0x680>)
 80081b0:	701a      	strb	r2, [r3, #0]
					break;
 80081b2:	e319      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_007_MED + 1,*(uint8_t*) PAQ_007_MED, 500);  //
 80081b4:	4b3a      	ldr	r3, [pc, #232]	; (80082a0 <pedidos_reco_medi+0x6d4>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80081be:	4939      	ldr	r1, [pc, #228]	; (80082a4 <pedidos_reco_medi+0x6d8>)
 80081c0:	4809      	ldr	r0, [pc, #36]	; (80081e8 <pedidos_reco_medi+0x61c>)
 80081c2:	f006 f973 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_007_MED + 4) * 2;
 80081c6:	4b38      	ldr	r3, [pc, #224]	; (80082a8 <pedidos_reco_medi+0x6dc>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	4b1d      	ldr	r3, [pc, #116]	; (8008244 <pedidos_reco_medi+0x678>)
 80081d0:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_007_MED + 6) * 2;
 80081d2:	4b36      	ldr	r3, [pc, #216]	; (80082ac <pedidos_reco_medi+0x6e0>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	4b1c      	ldr	r3, [pc, #112]	; (800824c <pedidos_reco_medi+0x680>)
 80081dc:	701a      	strb	r2, [r3, #0]
					break;
 80081de:	e303      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
 80081e0:	080c0c00 	.word	0x080c0c00
 80081e4:	080c0c01 	.word	0x080c0c01
 80081e8:	20000528 	.word	0x20000528
 80081ec:	080c0c80 	.word	0x080c0c80
 80081f0:	080c0c81 	.word	0x080c0c81
 80081f4:	080c0d00 	.word	0x080c0d00
 80081f8:	080c0d01 	.word	0x080c0d01
 80081fc:	080c0d80 	.word	0x080c0d80
 8008200:	080c0d81 	.word	0x080c0d81
 8008204:	080c0e00 	.word	0x080c0e00
 8008208:	080c0e01 	.word	0x080c0e01
 800820c:	080c0e80 	.word	0x080c0e80
 8008210:	080c0e81 	.word	0x080c0e81
 8008214:	080c0f00 	.word	0x080c0f00
 8008218:	080c0f01 	.word	0x080c0f01
 800821c:	080c0f80 	.word	0x080c0f80
 8008220:	080c0f81 	.word	0x080c0f81
 8008224:	20003294 	.word	0x20003294
 8008228:	200031f8 	.word	0x200031f8
 800822c:	20003298 	.word	0x20003298
 8008230:	20003296 	.word	0x20003296
 8008234:	20000925 	.word	0x20000925
 8008238:	080c1000 	.word	0x080c1000
 800823c:	080c1001 	.word	0x080c1001
 8008240:	080c1004 	.word	0x080c1004
 8008244:	2000c134 	.word	0x2000c134
 8008248:	080c1006 	.word	0x080c1006
 800824c:	2000c135 	.word	0x2000c135
 8008250:	080c1080 	.word	0x080c1080
 8008254:	080c1081 	.word	0x080c1081
 8008258:	080c1084 	.word	0x080c1084
 800825c:	080c1086 	.word	0x080c1086
 8008260:	080c1100 	.word	0x080c1100
 8008264:	080c1101 	.word	0x080c1101
 8008268:	080c1104 	.word	0x080c1104
 800826c:	080c1106 	.word	0x080c1106
 8008270:	080c1180 	.word	0x080c1180
 8008274:	080c1181 	.word	0x080c1181
 8008278:	080c1184 	.word	0x080c1184
 800827c:	080c1186 	.word	0x080c1186
 8008280:	080c1200 	.word	0x080c1200
 8008284:	080c1201 	.word	0x080c1201
 8008288:	080c1204 	.word	0x080c1204
 800828c:	080c1206 	.word	0x080c1206
 8008290:	080c1280 	.word	0x080c1280
 8008294:	080c1281 	.word	0x080c1281
 8008298:	080c1284 	.word	0x080c1284
 800829c:	080c1286 	.word	0x080c1286
 80082a0:	080c1300 	.word	0x080c1300
 80082a4:	080c1301 	.word	0x080c1301
 80082a8:	080c1304 	.word	0x080c1304
 80082ac:	080c1306 	.word	0x080c1306
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_008_MED + 1,*(uint8_t*) PAQ_008_MED, 500);  //
 80082b0:	4b99      	ldr	r3, [pc, #612]	; (8008518 <pedidos_reco_medi+0x94c>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80082ba:	4998      	ldr	r1, [pc, #608]	; (800851c <pedidos_reco_medi+0x950>)
 80082bc:	4898      	ldr	r0, [pc, #608]	; (8008520 <pedidos_reco_medi+0x954>)
 80082be:	f006 f8f5 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_008_MED + 4) * 2;
 80082c2:	4b98      	ldr	r3, [pc, #608]	; (8008524 <pedidos_reco_medi+0x958>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	4b97      	ldr	r3, [pc, #604]	; (8008528 <pedidos_reco_medi+0x95c>)
 80082cc:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_008_MED + 6) * 2;
 80082ce:	4b97      	ldr	r3, [pc, #604]	; (800852c <pedidos_reco_medi+0x960>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	4b96      	ldr	r3, [pc, #600]	; (8008530 <pedidos_reco_medi+0x964>)
 80082d8:	701a      	strb	r2, [r3, #0]
					break;
 80082da:	e285      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_009_MED + 1,*(uint8_t*) PAQ_009_MED, 500);  //
 80082dc:	4b95      	ldr	r3, [pc, #596]	; (8008534 <pedidos_reco_medi+0x968>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80082e6:	4994      	ldr	r1, [pc, #592]	; (8008538 <pedidos_reco_medi+0x96c>)
 80082e8:	488d      	ldr	r0, [pc, #564]	; (8008520 <pedidos_reco_medi+0x954>)
 80082ea:	f006 f8df 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_009_MED + 4) * 2;
 80082ee:	4b93      	ldr	r3, [pc, #588]	; (800853c <pedidos_reco_medi+0x970>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	4b8c      	ldr	r3, [pc, #560]	; (8008528 <pedidos_reco_medi+0x95c>)
 80082f8:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_009_MED + 6) * 2;
 80082fa:	4b91      	ldr	r3, [pc, #580]	; (8008540 <pedidos_reco_medi+0x974>)
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	b2da      	uxtb	r2, r3
 8008302:	4b8b      	ldr	r3, [pc, #556]	; (8008530 <pedidos_reco_medi+0x964>)
 8008304:	701a      	strb	r2, [r3, #0]
					break;
 8008306:	e26f      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_010_MED + 1,*(uint8_t*) PAQ_010_MED, 500);  //
 8008308:	4b8e      	ldr	r3, [pc, #568]	; (8008544 <pedidos_reco_medi+0x978>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	b29a      	uxth	r2, r3
 800830e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008312:	498d      	ldr	r1, [pc, #564]	; (8008548 <pedidos_reco_medi+0x97c>)
 8008314:	4882      	ldr	r0, [pc, #520]	; (8008520 <pedidos_reco_medi+0x954>)
 8008316:	f006 f8c9 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_010_MED + 4) * 2;
 800831a:	4b8c      	ldr	r3, [pc, #560]	; (800854c <pedidos_reco_medi+0x980>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	b2da      	uxtb	r2, r3
 8008322:	4b81      	ldr	r3, [pc, #516]	; (8008528 <pedidos_reco_medi+0x95c>)
 8008324:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_010_MED + 6) * 2;
 8008326:	4b8a      	ldr	r3, [pc, #552]	; (8008550 <pedidos_reco_medi+0x984>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	b2da      	uxtb	r2, r3
 800832e:	4b80      	ldr	r3, [pc, #512]	; (8008530 <pedidos_reco_medi+0x964>)
 8008330:	701a      	strb	r2, [r3, #0]
					break;
 8008332:	e259      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_011_MED + 1,*(uint8_t*) PAQ_011_MED, 500);  //
 8008334:	4b87      	ldr	r3, [pc, #540]	; (8008554 <pedidos_reco_medi+0x988>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	b29a      	uxth	r2, r3
 800833a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800833e:	4986      	ldr	r1, [pc, #536]	; (8008558 <pedidos_reco_medi+0x98c>)
 8008340:	4877      	ldr	r0, [pc, #476]	; (8008520 <pedidos_reco_medi+0x954>)
 8008342:	f006 f8b3 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_011_MED + 4) * 2;
 8008346:	4b85      	ldr	r3, [pc, #532]	; (800855c <pedidos_reco_medi+0x990>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	b2da      	uxtb	r2, r3
 800834e:	4b76      	ldr	r3, [pc, #472]	; (8008528 <pedidos_reco_medi+0x95c>)
 8008350:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_011_MED + 6) * 2;
 8008352:	4b83      	ldr	r3, [pc, #524]	; (8008560 <pedidos_reco_medi+0x994>)
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	b2da      	uxtb	r2, r3
 800835a:	4b75      	ldr	r3, [pc, #468]	; (8008530 <pedidos_reco_medi+0x964>)
 800835c:	701a      	strb	r2, [r3, #0]
					break;
 800835e:	e243      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_012_MED + 1,*(uint8_t*) PAQ_012_MED, 500);  //
 8008360:	4b80      	ldr	r3, [pc, #512]	; (8008564 <pedidos_reco_medi+0x998>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	b29a      	uxth	r2, r3
 8008366:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800836a:	497f      	ldr	r1, [pc, #508]	; (8008568 <pedidos_reco_medi+0x99c>)
 800836c:	486c      	ldr	r0, [pc, #432]	; (8008520 <pedidos_reco_medi+0x954>)
 800836e:	f006 f89d 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_012_MED + 4) * 2;
 8008372:	4b7e      	ldr	r3, [pc, #504]	; (800856c <pedidos_reco_medi+0x9a0>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	b2da      	uxtb	r2, r3
 800837a:	4b6b      	ldr	r3, [pc, #428]	; (8008528 <pedidos_reco_medi+0x95c>)
 800837c:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_012_MED + 6) * 2;
 800837e:	4b7c      	ldr	r3, [pc, #496]	; (8008570 <pedidos_reco_medi+0x9a4>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	b2da      	uxtb	r2, r3
 8008386:	4b6a      	ldr	r3, [pc, #424]	; (8008530 <pedidos_reco_medi+0x964>)
 8008388:	701a      	strb	r2, [r3, #0]
					break;
 800838a:	e22d      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_013_MED + 1,*(uint8_t*) PAQ_013_MED, 500);  //
 800838c:	4b79      	ldr	r3, [pc, #484]	; (8008574 <pedidos_reco_medi+0x9a8>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	b29a      	uxth	r2, r3
 8008392:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008396:	4978      	ldr	r1, [pc, #480]	; (8008578 <pedidos_reco_medi+0x9ac>)
 8008398:	4861      	ldr	r0, [pc, #388]	; (8008520 <pedidos_reco_medi+0x954>)
 800839a:	f006 f887 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_013_MED + 4) * 2;
 800839e:	4b77      	ldr	r3, [pc, #476]	; (800857c <pedidos_reco_medi+0x9b0>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	4b60      	ldr	r3, [pc, #384]	; (8008528 <pedidos_reco_medi+0x95c>)
 80083a8:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_013_MED + 6) * 2;
 80083aa:	4b75      	ldr	r3, [pc, #468]	; (8008580 <pedidos_reco_medi+0x9b4>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	4b5f      	ldr	r3, [pc, #380]	; (8008530 <pedidos_reco_medi+0x964>)
 80083b4:	701a      	strb	r2, [r3, #0]
					break;
 80083b6:	e217      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_014_MED + 1,*(uint8_t*) PAQ_014_MED, 500);  //
 80083b8:	4b72      	ldr	r3, [pc, #456]	; (8008584 <pedidos_reco_medi+0x9b8>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	b29a      	uxth	r2, r3
 80083be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80083c2:	4971      	ldr	r1, [pc, #452]	; (8008588 <pedidos_reco_medi+0x9bc>)
 80083c4:	4856      	ldr	r0, [pc, #344]	; (8008520 <pedidos_reco_medi+0x954>)
 80083c6:	f006 f871 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_014_MED + 4) * 2;
 80083ca:	4b70      	ldr	r3, [pc, #448]	; (800858c <pedidos_reco_medi+0x9c0>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	4b55      	ldr	r3, [pc, #340]	; (8008528 <pedidos_reco_medi+0x95c>)
 80083d4:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_014_MED + 6) * 2;
 80083d6:	4b6e      	ldr	r3, [pc, #440]	; (8008590 <pedidos_reco_medi+0x9c4>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	4b54      	ldr	r3, [pc, #336]	; (8008530 <pedidos_reco_medi+0x964>)
 80083e0:	701a      	strb	r2, [r3, #0]
					break;
 80083e2:	e201      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_015_MED + 1,*(uint8_t*) PAQ_015_MED, 500);  //
 80083e4:	4b6b      	ldr	r3, [pc, #428]	; (8008594 <pedidos_reco_medi+0x9c8>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80083ee:	496a      	ldr	r1, [pc, #424]	; (8008598 <pedidos_reco_medi+0x9cc>)
 80083f0:	484b      	ldr	r0, [pc, #300]	; (8008520 <pedidos_reco_medi+0x954>)
 80083f2:	f006 f85b 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_015_MED + 4) * 2;
 80083f6:	4b69      	ldr	r3, [pc, #420]	; (800859c <pedidos_reco_medi+0x9d0>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	4b4a      	ldr	r3, [pc, #296]	; (8008528 <pedidos_reco_medi+0x95c>)
 8008400:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_015_MED + 6) * 2;
 8008402:	4b67      	ldr	r3, [pc, #412]	; (80085a0 <pedidos_reco_medi+0x9d4>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	b2da      	uxtb	r2, r3
 800840a:	4b49      	ldr	r3, [pc, #292]	; (8008530 <pedidos_reco_medi+0x964>)
 800840c:	701a      	strb	r2, [r3, #0]
					break;
 800840e:	e1eb      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_016_MED + 1,*(uint8_t*) PAQ_016_MED, 500);  //
 8008410:	4b64      	ldr	r3, [pc, #400]	; (80085a4 <pedidos_reco_medi+0x9d8>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	b29a      	uxth	r2, r3
 8008416:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800841a:	4963      	ldr	r1, [pc, #396]	; (80085a8 <pedidos_reco_medi+0x9dc>)
 800841c:	4840      	ldr	r0, [pc, #256]	; (8008520 <pedidos_reco_medi+0x954>)
 800841e:	f006 f845 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_016_MED + 4) * 2;
 8008422:	4b62      	ldr	r3, [pc, #392]	; (80085ac <pedidos_reco_medi+0x9e0>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	b2da      	uxtb	r2, r3
 800842a:	4b3f      	ldr	r3, [pc, #252]	; (8008528 <pedidos_reco_medi+0x95c>)
 800842c:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_016_MED + 6) * 2;
 800842e:	4b60      	ldr	r3, [pc, #384]	; (80085b0 <pedidos_reco_medi+0x9e4>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	b2da      	uxtb	r2, r3
 8008436:	4b3e      	ldr	r3, [pc, #248]	; (8008530 <pedidos_reco_medi+0x964>)
 8008438:	701a      	strb	r2, [r3, #0]
					break;
 800843a:	e1d5      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_017_MED + 1,*(uint8_t*) PAQ_017_MED, 500);  //primer_byte_04 = paq_m_017[4] * 2;
 800843c:	4b5d      	ldr	r3, [pc, #372]	; (80085b4 <pedidos_reco_medi+0x9e8>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	b29a      	uxth	r2, r3
 8008442:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008446:	495c      	ldr	r1, [pc, #368]	; (80085b8 <pedidos_reco_medi+0x9ec>)
 8008448:	4835      	ldr	r0, [pc, #212]	; (8008520 <pedidos_reco_medi+0x954>)
 800844a:	f006 f82f 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_017_MED + 4) * 2;
 800844e:	4b5b      	ldr	r3, [pc, #364]	; (80085bc <pedidos_reco_medi+0x9f0>)
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	b2da      	uxtb	r2, r3
 8008456:	4b34      	ldr	r3, [pc, #208]	; (8008528 <pedidos_reco_medi+0x95c>)
 8008458:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_017_MED + 6) * 2;
 800845a:	4b59      	ldr	r3, [pc, #356]	; (80085c0 <pedidos_reco_medi+0x9f4>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	005b      	lsls	r3, r3, #1
 8008460:	b2da      	uxtb	r2, r3
 8008462:	4b33      	ldr	r3, [pc, #204]	; (8008530 <pedidos_reco_medi+0x964>)
 8008464:	701a      	strb	r2, [r3, #0]
					break;
 8008466:	e1bf      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_018_MED + 1,*(uint8_t*) PAQ_018_MED, 500);  //
 8008468:	4b56      	ldr	r3, [pc, #344]	; (80085c4 <pedidos_reco_medi+0x9f8>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	b29a      	uxth	r2, r3
 800846e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008472:	4955      	ldr	r1, [pc, #340]	; (80085c8 <pedidos_reco_medi+0x9fc>)
 8008474:	482a      	ldr	r0, [pc, #168]	; (8008520 <pedidos_reco_medi+0x954>)
 8008476:	f006 f819 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_018_MED + 4) * 2;
 800847a:	4b54      	ldr	r3, [pc, #336]	; (80085cc <pedidos_reco_medi+0xa00>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	b2da      	uxtb	r2, r3
 8008482:	4b29      	ldr	r3, [pc, #164]	; (8008528 <pedidos_reco_medi+0x95c>)
 8008484:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_018_MED + 6) * 2;
 8008486:	4b52      	ldr	r3, [pc, #328]	; (80085d0 <pedidos_reco_medi+0xa04>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	b2da      	uxtb	r2, r3
 800848e:	4b28      	ldr	r3, [pc, #160]	; (8008530 <pedidos_reco_medi+0x964>)
 8008490:	701a      	strb	r2, [r3, #0]
					break;
 8008492:	e1a9      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_019_MED + 1,*(uint8_t*) PAQ_019_MED, 500);  //
 8008494:	4b4f      	ldr	r3, [pc, #316]	; (80085d4 <pedidos_reco_medi+0xa08>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	b29a      	uxth	r2, r3
 800849a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800849e:	494e      	ldr	r1, [pc, #312]	; (80085d8 <pedidos_reco_medi+0xa0c>)
 80084a0:	481f      	ldr	r0, [pc, #124]	; (8008520 <pedidos_reco_medi+0x954>)
 80084a2:	f006 f803 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_019_MED + 4) * 2;
 80084a6:	4b4d      	ldr	r3, [pc, #308]	; (80085dc <pedidos_reco_medi+0xa10>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	4b1e      	ldr	r3, [pc, #120]	; (8008528 <pedidos_reco_medi+0x95c>)
 80084b0:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_019_MED + 6) * 2;
 80084b2:	4b4b      	ldr	r3, [pc, #300]	; (80085e0 <pedidos_reco_medi+0xa14>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	4b1d      	ldr	r3, [pc, #116]	; (8008530 <pedidos_reco_medi+0x964>)
 80084bc:	701a      	strb	r2, [r3, #0]
					break;
 80084be:	e193      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_020_MED + 1,*(uint8_t*) PAQ_020_MED, 500);  //
 80084c0:	4b48      	ldr	r3, [pc, #288]	; (80085e4 <pedidos_reco_medi+0xa18>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80084ca:	4947      	ldr	r1, [pc, #284]	; (80085e8 <pedidos_reco_medi+0xa1c>)
 80084cc:	4814      	ldr	r0, [pc, #80]	; (8008520 <pedidos_reco_medi+0x954>)
 80084ce:	f005 ffed 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_020_MED + 4) * 2;
 80084d2:	4b46      	ldr	r3, [pc, #280]	; (80085ec <pedidos_reco_medi+0xa20>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	4b13      	ldr	r3, [pc, #76]	; (8008528 <pedidos_reco_medi+0x95c>)
 80084dc:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_020_MED + 6) * 2;
 80084de:	4b44      	ldr	r3, [pc, #272]	; (80085f0 <pedidos_reco_medi+0xa24>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	4b12      	ldr	r3, [pc, #72]	; (8008530 <pedidos_reco_medi+0x964>)
 80084e8:	701a      	strb	r2, [r3, #0]
					break;
 80084ea:	e17d      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_021_MED + 1,*(uint8_t*) PAQ_021_MED, 500);  //
 80084ec:	4b41      	ldr	r3, [pc, #260]	; (80085f4 <pedidos_reco_medi+0xa28>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80084f6:	4940      	ldr	r1, [pc, #256]	; (80085f8 <pedidos_reco_medi+0xa2c>)
 80084f8:	4809      	ldr	r0, [pc, #36]	; (8008520 <pedidos_reco_medi+0x954>)
 80084fa:	f005 ffd7 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_021_MED + 4) * 2;
 80084fe:	4b3f      	ldr	r3, [pc, #252]	; (80085fc <pedidos_reco_medi+0xa30>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	b2da      	uxtb	r2, r3
 8008506:	4b08      	ldr	r3, [pc, #32]	; (8008528 <pedidos_reco_medi+0x95c>)
 8008508:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_021_MED + 6) * 2;
 800850a:	4b3d      	ldr	r3, [pc, #244]	; (8008600 <pedidos_reco_medi+0xa34>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	b2da      	uxtb	r2, r3
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <pedidos_reco_medi+0x964>)
 8008514:	701a      	strb	r2, [r3, #0]
					break;
 8008516:	e167      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
 8008518:	080c1380 	.word	0x080c1380
 800851c:	080c1381 	.word	0x080c1381
 8008520:	20000528 	.word	0x20000528
 8008524:	080c1384 	.word	0x080c1384
 8008528:	2000c134 	.word	0x2000c134
 800852c:	080c1386 	.word	0x080c1386
 8008530:	2000c135 	.word	0x2000c135
 8008534:	080c1400 	.word	0x080c1400
 8008538:	080c1401 	.word	0x080c1401
 800853c:	080c1404 	.word	0x080c1404
 8008540:	080c1406 	.word	0x080c1406
 8008544:	080c1480 	.word	0x080c1480
 8008548:	080c1481 	.word	0x080c1481
 800854c:	080c1484 	.word	0x080c1484
 8008550:	080c1486 	.word	0x080c1486
 8008554:	080c1500 	.word	0x080c1500
 8008558:	080c1501 	.word	0x080c1501
 800855c:	080c1504 	.word	0x080c1504
 8008560:	080c1506 	.word	0x080c1506
 8008564:	080c1580 	.word	0x080c1580
 8008568:	080c1581 	.word	0x080c1581
 800856c:	080c1584 	.word	0x080c1584
 8008570:	080c1586 	.word	0x080c1586
 8008574:	080c1600 	.word	0x080c1600
 8008578:	080c1601 	.word	0x080c1601
 800857c:	080c1604 	.word	0x080c1604
 8008580:	080c1606 	.word	0x080c1606
 8008584:	080c1680 	.word	0x080c1680
 8008588:	080c1681 	.word	0x080c1681
 800858c:	080c1684 	.word	0x080c1684
 8008590:	080c1686 	.word	0x080c1686
 8008594:	080c1700 	.word	0x080c1700
 8008598:	080c1701 	.word	0x080c1701
 800859c:	080c1704 	.word	0x080c1704
 80085a0:	080c1706 	.word	0x080c1706
 80085a4:	080c1780 	.word	0x080c1780
 80085a8:	080c1781 	.word	0x080c1781
 80085ac:	080c1784 	.word	0x080c1784
 80085b0:	080c1786 	.word	0x080c1786
 80085b4:	080c1800 	.word	0x080c1800
 80085b8:	080c1801 	.word	0x080c1801
 80085bc:	080c1804 	.word	0x080c1804
 80085c0:	080c1806 	.word	0x080c1806
 80085c4:	080c1880 	.word	0x080c1880
 80085c8:	080c1881 	.word	0x080c1881
 80085cc:	080c1884 	.word	0x080c1884
 80085d0:	080c1886 	.word	0x080c1886
 80085d4:	080c1900 	.word	0x080c1900
 80085d8:	080c1901 	.word	0x080c1901
 80085dc:	080c1904 	.word	0x080c1904
 80085e0:	080c1906 	.word	0x080c1906
 80085e4:	080c1980 	.word	0x080c1980
 80085e8:	080c1981 	.word	0x080c1981
 80085ec:	080c1984 	.word	0x080c1984
 80085f0:	080c1986 	.word	0x080c1986
 80085f4:	080c1a00 	.word	0x080c1a00
 80085f8:	080c1a01 	.word	0x080c1a01
 80085fc:	080c1a04 	.word	0x080c1a04
 8008600:	080c1a06 	.word	0x080c1a06
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_022_MED + 1,*(uint8_t*) PAQ_022_MED, 500);  //
 8008604:	4b80      	ldr	r3, [pc, #512]	; (8008808 <pedidos_reco_medi+0xc3c>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	b29a      	uxth	r2, r3
 800860a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800860e:	497f      	ldr	r1, [pc, #508]	; (800880c <pedidos_reco_medi+0xc40>)
 8008610:	487f      	ldr	r0, [pc, #508]	; (8008810 <pedidos_reco_medi+0xc44>)
 8008612:	f005 ff4b 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_022_MED + 4) * 2;
 8008616:	4b7f      	ldr	r3, [pc, #508]	; (8008814 <pedidos_reco_medi+0xc48>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	b2da      	uxtb	r2, r3
 800861e:	4b7e      	ldr	r3, [pc, #504]	; (8008818 <pedidos_reco_medi+0xc4c>)
 8008620:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_022_MED + 6) * 2;
 8008622:	4b7e      	ldr	r3, [pc, #504]	; (800881c <pedidos_reco_medi+0xc50>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	b2da      	uxtb	r2, r3
 800862a:	4b7d      	ldr	r3, [pc, #500]	; (8008820 <pedidos_reco_medi+0xc54>)
 800862c:	701a      	strb	r2, [r3, #0]
					break;
 800862e:	e0db      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_023_MED + 1,*(uint8_t*) PAQ_023_MED, 500);  //
 8008630:	4b7c      	ldr	r3, [pc, #496]	; (8008824 <pedidos_reco_medi+0xc58>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	b29a      	uxth	r2, r3
 8008636:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800863a:	497b      	ldr	r1, [pc, #492]	; (8008828 <pedidos_reco_medi+0xc5c>)
 800863c:	4874      	ldr	r0, [pc, #464]	; (8008810 <pedidos_reco_medi+0xc44>)
 800863e:	f005 ff35 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_023_MED + 4) * 2;
 8008642:	4b7a      	ldr	r3, [pc, #488]	; (800882c <pedidos_reco_medi+0xc60>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	b2da      	uxtb	r2, r3
 800864a:	4b73      	ldr	r3, [pc, #460]	; (8008818 <pedidos_reco_medi+0xc4c>)
 800864c:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_023_MED + 6) * 2;
 800864e:	4b78      	ldr	r3, [pc, #480]	; (8008830 <pedidos_reco_medi+0xc64>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	b2da      	uxtb	r2, r3
 8008656:	4b72      	ldr	r3, [pc, #456]	; (8008820 <pedidos_reco_medi+0xc54>)
 8008658:	701a      	strb	r2, [r3, #0]
					break;
 800865a:	e0c5      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_024_MED + 1,*(uint8_t*) PAQ_024_MED, 500);  //
 800865c:	4b75      	ldr	r3, [pc, #468]	; (8008834 <pedidos_reco_medi+0xc68>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	b29a      	uxth	r2, r3
 8008662:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008666:	4974      	ldr	r1, [pc, #464]	; (8008838 <pedidos_reco_medi+0xc6c>)
 8008668:	4869      	ldr	r0, [pc, #420]	; (8008810 <pedidos_reco_medi+0xc44>)
 800866a:	f005 ff1f 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_024_MED + 4) * 2;
 800866e:	4b73      	ldr	r3, [pc, #460]	; (800883c <pedidos_reco_medi+0xc70>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	b2da      	uxtb	r2, r3
 8008676:	4b68      	ldr	r3, [pc, #416]	; (8008818 <pedidos_reco_medi+0xc4c>)
 8008678:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_024_MED + 6) * 2;
 800867a:	4b71      	ldr	r3, [pc, #452]	; (8008840 <pedidos_reco_medi+0xc74>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	b2da      	uxtb	r2, r3
 8008682:	4b67      	ldr	r3, [pc, #412]	; (8008820 <pedidos_reco_medi+0xc54>)
 8008684:	701a      	strb	r2, [r3, #0]
					break;
 8008686:	e0af      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_025_MED + 1,*(uint8_t*) PAQ_025_MED, 500);  //
 8008688:	4b6e      	ldr	r3, [pc, #440]	; (8008844 <pedidos_reco_medi+0xc78>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	b29a      	uxth	r2, r3
 800868e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008692:	496d      	ldr	r1, [pc, #436]	; (8008848 <pedidos_reco_medi+0xc7c>)
 8008694:	485e      	ldr	r0, [pc, #376]	; (8008810 <pedidos_reco_medi+0xc44>)
 8008696:	f005 ff09 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_025_MED + 4) * 2;
 800869a:	4b6c      	ldr	r3, [pc, #432]	; (800884c <pedidos_reco_medi+0xc80>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	4b5d      	ldr	r3, [pc, #372]	; (8008818 <pedidos_reco_medi+0xc4c>)
 80086a4:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_025_MED + 6) * 2;
 80086a6:	4b6a      	ldr	r3, [pc, #424]	; (8008850 <pedidos_reco_medi+0xc84>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	4b5c      	ldr	r3, [pc, #368]	; (8008820 <pedidos_reco_medi+0xc54>)
 80086b0:	701a      	strb	r2, [r3, #0]
					break;
 80086b2:	e099      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_026_MED + 1,*(uint8_t*) PAQ_026_MED, 500);  //
 80086b4:	4b67      	ldr	r3, [pc, #412]	; (8008854 <pedidos_reco_medi+0xc88>)
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80086be:	4966      	ldr	r1, [pc, #408]	; (8008858 <pedidos_reco_medi+0xc8c>)
 80086c0:	4853      	ldr	r0, [pc, #332]	; (8008810 <pedidos_reco_medi+0xc44>)
 80086c2:	f005 fef3 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_026_MED + 4) * 2;
 80086c6:	4b65      	ldr	r3, [pc, #404]	; (800885c <pedidos_reco_medi+0xc90>)
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	4b52      	ldr	r3, [pc, #328]	; (8008818 <pedidos_reco_medi+0xc4c>)
 80086d0:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_026_MED + 6) * 2;
 80086d2:	4b63      	ldr	r3, [pc, #396]	; (8008860 <pedidos_reco_medi+0xc94>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	4b51      	ldr	r3, [pc, #324]	; (8008820 <pedidos_reco_medi+0xc54>)
 80086dc:	701a      	strb	r2, [r3, #0]
					break;
 80086de:	e083      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_027_MED + 1,*(uint8_t*) PAQ_027_MED, 500);  //
 80086e0:	4b60      	ldr	r3, [pc, #384]	; (8008864 <pedidos_reco_medi+0xc98>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80086ea:	495f      	ldr	r1, [pc, #380]	; (8008868 <pedidos_reco_medi+0xc9c>)
 80086ec:	4848      	ldr	r0, [pc, #288]	; (8008810 <pedidos_reco_medi+0xc44>)
 80086ee:	f005 fedd 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_027_MED + 4) * 2;
 80086f2:	4b5e      	ldr	r3, [pc, #376]	; (800886c <pedidos_reco_medi+0xca0>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	4b47      	ldr	r3, [pc, #284]	; (8008818 <pedidos_reco_medi+0xc4c>)
 80086fc:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_027_MED + 6) * 2;
 80086fe:	4b5c      	ldr	r3, [pc, #368]	; (8008870 <pedidos_reco_medi+0xca4>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	b2da      	uxtb	r2, r3
 8008706:	4b46      	ldr	r3, [pc, #280]	; (8008820 <pedidos_reco_medi+0xc54>)
 8008708:	701a      	strb	r2, [r3, #0]
					break;
 800870a:	e06d      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_028_MED + 1,*(uint8_t*) PAQ_028_MED, 500);  //
 800870c:	4b59      	ldr	r3, [pc, #356]	; (8008874 <pedidos_reco_medi+0xca8>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	b29a      	uxth	r2, r3
 8008712:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008716:	4958      	ldr	r1, [pc, #352]	; (8008878 <pedidos_reco_medi+0xcac>)
 8008718:	483d      	ldr	r0, [pc, #244]	; (8008810 <pedidos_reco_medi+0xc44>)
 800871a:	f005 fec7 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_028_MED + 4) * 2;
 800871e:	4b57      	ldr	r3, [pc, #348]	; (800887c <pedidos_reco_medi+0xcb0>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	005b      	lsls	r3, r3, #1
 8008724:	b2da      	uxtb	r2, r3
 8008726:	4b3c      	ldr	r3, [pc, #240]	; (8008818 <pedidos_reco_medi+0xc4c>)
 8008728:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_028_MED + 6) * 2;
 800872a:	4b55      	ldr	r3, [pc, #340]	; (8008880 <pedidos_reco_medi+0xcb4>)
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	b2da      	uxtb	r2, r3
 8008732:	4b3b      	ldr	r3, [pc, #236]	; (8008820 <pedidos_reco_medi+0xc54>)
 8008734:	701a      	strb	r2, [r3, #0]
					break;
 8008736:	e057      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_029_MED + 1,*(uint8_t*) PAQ_029_MED, 500);  //
 8008738:	4b52      	ldr	r3, [pc, #328]	; (8008884 <pedidos_reco_medi+0xcb8>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	b29a      	uxth	r2, r3
 800873e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008742:	4951      	ldr	r1, [pc, #324]	; (8008888 <pedidos_reco_medi+0xcbc>)
 8008744:	4832      	ldr	r0, [pc, #200]	; (8008810 <pedidos_reco_medi+0xc44>)
 8008746:	f005 feb1 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_029_MED + 4) * 2;
 800874a:	4b50      	ldr	r3, [pc, #320]	; (800888c <pedidos_reco_medi+0xcc0>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	b2da      	uxtb	r2, r3
 8008752:	4b31      	ldr	r3, [pc, #196]	; (8008818 <pedidos_reco_medi+0xc4c>)
 8008754:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_029_MED + 6) * 2;
 8008756:	4b4e      	ldr	r3, [pc, #312]	; (8008890 <pedidos_reco_medi+0xcc4>)
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	005b      	lsls	r3, r3, #1
 800875c:	b2da      	uxtb	r2, r3
 800875e:	4b30      	ldr	r3, [pc, #192]	; (8008820 <pedidos_reco_medi+0xc54>)
 8008760:	701a      	strb	r2, [r3, #0]
					break;
 8008762:	e041      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_030_MED + 1,*(uint8_t*) PAQ_030_MED, 500);  //
 8008764:	4b4b      	ldr	r3, [pc, #300]	; (8008894 <pedidos_reco_medi+0xcc8>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	b29a      	uxth	r2, r3
 800876a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800876e:	494a      	ldr	r1, [pc, #296]	; (8008898 <pedidos_reco_medi+0xccc>)
 8008770:	4827      	ldr	r0, [pc, #156]	; (8008810 <pedidos_reco_medi+0xc44>)
 8008772:	f005 fe9b 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_030_MED + 4) * 2;
 8008776:	4b49      	ldr	r3, [pc, #292]	; (800889c <pedidos_reco_medi+0xcd0>)
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	005b      	lsls	r3, r3, #1
 800877c:	b2da      	uxtb	r2, r3
 800877e:	4b26      	ldr	r3, [pc, #152]	; (8008818 <pedidos_reco_medi+0xc4c>)
 8008780:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_030_MED + 6) * 2;
 8008782:	4b47      	ldr	r3, [pc, #284]	; (80088a0 <pedidos_reco_medi+0xcd4>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	b2da      	uxtb	r2, r3
 800878a:	4b25      	ldr	r3, [pc, #148]	; (8008820 <pedidos_reco_medi+0xc54>)
 800878c:	701a      	strb	r2, [r3, #0]
					break;
 800878e:	e02b      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_031_MED + 1,*(uint8_t*) PAQ_031_MED, 500);  //
 8008790:	4b44      	ldr	r3, [pc, #272]	; (80088a4 <pedidos_reco_medi+0xcd8>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	b29a      	uxth	r2, r3
 8008796:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800879a:	4943      	ldr	r1, [pc, #268]	; (80088a8 <pedidos_reco_medi+0xcdc>)
 800879c:	481c      	ldr	r0, [pc, #112]	; (8008810 <pedidos_reco_medi+0xc44>)
 800879e:	f005 fe85 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_031_MED + 4) * 2;
 80087a2:	4b42      	ldr	r3, [pc, #264]	; (80088ac <pedidos_reco_medi+0xce0>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <pedidos_reco_medi+0xc4c>)
 80087ac:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_031_MED + 6) * 2;
 80087ae:	4b40      	ldr	r3, [pc, #256]	; (80088b0 <pedidos_reco_medi+0xce4>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	4b1a      	ldr	r3, [pc, #104]	; (8008820 <pedidos_reco_medi+0xc54>)
 80087b8:	701a      	strb	r2, [r3, #0]
					break;
 80087ba:	e015      	b.n	80087e8 <pedidos_reco_medi+0xc1c>
					HAL_UART_Transmit(&huart6, (uint8_t*) PAQ_032_MED + 1,*(uint8_t*) PAQ_032_MED, 500);  //
 80087bc:	4b3d      	ldr	r3, [pc, #244]	; (80088b4 <pedidos_reco_medi+0xce8>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80087c6:	493c      	ldr	r1, [pc, #240]	; (80088b8 <pedidos_reco_medi+0xcec>)
 80087c8:	4811      	ldr	r0, [pc, #68]	; (8008810 <pedidos_reco_medi+0xc44>)
 80087ca:	f005 fe6f 	bl	800e4ac <HAL_UART_Transmit>
					primer_byte_06 = *((uint8_t*) PAQ_032_MED + 4) * 2;
 80087ce:	4b3b      	ldr	r3, [pc, #236]	; (80088bc <pedidos_reco_medi+0xcf0>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	4b10      	ldr	r3, [pc, #64]	; (8008818 <pedidos_reco_medi+0xc4c>)
 80087d8:	701a      	strb	r2, [r3, #0]
					cant_bytes_06 = *((uint8_t*) PAQ_032_MED + 6) * 2;
 80087da:	4b39      	ldr	r3, [pc, #228]	; (80088c0 <pedidos_reco_medi+0xcf4>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	4b0f      	ldr	r3, [pc, #60]	; (8008820 <pedidos_reco_medi+0xc54>)
 80087e4:	701a      	strb	r2, [r3, #0]
					break;
 80087e6:	bf00      	nop
			dispositivos_c = 0;
 80087e8:	4b36      	ldr	r3, [pc, #216]	; (80088c4 <pedidos_reco_medi+0xcf8>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	801a      	strh	r2, [r3, #0]
			HAL_Delay(20);
 80087ee:	2014      	movs	r0, #20
 80087f0:	f001 fe74 	bl	800a4dc <HAL_Delay>
}
 80087f4:	e005      	b.n	8008802 <pedidos_reco_medi+0xc36>
			dispositivos_m = 0;
 80087f6:	4b34      	ldr	r3, [pc, #208]	; (80088c8 <pedidos_reco_medi+0xcfc>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	801a      	strh	r2, [r3, #0]
			dispositivos_c = 0;
 80087fc:	4b31      	ldr	r3, [pc, #196]	; (80088c4 <pedidos_reco_medi+0xcf8>)
 80087fe:	2200      	movs	r2, #0
 8008800:	801a      	strh	r2, [r3, #0]
}
 8008802:	bf00      	nop
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	080c1a80 	.word	0x080c1a80
 800880c:	080c1a81 	.word	0x080c1a81
 8008810:	20000528 	.word	0x20000528
 8008814:	080c1a84 	.word	0x080c1a84
 8008818:	2000c134 	.word	0x2000c134
 800881c:	080c1a86 	.word	0x080c1a86
 8008820:	2000c135 	.word	0x2000c135
 8008824:	080c1b00 	.word	0x080c1b00
 8008828:	080c1b01 	.word	0x080c1b01
 800882c:	080c1b04 	.word	0x080c1b04
 8008830:	080c1b06 	.word	0x080c1b06
 8008834:	080c1b80 	.word	0x080c1b80
 8008838:	080c1b81 	.word	0x080c1b81
 800883c:	080c1b84 	.word	0x080c1b84
 8008840:	080c1b86 	.word	0x080c1b86
 8008844:	080c1c00 	.word	0x080c1c00
 8008848:	080c1c01 	.word	0x080c1c01
 800884c:	080c1c04 	.word	0x080c1c04
 8008850:	080c1c06 	.word	0x080c1c06
 8008854:	080c1c80 	.word	0x080c1c80
 8008858:	080c1c81 	.word	0x080c1c81
 800885c:	080c1c84 	.word	0x080c1c84
 8008860:	080c1c86 	.word	0x080c1c86
 8008864:	080c1d00 	.word	0x080c1d00
 8008868:	080c1d01 	.word	0x080c1d01
 800886c:	080c1d04 	.word	0x080c1d04
 8008870:	080c1d06 	.word	0x080c1d06
 8008874:	080c1d80 	.word	0x080c1d80
 8008878:	080c1d81 	.word	0x080c1d81
 800887c:	080c1d84 	.word	0x080c1d84
 8008880:	080c1d86 	.word	0x080c1d86
 8008884:	080c1e00 	.word	0x080c1e00
 8008888:	080c1e01 	.word	0x080c1e01
 800888c:	080c1e04 	.word	0x080c1e04
 8008890:	080c1e06 	.word	0x080c1e06
 8008894:	080c1e80 	.word	0x080c1e80
 8008898:	080c1e81 	.word	0x080c1e81
 800889c:	080c1e84 	.word	0x080c1e84
 80088a0:	080c1e86 	.word	0x080c1e86
 80088a4:	080c1f00 	.word	0x080c1f00
 80088a8:	080c1f01 	.word	0x080c1f01
 80088ac:	080c1f04 	.word	0x080c1f04
 80088b0:	080c1f06 	.word	0x080c1f06
 80088b4:	080c1f80 	.word	0x080c1f80
 80088b8:	080c1f81 	.word	0x080c1f81
 80088bc:	080c1f84 	.word	0x080c1f84
 80088c0:	080c1f86 	.word	0x080c1f86
 80088c4:	20003298 	.word	0x20003298
 80088c8:	20003296 	.word	0x20003296

080088cc <leds_64>:

//==========================================================================================
//  SPIV3 - [SPI3 VIRTUAL - PANEL DE LEDS X 64 Bits]
//==========================================================================================
void leds_64 (void)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	af00      	add	r7, sp, #0
//	buff_leds64[5] = Buffer_mem_D [5];  //Borra el buffer x 64 bits
//	buff_leds64[6] = Buffer_mem_D [6];  //Borra el buffer x 64 bits
//	buff_leds64[7] = Buffer_mem_D [7];  //Borra el buffer x 64 bits


	buff_leds64[0] = 0b10000000;  //Borra el buffer x 64 bits
 80088d0:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <leds_64+0x3c>)
 80088d2:	2280      	movs	r2, #128	; 0x80
 80088d4:	701a      	strb	r2, [r3, #0]
	buff_leds64[1] = 0b00000000;  //Borra el buffer x 64 bits
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <leds_64+0x3c>)
 80088d8:	2200      	movs	r2, #0
 80088da:	705a      	strb	r2, [r3, #1]
	buff_leds64[2] = 0b00000000;  //Borra el buffer x 64 bits
 80088dc:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <leds_64+0x3c>)
 80088de:	2200      	movs	r2, #0
 80088e0:	709a      	strb	r2, [r3, #2]
	buff_leds64[3] = 0b00000000;  //Borra el buffer x 64 bits
 80088e2:	4b09      	ldr	r3, [pc, #36]	; (8008908 <leds_64+0x3c>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	70da      	strb	r2, [r3, #3]
	buff_leds64[4] = 0b00000000;  //Borra el buffer x 64 bits
 80088e8:	4b07      	ldr	r3, [pc, #28]	; (8008908 <leds_64+0x3c>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	711a      	strb	r2, [r3, #4]
	buff_leds64[5] = 0b00000000;  //Borra el buffer x 64 bits
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <leds_64+0x3c>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	715a      	strb	r2, [r3, #5]
	buff_leds64[6] = 0b00000000;  //Borra el buffer x 64 bits
 80088f4:	4b04      	ldr	r3, [pc, #16]	; (8008908 <leds_64+0x3c>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	719a      	strb	r2, [r3, #6]
	buff_leds64[7] = 0b11100100;  //Borra el buffer x 64 bits
 80088fa:	4b03      	ldr	r3, [pc, #12]	; (8008908 <leds_64+0x3c>)
 80088fc:	22e4      	movs	r2, #228	; 0xe4
 80088fe:	71da      	strb	r2, [r3, #7]


	//spiv3_led_64 ();  //FAT -> (buff_spiv1 + 0),(buff..  + 1)
	spiv3_buff64 ();  //Tx 2 by x pines del SPI1 Virtual
 8008900:	f000 f804 	bl	800890c <spiv3_buff64>
}
 8008904:	bf00      	nop
 8008906:	bd80      	pop	{r7, pc}
 8008908:	2000c690 	.word	0x2000c690

0800890c <spiv3_buff64>:
//void spiv3_led_64 (void)
//{
//}

void spiv3_buff64 (void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(SERIAL_OUT_GPIO_Port, SERIAL_OUT_Pin, GPIO_PIN_SET); // Dato (0)
//	HAL_GPIO_WritePin(SPIV2_CLK_GPIO_Port, SPIV2_CLK_Pin, GPIO_PIN_SET);   // Clock
	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);   // ENABLE
 8008912:	2200      	movs	r2, #0
 8008914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008918:	484a      	ldr	r0, [pc, #296]	; (8008a44 <spiv3_buff64+0x138>)
 800891a:	f003 fb53 	bl	800bfc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_SET);       // LATCH
 800891e:	2201      	movs	r2, #1
 8008920:	2102      	movs	r1, #2
 8008922:	4849      	ldr	r0, [pc, #292]	; (8008a48 <spiv3_buff64+0x13c>)
 8008924:	f003 fb4e 	bl	800bfc4 <HAL_GPIO_WritePin>
	//======================================================================================

	//for(int i=0; i<200; i++);     // Delay !!!!
	delay (100);  //[uSeg]
 8008928:	2064      	movs	r0, #100	; 0x64
 800892a:	f7fd fd21 	bl	8006370 <delay>

	for (ledk=0; ledk<8; ledk++)  //ledk
 800892e:	4b47      	ldr	r3, [pc, #284]	; (8008a4c <spiv3_buff64+0x140>)
 8008930:	2200      	movs	r2, #0
 8008932:	701a      	strb	r2, [r3, #0]
 8008934:	e058      	b.n	80089e8 <spiv3_buff64+0xdc>
	{
		var_leds64 = buff_leds64[ledk];
 8008936:	4b45      	ldr	r3, [pc, #276]	; (8008a4c <spiv3_buff64+0x140>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	4b44      	ldr	r3, [pc, #272]	; (8008a50 <spiv3_buff64+0x144>)
 800893e:	5c9a      	ldrb	r2, [r3, r2]
 8008940:	4b44      	ldr	r3, [pc, #272]	; (8008a54 <spiv3_buff64+0x148>)
 8008942:	701a      	strb	r2, [r3, #0]
		for (ledj=0; ledj<8; ledj++)  //ledj
 8008944:	4b44      	ldr	r3, [pc, #272]	; (8008a58 <spiv3_buff64+0x14c>)
 8008946:	2200      	movs	r2, #0
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	e043      	b.n	80089d4 <spiv3_buff64+0xc8>
		{
			if ((var_leds64 & 1) == 1)
 800894c:	4b41      	ldr	r3, [pc, #260]	; (8008a54 <spiv3_buff64+0x148>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d005      	beq.n	8008964 <spiv3_buff64+0x58>
			{
				HAL_GPIO_WritePin(SERIAL_OUT_GPIO_Port, SERIAL_OUT_Pin, GPIO_PIN_RESET);  // Dato (1)
 8008958:	2200      	movs	r2, #0
 800895a:	2101      	movs	r1, #1
 800895c:	483a      	ldr	r0, [pc, #232]	; (8008a48 <spiv3_buff64+0x13c>)
 800895e:	f003 fb31 	bl	800bfc4 <HAL_GPIO_WritePin>
 8008962:	e004      	b.n	800896e <spiv3_buff64+0x62>
			}
			else
			{
				HAL_GPIO_WritePin(SERIAL_OUT_GPIO_Port, SERIAL_OUT_Pin, GPIO_PIN_SET);    // Dato (0)
 8008964:	2201      	movs	r2, #1
 8008966:	2101      	movs	r1, #1
 8008968:	4837      	ldr	r0, [pc, #220]	; (8008a48 <spiv3_buff64+0x13c>)
 800896a:	f003 fb2b 	bl	800bfc4 <HAL_GPIO_WritePin>
			}
			//-------------------------------------
			for(int i=0; i<200; i++);  //
 800896e:	2300      	movs	r3, #0
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	e002      	b.n	800897a <spiv3_buff64+0x6e>
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	3301      	adds	r3, #1
 8008978:	617b      	str	r3, [r7, #20]
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2bc7      	cmp	r3, #199	; 0xc7
 800897e:	ddf9      	ble.n	8008974 <spiv3_buff64+0x68>
			HAL_GPIO_WritePin(SPIV2_CLK_GPIO_Port, SPIV2_CLK_Pin, GPIO_PIN_RESET); // 0 - Clock
 8008980:	2200      	movs	r2, #0
 8008982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008986:	482f      	ldr	r0, [pc, #188]	; (8008a44 <spiv3_buff64+0x138>)
 8008988:	f003 fb1c 	bl	800bfc4 <HAL_GPIO_WritePin>
			for(int i=0; i<200; i++);  //
 800898c:	2300      	movs	r3, #0
 800898e:	613b      	str	r3, [r7, #16]
 8008990:	e002      	b.n	8008998 <spiv3_buff64+0x8c>
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	3301      	adds	r3, #1
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	2bc7      	cmp	r3, #199	; 0xc7
 800899c:	ddf9      	ble.n	8008992 <spiv3_buff64+0x86>
			HAL_GPIO_WritePin(SPIV2_CLK_GPIO_Port, SPIV2_CLK_Pin, GPIO_PIN_SET);   // 1 - Clock
 800899e:	2201      	movs	r2, #1
 80089a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089a4:	4827      	ldr	r0, [pc, #156]	; (8008a44 <spiv3_buff64+0x138>)
 80089a6:	f003 fb0d 	bl	800bfc4 <HAL_GPIO_WritePin>
			for(int i=0; i<200; i++);  //
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	e002      	b.n	80089b6 <spiv3_buff64+0xaa>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3301      	adds	r3, #1
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2bc7      	cmp	r3, #199	; 0xc7
 80089ba:	ddf9      	ble.n	80089b0 <spiv3_buff64+0xa4>
			//-------------------------------------
			var_leds64 = var_leds64 >> 1;
 80089bc:	4b25      	ldr	r3, [pc, #148]	; (8008a54 <spiv3_buff64+0x148>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	085b      	lsrs	r3, r3, #1
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	4b23      	ldr	r3, [pc, #140]	; (8008a54 <spiv3_buff64+0x148>)
 80089c6:	701a      	strb	r2, [r3, #0]
		for (ledj=0; ledj<8; ledj++)  //ledj
 80089c8:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <spiv3_buff64+0x14c>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	3301      	adds	r3, #1
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	4b21      	ldr	r3, [pc, #132]	; (8008a58 <spiv3_buff64+0x14c>)
 80089d2:	701a      	strb	r2, [r3, #0]
 80089d4:	4b20      	ldr	r3, [pc, #128]	; (8008a58 <spiv3_buff64+0x14c>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	2b07      	cmp	r3, #7
 80089da:	d9b7      	bls.n	800894c <spiv3_buff64+0x40>
	for (ledk=0; ledk<8; ledk++)  //ledk
 80089dc:	4b1b      	ldr	r3, [pc, #108]	; (8008a4c <spiv3_buff64+0x140>)
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	3301      	adds	r3, #1
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <spiv3_buff64+0x140>)
 80089e6:	701a      	strb	r2, [r3, #0]
 80089e8:	4b18      	ldr	r3, [pc, #96]	; (8008a4c <spiv3_buff64+0x140>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b07      	cmp	r3, #7
 80089ee:	d9a2      	bls.n	8008936 <spiv3_buff64+0x2a>
		}
	}

	//---------------------------------------------------------------------------
	for(int i=0; i<100; i++);  //
 80089f0:	2300      	movs	r3, #0
 80089f2:	60bb      	str	r3, [r7, #8]
 80089f4:	e002      	b.n	80089fc <spiv3_buff64+0xf0>
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60bb      	str	r3, [r7, #8]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b63      	cmp	r3, #99	; 0x63
 8008a00:	ddf9      	ble.n	80089f6 <spiv3_buff64+0xea>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_RESET);  // 0 - LATCH
 8008a02:	2200      	movs	r2, #0
 8008a04:	2102      	movs	r1, #2
 8008a06:	4810      	ldr	r0, [pc, #64]	; (8008a48 <spiv3_buff64+0x13c>)
 8008a08:	f003 fadc 	bl	800bfc4 <HAL_GPIO_WritePin>
	delay (100);  //[uSeg]
 8008a0c:	2064      	movs	r0, #100	; 0x64
 8008a0e:	f7fd fcaf 	bl	8006370 <delay>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_SET);    // 1 - LATCH
 8008a12:	2201      	movs	r2, #1
 8008a14:	2102      	movs	r1, #2
 8008a16:	480c      	ldr	r0, [pc, #48]	; (8008a48 <spiv3_buff64+0x13c>)
 8008a18:	f003 fad4 	bl	800bfc4 <HAL_GPIO_WritePin>
	for(int i=0; i<100; i++);  //
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	607b      	str	r3, [r7, #4]
 8008a20:	e002      	b.n	8008a28 <spiv3_buff64+0x11c>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3301      	adds	r3, #1
 8008a26:	607b      	str	r3, [r7, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b63      	cmp	r3, #99	; 0x63
 8008a2c:	ddf9      	ble.n	8008a22 <spiv3_buff64+0x116>
	//---------------------------------------------------------------------------

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET); // 0 - ENABLE
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a34:	4803      	ldr	r0, [pc, #12]	; (8008a44 <spiv3_buff64+0x138>)
 8008a36:	f003 fac5 	bl	800bfc4 <HAL_GPIO_WritePin>
}
 8008a3a:	bf00      	nop
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	40021000 	.word	0x40021000
 8008a48:	40020400 	.word	0x40020400
 8008a4c:	2000c699 	.word	0x2000c699
 8008a50:	2000c690 	.word	0x2000c690
 8008a54:	2000c698 	.word	0x2000c698
 8008a58:	2000c69a 	.word	0x2000c69a

08008a5c <Prog_Config>:

//==========================================================================================
//  PROGRAMACION DE LA CONFIGURACION (USART 06)
//==========================================================================================
void Prog_Config(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
	  MY_FLASH_SetSectorAddrs (6, 0x08080000);  // [0x08080000 - 0x080BFFF] --> 256 Kbytes
 8008a60:	499a      	ldr	r1, [pc, #616]	; (8008ccc <Prog_Config+0x270>)
 8008a62:	2006      	movs	r0, #6
 8008a64:	f7f8 fba8 	bl	80011b8 <MY_FLASH_SetSectorAddrs>
	  MY_FLASH_ReadN(0, Buffer_Config, sizeof(Buffer_Config), DATA_TYPE_8);
 8008a68:	2300      	movs	r3, #0
 8008a6a:	220d      	movs	r2, #13
 8008a6c:	4998      	ldr	r1, [pc, #608]	; (8008cd0 <Prog_Config+0x274>)
 8008a6e:	2000      	movs	r0, #0
 8008a70:	f7f8 fc32 	bl	80012d8 <MY_FLASH_ReadN>

	  ID = Buffer_Config [0] + 256 * Buffer_Config [1];
 8008a74:	4b96      	ldr	r3, [pc, #600]	; (8008cd0 <Prog_Config+0x274>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	4b95      	ldr	r3, [pc, #596]	; (8008cd0 <Prog_Config+0x274>)
 8008a7c:	785b      	ldrb	r3, [r3, #1]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	4413      	add	r3, r2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	4b92      	ldr	r3, [pc, #584]	; (8008cd4 <Prog_Config+0x278>)
 8008a8a:	801a      	strh	r2, [r3, #0]
	  MASTER = Buffer_Config [2] + 256 * Buffer_Config [3];
 8008a8c:	4b90      	ldr	r3, [pc, #576]	; (8008cd0 <Prog_Config+0x274>)
 8008a8e:	789b      	ldrb	r3, [r3, #2]
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	4b8f      	ldr	r3, [pc, #572]	; (8008cd0 <Prog_Config+0x274>)
 8008a94:	78db      	ldrb	r3, [r3, #3]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	4413      	add	r3, r2
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	4b8d      	ldr	r3, [pc, #564]	; (8008cd8 <Prog_Config+0x27c>)
 8008aa2:	801a      	strh	r2, [r3, #0]
	  BAUD_SCADA = Buffer_Config [4];
 8008aa4:	4b8a      	ldr	r3, [pc, #552]	; (8008cd0 <Prog_Config+0x274>)
 8008aa6:	791a      	ldrb	r2, [r3, #4]
 8008aa8:	4b8c      	ldr	r3, [pc, #560]	; (8008cdc <Prog_Config+0x280>)
 8008aaa:	701a      	strb	r2, [r3, #0]
	  BAUD_REC_MED = Buffer_Config [5];
 8008aac:	4b88      	ldr	r3, [pc, #544]	; (8008cd0 <Prog_Config+0x274>)
 8008aae:	795a      	ldrb	r2, [r3, #5]
 8008ab0:	4b8b      	ldr	r3, [pc, #556]	; (8008ce0 <Prog_Config+0x284>)
 8008ab2:	701a      	strb	r2, [r3, #0]
	  CANT_DISP_R = Buffer_Config [6];
 8008ab4:	4b86      	ldr	r3, [pc, #536]	; (8008cd0 <Prog_Config+0x274>)
 8008ab6:	799a      	ldrb	r2, [r3, #6]
 8008ab8:	4b8a      	ldr	r3, [pc, #552]	; (8008ce4 <Prog_Config+0x288>)
 8008aba:	701a      	strb	r2, [r3, #0]
	  CANT_DISP_M = Buffer_Config [7];
 8008abc:	4b84      	ldr	r3, [pc, #528]	; (8008cd0 <Prog_Config+0x274>)
 8008abe:	79da      	ldrb	r2, [r3, #7]
 8008ac0:	4b89      	ldr	r3, [pc, #548]	; (8008ce8 <Prog_Config+0x28c>)
 8008ac2:	701a      	strb	r2, [r3, #0]
	  UR = Buffer_Config [8];
 8008ac4:	4b82      	ldr	r3, [pc, #520]	; (8008cd0 <Prog_Config+0x274>)
 8008ac6:	7a1a      	ldrb	r2, [r3, #8]
 8008ac8:	4b88      	ldr	r3, [pc, #544]	; (8008cec <Prog_Config+0x290>)
 8008aca:	701a      	strb	r2, [r3, #0]
	  REINT = Buffer_Config [9];
 8008acc:	4b80      	ldr	r3, [pc, #512]	; (8008cd0 <Prog_Config+0x274>)
 8008ace:	7a5a      	ldrb	r2, [r3, #9]
 8008ad0:	4b87      	ldr	r3, [pc, #540]	; (8008cf0 <Prog_Config+0x294>)
 8008ad2:	701a      	strb	r2, [r3, #0]
	  TPO_REINT = Buffer_Config[10] + 256 * Buffer_Config[11];
 8008ad4:	4b7e      	ldr	r3, [pc, #504]	; (8008cd0 <Prog_Config+0x274>)
 8008ad6:	7a9b      	ldrb	r3, [r3, #10]
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	4b7d      	ldr	r3, [pc, #500]	; (8008cd0 <Prog_Config+0x274>)
 8008adc:	7adb      	ldrb	r3, [r3, #11]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	4b82      	ldr	r3, [pc, #520]	; (8008cf4 <Prog_Config+0x298>)
 8008aea:	801a      	strh	r2, [r3, #0]

	  dig_num_0 = 1;
 8008aec:	4b82      	ldr	r3, [pc, #520]	; (8008cf8 <Prog_Config+0x29c>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	801a      	strh	r2, [r3, #0]
	  dig_num_1 = 10;
 8008af2:	4b82      	ldr	r3, [pc, #520]	; (8008cfc <Prog_Config+0x2a0>)
 8008af4:	220a      	movs	r2, #10
 8008af6:	801a      	strh	r2, [r3, #0]
	  dig_num_2 = 100;
 8008af8:	4b81      	ldr	r3, [pc, #516]	; (8008d00 <Prog_Config+0x2a4>)
 8008afa:	2264      	movs	r2, #100	; 0x64
 8008afc:	801a      	strh	r2, [r3, #0]
	  dig_num_3 = 1000;
 8008afe:	4b81      	ldr	r3, [pc, #516]	; (8008d04 <Prog_Config+0x2a8>)
 8008b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b04:	801a      	strh	r2, [r3, #0]
	  dig_num_4 = 10000;
 8008b06:	4b80      	ldr	r3, [pc, #512]	; (8008d08 <Prog_Config+0x2ac>)
 8008b08:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b0c:	801a      	strh	r2, [r3, #0]
	  Flag_06_Rx = 0;
 8008b0e:	4b7f      	ldr	r3, [pc, #508]	; (8008d0c <Prog_Config+0x2b0>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]

	  for (;;)
	  {

		  printf("***************************\r\n");
 8008b14:	487e      	ldr	r0, [pc, #504]	; (8008d10 <Prog_Config+0x2b4>)
 8008b16:	f007 f8a3 	bl	800fc60 <puts>
		  printf("* DIGICOM - RTUCTRL7_V01  *\r\n");
 8008b1a:	487e      	ldr	r0, [pc, #504]	; (8008d14 <Prog_Config+0x2b8>)
 8008b1c:	f007 f8a0 	bl	800fc60 <puts>
		  printf("***************************\r\n");
 8008b20:	487b      	ldr	r0, [pc, #492]	; (8008d10 <Prog_Config+0x2b4>)
 8008b22:	f007 f89d 	bl	800fc60 <puts>
		  printf("****** CONFIGURACION ******\r\n");
 8008b26:	487c      	ldr	r0, [pc, #496]	; (8008d18 <Prog_Config+0x2bc>)
 8008b28:	f007 f89a 	bl	800fc60 <puts>
		  printf("  ID    : %d \r\n", ID);
 8008b2c:	4b69      	ldr	r3, [pc, #420]	; (8008cd4 <Prog_Config+0x278>)
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	4619      	mov	r1, r3
 8008b32:	487a      	ldr	r0, [pc, #488]	; (8008d1c <Prog_Config+0x2c0>)
 8008b34:	f007 f80e 	bl	800fb54 <iprintf>
		  printf("  MASTER: %d \r\n", MASTER);
 8008b38:	4b67      	ldr	r3, [pc, #412]	; (8008cd8 <Prog_Config+0x27c>)
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4878      	ldr	r0, [pc, #480]	; (8008d20 <Prog_Config+0x2c4>)
 8008b40:	f007 f808 	bl	800fb54 <iprintf>
		  printf("  BAUD_SCADA: %d \r\n", BAUD_SCADA);
 8008b44:	4b65      	ldr	r3, [pc, #404]	; (8008cdc <Prog_Config+0x280>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4876      	ldr	r0, [pc, #472]	; (8008d24 <Prog_Config+0x2c8>)
 8008b4c:	f007 f802 	bl	800fb54 <iprintf>
		  printf("  BAUD_REC/MED: %d \r\n", BAUD_REC_MED);
 8008b50:	4b63      	ldr	r3, [pc, #396]	; (8008ce0 <Prog_Config+0x284>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	4619      	mov	r1, r3
 8008b56:	4874      	ldr	r0, [pc, #464]	; (8008d28 <Prog_Config+0x2cc>)
 8008b58:	f006 fffc 	bl	800fb54 <iprintf>
		  printf("  Cant_REC: %d \r\n", CANT_DISP_R);
 8008b5c:	4b61      	ldr	r3, [pc, #388]	; (8008ce4 <Prog_Config+0x288>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	4619      	mov	r1, r3
 8008b62:	4872      	ldr	r0, [pc, #456]	; (8008d2c <Prog_Config+0x2d0>)
 8008b64:	f006 fff6 	bl	800fb54 <iprintf>
		  printf("  Cant_MED: %d \r\n", CANT_DISP_M);
 8008b68:	4b5f      	ldr	r3, [pc, #380]	; (8008ce8 <Prog_Config+0x28c>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4870      	ldr	r0, [pc, #448]	; (8008d30 <Prog_Config+0x2d4>)
 8008b70:	f006 fff0 	bl	800fb54 <iprintf>
		  printf("  UR: %d \r\n", UR);
 8008b74:	4b5d      	ldr	r3, [pc, #372]	; (8008cec <Prog_Config+0x290>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	486e      	ldr	r0, [pc, #440]	; (8008d34 <Prog_Config+0x2d8>)
 8008b7c:	f006 ffea 	bl	800fb54 <iprintf>
		  printf("  Reintentos: %d \r\n", REINT);
 8008b80:	4b5b      	ldr	r3, [pc, #364]	; (8008cf0 <Prog_Config+0x294>)
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	4619      	mov	r1, r3
 8008b86:	486c      	ldr	r0, [pc, #432]	; (8008d38 <Prog_Config+0x2dc>)
 8008b88:	f006 ffe4 	bl	800fb54 <iprintf>
		  printf("  Tiempo p/Reintentar: %d \r\n", TPO_REINT);
 8008b8c:	4b59      	ldr	r3, [pc, #356]	; (8008cf4 <Prog_Config+0x298>)
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	4619      	mov	r1, r3
 8008b92:	486a      	ldr	r0, [pc, #424]	; (8008d3c <Prog_Config+0x2e0>)
 8008b94:	f006 ffde 	bl	800fb54 <iprintf>
		  printf("***************************\r\n");
 8008b98:	485d      	ldr	r0, [pc, #372]	; (8008d10 <Prog_Config+0x2b4>)
 8008b9a:	f007 f861 	bl	800fc60 <puts>
//		  printf("*                         *\r\n");
//		  printf("\r\n");

//----------------------------------------------

		  printf("->ID: ? [0-65535]\r\n");
 8008b9e:	4868      	ldr	r0, [pc, #416]	; (8008d40 <Prog_Config+0x2e4>)
 8008ba0:	f007 f85e 	bl	800fc60 <puts>
		  while (!Flag_06_Rx)
 8008ba4:	bf00      	nop
 8008ba6:	4b59      	ldr	r3, [pc, #356]	; (8008d0c <Prog_Config+0x2b0>)
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0fb      	beq.n	8008ba6 <Prog_Config+0x14a>
		  {
		  }
		  dig_num_0 = 1;
 8008bae:	4b52      	ldr	r3, [pc, #328]	; (8008cf8 <Prog_Config+0x29c>)
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	801a      	strh	r2, [r3, #0]
		  dig_num_1 = 10;
 8008bb4:	4b51      	ldr	r3, [pc, #324]	; (8008cfc <Prog_Config+0x2a0>)
 8008bb6:	220a      	movs	r2, #10
 8008bb8:	801a      	strh	r2, [r3, #0]
		  dig_num_2 = 100;
 8008bba:	4b51      	ldr	r3, [pc, #324]	; (8008d00 <Prog_Config+0x2a4>)
 8008bbc:	2264      	movs	r2, #100	; 0x64
 8008bbe:	801a      	strh	r2, [r3, #0]
		  dig_num_3 = 1000;
 8008bc0:	4b50      	ldr	r3, [pc, #320]	; (8008d04 <Prog_Config+0x2a8>)
 8008bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bc6:	801a      	strh	r2, [r3, #0]
		  dig_num_4 = 10000;
 8008bc8:	4b4f      	ldr	r3, [pc, #316]	; (8008d08 <Prog_Config+0x2ac>)
 8008bca:	f242 7210 	movw	r2, #10000	; 0x2710
 8008bce:	801a      	strh	r2, [r3, #0]
		  V_ID = 0;
 8008bd0:	4b5c      	ldr	r3, [pc, #368]	; (8008d44 <Prog_Config+0x2e8>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	801a      	strh	r2, [r3, #0]

		  if (Buffer_06_Rx_W[4] == 0)
 8008bd6:	4b5c      	ldr	r3, [pc, #368]	; (8008d48 <Prog_Config+0x2ec>)
 8008bd8:	791b      	ldrb	r3, [r3, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10f      	bne.n	8008bfe <Prog_Config+0x1a2>
		  {
			  dig_num_0 = 0;
 8008bde:	4b46      	ldr	r3, [pc, #280]	; (8008cf8 <Prog_Config+0x29c>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 1;
 8008be4:	4b45      	ldr	r3, [pc, #276]	; (8008cfc <Prog_Config+0x2a0>)
 8008be6:	2201      	movs	r2, #1
 8008be8:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 10;
 8008bea:	4b45      	ldr	r3, [pc, #276]	; (8008d00 <Prog_Config+0x2a4>)
 8008bec:	220a      	movs	r2, #10
 8008bee:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 100;
 8008bf0:	4b44      	ldr	r3, [pc, #272]	; (8008d04 <Prog_Config+0x2a8>)
 8008bf2:	2264      	movs	r2, #100	; 0x64
 8008bf4:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 1000;
 8008bf6:	4b44      	ldr	r3, [pc, #272]	; (8008d08 <Prog_Config+0x2ac>)
 8008bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bfc:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[3] == 0)
 8008bfe:	4b52      	ldr	r3, [pc, #328]	; (8008d48 <Prog_Config+0x2ec>)
 8008c00:	78db      	ldrb	r3, [r3, #3]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10e      	bne.n	8008c24 <Prog_Config+0x1c8>
		  {
			  dig_num_0 = 0;
 8008c06:	4b3c      	ldr	r3, [pc, #240]	; (8008cf8 <Prog_Config+0x29c>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 8008c0c:	4b3b      	ldr	r3, [pc, #236]	; (8008cfc <Prog_Config+0x2a0>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 1;
 8008c12:	4b3b      	ldr	r3, [pc, #236]	; (8008d00 <Prog_Config+0x2a4>)
 8008c14:	2201      	movs	r2, #1
 8008c16:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 10;
 8008c18:	4b3a      	ldr	r3, [pc, #232]	; (8008d04 <Prog_Config+0x2a8>)
 8008c1a:	220a      	movs	r2, #10
 8008c1c:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 100;
 8008c1e:	4b3a      	ldr	r3, [pc, #232]	; (8008d08 <Prog_Config+0x2ac>)
 8008c20:	2264      	movs	r2, #100	; 0x64
 8008c22:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[2] == 0)
 8008c24:	4b48      	ldr	r3, [pc, #288]	; (8008d48 <Prog_Config+0x2ec>)
 8008c26:	789b      	ldrb	r3, [r3, #2]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10e      	bne.n	8008c4a <Prog_Config+0x1ee>
		  {
			  dig_num_0 = 0;
 8008c2c:	4b32      	ldr	r3, [pc, #200]	; (8008cf8 <Prog_Config+0x29c>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 8008c32:	4b32      	ldr	r3, [pc, #200]	; (8008cfc <Prog_Config+0x2a0>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 0;
 8008c38:	4b31      	ldr	r3, [pc, #196]	; (8008d00 <Prog_Config+0x2a4>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 1;
 8008c3e:	4b31      	ldr	r3, [pc, #196]	; (8008d04 <Prog_Config+0x2a8>)
 8008c40:	2201      	movs	r2, #1
 8008c42:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 10;
 8008c44:	4b30      	ldr	r3, [pc, #192]	; (8008d08 <Prog_Config+0x2ac>)
 8008c46:	220a      	movs	r2, #10
 8008c48:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[1] == 0)
 8008c4a:	4b3f      	ldr	r3, [pc, #252]	; (8008d48 <Prog_Config+0x2ec>)
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10e      	bne.n	8008c70 <Prog_Config+0x214>
		  {
			  dig_num_0 = 0;
 8008c52:	4b29      	ldr	r3, [pc, #164]	; (8008cf8 <Prog_Config+0x29c>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 8008c58:	4b28      	ldr	r3, [pc, #160]	; (8008cfc <Prog_Config+0x2a0>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 0;
 8008c5e:	4b28      	ldr	r3, [pc, #160]	; (8008d00 <Prog_Config+0x2a4>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 0;
 8008c64:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <Prog_Config+0x2a8>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 1;
 8008c6a:	4b27      	ldr	r3, [pc, #156]	; (8008d08 <Prog_Config+0x2ac>)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[0] == 0)
 8008c70:	4b35      	ldr	r3, [pc, #212]	; (8008d48 <Prog_Config+0x2ec>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10e      	bne.n	8008c96 <Prog_Config+0x23a>
		  {
			  dig_num_0 = 0;
 8008c78:	4b1f      	ldr	r3, [pc, #124]	; (8008cf8 <Prog_Config+0x29c>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 8008c7e:	4b1f      	ldr	r3, [pc, #124]	; (8008cfc <Prog_Config+0x2a0>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 0;
 8008c84:	4b1e      	ldr	r3, [pc, #120]	; (8008d00 <Prog_Config+0x2a4>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 0;
 8008c8a:	4b1e      	ldr	r3, [pc, #120]	; (8008d04 <Prog_Config+0x2a8>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 0;
 8008c90:	4b1d      	ldr	r3, [pc, #116]	; (8008d08 <Prog_Config+0x2ac>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	801a      	strh	r2, [r3, #0]
		  }

		  V_ID = (Buffer_06_Rx_W[4]-48)*dig_num_0 + (Buffer_06_Rx_W[3]-48)*dig_num_1 + (Buffer_06_Rx_W[2]-48)*dig_num_2 + (Buffer_06_Rx_W[1]-48)*dig_num_3 + (Buffer_06_Rx_W[0]-48)*dig_num_4;
 8008c96:	4b2c      	ldr	r3, [pc, #176]	; (8008d48 <Prog_Config+0x2ec>)
 8008c98:	791b      	ldrb	r3, [r3, #4]
 8008c9a:	3b30      	subs	r3, #48	; 0x30
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	4b16      	ldr	r3, [pc, #88]	; (8008cf8 <Prog_Config+0x29c>)
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	fb12 f303 	smulbb	r3, r2, r3
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	4b27      	ldr	r3, [pc, #156]	; (8008d48 <Prog_Config+0x2ec>)
 8008caa:	78db      	ldrb	r3, [r3, #3]
 8008cac:	3b30      	subs	r3, #48	; 0x30
 8008cae:	b299      	uxth	r1, r3
 8008cb0:	4b12      	ldr	r3, [pc, #72]	; (8008cfc <Prog_Config+0x2a0>)
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	fb11 f303 	smulbb	r3, r1, r3
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	4413      	add	r3, r2
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	4b22      	ldr	r3, [pc, #136]	; (8008d48 <Prog_Config+0x2ec>)
 8008cc0:	785b      	ldrb	r3, [r3, #1]
 8008cc2:	3b30      	subs	r3, #48	; 0x30
 8008cc4:	b299      	uxth	r1, r3
 8008cc6:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <Prog_Config+0x2a8>)
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	e03f      	b.n	8008d4c <Prog_Config+0x2f0>
 8008ccc:	08080000 	.word	0x08080000
 8008cd0:	20000910 	.word	0x20000910
 8008cd4:	2000091e 	.word	0x2000091e
 8008cd8:	20000920 	.word	0x20000920
 8008cdc:	20000922 	.word	0x20000922
 8008ce0:	20000923 	.word	0x20000923
 8008ce4:	20000924 	.word	0x20000924
 8008ce8:	20000925 	.word	0x20000925
 8008cec:	20000926 	.word	0x20000926
 8008cf0:	20000927 	.word	0x20000927
 8008cf4:	20000928 	.word	0x20000928
 8008cf8:	20000000 	.word	0x20000000
 8008cfc:	20000002 	.word	0x20000002
 8008d00:	20000004 	.word	0x20000004
 8008d04:	20000006 	.word	0x20000006
 8008d08:	20000008 	.word	0x20000008
 8008d0c:	2000c130 	.word	0x2000c130
 8008d10:	08011a44 	.word	0x08011a44
 8008d14:	08011a64 	.word	0x08011a64
 8008d18:	08011a84 	.word	0x08011a84
 8008d1c:	08011aa4 	.word	0x08011aa4
 8008d20:	08011ab4 	.word	0x08011ab4
 8008d24:	08011ac4 	.word	0x08011ac4
 8008d28:	08011ad8 	.word	0x08011ad8
 8008d2c:	08011af0 	.word	0x08011af0
 8008d30:	08011b04 	.word	0x08011b04
 8008d34:	08011b18 	.word	0x08011b18
 8008d38:	08011b24 	.word	0x08011b24
 8008d3c:	08011b38 	.word	0x08011b38
 8008d40:	08011b58 	.word	0x08011b58
 8008d44:	2000000a 	.word	0x2000000a
 8008d48:	20008130 	.word	0x20008130
 8008d4c:	fb11 f303 	smulbb	r3, r1, r3
 8008d50:	b299      	uxth	r1, r3
 8008d52:	4b9c      	ldr	r3, [pc, #624]	; (8008fc4 <Prog_Config+0x568>)
 8008d54:	789b      	ldrb	r3, [r3, #2]
 8008d56:	3b30      	subs	r3, #48	; 0x30
 8008d58:	b298      	uxth	r0, r3
 8008d5a:	4b9b      	ldr	r3, [pc, #620]	; (8008fc8 <Prog_Config+0x56c>)
 8008d5c:	881b      	ldrh	r3, [r3, #0]
 8008d5e:	fb10 f303 	smulbb	r3, r0, r3
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	440b      	add	r3, r1
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	4413      	add	r3, r2
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	4b95      	ldr	r3, [pc, #596]	; (8008fc4 <Prog_Config+0x568>)
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	3b30      	subs	r3, #48	; 0x30
 8008d72:	b299      	uxth	r1, r3
 8008d74:	4b95      	ldr	r3, [pc, #596]	; (8008fcc <Prog_Config+0x570>)
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	fb11 f303 	smulbb	r3, r1, r3
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	4413      	add	r3, r2
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	4b93      	ldr	r3, [pc, #588]	; (8008fd0 <Prog_Config+0x574>)
 8008d84:	801a      	strh	r2, [r3, #0]

		  printf("->ID: %d \r\n", V_ID);
 8008d86:	4b92      	ldr	r3, [pc, #584]	; (8008fd0 <Prog_Config+0x574>)
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	4891      	ldr	r0, [pc, #580]	; (8008fd4 <Prog_Config+0x578>)
 8008d8e:	f006 fee1 	bl	800fb54 <iprintf>
		  printf("\r\n");
 8008d92:	4891      	ldr	r0, [pc, #580]	; (8008fd8 <Prog_Config+0x57c>)
 8008d94:	f006 ff64 	bl	800fc60 <puts>
		  Flag_06_Rx = 0;
 8008d98:	4b90      	ldr	r3, [pc, #576]	; (8008fdc <Prog_Config+0x580>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	701a      	strb	r2, [r3, #0]
//----------------------------------------------

		  printf("->MASTER: ? [0-65535]\r\n");
 8008d9e:	4890      	ldr	r0, [pc, #576]	; (8008fe0 <Prog_Config+0x584>)
 8008da0:	f006 ff5e 	bl	800fc60 <puts>
		  while (!Flag_06_Rx)
 8008da4:	bf00      	nop
 8008da6:	4b8d      	ldr	r3, [pc, #564]	; (8008fdc <Prog_Config+0x580>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0fb      	beq.n	8008da6 <Prog_Config+0x34a>
		  {
		  }
		  dig_num_0 = 1;
 8008dae:	4b8d      	ldr	r3, [pc, #564]	; (8008fe4 <Prog_Config+0x588>)
 8008db0:	2201      	movs	r2, #1
 8008db2:	801a      	strh	r2, [r3, #0]
		  dig_num_1 = 10;
 8008db4:	4b8c      	ldr	r3, [pc, #560]	; (8008fe8 <Prog_Config+0x58c>)
 8008db6:	220a      	movs	r2, #10
 8008db8:	801a      	strh	r2, [r3, #0]
		  dig_num_2 = 100;
 8008dba:	4b83      	ldr	r3, [pc, #524]	; (8008fc8 <Prog_Config+0x56c>)
 8008dbc:	2264      	movs	r2, #100	; 0x64
 8008dbe:	801a      	strh	r2, [r3, #0]
		  dig_num_3 = 1000;
 8008dc0:	4b8a      	ldr	r3, [pc, #552]	; (8008fec <Prog_Config+0x590>)
 8008dc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008dc6:	801a      	strh	r2, [r3, #0]
		  dig_num_4 = 10000;
 8008dc8:	4b80      	ldr	r3, [pc, #512]	; (8008fcc <Prog_Config+0x570>)
 8008dca:	f242 7210 	movw	r2, #10000	; 0x2710
 8008dce:	801a      	strh	r2, [r3, #0]
		  V_MASTER = 0;
 8008dd0:	4b87      	ldr	r3, [pc, #540]	; (8008ff0 <Prog_Config+0x594>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	801a      	strh	r2, [r3, #0]

		  if (Buffer_06_Rx_W[4] == 0)
 8008dd6:	4b7b      	ldr	r3, [pc, #492]	; (8008fc4 <Prog_Config+0x568>)
 8008dd8:	791b      	ldrb	r3, [r3, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10f      	bne.n	8008dfe <Prog_Config+0x3a2>
		  {
			  dig_num_0 = 0;
 8008dde:	4b81      	ldr	r3, [pc, #516]	; (8008fe4 <Prog_Config+0x588>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 1;
 8008de4:	4b80      	ldr	r3, [pc, #512]	; (8008fe8 <Prog_Config+0x58c>)
 8008de6:	2201      	movs	r2, #1
 8008de8:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 10;
 8008dea:	4b77      	ldr	r3, [pc, #476]	; (8008fc8 <Prog_Config+0x56c>)
 8008dec:	220a      	movs	r2, #10
 8008dee:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 100;
 8008df0:	4b7e      	ldr	r3, [pc, #504]	; (8008fec <Prog_Config+0x590>)
 8008df2:	2264      	movs	r2, #100	; 0x64
 8008df4:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 1000;
 8008df6:	4b75      	ldr	r3, [pc, #468]	; (8008fcc <Prog_Config+0x570>)
 8008df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008dfc:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[3] == 0)
 8008dfe:	4b71      	ldr	r3, [pc, #452]	; (8008fc4 <Prog_Config+0x568>)
 8008e00:	78db      	ldrb	r3, [r3, #3]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10e      	bne.n	8008e24 <Prog_Config+0x3c8>
		  {
			  dig_num_0 = 0;
 8008e06:	4b77      	ldr	r3, [pc, #476]	; (8008fe4 <Prog_Config+0x588>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 8008e0c:	4b76      	ldr	r3, [pc, #472]	; (8008fe8 <Prog_Config+0x58c>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 1;
 8008e12:	4b6d      	ldr	r3, [pc, #436]	; (8008fc8 <Prog_Config+0x56c>)
 8008e14:	2201      	movs	r2, #1
 8008e16:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 10;
 8008e18:	4b74      	ldr	r3, [pc, #464]	; (8008fec <Prog_Config+0x590>)
 8008e1a:	220a      	movs	r2, #10
 8008e1c:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 100;
 8008e1e:	4b6b      	ldr	r3, [pc, #428]	; (8008fcc <Prog_Config+0x570>)
 8008e20:	2264      	movs	r2, #100	; 0x64
 8008e22:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[2] == 0)
 8008e24:	4b67      	ldr	r3, [pc, #412]	; (8008fc4 <Prog_Config+0x568>)
 8008e26:	789b      	ldrb	r3, [r3, #2]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10e      	bne.n	8008e4a <Prog_Config+0x3ee>
		  {
			  dig_num_0 = 0;
 8008e2c:	4b6d      	ldr	r3, [pc, #436]	; (8008fe4 <Prog_Config+0x588>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 8008e32:	4b6d      	ldr	r3, [pc, #436]	; (8008fe8 <Prog_Config+0x58c>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 0;
 8008e38:	4b63      	ldr	r3, [pc, #396]	; (8008fc8 <Prog_Config+0x56c>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 1;
 8008e3e:	4b6b      	ldr	r3, [pc, #428]	; (8008fec <Prog_Config+0x590>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 10;
 8008e44:	4b61      	ldr	r3, [pc, #388]	; (8008fcc <Prog_Config+0x570>)
 8008e46:	220a      	movs	r2, #10
 8008e48:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[1] == 0)
 8008e4a:	4b5e      	ldr	r3, [pc, #376]	; (8008fc4 <Prog_Config+0x568>)
 8008e4c:	785b      	ldrb	r3, [r3, #1]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10e      	bne.n	8008e70 <Prog_Config+0x414>
		  {
			  dig_num_0 = 0;
 8008e52:	4b64      	ldr	r3, [pc, #400]	; (8008fe4 <Prog_Config+0x588>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 8008e58:	4b63      	ldr	r3, [pc, #396]	; (8008fe8 <Prog_Config+0x58c>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 0;
 8008e5e:	4b5a      	ldr	r3, [pc, #360]	; (8008fc8 <Prog_Config+0x56c>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 0;
 8008e64:	4b61      	ldr	r3, [pc, #388]	; (8008fec <Prog_Config+0x590>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 1;
 8008e6a:	4b58      	ldr	r3, [pc, #352]	; (8008fcc <Prog_Config+0x570>)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[0] == 0)
 8008e70:	4b54      	ldr	r3, [pc, #336]	; (8008fc4 <Prog_Config+0x568>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10e      	bne.n	8008e96 <Prog_Config+0x43a>
		  {
			  dig_num_0 = 0;
 8008e78:	4b5a      	ldr	r3, [pc, #360]	; (8008fe4 <Prog_Config+0x588>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 8008e7e:	4b5a      	ldr	r3, [pc, #360]	; (8008fe8 <Prog_Config+0x58c>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 0;
 8008e84:	4b50      	ldr	r3, [pc, #320]	; (8008fc8 <Prog_Config+0x56c>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 0;
 8008e8a:	4b58      	ldr	r3, [pc, #352]	; (8008fec <Prog_Config+0x590>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 0;
 8008e90:	4b4e      	ldr	r3, [pc, #312]	; (8008fcc <Prog_Config+0x570>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	801a      	strh	r2, [r3, #0]
		  }

		  V_MASTER = (Buffer_06_Rx_W[4]-48)*dig_num_0 + (Buffer_06_Rx_W[3]-48)*dig_num_1 + (Buffer_06_Rx_W[2]-48)*dig_num_2 + (Buffer_06_Rx_W[1]-48)*dig_num_3 + (Buffer_06_Rx_W[0]-48)*dig_num_4;
 8008e96:	4b4b      	ldr	r3, [pc, #300]	; (8008fc4 <Prog_Config+0x568>)
 8008e98:	791b      	ldrb	r3, [r3, #4]
 8008e9a:	3b30      	subs	r3, #48	; 0x30
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	4b51      	ldr	r3, [pc, #324]	; (8008fe4 <Prog_Config+0x588>)
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	fb12 f303 	smulbb	r3, r2, r3
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	4b46      	ldr	r3, [pc, #280]	; (8008fc4 <Prog_Config+0x568>)
 8008eaa:	78db      	ldrb	r3, [r3, #3]
 8008eac:	3b30      	subs	r3, #48	; 0x30
 8008eae:	b299      	uxth	r1, r3
 8008eb0:	4b4d      	ldr	r3, [pc, #308]	; (8008fe8 <Prog_Config+0x58c>)
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	fb11 f303 	smulbb	r3, r1, r3
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	4413      	add	r3, r2
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	4b41      	ldr	r3, [pc, #260]	; (8008fc4 <Prog_Config+0x568>)
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	3b30      	subs	r3, #48	; 0x30
 8008ec4:	b299      	uxth	r1, r3
 8008ec6:	4b49      	ldr	r3, [pc, #292]	; (8008fec <Prog_Config+0x590>)
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	fb11 f303 	smulbb	r3, r1, r3
 8008ece:	b299      	uxth	r1, r3
 8008ed0:	4b3c      	ldr	r3, [pc, #240]	; (8008fc4 <Prog_Config+0x568>)
 8008ed2:	789b      	ldrb	r3, [r3, #2]
 8008ed4:	3b30      	subs	r3, #48	; 0x30
 8008ed6:	b298      	uxth	r0, r3
 8008ed8:	4b3b      	ldr	r3, [pc, #236]	; (8008fc8 <Prog_Config+0x56c>)
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	fb10 f303 	smulbb	r3, r0, r3
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	440b      	add	r3, r1
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	4413      	add	r3, r2
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	4b36      	ldr	r3, [pc, #216]	; (8008fc4 <Prog_Config+0x568>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	3b30      	subs	r3, #48	; 0x30
 8008ef0:	b299      	uxth	r1, r3
 8008ef2:	4b36      	ldr	r3, [pc, #216]	; (8008fcc <Prog_Config+0x570>)
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	fb11 f303 	smulbb	r3, r1, r3
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	4413      	add	r3, r2
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	4b3b      	ldr	r3, [pc, #236]	; (8008ff0 <Prog_Config+0x594>)
 8008f02:	801a      	strh	r2, [r3, #0]

		  printf("->MASTER: %d \r\n", V_MASTER);
 8008f04:	4b3a      	ldr	r3, [pc, #232]	; (8008ff0 <Prog_Config+0x594>)
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	483a      	ldr	r0, [pc, #232]	; (8008ff4 <Prog_Config+0x598>)
 8008f0c:	f006 fe22 	bl	800fb54 <iprintf>
		  printf("\r\n");
 8008f10:	4831      	ldr	r0, [pc, #196]	; (8008fd8 <Prog_Config+0x57c>)
 8008f12:	f006 fea5 	bl	800fc60 <puts>
		  Flag_06_Rx = 0;
 8008f16:	4b31      	ldr	r3, [pc, #196]	; (8008fdc <Prog_Config+0x580>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	701a      	strb	r2, [r3, #0]
//----------------------------------------------

		  printf("->BAUD_SCADA: 0=4800/1=9600/2=19200/3=38400/4=57600/5=76800/6=115200/7=230400\r\n");
 8008f1c:	4836      	ldr	r0, [pc, #216]	; (8008ff8 <Prog_Config+0x59c>)
 8008f1e:	f006 fe9f 	bl	800fc60 <puts>
		  printf(" ?  [0-7]\r\n");
 8008f22:	4836      	ldr	r0, [pc, #216]	; (8008ffc <Prog_Config+0x5a0>)
 8008f24:	f006 fe9c 	bl	800fc60 <puts>
		  while (!Flag_06_Rx)
 8008f28:	bf00      	nop
 8008f2a:	4b2c      	ldr	r3, [pc, #176]	; (8008fdc <Prog_Config+0x580>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0fb      	beq.n	8008f2a <Prog_Config+0x4ce>
		  {
		  }
		  if (Buffer_06_Rx_W[0] == 0)
 8008f32:	4b24      	ldr	r3, [pc, #144]	; (8008fc4 <Prog_Config+0x568>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d102      	bne.n	8008f40 <Prog_Config+0x4e4>
		  {
			  Buffer_06_Rx_W[0] = 48;
 8008f3a:	4b22      	ldr	r3, [pc, #136]	; (8008fc4 <Prog_Config+0x568>)
 8008f3c:	2230      	movs	r2, #48	; 0x30
 8008f3e:	701a      	strb	r2, [r3, #0]
		  }
		  V_BAUD_SCADA = Buffer_06_Rx_W[0]-48;
 8008f40:	4b20      	ldr	r3, [pc, #128]	; (8008fc4 <Prog_Config+0x568>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	3b30      	subs	r3, #48	; 0x30
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	4b2d      	ldr	r3, [pc, #180]	; (8009000 <Prog_Config+0x5a4>)
 8008f4a:	701a      	strb	r2, [r3, #0]
		  printf("->BAUD_SCADA: %d \r\n", V_BAUD_SCADA);
 8008f4c:	4b2c      	ldr	r3, [pc, #176]	; (8009000 <Prog_Config+0x5a4>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	4619      	mov	r1, r3
 8008f52:	482c      	ldr	r0, [pc, #176]	; (8009004 <Prog_Config+0x5a8>)
 8008f54:	f006 fdfe 	bl	800fb54 <iprintf>
		  printf("\r\n");
 8008f58:	481f      	ldr	r0, [pc, #124]	; (8008fd8 <Prog_Config+0x57c>)
 8008f5a:	f006 fe81 	bl	800fc60 <puts>
		  Flag_06_Rx = 0;
 8008f5e:	4b1f      	ldr	r3, [pc, #124]	; (8008fdc <Prog_Config+0x580>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	701a      	strb	r2, [r3, #0]

//----------------------------------------------

		  printf("->BAUD_REC/MED: 0=4800/1=9600/2=19200/3=38400/4=57600/5=76800/6=115200/7=230400\r\n");
 8008f64:	4828      	ldr	r0, [pc, #160]	; (8009008 <Prog_Config+0x5ac>)
 8008f66:	f006 fe7b 	bl	800fc60 <puts>
		  printf(" ?  [0-7]\r\n");
 8008f6a:	4824      	ldr	r0, [pc, #144]	; (8008ffc <Prog_Config+0x5a0>)
 8008f6c:	f006 fe78 	bl	800fc60 <puts>
		  while (!Flag_06_Rx)
 8008f70:	bf00      	nop
 8008f72:	4b1a      	ldr	r3, [pc, #104]	; (8008fdc <Prog_Config+0x580>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0fb      	beq.n	8008f72 <Prog_Config+0x516>
		  {
		  }
		  if (Buffer_06_Rx_W[0] == 0)
 8008f7a:	4b12      	ldr	r3, [pc, #72]	; (8008fc4 <Prog_Config+0x568>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <Prog_Config+0x52c>
		  {
			  Buffer_06_Rx_W[0] = 48;
 8008f82:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <Prog_Config+0x568>)
 8008f84:	2230      	movs	r2, #48	; 0x30
 8008f86:	701a      	strb	r2, [r3, #0]
		  }
		  V_BAUD_REC_MED = Buffer_06_Rx_W[0]-48;
 8008f88:	4b0e      	ldr	r3, [pc, #56]	; (8008fc4 <Prog_Config+0x568>)
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	3b30      	subs	r3, #48	; 0x30
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	4b1e      	ldr	r3, [pc, #120]	; (800900c <Prog_Config+0x5b0>)
 8008f92:	701a      	strb	r2, [r3, #0]
		  printf("->BAUD_REC/MED: %d \r\n", V_BAUD_REC_MED);
 8008f94:	4b1d      	ldr	r3, [pc, #116]	; (800900c <Prog_Config+0x5b0>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	481d      	ldr	r0, [pc, #116]	; (8009010 <Prog_Config+0x5b4>)
 8008f9c:	f006 fdda 	bl	800fb54 <iprintf>
		  printf("\r\n");
 8008fa0:	480d      	ldr	r0, [pc, #52]	; (8008fd8 <Prog_Config+0x57c>)
 8008fa2:	f006 fe5d 	bl	800fc60 <puts>
		  Flag_06_Rx = 0;
 8008fa6:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <Prog_Config+0x580>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	701a      	strb	r2, [r3, #0]

//----------------------------------------------
		  printf("->Cantidad de RECONECTADORES: \r\n");
 8008fac:	4819      	ldr	r0, [pc, #100]	; (8009014 <Prog_Config+0x5b8>)
 8008fae:	f006 fe57 	bl	800fc60 <puts>
		  printf(" ?  [0-32]\r\n");
 8008fb2:	4819      	ldr	r0, [pc, #100]	; (8009018 <Prog_Config+0x5bc>)
 8008fb4:	f006 fe54 	bl	800fc60 <puts>
		  while (!Flag_06_Rx)
 8008fb8:	bf00      	nop
 8008fba:	4b08      	ldr	r3, [pc, #32]	; (8008fdc <Prog_Config+0x580>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d0fb      	beq.n	8008fba <Prog_Config+0x55e>
 8008fc2:	e02b      	b.n	800901c <Prog_Config+0x5c0>
 8008fc4:	20008130 	.word	0x20008130
 8008fc8:	20000004 	.word	0x20000004
 8008fcc:	20000008 	.word	0x20000008
 8008fd0:	2000000a 	.word	0x2000000a
 8008fd4:	08011b6c 	.word	0x08011b6c
 8008fd8:	08011b78 	.word	0x08011b78
 8008fdc:	2000c130 	.word	0x2000c130
 8008fe0:	08011b7c 	.word	0x08011b7c
 8008fe4:	20000000 	.word	0x20000000
 8008fe8:	20000002 	.word	0x20000002
 8008fec:	20000006 	.word	0x20000006
 8008ff0:	2000000c 	.word	0x2000000c
 8008ff4:	08011b94 	.word	0x08011b94
 8008ff8:	08011ba4 	.word	0x08011ba4
 8008ffc:	08011bf4 	.word	0x08011bf4
 8009000:	2000092a 	.word	0x2000092a
 8009004:	08011c00 	.word	0x08011c00
 8009008:	08011c14 	.word	0x08011c14
 800900c:	2000092b 	.word	0x2000092b
 8009010:	08011c68 	.word	0x08011c68
 8009014:	08011c80 	.word	0x08011c80
 8009018:	08011ca0 	.word	0x08011ca0
		  {
		  }
		  dig_num_0 = 1;
 800901c:	4b9a      	ldr	r3, [pc, #616]	; (8009288 <Prog_Config+0x82c>)
 800901e:	2201      	movs	r2, #1
 8009020:	801a      	strh	r2, [r3, #0]
		  dig_num_1 = 10;
 8009022:	4b9a      	ldr	r3, [pc, #616]	; (800928c <Prog_Config+0x830>)
 8009024:	220a      	movs	r2, #10
 8009026:	801a      	strh	r2, [r3, #0]
		  V_CANT_DISP_R = 0;
 8009028:	4b99      	ldr	r3, [pc, #612]	; (8009290 <Prog_Config+0x834>)
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]

		  if (Buffer_06_Rx_W[1] == 0)
 800902e:	4b99      	ldr	r3, [pc, #612]	; (8009294 <Prog_Config+0x838>)
 8009030:	785b      	ldrb	r3, [r3, #1]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d105      	bne.n	8009042 <Prog_Config+0x5e6>
		  {
			  dig_num_0 = 0;
 8009036:	4b94      	ldr	r3, [pc, #592]	; (8009288 <Prog_Config+0x82c>)
 8009038:	2200      	movs	r2, #0
 800903a:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 1;
 800903c:	4b93      	ldr	r3, [pc, #588]	; (800928c <Prog_Config+0x830>)
 800903e:	2201      	movs	r2, #1
 8009040:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[0] == 0)
 8009042:	4b94      	ldr	r3, [pc, #592]	; (8009294 <Prog_Config+0x838>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d105      	bne.n	8009056 <Prog_Config+0x5fa>
		  {
			  dig_num_0 = 0;
 800904a:	4b8f      	ldr	r3, [pc, #572]	; (8009288 <Prog_Config+0x82c>)
 800904c:	2200      	movs	r2, #0
 800904e:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 8009050:	4b8e      	ldr	r3, [pc, #568]	; (800928c <Prog_Config+0x830>)
 8009052:	2200      	movs	r2, #0
 8009054:	801a      	strh	r2, [r3, #0]
		  }

		  V_CANT_DISP_R = (Buffer_06_Rx_W[1]-48)*dig_num_0 + (Buffer_06_Rx_W[0]-48)*dig_num_1;
 8009056:	4b8f      	ldr	r3, [pc, #572]	; (8009294 <Prog_Config+0x838>)
 8009058:	785b      	ldrb	r3, [r3, #1]
 800905a:	3b30      	subs	r3, #48	; 0x30
 800905c:	b2da      	uxtb	r2, r3
 800905e:	4b8a      	ldr	r3, [pc, #552]	; (8009288 <Prog_Config+0x82c>)
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	fb12 f303 	smulbb	r3, r2, r3
 8009068:	b2da      	uxtb	r2, r3
 800906a:	4b8a      	ldr	r3, [pc, #552]	; (8009294 <Prog_Config+0x838>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	3b30      	subs	r3, #48	; 0x30
 8009070:	b2d9      	uxtb	r1, r3
 8009072:	4b86      	ldr	r3, [pc, #536]	; (800928c <Prog_Config+0x830>)
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	b2db      	uxtb	r3, r3
 8009078:	fb11 f303 	smulbb	r3, r1, r3
 800907c:	b2db      	uxtb	r3, r3
 800907e:	4413      	add	r3, r2
 8009080:	b2da      	uxtb	r2, r3
 8009082:	4b83      	ldr	r3, [pc, #524]	; (8009290 <Prog_Config+0x834>)
 8009084:	701a      	strb	r2, [r3, #0]
		  printf("->Cantidad de RECONECTADORES: %d \r\n", V_CANT_DISP_R);
 8009086:	4b82      	ldr	r3, [pc, #520]	; (8009290 <Prog_Config+0x834>)
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	4619      	mov	r1, r3
 800908c:	4882      	ldr	r0, [pc, #520]	; (8009298 <Prog_Config+0x83c>)
 800908e:	f006 fd61 	bl	800fb54 <iprintf>
		  printf("\r\n");
 8009092:	4882      	ldr	r0, [pc, #520]	; (800929c <Prog_Config+0x840>)
 8009094:	f006 fde4 	bl	800fc60 <puts>
		  Flag_06_Rx = 0;
 8009098:	4b81      	ldr	r3, [pc, #516]	; (80092a0 <Prog_Config+0x844>)
 800909a:	2200      	movs	r2, #0
 800909c:	701a      	strb	r2, [r3, #0]
//----------------------------------------------

		  printf("->Cantidad de MEDIDORES: \r\n");
 800909e:	4881      	ldr	r0, [pc, #516]	; (80092a4 <Prog_Config+0x848>)
 80090a0:	f006 fdde 	bl	800fc60 <puts>
		  printf(" ?  [0-32]\r\n");
 80090a4:	4880      	ldr	r0, [pc, #512]	; (80092a8 <Prog_Config+0x84c>)
 80090a6:	f006 fddb 	bl	800fc60 <puts>
		  while (!Flag_06_Rx)
 80090aa:	bf00      	nop
 80090ac:	4b7c      	ldr	r3, [pc, #496]	; (80092a0 <Prog_Config+0x844>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0fb      	beq.n	80090ac <Prog_Config+0x650>
		  {
		  }
		  dig_num_0 = 1;
 80090b4:	4b74      	ldr	r3, [pc, #464]	; (8009288 <Prog_Config+0x82c>)
 80090b6:	2201      	movs	r2, #1
 80090b8:	801a      	strh	r2, [r3, #0]
		  dig_num_1 = 10;
 80090ba:	4b74      	ldr	r3, [pc, #464]	; (800928c <Prog_Config+0x830>)
 80090bc:	220a      	movs	r2, #10
 80090be:	801a      	strh	r2, [r3, #0]
		  V_CANT_DISP_M = 0;
 80090c0:	4b7a      	ldr	r3, [pc, #488]	; (80092ac <Prog_Config+0x850>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	701a      	strb	r2, [r3, #0]

		  if (Buffer_06_Rx_W[1] == 0)
 80090c6:	4b73      	ldr	r3, [pc, #460]	; (8009294 <Prog_Config+0x838>)
 80090c8:	785b      	ldrb	r3, [r3, #1]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d105      	bne.n	80090da <Prog_Config+0x67e>
		  {
			  dig_num_0 = 0;
 80090ce:	4b6e      	ldr	r3, [pc, #440]	; (8009288 <Prog_Config+0x82c>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 1;
 80090d4:	4b6d      	ldr	r3, [pc, #436]	; (800928c <Prog_Config+0x830>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[0] == 0)
 80090da:	4b6e      	ldr	r3, [pc, #440]	; (8009294 <Prog_Config+0x838>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d105      	bne.n	80090ee <Prog_Config+0x692>
		  {
			  dig_num_0 = 0;
 80090e2:	4b69      	ldr	r3, [pc, #420]	; (8009288 <Prog_Config+0x82c>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 80090e8:	4b68      	ldr	r3, [pc, #416]	; (800928c <Prog_Config+0x830>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	801a      	strh	r2, [r3, #0]
		  }

		  V_CANT_DISP_M = (Buffer_06_Rx_W[1]-48)*dig_num_0 + (Buffer_06_Rx_W[0]-48)*dig_num_1;
 80090ee:	4b69      	ldr	r3, [pc, #420]	; (8009294 <Prog_Config+0x838>)
 80090f0:	785b      	ldrb	r3, [r3, #1]
 80090f2:	3b30      	subs	r3, #48	; 0x30
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	4b64      	ldr	r3, [pc, #400]	; (8009288 <Prog_Config+0x82c>)
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	fb12 f303 	smulbb	r3, r2, r3
 8009100:	b2da      	uxtb	r2, r3
 8009102:	4b64      	ldr	r3, [pc, #400]	; (8009294 <Prog_Config+0x838>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	3b30      	subs	r3, #48	; 0x30
 8009108:	b2d9      	uxtb	r1, r3
 800910a:	4b60      	ldr	r3, [pc, #384]	; (800928c <Prog_Config+0x830>)
 800910c:	881b      	ldrh	r3, [r3, #0]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	fb11 f303 	smulbb	r3, r1, r3
 8009114:	b2db      	uxtb	r3, r3
 8009116:	4413      	add	r3, r2
 8009118:	b2da      	uxtb	r2, r3
 800911a:	4b64      	ldr	r3, [pc, #400]	; (80092ac <Prog_Config+0x850>)
 800911c:	701a      	strb	r2, [r3, #0]
		  printf("->Cantidad de MEDIDORES: %d \r\n", V_CANT_DISP_M);
 800911e:	4b63      	ldr	r3, [pc, #396]	; (80092ac <Prog_Config+0x850>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	4619      	mov	r1, r3
 8009124:	4862      	ldr	r0, [pc, #392]	; (80092b0 <Prog_Config+0x854>)
 8009126:	f006 fd15 	bl	800fb54 <iprintf>
		  printf("\r\n");
 800912a:	485c      	ldr	r0, [pc, #368]	; (800929c <Prog_Config+0x840>)
 800912c:	f006 fd98 	bl	800fc60 <puts>
		  Flag_06_Rx = 0;
 8009130:	4b5b      	ldr	r3, [pc, #364]	; (80092a0 <Prog_Config+0x844>)
 8009132:	2200      	movs	r2, #0
 8009134:	701a      	strb	r2, [r3, #0]
//----------------------------------------------

		  printf("->UR Mensaje no solicitado: 0=OFF/1=ON \r\n");
 8009136:	485f      	ldr	r0, [pc, #380]	; (80092b4 <Prog_Config+0x858>)
 8009138:	f006 fd92 	bl	800fc60 <puts>
		  printf(" ? [0-1]\r\n");
 800913c:	485e      	ldr	r0, [pc, #376]	; (80092b8 <Prog_Config+0x85c>)
 800913e:	f006 fd8f 	bl	800fc60 <puts>
		  while (!Flag_06_Rx)
 8009142:	bf00      	nop
 8009144:	4b56      	ldr	r3, [pc, #344]	; (80092a0 <Prog_Config+0x844>)
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d0fb      	beq.n	8009144 <Prog_Config+0x6e8>
		  {
		  }
		  if (Buffer_06_Rx_W[0] == 0)
 800914c:	4b51      	ldr	r3, [pc, #324]	; (8009294 <Prog_Config+0x838>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d102      	bne.n	800915a <Prog_Config+0x6fe>
		  {
			  Buffer_06_Rx_W[0] = 48;
 8009154:	4b4f      	ldr	r3, [pc, #316]	; (8009294 <Prog_Config+0x838>)
 8009156:	2230      	movs	r2, #48	; 0x30
 8009158:	701a      	strb	r2, [r3, #0]
		  }
		  V_UR = Buffer_06_Rx_W[0]-48;
 800915a:	4b4e      	ldr	r3, [pc, #312]	; (8009294 <Prog_Config+0x838>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	3b30      	subs	r3, #48	; 0x30
 8009160:	b2da      	uxtb	r2, r3
 8009162:	4b56      	ldr	r3, [pc, #344]	; (80092bc <Prog_Config+0x860>)
 8009164:	701a      	strb	r2, [r3, #0]
		  printf("->UR: %d \r\n", V_UR);
 8009166:	4b55      	ldr	r3, [pc, #340]	; (80092bc <Prog_Config+0x860>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	4619      	mov	r1, r3
 800916c:	4854      	ldr	r0, [pc, #336]	; (80092c0 <Prog_Config+0x864>)
 800916e:	f006 fcf1 	bl	800fb54 <iprintf>
		  printf("\r\n");
 8009172:	484a      	ldr	r0, [pc, #296]	; (800929c <Prog_Config+0x840>)
 8009174:	f006 fd74 	bl	800fc60 <puts>
		  Flag_06_Rx = 0;
 8009178:	4b49      	ldr	r3, [pc, #292]	; (80092a0 <Prog_Config+0x844>)
 800917a:	2200      	movs	r2, #0
 800917c:	701a      	strb	r2, [r3, #0]
//----------------------------------------------

		  printf("->Reintentos: \r\n");
 800917e:	4851      	ldr	r0, [pc, #324]	; (80092c4 <Prog_Config+0x868>)
 8009180:	f006 fd6e 	bl	800fc60 <puts>
		  printf(" ? [0-10]\r\n");
 8009184:	4850      	ldr	r0, [pc, #320]	; (80092c8 <Prog_Config+0x86c>)
 8009186:	f006 fd6b 	bl	800fc60 <puts>
		  while (!Flag_06_Rx)
 800918a:	bf00      	nop
 800918c:	4b44      	ldr	r3, [pc, #272]	; (80092a0 <Prog_Config+0x844>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0fb      	beq.n	800918c <Prog_Config+0x730>
		  {
		  }
		  if (Buffer_06_Rx_W[0] == 0)
 8009194:	4b3f      	ldr	r3, [pc, #252]	; (8009294 <Prog_Config+0x838>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d102      	bne.n	80091a2 <Prog_Config+0x746>
		  {
			  Buffer_06_Rx_W[0] = 48;
 800919c:	4b3d      	ldr	r3, [pc, #244]	; (8009294 <Prog_Config+0x838>)
 800919e:	2230      	movs	r2, #48	; 0x30
 80091a0:	701a      	strb	r2, [r3, #0]
		  }
		  V_REINT = Buffer_06_Rx_W[0]-48;
 80091a2:	4b3c      	ldr	r3, [pc, #240]	; (8009294 <Prog_Config+0x838>)
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	3b30      	subs	r3, #48	; 0x30
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	4b48      	ldr	r3, [pc, #288]	; (80092cc <Prog_Config+0x870>)
 80091ac:	701a      	strb	r2, [r3, #0]
		  printf("->Reintentos: %d \r\n", V_REINT);
 80091ae:	4b47      	ldr	r3, [pc, #284]	; (80092cc <Prog_Config+0x870>)
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	4619      	mov	r1, r3
 80091b4:	4846      	ldr	r0, [pc, #280]	; (80092d0 <Prog_Config+0x874>)
 80091b6:	f006 fccd 	bl	800fb54 <iprintf>
		  printf("\r\n");
 80091ba:	4838      	ldr	r0, [pc, #224]	; (800929c <Prog_Config+0x840>)
 80091bc:	f006 fd50 	bl	800fc60 <puts>
		  Flag_06_Rx = 0;
 80091c0:	4b37      	ldr	r3, [pc, #220]	; (80092a0 <Prog_Config+0x844>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
//----------------------------------------------

		  printf("->Tiempo p/Reintentar: \r\n");
 80091c6:	4843      	ldr	r0, [pc, #268]	; (80092d4 <Prog_Config+0x878>)
 80091c8:	f006 fd4a 	bl	800fc60 <puts>
		  printf(" ? [0-50000 mseg]\r\n");
 80091cc:	4842      	ldr	r0, [pc, #264]	; (80092d8 <Prog_Config+0x87c>)
 80091ce:	f006 fd47 	bl	800fc60 <puts>
		  while (!Flag_06_Rx)
 80091d2:	bf00      	nop
 80091d4:	4b32      	ldr	r3, [pc, #200]	; (80092a0 <Prog_Config+0x844>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d0fb      	beq.n	80091d4 <Prog_Config+0x778>
		  {
		  }
		  dig_num_0 = 1;
 80091dc:	4b2a      	ldr	r3, [pc, #168]	; (8009288 <Prog_Config+0x82c>)
 80091de:	2201      	movs	r2, #1
 80091e0:	801a      	strh	r2, [r3, #0]
		  dig_num_1 = 10;
 80091e2:	4b2a      	ldr	r3, [pc, #168]	; (800928c <Prog_Config+0x830>)
 80091e4:	220a      	movs	r2, #10
 80091e6:	801a      	strh	r2, [r3, #0]
		  dig_num_2 = 100;
 80091e8:	4b3c      	ldr	r3, [pc, #240]	; (80092dc <Prog_Config+0x880>)
 80091ea:	2264      	movs	r2, #100	; 0x64
 80091ec:	801a      	strh	r2, [r3, #0]
		  dig_num_3 = 1000;
 80091ee:	4b3c      	ldr	r3, [pc, #240]	; (80092e0 <Prog_Config+0x884>)
 80091f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091f4:	801a      	strh	r2, [r3, #0]
		  dig_num_4 = 10000;
 80091f6:	4b3b      	ldr	r3, [pc, #236]	; (80092e4 <Prog_Config+0x888>)
 80091f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80091fc:	801a      	strh	r2, [r3, #0]
		  V_TPO_REINT = 0;
 80091fe:	4b3a      	ldr	r3, [pc, #232]	; (80092e8 <Prog_Config+0x88c>)
 8009200:	2200      	movs	r2, #0
 8009202:	801a      	strh	r2, [r3, #0]

		  if (Buffer_06_Rx_W[4] == 0)
 8009204:	4b23      	ldr	r3, [pc, #140]	; (8009294 <Prog_Config+0x838>)
 8009206:	791b      	ldrb	r3, [r3, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10f      	bne.n	800922c <Prog_Config+0x7d0>
		  {
			  dig_num_0 = 0;
 800920c:	4b1e      	ldr	r3, [pc, #120]	; (8009288 <Prog_Config+0x82c>)
 800920e:	2200      	movs	r2, #0
 8009210:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 1;
 8009212:	4b1e      	ldr	r3, [pc, #120]	; (800928c <Prog_Config+0x830>)
 8009214:	2201      	movs	r2, #1
 8009216:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 10;
 8009218:	4b30      	ldr	r3, [pc, #192]	; (80092dc <Prog_Config+0x880>)
 800921a:	220a      	movs	r2, #10
 800921c:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 100;
 800921e:	4b30      	ldr	r3, [pc, #192]	; (80092e0 <Prog_Config+0x884>)
 8009220:	2264      	movs	r2, #100	; 0x64
 8009222:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 1000;
 8009224:	4b2f      	ldr	r3, [pc, #188]	; (80092e4 <Prog_Config+0x888>)
 8009226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800922a:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[3] == 0)
 800922c:	4b19      	ldr	r3, [pc, #100]	; (8009294 <Prog_Config+0x838>)
 800922e:	78db      	ldrb	r3, [r3, #3]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10e      	bne.n	8009252 <Prog_Config+0x7f6>
		  {
			  dig_num_0 = 0;
 8009234:	4b14      	ldr	r3, [pc, #80]	; (8009288 <Prog_Config+0x82c>)
 8009236:	2200      	movs	r2, #0
 8009238:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 800923a:	4b14      	ldr	r3, [pc, #80]	; (800928c <Prog_Config+0x830>)
 800923c:	2200      	movs	r2, #0
 800923e:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 1;
 8009240:	4b26      	ldr	r3, [pc, #152]	; (80092dc <Prog_Config+0x880>)
 8009242:	2201      	movs	r2, #1
 8009244:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 10;
 8009246:	4b26      	ldr	r3, [pc, #152]	; (80092e0 <Prog_Config+0x884>)
 8009248:	220a      	movs	r2, #10
 800924a:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 100;
 800924c:	4b25      	ldr	r3, [pc, #148]	; (80092e4 <Prog_Config+0x888>)
 800924e:	2264      	movs	r2, #100	; 0x64
 8009250:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[2] == 0)
 8009252:	4b10      	ldr	r3, [pc, #64]	; (8009294 <Prog_Config+0x838>)
 8009254:	789b      	ldrb	r3, [r3, #2]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10e      	bne.n	8009278 <Prog_Config+0x81c>
		  {
			  dig_num_0 = 0;
 800925a:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <Prog_Config+0x82c>)
 800925c:	2200      	movs	r2, #0
 800925e:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 8009260:	4b0a      	ldr	r3, [pc, #40]	; (800928c <Prog_Config+0x830>)
 8009262:	2200      	movs	r2, #0
 8009264:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 0;
 8009266:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <Prog_Config+0x880>)
 8009268:	2200      	movs	r2, #0
 800926a:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 1;
 800926c:	4b1c      	ldr	r3, [pc, #112]	; (80092e0 <Prog_Config+0x884>)
 800926e:	2201      	movs	r2, #1
 8009270:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 10;
 8009272:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <Prog_Config+0x888>)
 8009274:	220a      	movs	r2, #10
 8009276:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[1] == 0)
 8009278:	4b06      	ldr	r3, [pc, #24]	; (8009294 <Prog_Config+0x838>)
 800927a:	785b      	ldrb	r3, [r3, #1]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d141      	bne.n	8009304 <Prog_Config+0x8a8>
		  {
			  dig_num_0 = 0;
 8009280:	4b01      	ldr	r3, [pc, #4]	; (8009288 <Prog_Config+0x82c>)
 8009282:	2200      	movs	r2, #0
 8009284:	801a      	strh	r2, [r3, #0]
 8009286:	e031      	b.n	80092ec <Prog_Config+0x890>
 8009288:	20000000 	.word	0x20000000
 800928c:	20000002 	.word	0x20000002
 8009290:	2000000e 	.word	0x2000000e
 8009294:	20008130 	.word	0x20008130
 8009298:	08011cac 	.word	0x08011cac
 800929c:	08011b78 	.word	0x08011b78
 80092a0:	2000c130 	.word	0x2000c130
 80092a4:	08011cd0 	.word	0x08011cd0
 80092a8:	08011ca0 	.word	0x08011ca0
 80092ac:	2000092c 	.word	0x2000092c
 80092b0:	08011cec 	.word	0x08011cec
 80092b4:	08011d0c 	.word	0x08011d0c
 80092b8:	08011d38 	.word	0x08011d38
 80092bc:	2000092d 	.word	0x2000092d
 80092c0:	08011d44 	.word	0x08011d44
 80092c4:	08011d50 	.word	0x08011d50
 80092c8:	08011d60 	.word	0x08011d60
 80092cc:	2000000f 	.word	0x2000000f
 80092d0:	08011d6c 	.word	0x08011d6c
 80092d4:	08011d80 	.word	0x08011d80
 80092d8:	08011d9c 	.word	0x08011d9c
 80092dc:	20000004 	.word	0x20000004
 80092e0:	20000006 	.word	0x20000006
 80092e4:	20000008 	.word	0x20000008
 80092e8:	20000010 	.word	0x20000010
			  dig_num_1 = 0;
 80092ec:	4b86      	ldr	r3, [pc, #536]	; (8009508 <Prog_Config+0xaac>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 0;
 80092f2:	4b86      	ldr	r3, [pc, #536]	; (800950c <Prog_Config+0xab0>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 0;
 80092f8:	4b85      	ldr	r3, [pc, #532]	; (8009510 <Prog_Config+0xab4>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 1;
 80092fe:	4b85      	ldr	r3, [pc, #532]	; (8009514 <Prog_Config+0xab8>)
 8009300:	2201      	movs	r2, #1
 8009302:	801a      	strh	r2, [r3, #0]
		  }
		  if (Buffer_06_Rx_W[0] == 0)
 8009304:	4b84      	ldr	r3, [pc, #528]	; (8009518 <Prog_Config+0xabc>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10e      	bne.n	800932a <Prog_Config+0x8ce>
		  {
			  dig_num_0 = 0;
 800930c:	4b83      	ldr	r3, [pc, #524]	; (800951c <Prog_Config+0xac0>)
 800930e:	2200      	movs	r2, #0
 8009310:	801a      	strh	r2, [r3, #0]
			  dig_num_1 = 0;
 8009312:	4b7d      	ldr	r3, [pc, #500]	; (8009508 <Prog_Config+0xaac>)
 8009314:	2200      	movs	r2, #0
 8009316:	801a      	strh	r2, [r3, #0]
			  dig_num_2 = 0;
 8009318:	4b7c      	ldr	r3, [pc, #496]	; (800950c <Prog_Config+0xab0>)
 800931a:	2200      	movs	r2, #0
 800931c:	801a      	strh	r2, [r3, #0]
			  dig_num_3 = 0;
 800931e:	4b7c      	ldr	r3, [pc, #496]	; (8009510 <Prog_Config+0xab4>)
 8009320:	2200      	movs	r2, #0
 8009322:	801a      	strh	r2, [r3, #0]
			  dig_num_4 = 0;
 8009324:	4b7b      	ldr	r3, [pc, #492]	; (8009514 <Prog_Config+0xab8>)
 8009326:	2200      	movs	r2, #0
 8009328:	801a      	strh	r2, [r3, #0]
		  }

		  V_TPO_REINT = (Buffer_06_Rx_W[4]-48)*dig_num_0 + (Buffer_06_Rx_W[3]-48)*dig_num_1 + (Buffer_06_Rx_W[2]-48)*dig_num_2 + (Buffer_06_Rx_W[1]-48)*dig_num_3 + (Buffer_06_Rx_W[0]-48)*dig_num_4;
 800932a:	4b7b      	ldr	r3, [pc, #492]	; (8009518 <Prog_Config+0xabc>)
 800932c:	791b      	ldrb	r3, [r3, #4]
 800932e:	3b30      	subs	r3, #48	; 0x30
 8009330:	b29a      	uxth	r2, r3
 8009332:	4b7a      	ldr	r3, [pc, #488]	; (800951c <Prog_Config+0xac0>)
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	fb12 f303 	smulbb	r3, r2, r3
 800933a:	b29a      	uxth	r2, r3
 800933c:	4b76      	ldr	r3, [pc, #472]	; (8009518 <Prog_Config+0xabc>)
 800933e:	78db      	ldrb	r3, [r3, #3]
 8009340:	3b30      	subs	r3, #48	; 0x30
 8009342:	b299      	uxth	r1, r3
 8009344:	4b70      	ldr	r3, [pc, #448]	; (8009508 <Prog_Config+0xaac>)
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	fb11 f303 	smulbb	r3, r1, r3
 800934c:	b29b      	uxth	r3, r3
 800934e:	4413      	add	r3, r2
 8009350:	b29a      	uxth	r2, r3
 8009352:	4b71      	ldr	r3, [pc, #452]	; (8009518 <Prog_Config+0xabc>)
 8009354:	785b      	ldrb	r3, [r3, #1]
 8009356:	3b30      	subs	r3, #48	; 0x30
 8009358:	b299      	uxth	r1, r3
 800935a:	4b6d      	ldr	r3, [pc, #436]	; (8009510 <Prog_Config+0xab4>)
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	fb11 f303 	smulbb	r3, r1, r3
 8009362:	b299      	uxth	r1, r3
 8009364:	4b6c      	ldr	r3, [pc, #432]	; (8009518 <Prog_Config+0xabc>)
 8009366:	789b      	ldrb	r3, [r3, #2]
 8009368:	3b30      	subs	r3, #48	; 0x30
 800936a:	b298      	uxth	r0, r3
 800936c:	4b67      	ldr	r3, [pc, #412]	; (800950c <Prog_Config+0xab0>)
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	fb10 f303 	smulbb	r3, r0, r3
 8009374:	b29b      	uxth	r3, r3
 8009376:	440b      	add	r3, r1
 8009378:	b29b      	uxth	r3, r3
 800937a:	4413      	add	r3, r2
 800937c:	b29a      	uxth	r2, r3
 800937e:	4b66      	ldr	r3, [pc, #408]	; (8009518 <Prog_Config+0xabc>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	3b30      	subs	r3, #48	; 0x30
 8009384:	b299      	uxth	r1, r3
 8009386:	4b63      	ldr	r3, [pc, #396]	; (8009514 <Prog_Config+0xab8>)
 8009388:	881b      	ldrh	r3, [r3, #0]
 800938a:	fb11 f303 	smulbb	r3, r1, r3
 800938e:	b29b      	uxth	r3, r3
 8009390:	4413      	add	r3, r2
 8009392:	b29a      	uxth	r2, r3
 8009394:	4b62      	ldr	r3, [pc, #392]	; (8009520 <Prog_Config+0xac4>)
 8009396:	801a      	strh	r2, [r3, #0]

		  printf("->Tiempo p/Reintentar: %d \r\n", V_TPO_REINT);
 8009398:	4b61      	ldr	r3, [pc, #388]	; (8009520 <Prog_Config+0xac4>)
 800939a:	881b      	ldrh	r3, [r3, #0]
 800939c:	4619      	mov	r1, r3
 800939e:	4861      	ldr	r0, [pc, #388]	; (8009524 <Prog_Config+0xac8>)
 80093a0:	f006 fbd8 	bl	800fb54 <iprintf>
		  printf("\r\n");
 80093a4:	4860      	ldr	r0, [pc, #384]	; (8009528 <Prog_Config+0xacc>)
 80093a6:	f006 fc5b 	bl	800fc60 <puts>
		  Flag_06_Rx = 0;
 80093aa:	4b60      	ldr	r3, [pc, #384]	; (800952c <Prog_Config+0xad0>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	701a      	strb	r2, [r3, #0]

		  //----------------------------------------------
		  printf("\r\n");
 80093b0:	485d      	ldr	r0, [pc, #372]	; (8009528 <Prog_Config+0xacc>)
 80093b2:	f006 fc55 	bl	800fc60 <puts>
		  printf("\r\n");
 80093b6:	485c      	ldr	r0, [pc, #368]	; (8009528 <Prog_Config+0xacc>)
 80093b8:	f006 fc52 	bl	800fc60 <puts>
		  printf("* PROGRAMANDO LA FLASH !! *\r\n");
 80093bc:	485c      	ldr	r0, [pc, #368]	; (8009530 <Prog_Config+0xad4>)
 80093be:	f006 fc4f 	bl	800fc60 <puts>
		  printf("\r\n");
 80093c2:	4859      	ldr	r0, [pc, #356]	; (8009528 <Prog_Config+0xacc>)
 80093c4:	f006 fc4c 	bl	800fc60 <puts>
		  printf("\r\n");
 80093c8:	4857      	ldr	r0, [pc, #348]	; (8009528 <Prog_Config+0xacc>)
 80093ca:	f006 fc49 	bl	800fc60 <puts>
		  HAL_Delay (1500);    //Grabando
 80093ce:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80093d2:	f001 f883 	bl	800a4dc <HAL_Delay>

		  //----------------------------------------------
		  printf("***************************\r\n");
 80093d6:	4857      	ldr	r0, [pc, #348]	; (8009534 <Prog_Config+0xad8>)
 80093d8:	f006 fc42 	bl	800fc60 <puts>
		  printf("* DIGICOM - RTUCTRL7_V01  *\r\n");
 80093dc:	4856      	ldr	r0, [pc, #344]	; (8009538 <Prog_Config+0xadc>)
 80093de:	f006 fc3f 	bl	800fc60 <puts>
		  printf("***************************\r\n");
 80093e2:	4854      	ldr	r0, [pc, #336]	; (8009534 <Prog_Config+0xad8>)
 80093e4:	f006 fc3c 	bl	800fc60 <puts>
		  printf("****** CONFIGURACION ******\r\n");
 80093e8:	4854      	ldr	r0, [pc, #336]	; (800953c <Prog_Config+0xae0>)
 80093ea:	f006 fc39 	bl	800fc60 <puts>
		  printf("  ID    : %d \r\n", V_ID);
 80093ee:	4b54      	ldr	r3, [pc, #336]	; (8009540 <Prog_Config+0xae4>)
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	4619      	mov	r1, r3
 80093f4:	4853      	ldr	r0, [pc, #332]	; (8009544 <Prog_Config+0xae8>)
 80093f6:	f006 fbad 	bl	800fb54 <iprintf>
		  printf("  MASTER: %d \r\n", V_MASTER);
 80093fa:	4b53      	ldr	r3, [pc, #332]	; (8009548 <Prog_Config+0xaec>)
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	4619      	mov	r1, r3
 8009400:	4852      	ldr	r0, [pc, #328]	; (800954c <Prog_Config+0xaf0>)
 8009402:	f006 fba7 	bl	800fb54 <iprintf>
		  printf("  BAUD_SCADA: %d \r\n", V_BAUD_SCADA);
 8009406:	4b52      	ldr	r3, [pc, #328]	; (8009550 <Prog_Config+0xaf4>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	4619      	mov	r1, r3
 800940c:	4851      	ldr	r0, [pc, #324]	; (8009554 <Prog_Config+0xaf8>)
 800940e:	f006 fba1 	bl	800fb54 <iprintf>
		  printf("  BAUD_REC/MED: %d \r\n", V_BAUD_REC_MED);
 8009412:	4b51      	ldr	r3, [pc, #324]	; (8009558 <Prog_Config+0xafc>)
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	4619      	mov	r1, r3
 8009418:	4850      	ldr	r0, [pc, #320]	; (800955c <Prog_Config+0xb00>)
 800941a:	f006 fb9b 	bl	800fb54 <iprintf>
		  printf("  Cant_REC: %d \r\n", V_CANT_DISP_R);
 800941e:	4b50      	ldr	r3, [pc, #320]	; (8009560 <Prog_Config+0xb04>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	4619      	mov	r1, r3
 8009424:	484f      	ldr	r0, [pc, #316]	; (8009564 <Prog_Config+0xb08>)
 8009426:	f006 fb95 	bl	800fb54 <iprintf>
		  printf("  Cant_MED: %d \r\n", V_CANT_DISP_M);
 800942a:	4b4f      	ldr	r3, [pc, #316]	; (8009568 <Prog_Config+0xb0c>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	4619      	mov	r1, r3
 8009430:	484e      	ldr	r0, [pc, #312]	; (800956c <Prog_Config+0xb10>)
 8009432:	f006 fb8f 	bl	800fb54 <iprintf>
		  printf("  UR: %d \r\n", V_UR);
 8009436:	4b4e      	ldr	r3, [pc, #312]	; (8009570 <Prog_Config+0xb14>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	4619      	mov	r1, r3
 800943c:	484d      	ldr	r0, [pc, #308]	; (8009574 <Prog_Config+0xb18>)
 800943e:	f006 fb89 	bl	800fb54 <iprintf>
		  printf("  Reintentos: %d \r\n", V_REINT);
 8009442:	4b4d      	ldr	r3, [pc, #308]	; (8009578 <Prog_Config+0xb1c>)
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	4619      	mov	r1, r3
 8009448:	484c      	ldr	r0, [pc, #304]	; (800957c <Prog_Config+0xb20>)
 800944a:	f006 fb83 	bl	800fb54 <iprintf>
		  printf("  Tiempo p/Reintentar: %d \r\n", V_TPO_REINT);
 800944e:	4b34      	ldr	r3, [pc, #208]	; (8009520 <Prog_Config+0xac4>)
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	4619      	mov	r1, r3
 8009454:	484a      	ldr	r0, [pc, #296]	; (8009580 <Prog_Config+0xb24>)
 8009456:	f006 fb7d 	bl	800fb54 <iprintf>
		  printf("***************************\r\n");
 800945a:	4836      	ldr	r0, [pc, #216]	; (8009534 <Prog_Config+0xad8>)
 800945c:	f006 fc00 	bl	800fc60 <puts>
		  printf("* SW3=OFF   y  ->RESET uC *\r\n");
 8009460:	4848      	ldr	r0, [pc, #288]	; (8009584 <Prog_Config+0xb28>)
 8009462:	f006 fbfd 	bl	800fc60 <puts>
		  printf("***************************\r\n");
 8009466:	4833      	ldr	r0, [pc, #204]	; (8009534 <Prog_Config+0xad8>)
 8009468:	f006 fbfa 	bl	800fc60 <puts>

		  Buffer_Config[0] = V_ID & 255; //L
 800946c:	4b34      	ldr	r3, [pc, #208]	; (8009540 <Prog_Config+0xae4>)
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	b2da      	uxtb	r2, r3
 8009472:	4b45      	ldr	r3, [pc, #276]	; (8009588 <Prog_Config+0xb2c>)
 8009474:	701a      	strb	r2, [r3, #0]
		  Buffer_Config[1] = V_ID / 256; //H
 8009476:	4b32      	ldr	r3, [pc, #200]	; (8009540 <Prog_Config+0xae4>)
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	0a1b      	lsrs	r3, r3, #8
 800947c:	b29b      	uxth	r3, r3
 800947e:	b2da      	uxtb	r2, r3
 8009480:	4b41      	ldr	r3, [pc, #260]	; (8009588 <Prog_Config+0xb2c>)
 8009482:	705a      	strb	r2, [r3, #1]
		  Buffer_Config[2] = V_MASTER & 255; //L
 8009484:	4b30      	ldr	r3, [pc, #192]	; (8009548 <Prog_Config+0xaec>)
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	b2da      	uxtb	r2, r3
 800948a:	4b3f      	ldr	r3, [pc, #252]	; (8009588 <Prog_Config+0xb2c>)
 800948c:	709a      	strb	r2, [r3, #2]
		  Buffer_Config[3] = V_MASTER / 256; //L
 800948e:	4b2e      	ldr	r3, [pc, #184]	; (8009548 <Prog_Config+0xaec>)
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	0a1b      	lsrs	r3, r3, #8
 8009494:	b29b      	uxth	r3, r3
 8009496:	b2da      	uxtb	r2, r3
 8009498:	4b3b      	ldr	r3, [pc, #236]	; (8009588 <Prog_Config+0xb2c>)
 800949a:	70da      	strb	r2, [r3, #3]
		  Buffer_Config[4] = V_BAUD_SCADA;
 800949c:	4b2c      	ldr	r3, [pc, #176]	; (8009550 <Prog_Config+0xaf4>)
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	4b39      	ldr	r3, [pc, #228]	; (8009588 <Prog_Config+0xb2c>)
 80094a2:	711a      	strb	r2, [r3, #4]
		  Buffer_Config[5] = V_BAUD_REC_MED;
 80094a4:	4b2c      	ldr	r3, [pc, #176]	; (8009558 <Prog_Config+0xafc>)
 80094a6:	781a      	ldrb	r2, [r3, #0]
 80094a8:	4b37      	ldr	r3, [pc, #220]	; (8009588 <Prog_Config+0xb2c>)
 80094aa:	715a      	strb	r2, [r3, #5]
		  Buffer_Config[6] = V_CANT_DISP_R;
 80094ac:	4b2c      	ldr	r3, [pc, #176]	; (8009560 <Prog_Config+0xb04>)
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	4b35      	ldr	r3, [pc, #212]	; (8009588 <Prog_Config+0xb2c>)
 80094b2:	719a      	strb	r2, [r3, #6]
		  Buffer_Config[7] = V_CANT_DISP_M;
 80094b4:	4b2c      	ldr	r3, [pc, #176]	; (8009568 <Prog_Config+0xb0c>)
 80094b6:	781a      	ldrb	r2, [r3, #0]
 80094b8:	4b33      	ldr	r3, [pc, #204]	; (8009588 <Prog_Config+0xb2c>)
 80094ba:	71da      	strb	r2, [r3, #7]
		  Buffer_Config[8] = V_UR;
 80094bc:	4b2c      	ldr	r3, [pc, #176]	; (8009570 <Prog_Config+0xb14>)
 80094be:	781a      	ldrb	r2, [r3, #0]
 80094c0:	4b31      	ldr	r3, [pc, #196]	; (8009588 <Prog_Config+0xb2c>)
 80094c2:	721a      	strb	r2, [r3, #8]
		  Buffer_Config[9] = V_REINT;
 80094c4:	4b2c      	ldr	r3, [pc, #176]	; (8009578 <Prog_Config+0xb1c>)
 80094c6:	781a      	ldrb	r2, [r3, #0]
 80094c8:	4b2f      	ldr	r3, [pc, #188]	; (8009588 <Prog_Config+0xb2c>)
 80094ca:	725a      	strb	r2, [r3, #9]
		  Buffer_Config[10] = V_TPO_REINT & 255; //L
 80094cc:	4b14      	ldr	r3, [pc, #80]	; (8009520 <Prog_Config+0xac4>)
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	4b2d      	ldr	r3, [pc, #180]	; (8009588 <Prog_Config+0xb2c>)
 80094d4:	729a      	strb	r2, [r3, #10]
		  Buffer_Config[11] = V_TPO_REINT / 256; //H
 80094d6:	4b12      	ldr	r3, [pc, #72]	; (8009520 <Prog_Config+0xac4>)
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	0a1b      	lsrs	r3, r3, #8
 80094dc:	b29b      	uxth	r3, r3
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	4b29      	ldr	r3, [pc, #164]	; (8009588 <Prog_Config+0xb2c>)
 80094e2:	72da      	strb	r2, [r3, #11]
		  Buffer_Config[12] = 128; //H
 80094e4:	4b28      	ldr	r3, [pc, #160]	; (8009588 <Prog_Config+0xb2c>)
 80094e6:	2280      	movs	r2, #128	; 0x80
 80094e8:	731a      	strb	r2, [r3, #12]

		  MY_FLASH_SetSectorAddrs (6, 0x08080000);  // [0x08080000 - 0x080BFFF] --> 256 Kbytes
 80094ea:	4928      	ldr	r1, [pc, #160]	; (800958c <Prog_Config+0xb30>)
 80094ec:	2006      	movs	r0, #6
 80094ee:	f7f7 fe63 	bl	80011b8 <MY_FLASH_SetSectorAddrs>
		  MY_FLASH_WriteN(0, Buffer_Config, sizeof(Buffer_Config), DATA_TYPE_8);  //Bytes
 80094f2:	2300      	movs	r3, #0
 80094f4:	220d      	movs	r2, #13
 80094f6:	4924      	ldr	r1, [pc, #144]	; (8009588 <Prog_Config+0xb2c>)
 80094f8:	2000      	movs	r0, #0
 80094fa:	f7f7 fe73 	bl	80011e4 <MY_FLASH_WriteN>

		  while(2)
			  {
			  	  HAL_Delay(1000);
 80094fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009502:	f000 ffeb 	bl	800a4dc <HAL_Delay>
 8009506:	e7fa      	b.n	80094fe <Prog_Config+0xaa2>
 8009508:	20000002 	.word	0x20000002
 800950c:	20000004 	.word	0x20000004
 8009510:	20000006 	.word	0x20000006
 8009514:	20000008 	.word	0x20000008
 8009518:	20008130 	.word	0x20008130
 800951c:	20000000 	.word	0x20000000
 8009520:	20000010 	.word	0x20000010
 8009524:	08011db0 	.word	0x08011db0
 8009528:	08011b78 	.word	0x08011b78
 800952c:	2000c130 	.word	0x2000c130
 8009530:	08011dd0 	.word	0x08011dd0
 8009534:	08011a44 	.word	0x08011a44
 8009538:	08011a64 	.word	0x08011a64
 800953c:	08011a84 	.word	0x08011a84
 8009540:	2000000a 	.word	0x2000000a
 8009544:	08011aa4 	.word	0x08011aa4
 8009548:	2000000c 	.word	0x2000000c
 800954c:	08011ab4 	.word	0x08011ab4
 8009550:	2000092a 	.word	0x2000092a
 8009554:	08011ac4 	.word	0x08011ac4
 8009558:	2000092b 	.word	0x2000092b
 800955c:	08011ad8 	.word	0x08011ad8
 8009560:	2000000e 	.word	0x2000000e
 8009564:	08011af0 	.word	0x08011af0
 8009568:	2000092c 	.word	0x2000092c
 800956c:	08011b04 	.word	0x08011b04
 8009570:	2000092d 	.word	0x2000092d
 8009574:	08011b18 	.word	0x08011b18
 8009578:	2000000f 	.word	0x2000000f
 800957c:	08011b24 	.word	0x08011b24
 8009580:	08011b38 	.word	0x08011b38
 8009584:	08011df0 	.word	0x08011df0
 8009588:	20000910 	.word	0x20000910
 800958c:	08080000 	.word	0x08080000

08009590 <__io_putchar>:

//=========================================================================================
//  PRINTF (UART 6)
//=========================================================================================
PUTCHAR_PROTOTYPE
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
 8009598:	1d39      	adds	r1, r7, #4
 800959a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800959e:	2201      	movs	r2, #1
 80095a0:	4803      	ldr	r0, [pc, #12]	; (80095b0 <__io_putchar+0x20>)
 80095a2:	f004 ff83 	bl	800e4ac <HAL_UART_Transmit>

  return ch;
 80095a6:	687b      	ldr	r3, [r7, #4]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000528 	.word	0x20000528

080095b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80095b4:	b480      	push	{r7}
 80095b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80095b8:	b672      	cpsid	i
}
 80095ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80095bc:	e7fe      	b.n	80095bc <Error_Handler+0x8>
	...

080095c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80095c6:	4b0f      	ldr	r3, [pc, #60]	; (8009604 <HAL_MspInit+0x44>)
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	4a0e      	ldr	r2, [pc, #56]	; (8009604 <HAL_MspInit+0x44>)
 80095cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095d0:	6413      	str	r3, [r2, #64]	; 0x40
 80095d2:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <HAL_MspInit+0x44>)
 80095d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095da:	607b      	str	r3, [r7, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095de:	4b09      	ldr	r3, [pc, #36]	; (8009604 <HAL_MspInit+0x44>)
 80095e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e2:	4a08      	ldr	r2, [pc, #32]	; (8009604 <HAL_MspInit+0x44>)
 80095e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095e8:	6453      	str	r3, [r2, #68]	; 0x44
 80095ea:	4b06      	ldr	r3, [pc, #24]	; (8009604 <HAL_MspInit+0x44>)
 80095ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095f2:	603b      	str	r3, [r7, #0]
 80095f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	40023800 	.word	0x40023800

08009608 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b08a      	sub	sp, #40	; 0x28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009610:	f107 0314 	add.w	r3, r7, #20
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	605a      	str	r2, [r3, #4]
 800961a:	609a      	str	r2, [r3, #8]
 800961c:	60da      	str	r2, [r3, #12]
 800961e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a15      	ldr	r2, [pc, #84]	; (800967c <HAL_ADC_MspInit+0x74>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d123      	bne.n	8009672 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800962a:	4b15      	ldr	r3, [pc, #84]	; (8009680 <HAL_ADC_MspInit+0x78>)
 800962c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800962e:	4a14      	ldr	r2, [pc, #80]	; (8009680 <HAL_ADC_MspInit+0x78>)
 8009630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009634:	6453      	str	r3, [r2, #68]	; 0x44
 8009636:	4b12      	ldr	r3, [pc, #72]	; (8009680 <HAL_ADC_MspInit+0x78>)
 8009638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800963e:	613b      	str	r3, [r7, #16]
 8009640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009642:	4b0f      	ldr	r3, [pc, #60]	; (8009680 <HAL_ADC_MspInit+0x78>)
 8009644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009646:	4a0e      	ldr	r2, [pc, #56]	; (8009680 <HAL_ADC_MspInit+0x78>)
 8009648:	f043 0301 	orr.w	r3, r3, #1
 800964c:	6313      	str	r3, [r2, #48]	; 0x30
 800964e:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <HAL_ADC_MspInit+0x78>)
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800965a:	2308      	movs	r3, #8
 800965c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800965e:	2303      	movs	r3, #3
 8009660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009662:	2300      	movs	r3, #0
 8009664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009666:	f107 0314 	add.w	r3, r7, #20
 800966a:	4619      	mov	r1, r3
 800966c:	4805      	ldr	r0, [pc, #20]	; (8009684 <HAL_ADC_MspInit+0x7c>)
 800966e:	f002 fae5 	bl	800bc3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8009672:	bf00      	nop
 8009674:	3728      	adds	r7, #40	; 0x28
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	40012000 	.word	0x40012000
 8009680:	40023800 	.word	0x40023800
 8009684:	40020000 	.word	0x40020000

08009688 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a0a      	ldr	r2, [pc, #40]	; (80096c0 <HAL_CRC_MspInit+0x38>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d10b      	bne.n	80096b2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800969a:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <HAL_CRC_MspInit+0x3c>)
 800969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969e:	4a09      	ldr	r2, [pc, #36]	; (80096c4 <HAL_CRC_MspInit+0x3c>)
 80096a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80096a4:	6313      	str	r3, [r2, #48]	; 0x30
 80096a6:	4b07      	ldr	r3, [pc, #28]	; (80096c4 <HAL_CRC_MspInit+0x3c>)
 80096a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096ae:	60fb      	str	r3, [r7, #12]
 80096b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80096b2:	bf00      	nop
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	40023000 	.word	0x40023000
 80096c4:	40023800 	.word	0x40023800

080096c8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b0a4      	sub	sp, #144	; 0x90
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80096d0:	f107 030c 	add.w	r3, r7, #12
 80096d4:	2284      	movs	r2, #132	; 0x84
 80096d6:	2100      	movs	r1, #0
 80096d8:	4618      	mov	r0, r3
 80096da:	f006 fa33 	bl	800fb44 <memset>
  if(hrng->Instance==RNG)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a18      	ldr	r2, [pc, #96]	; (8009744 <HAL_RNG_MspInit+0x7c>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d128      	bne.n	800973a <HAL_RNG_MspInit+0x72>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80096e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80096ee:	23c0      	movs	r3, #192	; 0xc0
 80096f0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80096f2:	2302      	movs	r3, #2
 80096f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80096f6:	2302      	movs	r3, #2
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80096fa:	2301      	movs	r3, #1
 80096fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80096fe:	2301      	movs	r3, #1
 8009700:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8009702:	2300      	movs	r3, #0
 8009704:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8009706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800970a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800970e:	f107 030c 	add.w	r3, r7, #12
 8009712:	4618      	mov	r0, r3
 8009714:	f003 f9b4 	bl	800ca80 <HAL_RCCEx_PeriphCLKConfig>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <HAL_RNG_MspInit+0x5a>
    {
      Error_Handler();
 800971e:	f7ff ff49 	bl	80095b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8009722:	4b09      	ldr	r3, [pc, #36]	; (8009748 <HAL_RNG_MspInit+0x80>)
 8009724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009726:	4a08      	ldr	r2, [pc, #32]	; (8009748 <HAL_RNG_MspInit+0x80>)
 8009728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800972c:	6353      	str	r3, [r2, #52]	; 0x34
 800972e:	4b06      	ldr	r3, [pc, #24]	; (8009748 <HAL_RNG_MspInit+0x80>)
 8009730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009736:	60bb      	str	r3, [r7, #8]
 8009738:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800973a:	bf00      	nop
 800973c:	3790      	adds	r7, #144	; 0x90
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	50060800 	.word	0x50060800
 8009748:	40023800 	.word	0x40023800

0800974c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b0a4      	sub	sp, #144	; 0x90
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009754:	f107 030c 	add.w	r3, r7, #12
 8009758:	2284      	movs	r2, #132	; 0x84
 800975a:	2100      	movs	r1, #0
 800975c:	4618      	mov	r0, r3
 800975e:	f006 f9f1 	bl	800fb44 <memset>
  if(hrtc->Instance==RTC)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a0e      	ldr	r2, [pc, #56]	; (80097a0 <HAL_RTC_MspInit+0x54>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d114      	bne.n	8009796 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800976c:	2320      	movs	r3, #32
 800976e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009774:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009776:	f107 030c 	add.w	r3, r7, #12
 800977a:	4618      	mov	r0, r3
 800977c:	f003 f980 	bl	800ca80 <HAL_RCCEx_PeriphCLKConfig>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8009786:	f7ff ff15 	bl	80095b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <HAL_RTC_MspInit+0x58>)
 800978c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978e:	4a05      	ldr	r2, [pc, #20]	; (80097a4 <HAL_RTC_MspInit+0x58>)
 8009790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009794:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8009796:	bf00      	nop
 8009798:	3790      	adds	r7, #144	; 0x90
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	40002800 	.word	0x40002800
 80097a4:	40023800 	.word	0x40023800

080097a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a34      	ldr	r2, [pc, #208]	; (8009888 <HAL_TIM_Base_MspInit+0xe0>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d114      	bne.n	80097e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80097ba:	4b34      	ldr	r3, [pc, #208]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 80097bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097be:	4a33      	ldr	r2, [pc, #204]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 80097c0:	f043 0301 	orr.w	r3, r3, #1
 80097c4:	6453      	str	r3, [r2, #68]	; 0x44
 80097c6:	4b31      	ldr	r3, [pc, #196]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 80097c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
 80097d0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80097d2:	2200      	movs	r2, #0
 80097d4:	2100      	movs	r1, #0
 80097d6:	2019      	movs	r0, #25
 80097d8:	f001 faef 	bl	800adba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80097dc:	2019      	movs	r0, #25
 80097de:	f001 fb08 	bl	800adf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80097e2:	e04c      	b.n	800987e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a29      	ldr	r2, [pc, #164]	; (8009890 <HAL_TIM_Base_MspInit+0xe8>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d114      	bne.n	8009818 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80097ee:	4b27      	ldr	r3, [pc, #156]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 80097f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f2:	4a26      	ldr	r2, [pc, #152]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 80097f4:	f043 0310 	orr.w	r3, r3, #16
 80097f8:	6413      	str	r3, [r2, #64]	; 0x40
 80097fa:	4b24      	ldr	r3, [pc, #144]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 80097fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fe:	f003 0310 	and.w	r3, r3, #16
 8009802:	613b      	str	r3, [r7, #16]
 8009804:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8009806:	2200      	movs	r2, #0
 8009808:	2100      	movs	r1, #0
 800980a:	2036      	movs	r0, #54	; 0x36
 800980c:	f001 fad5 	bl	800adba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009810:	2036      	movs	r0, #54	; 0x36
 8009812:	f001 faee 	bl	800adf2 <HAL_NVIC_EnableIRQ>
}
 8009816:	e032      	b.n	800987e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a1d      	ldr	r2, [pc, #116]	; (8009894 <HAL_TIM_Base_MspInit+0xec>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d114      	bne.n	800984c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009822:	4b1a      	ldr	r3, [pc, #104]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 8009824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009826:	4a19      	ldr	r2, [pc, #100]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 8009828:	f043 0320 	orr.w	r3, r3, #32
 800982c:	6413      	str	r3, [r2, #64]	; 0x40
 800982e:	4b17      	ldr	r3, [pc, #92]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	f003 0320 	and.w	r3, r3, #32
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800983a:	2200      	movs	r2, #0
 800983c:	2100      	movs	r1, #0
 800983e:	2037      	movs	r0, #55	; 0x37
 8009840:	f001 fabb 	bl	800adba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009844:	2037      	movs	r0, #55	; 0x37
 8009846:	f001 fad4 	bl	800adf2 <HAL_NVIC_EnableIRQ>
}
 800984a:	e018      	b.n	800987e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a11      	ldr	r2, [pc, #68]	; (8009898 <HAL_TIM_Base_MspInit+0xf0>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d113      	bne.n	800987e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009856:	4b0d      	ldr	r3, [pc, #52]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 8009858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800985a:	4a0c      	ldr	r2, [pc, #48]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 800985c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009860:	6453      	str	r3, [r2, #68]	; 0x44
 8009862:	4b0a      	ldr	r3, [pc, #40]	; (800988c <HAL_TIM_Base_MspInit+0xe4>)
 8009864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800986a:	60bb      	str	r3, [r7, #8]
 800986c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800986e:	2200      	movs	r2, #0
 8009870:	2100      	movs	r1, #0
 8009872:	2019      	movs	r0, #25
 8009874:	f001 faa1 	bl	800adba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009878:	2019      	movs	r0, #25
 800987a:	f001 faba 	bl	800adf2 <HAL_NVIC_EnableIRQ>
}
 800987e:	bf00      	nop
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	40010000 	.word	0x40010000
 800988c:	40023800 	.word	0x40023800
 8009890:	40001000 	.word	0x40001000
 8009894:	40001400 	.word	0x40001400
 8009898:	40014400 	.word	0x40014400

0800989c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b0b6      	sub	sp, #216	; 0xd8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80098a8:	2200      	movs	r2, #0
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	605a      	str	r2, [r3, #4]
 80098ae:	609a      	str	r2, [r3, #8]
 80098b0:	60da      	str	r2, [r3, #12]
 80098b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80098b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80098b8:	2284      	movs	r2, #132	; 0x84
 80098ba:	2100      	movs	r1, #0
 80098bc:	4618      	mov	r0, r3
 80098be:	f006 f941 	bl	800fb44 <memset>
  if(huart->Instance==UART4)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a87      	ldr	r2, [pc, #540]	; (8009ae4 <HAL_UART_MspInit+0x248>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	f040 80c6 	bne.w	8009a5a <HAL_UART_MspInit+0x1be>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80098ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098d2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80098d4:	2300      	movs	r3, #0
 80098d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80098da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80098de:	4618      	mov	r0, r3
 80098e0:	f003 f8ce 	bl	800ca80 <HAL_RCCEx_PeriphCLKConfig>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <HAL_UART_MspInit+0x52>
    {
      Error_Handler();
 80098ea:	f7ff fe63 	bl	80095b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80098ee:	4b7e      	ldr	r3, [pc, #504]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 80098f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f2:	4a7d      	ldr	r2, [pc, #500]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 80098f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098f8:	6413      	str	r3, [r2, #64]	; 0x40
 80098fa:	4b7b      	ldr	r3, [pc, #492]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 80098fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009906:	4b78      	ldr	r3, [pc, #480]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 8009908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990a:	4a77      	ldr	r2, [pc, #476]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 800990c:	f043 0301 	orr.w	r3, r3, #1
 8009910:	6313      	str	r3, [r2, #48]	; 0x30
 8009912:	4b75      	ldr	r3, [pc, #468]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 8009914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	63bb      	str	r3, [r7, #56]	; 0x38
 800991c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800991e:	4b72      	ldr	r3, [pc, #456]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	4a71      	ldr	r2, [pc, #452]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 8009924:	f043 0304 	orr.w	r3, r3, #4
 8009928:	6313      	str	r3, [r2, #48]	; 0x30
 800992a:	4b6f      	ldr	r3, [pc, #444]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 800992c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992e:	f003 0304 	and.w	r3, r3, #4
 8009932:	637b      	str	r3, [r7, #52]	; 0x34
 8009934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA15     ------> UART4_DE
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8009936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800993a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800993e:	2302      	movs	r3, #2
 8009940:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009944:	2300      	movs	r3, #0
 8009946:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800994a:	2303      	movs	r3, #3
 800994c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8009950:	2308      	movs	r3, #8
 8009952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009956:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800995a:	4619      	mov	r1, r3
 800995c:	4863      	ldr	r0, [pc, #396]	; (8009aec <HAL_UART_MspInit+0x250>)
 800995e:	f002 f96d 	bl	800bc3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009962:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800996a:	2302      	movs	r3, #2
 800996c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009970:	2300      	movs	r3, #0
 8009972:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009976:	2303      	movs	r3, #3
 8009978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800997c:	2308      	movs	r3, #8
 800997e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009982:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009986:	4619      	mov	r1, r3
 8009988:	4859      	ldr	r0, [pc, #356]	; (8009af0 <HAL_UART_MspInit+0x254>)
 800998a:	f002 f957 	bl	800bc3c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800998e:	4b59      	ldr	r3, [pc, #356]	; (8009af4 <HAL_UART_MspInit+0x258>)
 8009990:	4a59      	ldr	r2, [pc, #356]	; (8009af8 <HAL_UART_MspInit+0x25c>)
 8009992:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8009994:	4b57      	ldr	r3, [pc, #348]	; (8009af4 <HAL_UART_MspInit+0x258>)
 8009996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800999a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800999c:	4b55      	ldr	r3, [pc, #340]	; (8009af4 <HAL_UART_MspInit+0x258>)
 800999e:	2200      	movs	r2, #0
 80099a0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80099a2:	4b54      	ldr	r3, [pc, #336]	; (8009af4 <HAL_UART_MspInit+0x258>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80099a8:	4b52      	ldr	r3, [pc, #328]	; (8009af4 <HAL_UART_MspInit+0x258>)
 80099aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099ae:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80099b0:	4b50      	ldr	r3, [pc, #320]	; (8009af4 <HAL_UART_MspInit+0x258>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80099b6:	4b4f      	ldr	r3, [pc, #316]	; (8009af4 <HAL_UART_MspInit+0x258>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80099bc:	4b4d      	ldr	r3, [pc, #308]	; (8009af4 <HAL_UART_MspInit+0x258>)
 80099be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099c2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80099c4:	4b4b      	ldr	r3, [pc, #300]	; (8009af4 <HAL_UART_MspInit+0x258>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80099ca:	4b4a      	ldr	r3, [pc, #296]	; (8009af4 <HAL_UART_MspInit+0x258>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80099d0:	4848      	ldr	r0, [pc, #288]	; (8009af4 <HAL_UART_MspInit+0x258>)
 80099d2:	f001 fb13 	bl	800affc <HAL_DMA_Init>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 80099dc:	f7ff fdea 	bl	80095b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a44      	ldr	r2, [pc, #272]	; (8009af4 <HAL_UART_MspInit+0x258>)
 80099e4:	675a      	str	r2, [r3, #116]	; 0x74
 80099e6:	4a43      	ldr	r2, [pc, #268]	; (8009af4 <HAL_UART_MspInit+0x258>)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80099ec:	4b43      	ldr	r3, [pc, #268]	; (8009afc <HAL_UART_MspInit+0x260>)
 80099ee:	4a44      	ldr	r2, [pc, #272]	; (8009b00 <HAL_UART_MspInit+0x264>)
 80099f0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80099f2:	4b42      	ldr	r3, [pc, #264]	; (8009afc <HAL_UART_MspInit+0x260>)
 80099f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80099f8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80099fa:	4b40      	ldr	r3, [pc, #256]	; (8009afc <HAL_UART_MspInit+0x260>)
 80099fc:	2240      	movs	r2, #64	; 0x40
 80099fe:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a00:	4b3e      	ldr	r3, [pc, #248]	; (8009afc <HAL_UART_MspInit+0x260>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009a06:	4b3d      	ldr	r3, [pc, #244]	; (8009afc <HAL_UART_MspInit+0x260>)
 8009a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a0c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a0e:	4b3b      	ldr	r3, [pc, #236]	; (8009afc <HAL_UART_MspInit+0x260>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a14:	4b39      	ldr	r3, [pc, #228]	; (8009afc <HAL_UART_MspInit+0x260>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8009a1a:	4b38      	ldr	r3, [pc, #224]	; (8009afc <HAL_UART_MspInit+0x260>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009a20:	4b36      	ldr	r3, [pc, #216]	; (8009afc <HAL_UART_MspInit+0x260>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009a26:	4b35      	ldr	r3, [pc, #212]	; (8009afc <HAL_UART_MspInit+0x260>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8009a2c:	4833      	ldr	r0, [pc, #204]	; (8009afc <HAL_UART_MspInit+0x260>)
 8009a2e:	f001 fae5 	bl	800affc <HAL_DMA_Init>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <HAL_UART_MspInit+0x1a0>
    {
      Error_Handler();
 8009a38:	f7ff fdbc 	bl	80095b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a2f      	ldr	r2, [pc, #188]	; (8009afc <HAL_UART_MspInit+0x260>)
 8009a40:	671a      	str	r2, [r3, #112]	; 0x70
 8009a42:	4a2e      	ldr	r2, [pc, #184]	; (8009afc <HAL_UART_MspInit+0x260>)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8009a48:	2200      	movs	r2, #0
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	2034      	movs	r0, #52	; 0x34
 8009a4e:	f001 f9b4 	bl	800adba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8009a52:	2034      	movs	r0, #52	; 0x34
 8009a54:	f001 f9cd 	bl	800adf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8009a58:	e2e4      	b.n	800a024 <HAL_UART_MspInit+0x788>
  else if(huart->Instance==UART7)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a29      	ldr	r2, [pc, #164]	; (8009b04 <HAL_UART_MspInit+0x268>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d153      	bne.n	8009b0c <HAL_UART_MspInit+0x270>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8009a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a68:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a74:	4618      	mov	r0, r3
 8009a76:	f003 f803 	bl	800ca80 <HAL_RCCEx_PeriphCLKConfig>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 8009a80:	f7ff fd98 	bl	80095b4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8009a84:	4b18      	ldr	r3, [pc, #96]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 8009a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a88:	4a17      	ldr	r2, [pc, #92]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 8009a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8009a90:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 8009a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a98:	633b      	str	r3, [r7, #48]	; 0x30
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009a9c:	4b12      	ldr	r3, [pc, #72]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 8009a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa0:	4a11      	ldr	r2, [pc, #68]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 8009aa2:	f043 0310 	orr.w	r3, r3, #16
 8009aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8009aa8:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <HAL_UART_MspInit+0x24c>)
 8009aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aac:	f003 0310 	and.w	r3, r3, #16
 8009ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8009ab4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009ab8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009abc:	2302      	movs	r3, #2
 8009abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8009ace:	2308      	movs	r3, #8
 8009ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009ad4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009ad8:	4619      	mov	r1, r3
 8009ada:	480b      	ldr	r0, [pc, #44]	; (8009b08 <HAL_UART_MspInit+0x26c>)
 8009adc:	f002 f8ae 	bl	800bc3c <HAL_GPIO_Init>
}
 8009ae0:	e2a0      	b.n	800a024 <HAL_UART_MspInit+0x788>
 8009ae2:	bf00      	nop
 8009ae4:	40004c00 	.word	0x40004c00
 8009ae8:	40023800 	.word	0x40023800
 8009aec:	40020000 	.word	0x40020000
 8009af0:	40020800 	.word	0x40020800
 8009af4:	200005b0 	.word	0x200005b0
 8009af8:	40026040 	.word	0x40026040
 8009afc:	20000610 	.word	0x20000610
 8009b00:	40026070 	.word	0x40026070
 8009b04:	40007800 	.word	0x40007800
 8009b08:	40021000 	.word	0x40021000
  else if(huart->Instance==UART8)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a90      	ldr	r2, [pc, #576]	; (8009d54 <HAL_UART_MspInit+0x4b8>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	f040 80a3 	bne.w	8009c5e <HAL_UART_MspInit+0x3c2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8009b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b1c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009b24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f002 ffa9 	bl	800ca80 <HAL_RCCEx_PeriphCLKConfig>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <HAL_UART_MspInit+0x29c>
      Error_Handler();
 8009b34:	f7ff fd3e 	bl	80095b4 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8009b38:	4b87      	ldr	r3, [pc, #540]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3c:	4a86      	ldr	r2, [pc, #536]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b42:	6413      	str	r3, [r2, #64]	; 0x40
 8009b44:	4b84      	ldr	r3, [pc, #528]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009b50:	4b81      	ldr	r3, [pc, #516]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b54:	4a80      	ldr	r2, [pc, #512]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009b56:	f043 0310 	orr.w	r3, r3, #16
 8009b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8009b5c:	4b7e      	ldr	r3, [pc, #504]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b60:	f003 0310 	and.w	r3, r3, #16
 8009b64:	627b      	str	r3, [r7, #36]	; 0x24
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b6e:	2302      	movs	r3, #2
 8009b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b74:	2300      	movs	r3, #0
 8009b76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8009b80:	2308      	movs	r3, #8
 8009b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009b86:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4873      	ldr	r0, [pc, #460]	; (8009d5c <HAL_UART_MspInit+0x4c0>)
 8009b8e:	f002 f855 	bl	800bc3c <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8009b92:	4b73      	ldr	r3, [pc, #460]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009b94:	4a73      	ldr	r2, [pc, #460]	; (8009d64 <HAL_UART_MspInit+0x4c8>)
 8009b96:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8009b98:	4b71      	ldr	r3, [pc, #452]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009b9a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8009b9e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009ba0:	4b6f      	ldr	r3, [pc, #444]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ba6:	4b6e      	ldr	r3, [pc, #440]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009bac:	4b6c      	ldr	r3, [pc, #432]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bb2:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009bb4:	4b6a      	ldr	r3, [pc, #424]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009bba:	4b69      	ldr	r3, [pc, #420]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8009bc0:	4b67      	ldr	r3, [pc, #412]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bc6:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009bc8:	4b65      	ldr	r3, [pc, #404]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009bce:	4b64      	ldr	r3, [pc, #400]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8009bd4:	4862      	ldr	r0, [pc, #392]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009bd6:	f001 fa11 	bl	800affc <HAL_DMA_Init>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8009be0:	f7ff fce8 	bl	80095b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a5e      	ldr	r2, [pc, #376]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009be8:	675a      	str	r2, [r3, #116]	; 0x74
 8009bea:	4a5d      	ldr	r2, [pc, #372]	; (8009d60 <HAL_UART_MspInit+0x4c4>)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream0;
 8009bf0:	4b5d      	ldr	r3, [pc, #372]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009bf2:	4a5e      	ldr	r2, [pc, #376]	; (8009d6c <HAL_UART_MspInit+0x4d0>)
 8009bf4:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Channel = DMA_CHANNEL_5;
 8009bf6:	4b5c      	ldr	r3, [pc, #368]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009bf8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8009bfc:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009bfe:	4b5a      	ldr	r3, [pc, #360]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009c00:	2240      	movs	r2, #64	; 0x40
 8009c02:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c04:	4b58      	ldr	r3, [pc, #352]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009c0a:	4b57      	ldr	r3, [pc, #348]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c10:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c12:	4b55      	ldr	r3, [pc, #340]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c18:	4b53      	ldr	r3, [pc, #332]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8009c1e:	4b52      	ldr	r3, [pc, #328]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009c24:	4b50      	ldr	r3, [pc, #320]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c2a:	4b4f      	ldr	r3, [pc, #316]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8009c30:	484d      	ldr	r0, [pc, #308]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009c32:	f001 f9e3 	bl	800affc <HAL_DMA_Init>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8009c3c:	f7ff fcba 	bl	80095b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a49      	ldr	r2, [pc, #292]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009c44:	671a      	str	r2, [r3, #112]	; 0x70
 8009c46:	4a48      	ldr	r2, [pc, #288]	; (8009d68 <HAL_UART_MspInit+0x4cc>)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2100      	movs	r1, #0
 8009c50:	2053      	movs	r0, #83	; 0x53
 8009c52:	f001 f8b2 	bl	800adba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8009c56:	2053      	movs	r0, #83	; 0x53
 8009c58:	f001 f8cb 	bl	800adf2 <HAL_NVIC_EnableIRQ>
}
 8009c5c:	e1e2      	b.n	800a024 <HAL_UART_MspInit+0x788>
  else if(huart->Instance==USART2)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a43      	ldr	r2, [pc, #268]	; (8009d70 <HAL_UART_MspInit+0x4d4>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	f040 808b 	bne.w	8009d80 <HAL_UART_MspInit+0x4e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009c6a:	2380      	movs	r3, #128	; 0x80
 8009c6c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009c74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f002 ff01 	bl	800ca80 <HAL_RCCEx_PeriphCLKConfig>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <HAL_UART_MspInit+0x3ec>
      Error_Handler();
 8009c84:	f7ff fc96 	bl	80095b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009c88:	4b33      	ldr	r3, [pc, #204]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8c:	4a32      	ldr	r2, [pc, #200]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c92:	6413      	str	r3, [r2, #64]	; 0x40
 8009c94:	4b30      	ldr	r3, [pc, #192]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c9c:	623b      	str	r3, [r7, #32]
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009ca0:	4b2d      	ldr	r3, [pc, #180]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca4:	4a2c      	ldr	r2, [pc, #176]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009ca6:	f043 0308 	orr.w	r3, r3, #8
 8009caa:	6313      	str	r3, [r2, #48]	; 0x30
 8009cac:	4b2a      	ldr	r3, [pc, #168]	; (8009d58 <HAL_UART_MspInit+0x4bc>)
 8009cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	61fb      	str	r3, [r7, #28]
 8009cb6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009cb8:	2360      	movs	r3, #96	; 0x60
 8009cba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009cd0:	2307      	movs	r3, #7
 8009cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009cd6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4825      	ldr	r0, [pc, #148]	; (8009d74 <HAL_UART_MspInit+0x4d8>)
 8009cde:	f001 ffad 	bl	800bc3c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009ce2:	4b25      	ldr	r3, [pc, #148]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009ce4:	4a25      	ldr	r2, [pc, #148]	; (8009d7c <HAL_UART_MspInit+0x4e0>)
 8009ce6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8009ce8:	4b23      	ldr	r3, [pc, #140]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009cea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009cee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009cf0:	4b21      	ldr	r3, [pc, #132]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009cf6:	4b20      	ldr	r3, [pc, #128]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009cfc:	4b1e      	ldr	r3, [pc, #120]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d02:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d04:	4b1c      	ldr	r3, [pc, #112]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d0a:	4b1b      	ldr	r3, [pc, #108]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8009d10:	4b19      	ldr	r3, [pc, #100]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d16:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009d18:	4b17      	ldr	r3, [pc, #92]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009d1e:	4b16      	ldr	r3, [pc, #88]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009d24:	4814      	ldr	r0, [pc, #80]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009d26:	f001 f969 	bl	800affc <HAL_DMA_Init>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <HAL_UART_MspInit+0x498>
      Error_Handler();
 8009d30:	f7ff fc40 	bl	80095b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a10      	ldr	r2, [pc, #64]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009d38:	675a      	str	r2, [r3, #116]	; 0x74
 8009d3a:	4a0f      	ldr	r2, [pc, #60]	; (8009d78 <HAL_UART_MspInit+0x4dc>)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009d40:	2200      	movs	r2, #0
 8009d42:	2100      	movs	r1, #0
 8009d44:	2026      	movs	r0, #38	; 0x26
 8009d46:	f001 f838 	bl	800adba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009d4a:	2026      	movs	r0, #38	; 0x26
 8009d4c:	f001 f851 	bl	800adf2 <HAL_NVIC_EnableIRQ>
}
 8009d50:	e168      	b.n	800a024 <HAL_UART_MspInit+0x788>
 8009d52:	bf00      	nop
 8009d54:	40007c00 	.word	0x40007c00
 8009d58:	40023800 	.word	0x40023800
 8009d5c:	40021000 	.word	0x40021000
 8009d60:	20000670 	.word	0x20000670
 8009d64:	400260a0 	.word	0x400260a0
 8009d68:	200006d0 	.word	0x200006d0
 8009d6c:	40026010 	.word	0x40026010
 8009d70:	40004400 	.word	0x40004400
 8009d74:	40020c00 	.word	0x40020c00
 8009d78:	20000730 	.word	0x20000730
 8009d7c:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4aa9      	ldr	r2, [pc, #676]	; (800a02c <HAL_UART_MspInit+0x790>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	f040 80a4 	bne.w	8009ed4 <HAL_UART_MspInit+0x638>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8009d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d90:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009d92:	2300      	movs	r3, #0
 8009d94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009d98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f002 fe6f 	bl	800ca80 <HAL_RCCEx_PeriphCLKConfig>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <HAL_UART_MspInit+0x510>
      Error_Handler();
 8009da8:	f7ff fc04 	bl	80095b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009dac:	4ba0      	ldr	r3, [pc, #640]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db0:	4a9f      	ldr	r2, [pc, #636]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009db6:	6413      	str	r3, [r2, #64]	; 0x40
 8009db8:	4b9d      	ldr	r3, [pc, #628]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dc0:	61bb      	str	r3, [r7, #24]
 8009dc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009dc4:	4b9a      	ldr	r3, [pc, #616]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc8:	4a99      	ldr	r2, [pc, #612]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009dca:	f043 0308 	orr.w	r3, r3, #8
 8009dce:	6313      	str	r3, [r2, #48]	; 0x30
 8009dd0:	4b97      	ldr	r3, [pc, #604]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd4:	f003 0308 	and.w	r3, r3, #8
 8009dd8:	617b      	str	r3, [r7, #20]
 8009dda:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009ddc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009de4:	2302      	movs	r3, #2
 8009de6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009df0:	2303      	movs	r3, #3
 8009df2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009df6:	2307      	movs	r3, #7
 8009df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009dfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009e00:	4619      	mov	r1, r3
 8009e02:	488c      	ldr	r0, [pc, #560]	; (800a034 <HAL_UART_MspInit+0x798>)
 8009e04:	f001 ff1a 	bl	800bc3c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8009e08:	4b8b      	ldr	r3, [pc, #556]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e0a:	4a8c      	ldr	r2, [pc, #560]	; (800a03c <HAL_UART_MspInit+0x7a0>)
 8009e0c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8009e0e:	4b8a      	ldr	r3, [pc, #552]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e14:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e16:	4b88      	ldr	r3, [pc, #544]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e1c:	4b86      	ldr	r3, [pc, #536]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009e22:	4b85      	ldr	r3, [pc, #532]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e28:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e2a:	4b83      	ldr	r3, [pc, #524]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e30:	4b81      	ldr	r3, [pc, #516]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8009e36:	4b80      	ldr	r3, [pc, #512]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e3c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009e3e:	4b7e      	ldr	r3, [pc, #504]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009e44:	4b7c      	ldr	r3, [pc, #496]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8009e4a:	487b      	ldr	r0, [pc, #492]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e4c:	f001 f8d6 	bl	800affc <HAL_DMA_Init>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <HAL_UART_MspInit+0x5be>
      Error_Handler();
 8009e56:	f7ff fbad 	bl	80095b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a76      	ldr	r2, [pc, #472]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e5e:	675a      	str	r2, [r3, #116]	; 0x74
 8009e60:	4a75      	ldr	r2, [pc, #468]	; (800a038 <HAL_UART_MspInit+0x79c>)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8009e66:	4b76      	ldr	r3, [pc, #472]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009e68:	4a76      	ldr	r2, [pc, #472]	; (800a044 <HAL_UART_MspInit+0x7a8>)
 8009e6a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8009e6c:	4b74      	ldr	r3, [pc, #464]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e72:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e74:	4b72      	ldr	r3, [pc, #456]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009e76:	2240      	movs	r2, #64	; 0x40
 8009e78:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e7a:	4b71      	ldr	r3, [pc, #452]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009e80:	4b6f      	ldr	r3, [pc, #444]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009e82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e86:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e88:	4b6d      	ldr	r3, [pc, #436]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e8e:	4b6c      	ldr	r3, [pc, #432]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8009e94:	4b6a      	ldr	r3, [pc, #424]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009e9a:	4b69      	ldr	r3, [pc, #420]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009ea0:	4b67      	ldr	r3, [pc, #412]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8009ea6:	4866      	ldr	r0, [pc, #408]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009ea8:	f001 f8a8 	bl	800affc <HAL_DMA_Init>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <HAL_UART_MspInit+0x61a>
      Error_Handler();
 8009eb2:	f7ff fb7f 	bl	80095b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a61      	ldr	r2, [pc, #388]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009eba:	671a      	str	r2, [r3, #112]	; 0x70
 8009ebc:	4a60      	ldr	r2, [pc, #384]	; (800a040 <HAL_UART_MspInit+0x7a4>)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	2027      	movs	r0, #39	; 0x27
 8009ec8:	f000 ff77 	bl	800adba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8009ecc:	2027      	movs	r0, #39	; 0x27
 8009ece:	f000 ff90 	bl	800adf2 <HAL_NVIC_EnableIRQ>
}
 8009ed2:	e0a7      	b.n	800a024 <HAL_UART_MspInit+0x788>
  else if(huart->Instance==USART6)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a5b      	ldr	r2, [pc, #364]	; (800a048 <HAL_UART_MspInit+0x7ac>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	f040 80a2 	bne.w	800a024 <HAL_UART_MspInit+0x788>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8009ee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ee4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009eec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f002 fdc5 	bl	800ca80 <HAL_RCCEx_PeriphCLKConfig>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <HAL_UART_MspInit+0x664>
      Error_Handler();
 8009efc:	f7ff fb5a 	bl	80095b4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8009f00:	4b4b      	ldr	r3, [pc, #300]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f04:	4a4a      	ldr	r2, [pc, #296]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009f06:	f043 0320 	orr.w	r3, r3, #32
 8009f0a:	6453      	str	r3, [r2, #68]	; 0x44
 8009f0c:	4b48      	ldr	r3, [pc, #288]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f10:	f003 0320 	and.w	r3, r3, #32
 8009f14:	613b      	str	r3, [r7, #16]
 8009f16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f18:	4b45      	ldr	r3, [pc, #276]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1c:	4a44      	ldr	r2, [pc, #272]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009f1e:	f043 0304 	orr.w	r3, r3, #4
 8009f22:	6313      	str	r3, [r2, #48]	; 0x30
 8009f24:	4b42      	ldr	r3, [pc, #264]	; (800a030 <HAL_UART_MspInit+0x794>)
 8009f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009f30:	23c0      	movs	r3, #192	; 0xc0
 8009f32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f36:	2302      	movs	r3, #2
 8009f38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f42:	2303      	movs	r3, #3
 8009f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009f48:	2308      	movs	r3, #8
 8009f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f4e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009f52:	4619      	mov	r1, r3
 8009f54:	483d      	ldr	r0, [pc, #244]	; (800a04c <HAL_UART_MspInit+0x7b0>)
 8009f56:	f001 fe71 	bl	800bc3c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8009f5a:	4b3d      	ldr	r3, [pc, #244]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009f5c:	4a3d      	ldr	r2, [pc, #244]	; (800a054 <HAL_UART_MspInit+0x7b8>)
 8009f5e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8009f60:	4b3b      	ldr	r3, [pc, #236]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009f62:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8009f66:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009f68:	4b39      	ldr	r3, [pc, #228]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f6e:	4b38      	ldr	r3, [pc, #224]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009f74:	4b36      	ldr	r3, [pc, #216]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f7a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f7c:	4b34      	ldr	r3, [pc, #208]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f82:	4b33      	ldr	r3, [pc, #204]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8009f88:	4b31      	ldr	r3, [pc, #196]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f8e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009f90:	4b2f      	ldr	r3, [pc, #188]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009f96:	4b2e      	ldr	r3, [pc, #184]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8009f9c:	482c      	ldr	r0, [pc, #176]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009f9e:	f001 f82d 	bl	800affc <HAL_DMA_Init>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <HAL_UART_MspInit+0x710>
      Error_Handler();
 8009fa8:	f7ff fb04 	bl	80095b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a28      	ldr	r2, [pc, #160]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009fb0:	675a      	str	r2, [r3, #116]	; 0x74
 8009fb2:	4a27      	ldr	r2, [pc, #156]	; (800a050 <HAL_UART_MspInit+0x7b4>)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8009fb8:	4b27      	ldr	r3, [pc, #156]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 8009fba:	4a28      	ldr	r2, [pc, #160]	; (800a05c <HAL_UART_MspInit+0x7c0>)
 8009fbc:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8009fbe:	4b26      	ldr	r3, [pc, #152]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 8009fc0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8009fc4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009fc6:	4b24      	ldr	r3, [pc, #144]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 8009fc8:	2240      	movs	r2, #64	; 0x40
 8009fca:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009fcc:	4b22      	ldr	r3, [pc, #136]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009fd2:	4b21      	ldr	r3, [pc, #132]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 8009fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009fd8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009fda:	4b1f      	ldr	r3, [pc, #124]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009fe0:	4b1d      	ldr	r3, [pc, #116]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8009fe6:	4b1c      	ldr	r3, [pc, #112]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009fec:	4b1a      	ldr	r3, [pc, #104]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009ff2:	4b19      	ldr	r3, [pc, #100]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8009ff8:	4817      	ldr	r0, [pc, #92]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 8009ffa:	f000 ffff 	bl	800affc <HAL_DMA_Init>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <HAL_UART_MspInit+0x76c>
      Error_Handler();
 800a004:	f7ff fad6 	bl	80095b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a13      	ldr	r2, [pc, #76]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 800a00c:	671a      	str	r2, [r3, #112]	; 0x70
 800a00e:	4a12      	ldr	r2, [pc, #72]	; (800a058 <HAL_UART_MspInit+0x7bc>)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800a014:	2200      	movs	r2, #0
 800a016:	2100      	movs	r1, #0
 800a018:	2047      	movs	r0, #71	; 0x47
 800a01a:	f000 fece 	bl	800adba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a01e:	2047      	movs	r0, #71	; 0x47
 800a020:	f000 fee7 	bl	800adf2 <HAL_NVIC_EnableIRQ>
}
 800a024:	bf00      	nop
 800a026:	37d8      	adds	r7, #216	; 0xd8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	40004800 	.word	0x40004800
 800a030:	40023800 	.word	0x40023800
 800a034:	40020c00 	.word	0x40020c00
 800a038:	20000790 	.word	0x20000790
 800a03c:	40026028 	.word	0x40026028
 800a040:	200007f0 	.word	0x200007f0
 800a044:	40026058 	.word	0x40026058
 800a048:	40011400 	.word	0x40011400
 800a04c:	40020800 	.word	0x40020800
 800a050:	20000850 	.word	0x20000850
 800a054:	40026428 	.word	0x40026428
 800a058:	200008b0 	.word	0x200008b0
 800a05c:	400264a0 	.word	0x400264a0

0800a060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a060:	b480      	push	{r7}
 800a062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a064:	e7fe      	b.n	800a064 <NMI_Handler+0x4>

0800a066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a066:	b480      	push	{r7}
 800a068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a06a:	e7fe      	b.n	800a06a <HardFault_Handler+0x4>

0800a06c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a070:	e7fe      	b.n	800a070 <MemManage_Handler+0x4>

0800a072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a072:	b480      	push	{r7}
 800a074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a076:	e7fe      	b.n	800a076 <BusFault_Handler+0x4>

0800a078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a078:	b480      	push	{r7}
 800a07a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a07c:	e7fe      	b.n	800a07c <UsageFault_Handler+0x4>

0800a07e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a07e:	b480      	push	{r7}
 800a080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a082:	bf00      	nop
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a08c:	b480      	push	{r7}
 800a08e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a090:	bf00      	nop
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a09a:	b480      	push	{r7}
 800a09c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a09e:	bf00      	nop
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a0ac:	f000 f9f6 	bl	800a49c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a0b0:	bf00      	nop
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 800a0b8:	4802      	ldr	r0, [pc, #8]	; (800a0c4 <DMA1_Stream0_IRQHandler+0x10>)
 800a0ba:	f001 f93f 	bl	800b33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800a0be:	bf00      	nop
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	200006d0 	.word	0x200006d0

0800a0c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800a0cc:	4802      	ldr	r0, [pc, #8]	; (800a0d8 <DMA1_Stream1_IRQHandler+0x10>)
 800a0ce:	f001 f935 	bl	800b33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800a0d2:	bf00      	nop
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	20000790 	.word	0x20000790

0800a0dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800a0e0:	4802      	ldr	r0, [pc, #8]	; (800a0ec <DMA1_Stream2_IRQHandler+0x10>)
 800a0e2:	f001 f92b 	bl	800b33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800a0e6:	bf00      	nop
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	200005b0 	.word	0x200005b0

0800a0f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800a0f4:	4802      	ldr	r0, [pc, #8]	; (800a100 <DMA1_Stream3_IRQHandler+0x10>)
 800a0f6:	f001 f921 	bl	800b33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800a0fa:	bf00      	nop
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	200007f0 	.word	0x200007f0

0800a104 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800a108:	4802      	ldr	r0, [pc, #8]	; (800a114 <DMA1_Stream4_IRQHandler+0x10>)
 800a10a:	f001 f917 	bl	800b33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800a10e:	bf00      	nop
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20000610 	.word	0x20000610

0800a118 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800a11c:	4802      	ldr	r0, [pc, #8]	; (800a128 <DMA1_Stream5_IRQHandler+0x10>)
 800a11e:	f001 f90d 	bl	800b33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800a122:	bf00      	nop
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20000730 	.word	0x20000730

0800a12c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800a130:	4802      	ldr	r0, [pc, #8]	; (800a13c <DMA1_Stream6_IRQHandler+0x10>)
 800a132:	f001 f903 	bl	800b33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800a136:	bf00      	nop
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000670 	.word	0x20000670

0800a140 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a144:	4803      	ldr	r0, [pc, #12]	; (800a154 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800a146:	f003 fd6b 	bl	800dc20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800a14a:	4803      	ldr	r0, [pc, #12]	; (800a158 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800a14c:	f003 fd68 	bl	800dc20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a150:	bf00      	nop
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20000150 	.word	0x20000150
 800a158:	20000234 	.word	0x20000234

0800a15c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a160:	4807      	ldr	r0, [pc, #28]	; (800a180 <USART2_IRQHandler+0x24>)
 800a162:	f004 fafd 	bl	800e760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 800a166:	4b06      	ldr	r3, [pc, #24]	; (800a180 <USART2_IRQHandler+0x24>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	f003 0310 	and.w	r3, r3, #16
 800a170:	2b10      	cmp	r3, #16
 800a172:	d102      	bne.n	800a17a <USART2_IRQHandler+0x1e>
  {
	  HAL_UART_RxCpltCallback(&huart2);
 800a174:	4802      	ldr	r0, [pc, #8]	; (800a180 <USART2_IRQHandler+0x24>)
 800a176:	f7f8 fbab 	bl	80028d0 <HAL_UART_RxCpltCallback>
  }

  /* USER CODE END USART2_IRQn 1 */
}
 800a17a:	bf00      	nop
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	20000418 	.word	0x20000418

0800a184 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800a188:	4807      	ldr	r0, [pc, #28]	; (800a1a8 <USART3_IRQHandler+0x24>)
 800a18a:	f004 fae9 	bl	800e760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))
 800a18e:	4b06      	ldr	r3, [pc, #24]	; (800a1a8 <USART3_IRQHandler+0x24>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69db      	ldr	r3, [r3, #28]
 800a194:	f003 0310 	and.w	r3, r3, #16
 800a198:	2b10      	cmp	r3, #16
 800a19a:	d102      	bne.n	800a1a2 <USART3_IRQHandler+0x1e>
  {
	  HAL_UART_RxCpltCallback(&huart3);
 800a19c:	4802      	ldr	r0, [pc, #8]	; (800a1a8 <USART3_IRQHandler+0x24>)
 800a19e:	f7f8 fb97 	bl	80028d0 <HAL_UART_RxCpltCallback>
  }

  /* USER CODE END USART3_IRQn 1 */
}
 800a1a2:	bf00      	nop
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200004a0 	.word	0x200004a0

0800a1ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800a1b0:	4803      	ldr	r0, [pc, #12]	; (800a1c0 <UART4_IRQHandler+0x14>)
 800a1b2:	f004 fad5 	bl	800e760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  {
	  HAL_UART_RxCpltCallback(&huart4);
 800a1b6:	4802      	ldr	r0, [pc, #8]	; (800a1c0 <UART4_IRQHandler+0x14>)
 800a1b8:	f7f8 fb8a 	bl	80028d0 <HAL_UART_RxCpltCallback>
  }

  /* USER CODE END UART4_IRQn 1 */
}
 800a1bc:	bf00      	nop
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	20000280 	.word	0x20000280

0800a1c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a1c8:	4802      	ldr	r0, [pc, #8]	; (800a1d4 <TIM6_DAC_IRQHandler+0x10>)
 800a1ca:	f003 fd29 	bl	800dc20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a1ce:	bf00      	nop
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	2000019c 	.word	0x2000019c

0800a1d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a1dc:	4802      	ldr	r0, [pc, #8]	; (800a1e8 <TIM7_IRQHandler+0x10>)
 800a1de:	f003 fd1f 	bl	800dc20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800a1e2:	bf00      	nop
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	200001e8 	.word	0x200001e8

0800a1ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800a1f0:	4802      	ldr	r0, [pc, #8]	; (800a1fc <DMA2_Stream1_IRQHandler+0x10>)
 800a1f2:	f001 f8a3 	bl	800b33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800a1f6:	bf00      	nop
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000850 	.word	0x20000850

0800a200 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800a204:	4802      	ldr	r0, [pc, #8]	; (800a210 <DMA2_Stream6_IRQHandler+0x10>)
 800a206:	f001 f899 	bl	800b33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800a20a:	bf00      	nop
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	200008b0 	.word	0x200008b0

0800a214 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800a218:	4807      	ldr	r0, [pc, #28]	; (800a238 <USART6_IRQHandler+0x24>)
 800a21a:	f004 faa1 	bl	800e760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))
 800a21e:	4b06      	ldr	r3, [pc, #24]	; (800a238 <USART6_IRQHandler+0x24>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	f003 0310 	and.w	r3, r3, #16
 800a228:	2b10      	cmp	r3, #16
 800a22a:	d102      	bne.n	800a232 <USART6_IRQHandler+0x1e>
  {
	  HAL_UART_RxCpltCallback(&huart6);
 800a22c:	4802      	ldr	r0, [pc, #8]	; (800a238 <USART6_IRQHandler+0x24>)
 800a22e:	f7f8 fb4f 	bl	80028d0 <HAL_UART_RxCpltCallback>
  }

  /* USER CODE END USART6_IRQn 1 */
}
 800a232:	bf00      	nop
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000528 	.word	0x20000528

0800a23c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800a240:	4807      	ldr	r0, [pc, #28]	; (800a260 <UART8_IRQHandler+0x24>)
 800a242:	f004 fa8d 	bl	800e760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE))
 800a246:	4b06      	ldr	r3, [pc, #24]	; (800a260 <UART8_IRQHandler+0x24>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	f003 0310 	and.w	r3, r3, #16
 800a250:	2b10      	cmp	r3, #16
 800a252:	d102      	bne.n	800a25a <UART8_IRQHandler+0x1e>
  {
	  HAL_UART_RxCpltCallback(&huart8);
 800a254:	4802      	ldr	r0, [pc, #8]	; (800a260 <UART8_IRQHandler+0x24>)
 800a256:	f7f8 fb3b 	bl	80028d0 <HAL_UART_RxCpltCallback>
  }

  /* USER CODE END UART8_IRQn 1 */
}
 800a25a:	bf00      	nop
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	20000390 	.word	0x20000390

0800a264 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a270:	2300      	movs	r3, #0
 800a272:	617b      	str	r3, [r7, #20]
 800a274:	e00a      	b.n	800a28c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a276:	f3af 8000 	nop.w
 800a27a:	4601      	mov	r1, r0
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	1c5a      	adds	r2, r3, #1
 800a280:	60ba      	str	r2, [r7, #8]
 800a282:	b2ca      	uxtb	r2, r1
 800a284:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	3301      	adds	r3, #1
 800a28a:	617b      	str	r3, [r7, #20]
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	429a      	cmp	r2, r3
 800a292:	dbf0      	blt.n	800a276 <_read+0x12>
	}

return len;
 800a294:	687b      	ldr	r3, [r7, #4]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b086      	sub	sp, #24
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	617b      	str	r3, [r7, #20]
 800a2ae:	e009      	b.n	800a2c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	1c5a      	adds	r2, r3, #1
 800a2b4:	60ba      	str	r2, [r7, #8]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff f969 	bl	8009590 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	dbf1      	blt.n	800a2b0 <_write+0x12>
	}
	return len;
 800a2cc:	687b      	ldr	r3, [r7, #4]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <_close>:

int _close(int file)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
	return -1;
 800a2de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a2fe:	605a      	str	r2, [r3, #4]
	return 0;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <_isatty>:

int _isatty(int file)
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
	return 1;
 800a316:	2301      	movs	r3, #1
}
 800a318:	4618      	mov	r0, r3
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
	return 0;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
	...

0800a340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a348:	4a14      	ldr	r2, [pc, #80]	; (800a39c <_sbrk+0x5c>)
 800a34a:	4b15      	ldr	r3, [pc, #84]	; (800a3a0 <_sbrk+0x60>)
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a354:	4b13      	ldr	r3, [pc, #76]	; (800a3a4 <_sbrk+0x64>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d102      	bne.n	800a362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a35c:	4b11      	ldr	r3, [pc, #68]	; (800a3a4 <_sbrk+0x64>)
 800a35e:	4a12      	ldr	r2, [pc, #72]	; (800a3a8 <_sbrk+0x68>)
 800a360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a362:	4b10      	ldr	r3, [pc, #64]	; (800a3a4 <_sbrk+0x64>)
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4413      	add	r3, r2
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d207      	bcs.n	800a380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a370:	f005 fbb0 	bl	800fad4 <__errno>
 800a374:	4603      	mov	r3, r0
 800a376:	220c      	movs	r2, #12
 800a378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a37a:	f04f 33ff 	mov.w	r3, #4294967295
 800a37e:	e009      	b.n	800a394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a380:	4b08      	ldr	r3, [pc, #32]	; (800a3a4 <_sbrk+0x64>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a386:	4b07      	ldr	r3, [pc, #28]	; (800a3a4 <_sbrk+0x64>)
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	4a05      	ldr	r2, [pc, #20]	; (800a3a4 <_sbrk+0x64>)
 800a390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a392:	68fb      	ldr	r3, [r7, #12]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3718      	adds	r7, #24
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	20050000 	.word	0x20050000
 800a3a0:	00004000 	.word	0x00004000
 800a3a4:	2000c6cc 	.word	0x2000c6cc
 800a3a8:	2000c700 	.word	0x2000c700

0800a3ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a3b0:	4b06      	ldr	r3, [pc, #24]	; (800a3cc <SystemInit+0x20>)
 800a3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b6:	4a05      	ldr	r2, [pc, #20]	; (800a3cc <SystemInit+0x20>)
 800a3b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a3c0:	bf00      	nop
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	e000ed00 	.word	0xe000ed00

0800a3d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a3d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a408 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a3d4:	480d      	ldr	r0, [pc, #52]	; (800a40c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a3d6:	490e      	ldr	r1, [pc, #56]	; (800a410 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a3d8:	4a0e      	ldr	r2, [pc, #56]	; (800a414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a3da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a3dc:	e002      	b.n	800a3e4 <LoopCopyDataInit>

0800a3de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a3de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a3e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a3e2:	3304      	adds	r3, #4

0800a3e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a3e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a3e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a3e8:	d3f9      	bcc.n	800a3de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a3ea:	4a0b      	ldr	r2, [pc, #44]	; (800a418 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a3ec:	4c0b      	ldr	r4, [pc, #44]	; (800a41c <LoopFillZerobss+0x26>)
  movs r3, #0
 800a3ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a3f0:	e001      	b.n	800a3f6 <LoopFillZerobss>

0800a3f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a3f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a3f4:	3204      	adds	r2, #4

0800a3f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a3f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a3f8:	d3fb      	bcc.n	800a3f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a3fa:	f7ff ffd7 	bl	800a3ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a3fe:	f005 fb6f 	bl	800fae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a402:	f7f7 f849 	bl	8001498 <main>
  bx  lr    
 800a406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a408:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800a40c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a410:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800a414:	08011f08 	.word	0x08011f08
  ldr r2, =_sbss
 800a418:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800a41c:	2000c700 	.word	0x2000c700

0800a420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a420:	e7fe      	b.n	800a420 <ADC_IRQHandler>

0800a422 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a426:	2003      	movs	r0, #3
 800a428:	f000 fcbc 	bl	800ada4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a42c:	2000      	movs	r0, #0
 800a42e:	f000 f805 	bl	800a43c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a432:	f7ff f8c5 	bl	80095c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a444:	4b12      	ldr	r3, [pc, #72]	; (800a490 <HAL_InitTick+0x54>)
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	4b12      	ldr	r3, [pc, #72]	; (800a494 <HAL_InitTick+0x58>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	4619      	mov	r1, r3
 800a44e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a452:	fbb3 f3f1 	udiv	r3, r3, r1
 800a456:	fbb2 f3f3 	udiv	r3, r2, r3
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 fcd7 	bl	800ae0e <HAL_SYSTICK_Config>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e00e      	b.n	800a488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b0f      	cmp	r3, #15
 800a46e:	d80a      	bhi.n	800a486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a470:	2200      	movs	r2, #0
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	f04f 30ff 	mov.w	r0, #4294967295
 800a478:	f000 fc9f 	bl	800adba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a47c:	4a06      	ldr	r2, [pc, #24]	; (800a498 <HAL_InitTick+0x5c>)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	e000      	b.n	800a488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	2000001c 	.word	0x2000001c
 800a494:	20000024 	.word	0x20000024
 800a498:	20000020 	.word	0x20000020

0800a49c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a4a0:	4b06      	ldr	r3, [pc, #24]	; (800a4bc <HAL_IncTick+0x20>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	4b06      	ldr	r3, [pc, #24]	; (800a4c0 <HAL_IncTick+0x24>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	4a04      	ldr	r2, [pc, #16]	; (800a4c0 <HAL_IncTick+0x24>)
 800a4ae:	6013      	str	r3, [r2, #0]
}
 800a4b0:	bf00      	nop
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	20000024 	.word	0x20000024
 800a4c0:	2000c6d0 	.word	0x2000c6d0

0800a4c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	af00      	add	r7, sp, #0
  return uwTick;
 800a4c8:	4b03      	ldr	r3, [pc, #12]	; (800a4d8 <HAL_GetTick+0x14>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	2000c6d0 	.word	0x2000c6d0

0800a4dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a4e4:	f7ff ffee 	bl	800a4c4 <HAL_GetTick>
 800a4e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f4:	d005      	beq.n	800a502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <HAL_Delay+0x44>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4413      	add	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a502:	bf00      	nop
 800a504:	f7ff ffde 	bl	800a4c4 <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	429a      	cmp	r2, r3
 800a512:	d8f7      	bhi.n	800a504 <HAL_Delay+0x28>
  {
  }
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	20000024 	.word	0x20000024

0800a524 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e031      	b.n	800a59e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff f860 	bl	8009608 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55a:	f003 0310 	and.w	r3, r3, #16
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d116      	bne.n	800a590 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a566:	4b10      	ldr	r3, [pc, #64]	; (800a5a8 <HAL_ADC_Init+0x84>)
 800a568:	4013      	ands	r3, r2
 800a56a:	f043 0202 	orr.w	r2, r3, #2
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fa4c 	bl	800aa10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	f023 0303 	bic.w	r3, r3, #3
 800a586:	f043 0201 	orr.w	r2, r3, #1
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	641a      	str	r2, [r3, #64]	; 0x40
 800a58e:	e001      	b.n	800a594 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	ffffeefd 	.word	0xffffeefd

0800a5ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d101      	bne.n	800a5c6 <HAL_ADC_Start+0x1a>
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	e0ad      	b.n	800a722 <HAL_ADC_Start+0x176>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d018      	beq.n	800a60e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f042 0201 	orr.w	r2, r2, #1
 800a5ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800a5ec:	4b50      	ldr	r3, [pc, #320]	; (800a730 <HAL_ADC_Start+0x184>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a50      	ldr	r2, [pc, #320]	; (800a734 <HAL_ADC_Start+0x188>)
 800a5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f6:	0c9a      	lsrs	r2, r3, #18
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	4413      	add	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a600:	e002      	b.n	800a608 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3b01      	subs	r3, #1
 800a606:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1f9      	bne.n	800a602 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	f003 0301 	and.w	r3, r3, #1
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d175      	bne.n	800a708 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a620:	4b45      	ldr	r3, [pc, #276]	; (800a738 <HAL_ADC_Start+0x18c>)
 800a622:	4013      	ands	r3, r2
 800a624:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a636:	2b00      	cmp	r3, #0
 800a638:	d007      	beq.n	800a64a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a642:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a656:	d106      	bne.n	800a666 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a65c:	f023 0206 	bic.w	r2, r3, #6
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	645a      	str	r2, [r3, #68]	; 0x44
 800a664:	e002      	b.n	800a66c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a67c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800a67e:	4b2f      	ldr	r3, [pc, #188]	; (800a73c <HAL_ADC_Start+0x190>)
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	f003 031f 	and.w	r3, r3, #31
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10f      	bne.n	800a6aa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d143      	bne.n	800a720 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a6a6:	609a      	str	r2, [r3, #8]
 800a6a8:	e03a      	b.n	800a720 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a24      	ldr	r2, [pc, #144]	; (800a740 <HAL_ADC_Start+0x194>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d10e      	bne.n	800a6d2 <HAL_ADC_Start+0x126>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d107      	bne.n	800a6d2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689a      	ldr	r2, [r3, #8]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a6d0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800a6d2:	4b1a      	ldr	r3, [pc, #104]	; (800a73c <HAL_ADC_Start+0x190>)
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	f003 0310 	and.w	r3, r3, #16
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d120      	bne.n	800a720 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a18      	ldr	r2, [pc, #96]	; (800a744 <HAL_ADC_Start+0x198>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d11b      	bne.n	800a720 <HAL_ADC_Start+0x174>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d114      	bne.n	800a720 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a704:	609a      	str	r2, [r3, #8]
 800a706:	e00b      	b.n	800a720 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70c:	f043 0210 	orr.w	r2, r3, #16
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a718:	f043 0201 	orr.w	r2, r3, #1
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	2000001c 	.word	0x2000001c
 800a734:	431bde83 	.word	0x431bde83
 800a738:	fffff8fe 	.word	0xfffff8fe
 800a73c:	40012300 	.word	0x40012300
 800a740:	40012000 	.word	0x40012000
 800a744:	40012200 	.word	0x40012200

0800a748 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800a756:	4618      	mov	r0, r3
 800a758:	370c      	adds	r7, #12
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
	...

0800a764 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d101      	bne.n	800a780 <HAL_ADC_ConfigChannel+0x1c>
 800a77c:	2302      	movs	r3, #2
 800a77e:	e136      	b.n	800a9ee <HAL_ADC_ConfigChannel+0x28a>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b09      	cmp	r3, #9
 800a78e:	d93a      	bls.n	800a806 <HAL_ADC_ConfigChannel+0xa2>
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a798:	d035      	beq.n	800a806 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68d9      	ldr	r1, [r3, #12]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	005b      	lsls	r3, r3, #1
 800a7ac:	4413      	add	r3, r2
 800a7ae:	3b1e      	subs	r3, #30
 800a7b0:	2207      	movs	r2, #7
 800a7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b6:	43da      	mvns	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	400a      	ands	r2, r1
 800a7be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a8d      	ldr	r2, [pc, #564]	; (800a9fc <HAL_ADC_ConfigChannel+0x298>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d10a      	bne.n	800a7e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68d9      	ldr	r1, [r3, #12]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	061a      	lsls	r2, r3, #24
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	430a      	orrs	r2, r1
 800a7dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a7de:	e035      	b.n	800a84c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68d9      	ldr	r1, [r3, #12]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	689a      	ldr	r2, [r3, #8]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	4403      	add	r3, r0
 800a7f8:	3b1e      	subs	r3, #30
 800a7fa:	409a      	lsls	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	430a      	orrs	r2, r1
 800a802:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a804:	e022      	b.n	800a84c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6919      	ldr	r1, [r3, #16]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	b29b      	uxth	r3, r3
 800a812:	461a      	mov	r2, r3
 800a814:	4613      	mov	r3, r2
 800a816:	005b      	lsls	r3, r3, #1
 800a818:	4413      	add	r3, r2
 800a81a:	2207      	movs	r2, #7
 800a81c:	fa02 f303 	lsl.w	r3, r2, r3
 800a820:	43da      	mvns	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	400a      	ands	r2, r1
 800a828:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6919      	ldr	r1, [r3, #16]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	689a      	ldr	r2, [r3, #8]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	b29b      	uxth	r3, r3
 800a83a:	4618      	mov	r0, r3
 800a83c:	4603      	mov	r3, r0
 800a83e:	005b      	lsls	r3, r3, #1
 800a840:	4403      	add	r3, r0
 800a842:	409a      	lsls	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	430a      	orrs	r2, r1
 800a84a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	2b06      	cmp	r3, #6
 800a852:	d824      	bhi.n	800a89e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	4613      	mov	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	3b05      	subs	r3, #5
 800a866:	221f      	movs	r2, #31
 800a868:	fa02 f303 	lsl.w	r3, r2, r3
 800a86c:	43da      	mvns	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	400a      	ands	r2, r1
 800a874:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	b29b      	uxth	r3, r3
 800a882:	4618      	mov	r0, r3
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	3b05      	subs	r3, #5
 800a890:	fa00 f203 	lsl.w	r2, r0, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	430a      	orrs	r2, r1
 800a89a:	635a      	str	r2, [r3, #52]	; 0x34
 800a89c:	e04c      	b.n	800a938 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	2b0c      	cmp	r3, #12
 800a8a4:	d824      	bhi.n	800a8f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	3b23      	subs	r3, #35	; 0x23
 800a8b8:	221f      	movs	r2, #31
 800a8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a8be:	43da      	mvns	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	400a      	ands	r2, r1
 800a8c6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	3b23      	subs	r3, #35	; 0x23
 800a8e2:	fa00 f203 	lsl.w	r2, r0, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	631a      	str	r2, [r3, #48]	; 0x30
 800a8ee:	e023      	b.n	800a938 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	3b41      	subs	r3, #65	; 0x41
 800a902:	221f      	movs	r2, #31
 800a904:	fa02 f303 	lsl.w	r3, r2, r3
 800a908:	43da      	mvns	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	400a      	ands	r2, r1
 800a910:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	4618      	mov	r0, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	4613      	mov	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	3b41      	subs	r3, #65	; 0x41
 800a92c:	fa00 f203 	lsl.w	r2, r0, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	430a      	orrs	r2, r1
 800a936:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a30      	ldr	r2, [pc, #192]	; (800aa00 <HAL_ADC_ConfigChannel+0x29c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d10a      	bne.n	800a958 <HAL_ADC_ConfigChannel+0x1f4>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a94a:	d105      	bne.n	800a958 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800a94c:	4b2d      	ldr	r3, [pc, #180]	; (800aa04 <HAL_ADC_ConfigChannel+0x2a0>)
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	4a2c      	ldr	r2, [pc, #176]	; (800aa04 <HAL_ADC_ConfigChannel+0x2a0>)
 800a952:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a956:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a28      	ldr	r2, [pc, #160]	; (800aa00 <HAL_ADC_ConfigChannel+0x29c>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d10f      	bne.n	800a982 <HAL_ADC_ConfigChannel+0x21e>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b12      	cmp	r3, #18
 800a968:	d10b      	bne.n	800a982 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800a96a:	4b26      	ldr	r3, [pc, #152]	; (800aa04 <HAL_ADC_ConfigChannel+0x2a0>)
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	4a25      	ldr	r2, [pc, #148]	; (800aa04 <HAL_ADC_ConfigChannel+0x2a0>)
 800a970:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a974:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800a976:	4b23      	ldr	r3, [pc, #140]	; (800aa04 <HAL_ADC_ConfigChannel+0x2a0>)
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	4a22      	ldr	r2, [pc, #136]	; (800aa04 <HAL_ADC_ConfigChannel+0x2a0>)
 800a97c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a980:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a1e      	ldr	r2, [pc, #120]	; (800aa00 <HAL_ADC_ConfigChannel+0x29c>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d12b      	bne.n	800a9e4 <HAL_ADC_ConfigChannel+0x280>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a1a      	ldr	r2, [pc, #104]	; (800a9fc <HAL_ADC_ConfigChannel+0x298>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d003      	beq.n	800a99e <HAL_ADC_ConfigChannel+0x23a>
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b11      	cmp	r3, #17
 800a99c:	d122      	bne.n	800a9e4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800a99e:	4b19      	ldr	r3, [pc, #100]	; (800aa04 <HAL_ADC_ConfigChannel+0x2a0>)
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	4a18      	ldr	r2, [pc, #96]	; (800aa04 <HAL_ADC_ConfigChannel+0x2a0>)
 800a9a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a9a8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800a9aa:	4b16      	ldr	r3, [pc, #88]	; (800aa04 <HAL_ADC_ConfigChannel+0x2a0>)
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	4a15      	ldr	r2, [pc, #84]	; (800aa04 <HAL_ADC_ConfigChannel+0x2a0>)
 800a9b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a9b4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a10      	ldr	r2, [pc, #64]	; (800a9fc <HAL_ADC_ConfigChannel+0x298>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d111      	bne.n	800a9e4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800a9c0:	4b11      	ldr	r3, [pc, #68]	; (800aa08 <HAL_ADC_ConfigChannel+0x2a4>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a11      	ldr	r2, [pc, #68]	; (800aa0c <HAL_ADC_ConfigChannel+0x2a8>)
 800a9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ca:	0c9a      	lsrs	r2, r3, #18
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800a9d6:	e002      	b.n	800a9de <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1f9      	bne.n	800a9d8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	10000012 	.word	0x10000012
 800aa00:	40012000 	.word	0x40012000
 800aa04:	40012300 	.word	0x40012300
 800aa08:	2000001c 	.word	0x2000001c
 800aa0c:	431bde83 	.word	0x431bde83

0800aa10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800aa18:	4b78      	ldr	r3, [pc, #480]	; (800abfc <ADC_Init+0x1ec>)
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	4a77      	ldr	r2, [pc, #476]	; (800abfc <ADC_Init+0x1ec>)
 800aa1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800aa22:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800aa24:	4b75      	ldr	r3, [pc, #468]	; (800abfc <ADC_Init+0x1ec>)
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	4973      	ldr	r1, [pc, #460]	; (800abfc <ADC_Init+0x1ec>)
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	6859      	ldr	r1, [r3, #4]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	021a      	lsls	r2, r3, #8
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800aa64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6859      	ldr	r1, [r3, #4]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689a      	ldr	r2, [r3, #8]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	430a      	orrs	r2, r1
 800aa76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	689a      	ldr	r2, [r3, #8]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6899      	ldr	r1, [r3, #8]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	430a      	orrs	r2, r1
 800aa98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9e:	4a58      	ldr	r2, [pc, #352]	; (800ac00 <ADC_Init+0x1f0>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d022      	beq.n	800aaea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	689a      	ldr	r2, [r3, #8]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800aab2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6899      	ldr	r1, [r3, #8]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	430a      	orrs	r2, r1
 800aac4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	689a      	ldr	r2, [r3, #8]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800aad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	6899      	ldr	r1, [r3, #8]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	430a      	orrs	r2, r1
 800aae6:	609a      	str	r2, [r3, #8]
 800aae8:	e00f      	b.n	800ab0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	689a      	ldr	r2, [r3, #8]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800aaf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ab08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	689a      	ldr	r2, [r3, #8]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f022 0202 	bic.w	r2, r2, #2
 800ab18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6899      	ldr	r1, [r3, #8]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	005a      	lsls	r2, r3, #1
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	430a      	orrs	r2, r1
 800ab2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01b      	beq.n	800ab70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ab56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6859      	ldr	r1, [r3, #4]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	3b01      	subs	r3, #1
 800ab64:	035a      	lsls	r2, r3, #13
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	605a      	str	r2, [r3, #4]
 800ab6e:	e007      	b.n	800ab80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ab8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	051a      	lsls	r2, r3, #20
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	430a      	orrs	r2, r1
 800aba4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	689a      	ldr	r2, [r3, #8]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800abb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6899      	ldr	r1, [r3, #8]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800abc2:	025a      	lsls	r2, r3, #9
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	430a      	orrs	r2, r1
 800abca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689a      	ldr	r2, [r3, #8]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6899      	ldr	r1, [r3, #8]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	029a      	lsls	r2, r3, #10
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	430a      	orrs	r2, r1
 800abee:	609a      	str	r2, [r3, #8]
}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	40012300 	.word	0x40012300
 800ac00:	0f000001 	.word	0x0f000001

0800ac04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f003 0307 	and.w	r3, r3, #7
 800ac12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ac14:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <__NVIC_SetPriorityGrouping+0x40>)
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ac20:	4013      	ands	r3, r2
 800ac22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800ac2c:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <__NVIC_SetPriorityGrouping+0x44>)
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ac32:	4a04      	ldr	r2, [pc, #16]	; (800ac44 <__NVIC_SetPriorityGrouping+0x40>)
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	60d3      	str	r3, [r2, #12]
}
 800ac38:	bf00      	nop
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	e000ed00 	.word	0xe000ed00
 800ac48:	05fa0000 	.word	0x05fa0000

0800ac4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ac50:	4b04      	ldr	r3, [pc, #16]	; (800ac64 <__NVIC_GetPriorityGrouping+0x18>)
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	0a1b      	lsrs	r3, r3, #8
 800ac56:	f003 0307 	and.w	r3, r3, #7
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	e000ed00 	.word	0xe000ed00

0800ac68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	db0b      	blt.n	800ac92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac7a:	79fb      	ldrb	r3, [r7, #7]
 800ac7c:	f003 021f 	and.w	r2, r3, #31
 800ac80:	4907      	ldr	r1, [pc, #28]	; (800aca0 <__NVIC_EnableIRQ+0x38>)
 800ac82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac86:	095b      	lsrs	r3, r3, #5
 800ac88:	2001      	movs	r0, #1
 800ac8a:	fa00 f202 	lsl.w	r2, r0, r2
 800ac8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ac92:	bf00      	nop
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	e000e100 	.word	0xe000e100

0800aca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	4603      	mov	r3, r0
 800acac:	6039      	str	r1, [r7, #0]
 800acae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800acb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	db0a      	blt.n	800acce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	b2da      	uxtb	r2, r3
 800acbc:	490c      	ldr	r1, [pc, #48]	; (800acf0 <__NVIC_SetPriority+0x4c>)
 800acbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acc2:	0112      	lsls	r2, r2, #4
 800acc4:	b2d2      	uxtb	r2, r2
 800acc6:	440b      	add	r3, r1
 800acc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800accc:	e00a      	b.n	800ace4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	4908      	ldr	r1, [pc, #32]	; (800acf4 <__NVIC_SetPriority+0x50>)
 800acd4:	79fb      	ldrb	r3, [r7, #7]
 800acd6:	f003 030f 	and.w	r3, r3, #15
 800acda:	3b04      	subs	r3, #4
 800acdc:	0112      	lsls	r2, r2, #4
 800acde:	b2d2      	uxtb	r2, r2
 800ace0:	440b      	add	r3, r1
 800ace2:	761a      	strb	r2, [r3, #24]
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	e000e100 	.word	0xe000e100
 800acf4:	e000ed00 	.word	0xe000ed00

0800acf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b089      	sub	sp, #36	; 0x24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	f1c3 0307 	rsb	r3, r3, #7
 800ad12:	2b04      	cmp	r3, #4
 800ad14:	bf28      	it	cs
 800ad16:	2304      	movcs	r3, #4
 800ad18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	2b06      	cmp	r3, #6
 800ad20:	d902      	bls.n	800ad28 <NVIC_EncodePriority+0x30>
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	3b03      	subs	r3, #3
 800ad26:	e000      	b.n	800ad2a <NVIC_EncodePriority+0x32>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	fa02 f303 	lsl.w	r3, r2, r3
 800ad36:	43da      	mvns	r2, r3
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	401a      	ands	r2, r3
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ad40:	f04f 31ff 	mov.w	r1, #4294967295
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	fa01 f303 	lsl.w	r3, r1, r3
 800ad4a:	43d9      	mvns	r1, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad50:	4313      	orrs	r3, r2
         );
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3724      	adds	r7, #36	; 0x24
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
	...

0800ad60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad70:	d301      	bcc.n	800ad76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ad72:	2301      	movs	r3, #1
 800ad74:	e00f      	b.n	800ad96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad76:	4a0a      	ldr	r2, [pc, #40]	; (800ada0 <SysTick_Config+0x40>)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ad7e:	210f      	movs	r1, #15
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295
 800ad84:	f7ff ff8e 	bl	800aca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad88:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <SysTick_Config+0x40>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad8e:	4b04      	ldr	r3, [pc, #16]	; (800ada0 <SysTick_Config+0x40>)
 800ad90:	2207      	movs	r2, #7
 800ad92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	e000e010 	.word	0xe000e010

0800ada4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff ff29 	bl	800ac04 <__NVIC_SetPriorityGrouping>
}
 800adb2:	bf00      	nop
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800adba:	b580      	push	{r7, lr}
 800adbc:	b086      	sub	sp, #24
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	4603      	mov	r3, r0
 800adc2:	60b9      	str	r1, [r7, #8]
 800adc4:	607a      	str	r2, [r7, #4]
 800adc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800adc8:	2300      	movs	r3, #0
 800adca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800adcc:	f7ff ff3e 	bl	800ac4c <__NVIC_GetPriorityGrouping>
 800add0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	68b9      	ldr	r1, [r7, #8]
 800add6:	6978      	ldr	r0, [r7, #20]
 800add8:	f7ff ff8e 	bl	800acf8 <NVIC_EncodePriority>
 800addc:	4602      	mov	r2, r0
 800adde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ade2:	4611      	mov	r1, r2
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7ff ff5d 	bl	800aca4 <__NVIC_SetPriority>
}
 800adea:	bf00      	nop
 800adec:	3718      	adds	r7, #24
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b082      	sub	sp, #8
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	4603      	mov	r3, r0
 800adfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800adfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7ff ff31 	bl	800ac68 <__NVIC_EnableIRQ>
}
 800ae06:	bf00      	nop
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b082      	sub	sp, #8
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7ff ffa2 	bl	800ad60 <SysTick_Config>
 800ae1c:	4603      	mov	r3, r0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e054      	b.n	800aee4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	7f5b      	ldrb	r3, [r3, #29]
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d105      	bne.n	800ae50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7fe fc1c 	bl	8009688 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2202      	movs	r2, #2
 800ae54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	791b      	ldrb	r3, [r3, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10c      	bne.n	800ae78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a22      	ldr	r2, [pc, #136]	; (800aeec <HAL_CRC_Init+0xc4>)
 800ae64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f022 0218 	bic.w	r2, r2, #24
 800ae74:	609a      	str	r2, [r3, #8]
 800ae76:	e00c      	b.n	800ae92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6899      	ldr	r1, [r3, #8]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	461a      	mov	r2, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f834 	bl	800aef0 <HAL_CRCEx_Polynomial_Set>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e028      	b.n	800aee4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	795b      	ldrb	r3, [r3, #5]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d105      	bne.n	800aea6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aea2:	611a      	str	r2, [r3, #16]
 800aea4:	e004      	b.n	800aeb0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	6912      	ldr	r2, [r2, #16]
 800aeae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	695a      	ldr	r2, [r3, #20]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	699a      	ldr	r2, [r3, #24]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	430a      	orrs	r2, r1
 800aeda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	04c11db7 	.word	0x04c11db7

0800aef0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b087      	sub	sp, #28
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800af00:	231f      	movs	r3, #31
 800af02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800af04:	bf00      	nop
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	1e5a      	subs	r2, r3, #1
 800af0a:	613a      	str	r2, [r7, #16]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d009      	beq.n	800af24 <HAL_CRCEx_Polynomial_Set+0x34>
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f003 031f 	and.w	r3, r3, #31
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	fa22 f303 	lsr.w	r3, r2, r3
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	d0f0      	beq.n	800af06 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b18      	cmp	r3, #24
 800af28:	d846      	bhi.n	800afb8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800af2a:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <HAL_CRCEx_Polynomial_Set+0x40>)
 800af2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af30:	0800afbf 	.word	0x0800afbf
 800af34:	0800afb9 	.word	0x0800afb9
 800af38:	0800afb9 	.word	0x0800afb9
 800af3c:	0800afb9 	.word	0x0800afb9
 800af40:	0800afb9 	.word	0x0800afb9
 800af44:	0800afb9 	.word	0x0800afb9
 800af48:	0800afb9 	.word	0x0800afb9
 800af4c:	0800afb9 	.word	0x0800afb9
 800af50:	0800afad 	.word	0x0800afad
 800af54:	0800afb9 	.word	0x0800afb9
 800af58:	0800afb9 	.word	0x0800afb9
 800af5c:	0800afb9 	.word	0x0800afb9
 800af60:	0800afb9 	.word	0x0800afb9
 800af64:	0800afb9 	.word	0x0800afb9
 800af68:	0800afb9 	.word	0x0800afb9
 800af6c:	0800afb9 	.word	0x0800afb9
 800af70:	0800afa1 	.word	0x0800afa1
 800af74:	0800afb9 	.word	0x0800afb9
 800af78:	0800afb9 	.word	0x0800afb9
 800af7c:	0800afb9 	.word	0x0800afb9
 800af80:	0800afb9 	.word	0x0800afb9
 800af84:	0800afb9 	.word	0x0800afb9
 800af88:	0800afb9 	.word	0x0800afb9
 800af8c:	0800afb9 	.word	0x0800afb9
 800af90:	0800af95 	.word	0x0800af95
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	2b06      	cmp	r3, #6
 800af98:	d913      	bls.n	800afc2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800af9e:	e010      	b.n	800afc2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	2b07      	cmp	r3, #7
 800afa4:	d90f      	bls.n	800afc6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800afaa:	e00c      	b.n	800afc6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	2b0f      	cmp	r3, #15
 800afb0:	d90b      	bls.n	800afca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800afb6:	e008      	b.n	800afca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	75fb      	strb	r3, [r7, #23]
      break;
 800afbc:	e006      	b.n	800afcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800afbe:	bf00      	nop
 800afc0:	e004      	b.n	800afcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800afc2:	bf00      	nop
 800afc4:	e002      	b.n	800afcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800afc6:	bf00      	nop
 800afc8:	e000      	b.n	800afcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800afca:	bf00      	nop
  }
  if (status == HAL_OK)
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10d      	bne.n	800afee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	f023 0118 	bic.w	r1, r3, #24
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	430a      	orrs	r2, r1
 800afec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800afee:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	371c      	adds	r7, #28
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b004:	2300      	movs	r3, #0
 800b006:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b008:	f7ff fa5c 	bl	800a4c4 <HAL_GetTick>
 800b00c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e099      	b.n	800b14c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f022 0201 	bic.w	r2, r2, #1
 800b036:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b038:	e00f      	b.n	800b05a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b03a:	f7ff fa43 	bl	800a4c4 <HAL_GetTick>
 800b03e:	4602      	mov	r2, r0
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	2b05      	cmp	r3, #5
 800b046:	d908      	bls.n	800b05a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2220      	movs	r2, #32
 800b04c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2203      	movs	r2, #3
 800b052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e078      	b.n	800b14c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e8      	bne.n	800b03a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	4b38      	ldr	r3, [pc, #224]	; (800b154 <HAL_DMA_Init+0x158>)
 800b074:	4013      	ands	r3, r2
 800b076:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b09e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	2b04      	cmp	r3, #4
 800b0b2:	d107      	bne.n	800b0c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	697a      	ldr	r2, [r7, #20]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	697a      	ldr	r2, [r7, #20]
 800b0ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f023 0307 	bic.w	r3, r3, #7
 800b0da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ea:	2b04      	cmp	r3, #4
 800b0ec:	d117      	bne.n	800b11e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00e      	beq.n	800b11e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fb15 	bl	800b730 <DMA_CheckFifoParam>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d008      	beq.n	800b11e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2240      	movs	r2, #64	; 0x40
 800b110:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b11a:	2301      	movs	r3, #1
 800b11c:	e016      	b.n	800b14c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 facc 	bl	800b6c4 <DMA_CalcBaseAndBitshift>
 800b12c:	4603      	mov	r3, r0
 800b12e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b134:	223f      	movs	r2, #63	; 0x3f
 800b136:	409a      	lsls	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2201      	movs	r2, #1
 800b146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3718      	adds	r7, #24
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	f010803f 	.word	0xf010803f

0800b158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b16e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b176:	2b01      	cmp	r3, #1
 800b178:	d101      	bne.n	800b17e <HAL_DMA_Start_IT+0x26>
 800b17a:	2302      	movs	r3, #2
 800b17c:	e048      	b.n	800b210 <HAL_DMA_Start_IT+0xb8>
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2201      	movs	r2, #1
 800b182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d137      	bne.n	800b202 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2202      	movs	r2, #2
 800b196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	68b9      	ldr	r1, [r7, #8]
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f000 fa5e 	bl	800b668 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1b0:	223f      	movs	r2, #63	; 0x3f
 800b1b2:	409a      	lsls	r2, r3
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f042 0216 	orr.w	r2, r2, #22
 800b1c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	695a      	ldr	r2, [r3, #20]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b1d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d007      	beq.n	800b1f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f042 0208 	orr.w	r2, r2, #8
 800b1ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f042 0201 	orr.w	r2, r2, #1
 800b1fe:	601a      	str	r2, [r3, #0]
 800b200:	e005      	b.n	800b20e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b20a:	2302      	movs	r3, #2
 800b20c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3718      	adds	r7, #24
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b224:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b226:	f7ff f94d 	bl	800a4c4 <HAL_GetTick>
 800b22a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b02      	cmp	r3, #2
 800b236:	d008      	beq.n	800b24a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2280      	movs	r2, #128	; 0x80
 800b23c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	e052      	b.n	800b2f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f022 0216 	bic.w	r2, r2, #22
 800b258:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	695a      	ldr	r2, [r3, #20]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b268:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d103      	bne.n	800b27a <HAL_DMA_Abort+0x62>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b276:	2b00      	cmp	r3, #0
 800b278:	d007      	beq.n	800b28a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f022 0208 	bic.w	r2, r2, #8
 800b288:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f022 0201 	bic.w	r2, r2, #1
 800b298:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b29a:	e013      	b.n	800b2c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b29c:	f7ff f912 	bl	800a4c4 <HAL_GetTick>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	2b05      	cmp	r3, #5
 800b2a8:	d90c      	bls.n	800b2c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e015      	b.n	800b2f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 0301 	and.w	r3, r3, #1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1e4      	bne.n	800b29c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2d6:	223f      	movs	r2, #63	; 0x3f
 800b2d8:	409a      	lsls	r2, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d004      	beq.n	800b316 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2280      	movs	r2, #128	; 0x80
 800b310:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e00c      	b.n	800b330 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2205      	movs	r2, #5
 800b31a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f022 0201 	bic.w	r2, r2, #1
 800b32c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b348:	4b8e      	ldr	r3, [pc, #568]	; (800b584 <HAL_DMA_IRQHandler+0x248>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a8e      	ldr	r2, [pc, #568]	; (800b588 <HAL_DMA_IRQHandler+0x24c>)
 800b34e:	fba2 2303 	umull	r2, r3, r2, r3
 800b352:	0a9b      	lsrs	r3, r3, #10
 800b354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b35a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b366:	2208      	movs	r2, #8
 800b368:	409a      	lsls	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	4013      	ands	r3, r2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d01a      	beq.n	800b3a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f003 0304 	and.w	r3, r3, #4
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d013      	beq.n	800b3a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f022 0204 	bic.w	r2, r2, #4
 800b38e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b394:	2208      	movs	r2, #8
 800b396:	409a      	lsls	r2, r3
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a0:	f043 0201 	orr.w	r2, r3, #1
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	409a      	lsls	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d012      	beq.n	800b3de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00b      	beq.n	800b3de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	409a      	lsls	r2, r3
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d6:	f043 0202 	orr.w	r2, r3, #2
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3e2:	2204      	movs	r2, #4
 800b3e4:	409a      	lsls	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d012      	beq.n	800b414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00b      	beq.n	800b414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b400:	2204      	movs	r2, #4
 800b402:	409a      	lsls	r2, r3
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40c:	f043 0204 	orr.w	r2, r3, #4
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b418:	2210      	movs	r2, #16
 800b41a:	409a      	lsls	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4013      	ands	r3, r2
 800b420:	2b00      	cmp	r3, #0
 800b422:	d043      	beq.n	800b4ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 0308 	and.w	r3, r3, #8
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d03c      	beq.n	800b4ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b436:	2210      	movs	r2, #16
 800b438:	409a      	lsls	r2, r3
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d018      	beq.n	800b47e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b456:	2b00      	cmp	r3, #0
 800b458:	d108      	bne.n	800b46c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d024      	beq.n	800b4ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	4798      	blx	r3
 800b46a:	e01f      	b.n	800b4ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b470:	2b00      	cmp	r3, #0
 800b472:	d01b      	beq.n	800b4ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	4798      	blx	r3
 800b47c:	e016      	b.n	800b4ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d107      	bne.n	800b49c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f022 0208 	bic.w	r2, r2, #8
 800b49a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d003      	beq.n	800b4ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4b0:	2220      	movs	r2, #32
 800b4b2:	409a      	lsls	r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f000 808f 	beq.w	800b5dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0310 	and.w	r3, r3, #16
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 8087 	beq.w	800b5dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4d2:	2220      	movs	r2, #32
 800b4d4:	409a      	lsls	r2, r3
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b05      	cmp	r3, #5
 800b4e4:	d136      	bne.n	800b554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f022 0216 	bic.w	r2, r2, #22
 800b4f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	695a      	ldr	r2, [r3, #20]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d103      	bne.n	800b516 <HAL_DMA_IRQHandler+0x1da>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b512:	2b00      	cmp	r3, #0
 800b514:	d007      	beq.n	800b526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f022 0208 	bic.w	r2, r2, #8
 800b524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b52a:	223f      	movs	r2, #63	; 0x3f
 800b52c:	409a      	lsls	r2, r3
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b546:	2b00      	cmp	r3, #0
 800b548:	d07e      	beq.n	800b648 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	4798      	blx	r3
        }
        return;
 800b552:	e079      	b.n	800b648 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d01d      	beq.n	800b59e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10d      	bne.n	800b58c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b574:	2b00      	cmp	r3, #0
 800b576:	d031      	beq.n	800b5dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	4798      	blx	r3
 800b580:	e02c      	b.n	800b5dc <HAL_DMA_IRQHandler+0x2a0>
 800b582:	bf00      	nop
 800b584:	2000001c 	.word	0x2000001c
 800b588:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b590:	2b00      	cmp	r3, #0
 800b592:	d023      	beq.n	800b5dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	4798      	blx	r3
 800b59c:	e01e      	b.n	800b5dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10f      	bne.n	800b5cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f022 0210 	bic.w	r2, r2, #16
 800b5ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d003      	beq.n	800b5dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d032      	beq.n	800b64a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d022      	beq.n	800b636 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2205      	movs	r2, #5
 800b5f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f022 0201 	bic.w	r2, r2, #1
 800b606:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	3301      	adds	r3, #1
 800b60c:	60bb      	str	r3, [r7, #8]
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	429a      	cmp	r2, r3
 800b612:	d307      	bcc.n	800b624 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 0301 	and.w	r3, r3, #1
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1f2      	bne.n	800b608 <HAL_DMA_IRQHandler+0x2cc>
 800b622:	e000      	b.n	800b626 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b624:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2201      	movs	r2, #1
 800b62a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d005      	beq.n	800b64a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	4798      	blx	r3
 800b646:	e000      	b.n	800b64a <HAL_DMA_IRQHandler+0x30e>
        return;
 800b648:	bf00      	nop
    }
  }
}
 800b64a:	3718      	adds	r7, #24
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b684:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	2b40      	cmp	r3, #64	; 0x40
 800b694:	d108      	bne.n	800b6a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b6a6:	e007      	b.n	800b6b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	60da      	str	r2, [r3, #12]
}
 800b6b8:	bf00      	nop
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	3b10      	subs	r3, #16
 800b6d4:	4a13      	ldr	r2, [pc, #76]	; (800b724 <DMA_CalcBaseAndBitshift+0x60>)
 800b6d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6da:	091b      	lsrs	r3, r3, #4
 800b6dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b6de:	4a12      	ldr	r2, [pc, #72]	; (800b728 <DMA_CalcBaseAndBitshift+0x64>)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d908      	bls.n	800b704 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	4b0c      	ldr	r3, [pc, #48]	; (800b72c <DMA_CalcBaseAndBitshift+0x68>)
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	1d1a      	adds	r2, r3, #4
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	659a      	str	r2, [r3, #88]	; 0x58
 800b702:	e006      	b.n	800b712 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	461a      	mov	r2, r3
 800b70a:	4b08      	ldr	r3, [pc, #32]	; (800b72c <DMA_CalcBaseAndBitshift+0x68>)
 800b70c:	4013      	ands	r3, r2
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b716:	4618      	mov	r0, r3
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	aaaaaaab 	.word	0xaaaaaaab
 800b728:	08011e28 	.word	0x08011e28
 800b72c:	fffffc00 	.word	0xfffffc00

0800b730 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b738:	2300      	movs	r3, #0
 800b73a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b740:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d11f      	bne.n	800b78a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2b03      	cmp	r3, #3
 800b74e:	d856      	bhi.n	800b7fe <DMA_CheckFifoParam+0xce>
 800b750:	a201      	add	r2, pc, #4	; (adr r2, 800b758 <DMA_CheckFifoParam+0x28>)
 800b752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b756:	bf00      	nop
 800b758:	0800b769 	.word	0x0800b769
 800b75c:	0800b77b 	.word	0x0800b77b
 800b760:	0800b769 	.word	0x0800b769
 800b764:	0800b7ff 	.word	0x0800b7ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d046      	beq.n	800b802 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b778:	e043      	b.n	800b802 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b782:	d140      	bne.n	800b806 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b788:	e03d      	b.n	800b806 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b792:	d121      	bne.n	800b7d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2b03      	cmp	r3, #3
 800b798:	d837      	bhi.n	800b80a <DMA_CheckFifoParam+0xda>
 800b79a:	a201      	add	r2, pc, #4	; (adr r2, 800b7a0 <DMA_CheckFifoParam+0x70>)
 800b79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a0:	0800b7b1 	.word	0x0800b7b1
 800b7a4:	0800b7b7 	.word	0x0800b7b7
 800b7a8:	0800b7b1 	.word	0x0800b7b1
 800b7ac:	0800b7c9 	.word	0x0800b7c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b7b4:	e030      	b.n	800b818 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d025      	beq.n	800b80e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7c6:	e022      	b.n	800b80e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b7d0:	d11f      	bne.n	800b812 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b7d6:	e01c      	b.n	800b812 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d903      	bls.n	800b7e6 <DMA_CheckFifoParam+0xb6>
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	2b03      	cmp	r3, #3
 800b7e2:	d003      	beq.n	800b7ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b7e4:	e018      	b.n	800b818 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ea:	e015      	b.n	800b818 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00e      	beq.n	800b816 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b7fc:	e00b      	b.n	800b816 <DMA_CheckFifoParam+0xe6>
      break;
 800b7fe:	bf00      	nop
 800b800:	e00a      	b.n	800b818 <DMA_CheckFifoParam+0xe8>
      break;
 800b802:	bf00      	nop
 800b804:	e008      	b.n	800b818 <DMA_CheckFifoParam+0xe8>
      break;
 800b806:	bf00      	nop
 800b808:	e006      	b.n	800b818 <DMA_CheckFifoParam+0xe8>
      break;
 800b80a:	bf00      	nop
 800b80c:	e004      	b.n	800b818 <DMA_CheckFifoParam+0xe8>
      break;
 800b80e:	bf00      	nop
 800b810:	e002      	b.n	800b818 <DMA_CheckFifoParam+0xe8>
      break;   
 800b812:	bf00      	nop
 800b814:	e000      	b.n	800b818 <DMA_CheckFifoParam+0xe8>
      break;
 800b816:	bf00      	nop
    }
  } 
  
  return status; 
 800b818:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop

0800b828 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b83a:	4b27      	ldr	r3, [pc, #156]	; (800b8d8 <HAL_FLASH_Program+0xb0>)
 800b83c:	7d1b      	ldrb	r3, [r3, #20]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d101      	bne.n	800b846 <HAL_FLASH_Program+0x1e>
 800b842:	2302      	movs	r3, #2
 800b844:	e043      	b.n	800b8ce <HAL_FLASH_Program+0xa6>
 800b846:	4b24      	ldr	r3, [pc, #144]	; (800b8d8 <HAL_FLASH_Program+0xb0>)
 800b848:	2201      	movs	r2, #1
 800b84a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b84c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b850:	f000 f878 	bl	800b944 <FLASH_WaitForLastOperation>
 800b854:	4603      	mov	r3, r0
 800b856:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800b858:	7dfb      	ldrb	r3, [r7, #23]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d133      	bne.n	800b8c6 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b03      	cmp	r3, #3
 800b862:	d823      	bhi.n	800b8ac <HAL_FLASH_Program+0x84>
 800b864:	a201      	add	r2, pc, #4	; (adr r2, 800b86c <HAL_FLASH_Program+0x44>)
 800b866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86a:	bf00      	nop
 800b86c:	0800b87d 	.word	0x0800b87d
 800b870:	0800b889 	.word	0x0800b889
 800b874:	0800b895 	.word	0x0800b895
 800b878:	0800b8a1 	.word	0x0800b8a1
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800b87c:	783b      	ldrb	r3, [r7, #0]
 800b87e:	4619      	mov	r1, r3
 800b880:	68b8      	ldr	r0, [r7, #8]
 800b882:	f000 f921 	bl	800bac8 <FLASH_Program_Byte>
        break;
 800b886:	e012      	b.n	800b8ae <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800b888:	883b      	ldrh	r3, [r7, #0]
 800b88a:	4619      	mov	r1, r3
 800b88c:	68b8      	ldr	r0, [r7, #8]
 800b88e:	f000 f8f5 	bl	800ba7c <FLASH_Program_HalfWord>
        break;
 800b892:	e00c      	b.n	800b8ae <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	4619      	mov	r1, r3
 800b898:	68b8      	ldr	r0, [r7, #8]
 800b89a:	f000 f8c9 	bl	800ba30 <FLASH_Program_Word>
        break;
 800b89e:	e006      	b.n	800b8ae <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 800b8a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8a4:	68b8      	ldr	r0, [r7, #8]
 800b8a6:	f000 f88d 	bl	800b9c4 <FLASH_Program_DoubleWord>
        break;
 800b8aa:	e000      	b.n	800b8ae <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 800b8ac:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b8ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b8b2:	f000 f847 	bl	800b944 <FLASH_WaitForLastOperation>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800b8ba:	4b08      	ldr	r3, [pc, #32]	; (800b8dc <HAL_FLASH_Program+0xb4>)
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	4a07      	ldr	r2, [pc, #28]	; (800b8dc <HAL_FLASH_Program+0xb4>)
 800b8c0:	f023 0301 	bic.w	r3, r3, #1
 800b8c4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b8c6:	4b04      	ldr	r3, [pc, #16]	; (800b8d8 <HAL_FLASH_Program+0xb0>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	751a      	strb	r2, [r3, #20]

  return status;
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	2000c6d4 	.word	0x2000c6d4
 800b8dc:	40023c00 	.word	0x40023c00

0800b8e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b8ea:	4b0b      	ldr	r3, [pc, #44]	; (800b918 <HAL_FLASH_Unlock+0x38>)
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	da0b      	bge.n	800b90a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800b8f2:	4b09      	ldr	r3, [pc, #36]	; (800b918 <HAL_FLASH_Unlock+0x38>)
 800b8f4:	4a09      	ldr	r2, [pc, #36]	; (800b91c <HAL_FLASH_Unlock+0x3c>)
 800b8f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800b8f8:	4b07      	ldr	r3, [pc, #28]	; (800b918 <HAL_FLASH_Unlock+0x38>)
 800b8fa:	4a09      	ldr	r2, [pc, #36]	; (800b920 <HAL_FLASH_Unlock+0x40>)
 800b8fc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b8fe:	4b06      	ldr	r3, [pc, #24]	; (800b918 <HAL_FLASH_Unlock+0x38>)
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	da01      	bge.n	800b90a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800b90a:	79fb      	ldrb	r3, [r7, #7]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr
 800b918:	40023c00 	.word	0x40023c00
 800b91c:	45670123 	.word	0x45670123
 800b920:	cdef89ab 	.word	0xcdef89ab

0800b924 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800b924:	b480      	push	{r7}
 800b926:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800b928:	4b05      	ldr	r3, [pc, #20]	; (800b940 <HAL_FLASH_Lock+0x1c>)
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	4a04      	ldr	r2, [pc, #16]	; (800b940 <HAL_FLASH_Lock+0x1c>)
 800b92e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b932:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	40023c00 	.word	0x40023c00

0800b944 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b950:	4b1a      	ldr	r3, [pc, #104]	; (800b9bc <FLASH_WaitForLastOperation+0x78>)
 800b952:	2200      	movs	r2, #0
 800b954:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800b956:	f7fe fdb5 	bl	800a4c4 <HAL_GetTick>
 800b95a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b95c:	e010      	b.n	800b980 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b964:	d00c      	beq.n	800b980 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d007      	beq.n	800b97c <FLASH_WaitForLastOperation+0x38>
 800b96c:	f7fe fdaa 	bl	800a4c4 <HAL_GetTick>
 800b970:	4602      	mov	r2, r0
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d201      	bcs.n	800b980 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800b97c:	2303      	movs	r3, #3
 800b97e:	e019      	b.n	800b9b4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b980:	4b0f      	ldr	r3, [pc, #60]	; (800b9c0 <FLASH_WaitForLastOperation+0x7c>)
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e8      	bne.n	800b95e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800b98c:	4b0c      	ldr	r3, [pc, #48]	; (800b9c0 <FLASH_WaitForLastOperation+0x7c>)
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800b998:	f000 f8ba 	bl	800bb10 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e009      	b.n	800b9b4 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800b9a0:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <FLASH_WaitForLastOperation+0x7c>)
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b9ac:	4b04      	ldr	r3, [pc, #16]	; (800b9c0 <FLASH_WaitForLastOperation+0x7c>)
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
  
}  
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	2000c6d4 	.word	0x2000c6d4
 800b9c0:	40023c00 	.word	0x40023c00

0800b9c4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800b9d0:	4b16      	ldr	r3, [pc, #88]	; (800ba2c <FLASH_Program_DoubleWord+0x68>)
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	4a15      	ldr	r2, [pc, #84]	; (800ba2c <FLASH_Program_DoubleWord+0x68>)
 800b9d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800b9dc:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <FLASH_Program_DoubleWord+0x68>)
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	4a12      	ldr	r2, [pc, #72]	; (800ba2c <FLASH_Program_DoubleWord+0x68>)
 800b9e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b9e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b9e8:	4b10      	ldr	r3, [pc, #64]	; (800ba2c <FLASH_Program_DoubleWord+0x68>)
 800b9ea:	691b      	ldr	r3, [r3, #16]
 800b9ec:	4a0f      	ldr	r2, [pc, #60]	; (800ba2c <FLASH_Program_DoubleWord+0x68>)
 800b9ee:	f043 0301 	orr.w	r3, r3, #1
 800b9f2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800b9fa:	f3bf 8f6f 	isb	sy
}
 800b9fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800ba00:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba04:	f04f 0200 	mov.w	r2, #0
 800ba08:	f04f 0300 	mov.w	r3, #0
 800ba0c:	000a      	movs	r2, r1
 800ba0e:	2300      	movs	r3, #0
 800ba10:	68f9      	ldr	r1, [r7, #12]
 800ba12:	3104      	adds	r1, #4
 800ba14:	4613      	mov	r3, r2
 800ba16:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ba18:	f3bf 8f4f 	dsb	sy
}
 800ba1c:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800ba1e:	bf00      	nop
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	40023c00 	.word	0x40023c00

0800ba30 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800ba3a:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <FLASH_Program_Word+0x48>)
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	4a0e      	ldr	r2, [pc, #56]	; (800ba78 <FLASH_Program_Word+0x48>)
 800ba40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ba46:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <FLASH_Program_Word+0x48>)
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	4a0b      	ldr	r2, [pc, #44]	; (800ba78 <FLASH_Program_Word+0x48>)
 800ba4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ba52:	4b09      	ldr	r3, [pc, #36]	; (800ba78 <FLASH_Program_Word+0x48>)
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	4a08      	ldr	r2, [pc, #32]	; (800ba78 <FLASH_Program_Word+0x48>)
 800ba58:	f043 0301 	orr.w	r3, r3, #1
 800ba5c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	683a      	ldr	r2, [r7, #0]
 800ba62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800ba64:	f3bf 8f4f 	dsb	sy
}
 800ba68:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800ba6a:	bf00      	nop
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	40023c00 	.word	0x40023c00

0800ba7c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800ba88:	4b0e      	ldr	r3, [pc, #56]	; (800bac4 <FLASH_Program_HalfWord+0x48>)
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	4a0d      	ldr	r2, [pc, #52]	; (800bac4 <FLASH_Program_HalfWord+0x48>)
 800ba8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ba94:	4b0b      	ldr	r3, [pc, #44]	; (800bac4 <FLASH_Program_HalfWord+0x48>)
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	4a0a      	ldr	r2, [pc, #40]	; (800bac4 <FLASH_Program_HalfWord+0x48>)
 800ba9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800baa0:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <FLASH_Program_HalfWord+0x48>)
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	4a07      	ldr	r2, [pc, #28]	; (800bac4 <FLASH_Program_HalfWord+0x48>)
 800baa6:	f043 0301 	orr.w	r3, r3, #1
 800baaa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	887a      	ldrh	r2, [r7, #2]
 800bab0:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800bab2:	f3bf 8f4f 	dsb	sy
}
 800bab6:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	40023c00 	.word	0x40023c00

0800bac8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800bad4:	4b0d      	ldr	r3, [pc, #52]	; (800bb0c <FLASH_Program_Byte+0x44>)
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	4a0c      	ldr	r2, [pc, #48]	; (800bb0c <FLASH_Program_Byte+0x44>)
 800bada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bade:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800bae0:	4b0a      	ldr	r3, [pc, #40]	; (800bb0c <FLASH_Program_Byte+0x44>)
 800bae2:	4a0a      	ldr	r2, [pc, #40]	; (800bb0c <FLASH_Program_Byte+0x44>)
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800bae8:	4b08      	ldr	r3, [pc, #32]	; (800bb0c <FLASH_Program_Byte+0x44>)
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	4a07      	ldr	r2, [pc, #28]	; (800bb0c <FLASH_Program_Byte+0x44>)
 800baee:	f043 0301 	orr.w	r3, r3, #1
 800baf2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	78fa      	ldrb	r2, [r7, #3]
 800baf8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800bafa:	f3bf 8f4f 	dsb	sy
}
 800bafe:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	40023c00 	.word	0x40023c00

0800bb10 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800bb10:	b480      	push	{r7}
 800bb12:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800bb14:	4b21      	ldr	r3, [pc, #132]	; (800bb9c <FLASH_SetErrorCode+0x8c>)
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	f003 0302 	and.w	r3, r3, #2
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d005      	beq.n	800bb2c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800bb20:	4b1f      	ldr	r3, [pc, #124]	; (800bba0 <FLASH_SetErrorCode+0x90>)
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	f043 0320 	orr.w	r3, r3, #32
 800bb28:	4a1d      	ldr	r2, [pc, #116]	; (800bba0 <FLASH_SetErrorCode+0x90>)
 800bb2a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800bb2c:	4b1b      	ldr	r3, [pc, #108]	; (800bb9c <FLASH_SetErrorCode+0x8c>)
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	f003 0310 	and.w	r3, r3, #16
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d005      	beq.n	800bb44 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800bb38:	4b19      	ldr	r3, [pc, #100]	; (800bba0 <FLASH_SetErrorCode+0x90>)
 800bb3a:	699b      	ldr	r3, [r3, #24]
 800bb3c:	f043 0310 	orr.w	r3, r3, #16
 800bb40:	4a17      	ldr	r2, [pc, #92]	; (800bba0 <FLASH_SetErrorCode+0x90>)
 800bb42:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800bb44:	4b15      	ldr	r3, [pc, #84]	; (800bb9c <FLASH_SetErrorCode+0x8c>)
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d005      	beq.n	800bb5c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800bb50:	4b13      	ldr	r3, [pc, #76]	; (800bba0 <FLASH_SetErrorCode+0x90>)
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	f043 0308 	orr.w	r3, r3, #8
 800bb58:	4a11      	ldr	r2, [pc, #68]	; (800bba0 <FLASH_SetErrorCode+0x90>)
 800bb5a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800bb5c:	4b0f      	ldr	r3, [pc, #60]	; (800bb9c <FLASH_SetErrorCode+0x8c>)
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d005      	beq.n	800bb74 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800bb68:	4b0d      	ldr	r3, [pc, #52]	; (800bba0 <FLASH_SetErrorCode+0x90>)
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	f043 0304 	orr.w	r3, r3, #4
 800bb70:	4a0b      	ldr	r2, [pc, #44]	; (800bba0 <FLASH_SetErrorCode+0x90>)
 800bb72:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800bb74:	4b09      	ldr	r3, [pc, #36]	; (800bb9c <FLASH_SetErrorCode+0x8c>)
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d005      	beq.n	800bb8c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800bb80:	4b07      	ldr	r3, [pc, #28]	; (800bba0 <FLASH_SetErrorCode+0x90>)
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	f043 0302 	orr.w	r3, r3, #2
 800bb88:	4a05      	ldr	r2, [pc, #20]	; (800bba0 <FLASH_SetErrorCode+0x90>)
 800bb8a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800bb8c:	4b03      	ldr	r3, [pc, #12]	; (800bb9c <FLASH_SetErrorCode+0x8c>)
 800bb8e:	22f2      	movs	r2, #242	; 0xf2
 800bb90:	60da      	str	r2, [r3, #12]
}
 800bb92:	bf00      	nop
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	40023c00 	.word	0x40023c00
 800bba0:	2000c6d4 	.word	0x2000c6d4

0800bba4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d102      	bne.n	800bbc0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	e010      	b.n	800bbe2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800bbc0:	78fb      	ldrb	r3, [r7, #3]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d103      	bne.n	800bbce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800bbc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	e009      	b.n	800bbe2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800bbce:	78fb      	ldrb	r3, [r7, #3]
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d103      	bne.n	800bbdc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800bbd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbd8:	60fb      	str	r3, [r7, #12]
 800bbda:	e002      	b.n	800bbe2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800bbdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bbe0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800bbe2:	4b15      	ldr	r3, [pc, #84]	; (800bc38 <FLASH_Erase_Sector+0x94>)
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	4a14      	ldr	r2, [pc, #80]	; (800bc38 <FLASH_Erase_Sector+0x94>)
 800bbe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800bbee:	4b12      	ldr	r3, [pc, #72]	; (800bc38 <FLASH_Erase_Sector+0x94>)
 800bbf0:	691a      	ldr	r2, [r3, #16]
 800bbf2:	4911      	ldr	r1, [pc, #68]	; (800bc38 <FLASH_Erase_Sector+0x94>)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 800bbfa:	4b0f      	ldr	r3, [pc, #60]	; (800bc38 <FLASH_Erase_Sector+0x94>)
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	4a0e      	ldr	r2, [pc, #56]	; (800bc38 <FLASH_Erase_Sector+0x94>)
 800bc00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800bc04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800bc06:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <FLASH_Erase_Sector+0x94>)
 800bc08:	691a      	ldr	r2, [r3, #16]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	00db      	lsls	r3, r3, #3
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	4a09      	ldr	r2, [pc, #36]	; (800bc38 <FLASH_Erase_Sector+0x94>)
 800bc12:	f043 0302 	orr.w	r3, r3, #2
 800bc16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800bc18:	4b07      	ldr	r3, [pc, #28]	; (800bc38 <FLASH_Erase_Sector+0x94>)
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	4a06      	ldr	r2, [pc, #24]	; (800bc38 <FLASH_Erase_Sector+0x94>)
 800bc1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc22:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800bc24:	f3bf 8f4f 	dsb	sy
}
 800bc28:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800bc2a:	bf00      	nop
 800bc2c:	3714      	adds	r7, #20
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	40023c00 	.word	0x40023c00

0800bc3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b089      	sub	sp, #36	; 0x24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800bc46:	2300      	movs	r3, #0
 800bc48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800bc52:	2300      	movs	r3, #0
 800bc54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800bc56:	2300      	movs	r3, #0
 800bc58:	61fb      	str	r3, [r7, #28]
 800bc5a:	e175      	b.n	800bf48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	fa02 f303 	lsl.w	r3, r2, r3
 800bc64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bc70:	693a      	ldr	r2, [r7, #16]
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	f040 8164 	bne.w	800bf42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d005      	beq.n	800bc92 <HAL_GPIO_Init+0x56>
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	f003 0303 	and.w	r3, r3, #3
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d130      	bne.n	800bcf4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	2203      	movs	r2, #3
 800bc9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bca2:	43db      	mvns	r3, r3
 800bca4:	69ba      	ldr	r2, [r7, #24]
 800bca6:	4013      	ands	r3, r2
 800bca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	68da      	ldr	r2, [r3, #12]
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	005b      	lsls	r3, r3, #1
 800bcb2:	fa02 f303 	lsl.w	r3, r2, r3
 800bcb6:	69ba      	ldr	r2, [r7, #24]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	69ba      	ldr	r2, [r7, #24]
 800bcc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bcc8:	2201      	movs	r2, #1
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd0:	43db      	mvns	r3, r3
 800bcd2:	69ba      	ldr	r2, [r7, #24]
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	091b      	lsrs	r3, r3, #4
 800bcde:	f003 0201 	and.w	r2, r3, #1
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	fa02 f303 	lsl.w	r3, r2, r3
 800bce8:	69ba      	ldr	r2, [r7, #24]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	69ba      	ldr	r2, [r7, #24]
 800bcf2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	f003 0303 	and.w	r3, r3, #3
 800bcfc:	2b03      	cmp	r3, #3
 800bcfe:	d017      	beq.n	800bd30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	005b      	lsls	r3, r3, #1
 800bd0a:	2203      	movs	r2, #3
 800bd0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd10:	43db      	mvns	r3, r3
 800bd12:	69ba      	ldr	r2, [r7, #24]
 800bd14:	4013      	ands	r3, r2
 800bd16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	689a      	ldr	r2, [r3, #8]
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	fa02 f303 	lsl.w	r3, r2, r3
 800bd24:	69ba      	ldr	r2, [r7, #24]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	69ba      	ldr	r2, [r7, #24]
 800bd2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	f003 0303 	and.w	r3, r3, #3
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d123      	bne.n	800bd84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	08da      	lsrs	r2, r3, #3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3208      	adds	r2, #8
 800bd44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	f003 0307 	and.w	r3, r3, #7
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	220f      	movs	r2, #15
 800bd54:	fa02 f303 	lsl.w	r3, r2, r3
 800bd58:	43db      	mvns	r3, r3
 800bd5a:	69ba      	ldr	r2, [r7, #24]
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	691a      	ldr	r2, [r3, #16]
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	f003 0307 	and.w	r3, r3, #7
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd70:	69ba      	ldr	r2, [r7, #24]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	08da      	lsrs	r2, r3, #3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	3208      	adds	r2, #8
 800bd7e:	69b9      	ldr	r1, [r7, #24]
 800bd80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	2203      	movs	r2, #3
 800bd90:	fa02 f303 	lsl.w	r3, r2, r3
 800bd94:	43db      	mvns	r3, r3
 800bd96:	69ba      	ldr	r2, [r7, #24]
 800bd98:	4013      	ands	r3, r2
 800bd9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	f003 0203 	and.w	r2, r3, #3
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdac:	69ba      	ldr	r2, [r7, #24]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	69ba      	ldr	r2, [r7, #24]
 800bdb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f000 80be 	beq.w	800bf42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bdc6:	4b66      	ldr	r3, [pc, #408]	; (800bf60 <HAL_GPIO_Init+0x324>)
 800bdc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdca:	4a65      	ldr	r2, [pc, #404]	; (800bf60 <HAL_GPIO_Init+0x324>)
 800bdcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bdd0:	6453      	str	r3, [r2, #68]	; 0x44
 800bdd2:	4b63      	ldr	r3, [pc, #396]	; (800bf60 <HAL_GPIO_Init+0x324>)
 800bdd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800bdde:	4a61      	ldr	r2, [pc, #388]	; (800bf64 <HAL_GPIO_Init+0x328>)
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	089b      	lsrs	r3, r3, #2
 800bde4:	3302      	adds	r3, #2
 800bde6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	f003 0303 	and.w	r3, r3, #3
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	220f      	movs	r2, #15
 800bdf6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfa:	43db      	mvns	r3, r3
 800bdfc:	69ba      	ldr	r2, [r7, #24]
 800bdfe:	4013      	ands	r3, r2
 800be00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4a58      	ldr	r2, [pc, #352]	; (800bf68 <HAL_GPIO_Init+0x32c>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d037      	beq.n	800be7a <HAL_GPIO_Init+0x23e>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4a57      	ldr	r2, [pc, #348]	; (800bf6c <HAL_GPIO_Init+0x330>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d031      	beq.n	800be76 <HAL_GPIO_Init+0x23a>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4a56      	ldr	r2, [pc, #344]	; (800bf70 <HAL_GPIO_Init+0x334>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d02b      	beq.n	800be72 <HAL_GPIO_Init+0x236>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4a55      	ldr	r2, [pc, #340]	; (800bf74 <HAL_GPIO_Init+0x338>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d025      	beq.n	800be6e <HAL_GPIO_Init+0x232>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a54      	ldr	r2, [pc, #336]	; (800bf78 <HAL_GPIO_Init+0x33c>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d01f      	beq.n	800be6a <HAL_GPIO_Init+0x22e>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a53      	ldr	r2, [pc, #332]	; (800bf7c <HAL_GPIO_Init+0x340>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d019      	beq.n	800be66 <HAL_GPIO_Init+0x22a>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a52      	ldr	r2, [pc, #328]	; (800bf80 <HAL_GPIO_Init+0x344>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d013      	beq.n	800be62 <HAL_GPIO_Init+0x226>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a51      	ldr	r2, [pc, #324]	; (800bf84 <HAL_GPIO_Init+0x348>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d00d      	beq.n	800be5e <HAL_GPIO_Init+0x222>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a50      	ldr	r2, [pc, #320]	; (800bf88 <HAL_GPIO_Init+0x34c>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d007      	beq.n	800be5a <HAL_GPIO_Init+0x21e>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a4f      	ldr	r2, [pc, #316]	; (800bf8c <HAL_GPIO_Init+0x350>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d101      	bne.n	800be56 <HAL_GPIO_Init+0x21a>
 800be52:	2309      	movs	r3, #9
 800be54:	e012      	b.n	800be7c <HAL_GPIO_Init+0x240>
 800be56:	230a      	movs	r3, #10
 800be58:	e010      	b.n	800be7c <HAL_GPIO_Init+0x240>
 800be5a:	2308      	movs	r3, #8
 800be5c:	e00e      	b.n	800be7c <HAL_GPIO_Init+0x240>
 800be5e:	2307      	movs	r3, #7
 800be60:	e00c      	b.n	800be7c <HAL_GPIO_Init+0x240>
 800be62:	2306      	movs	r3, #6
 800be64:	e00a      	b.n	800be7c <HAL_GPIO_Init+0x240>
 800be66:	2305      	movs	r3, #5
 800be68:	e008      	b.n	800be7c <HAL_GPIO_Init+0x240>
 800be6a:	2304      	movs	r3, #4
 800be6c:	e006      	b.n	800be7c <HAL_GPIO_Init+0x240>
 800be6e:	2303      	movs	r3, #3
 800be70:	e004      	b.n	800be7c <HAL_GPIO_Init+0x240>
 800be72:	2302      	movs	r3, #2
 800be74:	e002      	b.n	800be7c <HAL_GPIO_Init+0x240>
 800be76:	2301      	movs	r3, #1
 800be78:	e000      	b.n	800be7c <HAL_GPIO_Init+0x240>
 800be7a:	2300      	movs	r3, #0
 800be7c:	69fa      	ldr	r2, [r7, #28]
 800be7e:	f002 0203 	and.w	r2, r2, #3
 800be82:	0092      	lsls	r2, r2, #2
 800be84:	4093      	lsls	r3, r2
 800be86:	69ba      	ldr	r2, [r7, #24]
 800be88:	4313      	orrs	r3, r2
 800be8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800be8c:	4935      	ldr	r1, [pc, #212]	; (800bf64 <HAL_GPIO_Init+0x328>)
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	089b      	lsrs	r3, r3, #2
 800be92:	3302      	adds	r3, #2
 800be94:	69ba      	ldr	r2, [r7, #24]
 800be96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800be9a:	4b3d      	ldr	r3, [pc, #244]	; (800bf90 <HAL_GPIO_Init+0x354>)
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	43db      	mvns	r3, r3
 800bea4:	69ba      	ldr	r2, [r7, #24]
 800bea6:	4013      	ands	r3, r2
 800bea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800beb6:	69ba      	ldr	r2, [r7, #24]
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	4313      	orrs	r3, r2
 800bebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bebe:	4a34      	ldr	r2, [pc, #208]	; (800bf90 <HAL_GPIO_Init+0x354>)
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bec4:	4b32      	ldr	r3, [pc, #200]	; (800bf90 <HAL_GPIO_Init+0x354>)
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	43db      	mvns	r3, r3
 800bece:	69ba      	ldr	r2, [r7, #24]
 800bed0:	4013      	ands	r3, r2
 800bed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800bee0:	69ba      	ldr	r2, [r7, #24]
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bee8:	4a29      	ldr	r2, [pc, #164]	; (800bf90 <HAL_GPIO_Init+0x354>)
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800beee:	4b28      	ldr	r3, [pc, #160]	; (800bf90 <HAL_GPIO_Init+0x354>)
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	43db      	mvns	r3, r3
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	4013      	ands	r3, r2
 800befc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800bf0a:	69ba      	ldr	r2, [r7, #24]
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bf12:	4a1f      	ldr	r2, [pc, #124]	; (800bf90 <HAL_GPIO_Init+0x354>)
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bf18:	4b1d      	ldr	r3, [pc, #116]	; (800bf90 <HAL_GPIO_Init+0x354>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	43db      	mvns	r3, r3
 800bf22:	69ba      	ldr	r2, [r7, #24]
 800bf24:	4013      	ands	r3, r2
 800bf26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bf3c:	4a14      	ldr	r2, [pc, #80]	; (800bf90 <HAL_GPIO_Init+0x354>)
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	3301      	adds	r3, #1
 800bf46:	61fb      	str	r3, [r7, #28]
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	2b0f      	cmp	r3, #15
 800bf4c:	f67f ae86 	bls.w	800bc5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800bf50:	bf00      	nop
 800bf52:	bf00      	nop
 800bf54:	3724      	adds	r7, #36	; 0x24
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	40023800 	.word	0x40023800
 800bf64:	40013800 	.word	0x40013800
 800bf68:	40020000 	.word	0x40020000
 800bf6c:	40020400 	.word	0x40020400
 800bf70:	40020800 	.word	0x40020800
 800bf74:	40020c00 	.word	0x40020c00
 800bf78:	40021000 	.word	0x40021000
 800bf7c:	40021400 	.word	0x40021400
 800bf80:	40021800 	.word	0x40021800
 800bf84:	40021c00 	.word	0x40021c00
 800bf88:	40022000 	.word	0x40022000
 800bf8c:	40022400 	.word	0x40022400
 800bf90:	40013c00 	.word	0x40013c00

0800bf94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	691a      	ldr	r2, [r3, #16]
 800bfa4:	887b      	ldrh	r3, [r7, #2]
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bfac:	2301      	movs	r3, #1
 800bfae:	73fb      	strb	r3, [r7, #15]
 800bfb0:	e001      	b.n	800bfb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	807b      	strh	r3, [r7, #2]
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bfd4:	787b      	ldrb	r3, [r7, #1]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d003      	beq.n	800bfe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bfda:	887a      	ldrh	r2, [r7, #2]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800bfe0:	e003      	b.n	800bfea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800bfe2:	887b      	ldrh	r3, [r7, #2]
 800bfe4:	041a      	lsls	r2, r3, #16
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	619a      	str	r2, [r3, #24]
}
 800bfea:	bf00      	nop
 800bfec:	370c      	adds	r7, #12
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr

0800bff6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bff6:	b480      	push	{r7}
 800bff8:	b085      	sub	sp, #20
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	460b      	mov	r3, r1
 800c000:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c008:	887a      	ldrh	r2, [r7, #2]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	4013      	ands	r3, r2
 800c00e:	041a      	lsls	r2, r3, #16
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	43d9      	mvns	r1, r3
 800c014:	887b      	ldrh	r3, [r7, #2]
 800c016:	400b      	ands	r3, r1
 800c018:	431a      	orrs	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	619a      	str	r2, [r3, #24]
}
 800c01e:	bf00      	nop
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
	...

0800c02c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c02c:	b480      	push	{r7}
 800c02e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c030:	4b05      	ldr	r3, [pc, #20]	; (800c048 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a04      	ldr	r2, [pc, #16]	; (800c048 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c03a:	6013      	str	r3, [r2, #0]
}
 800c03c:	bf00      	nop
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	40007000 	.word	0x40007000

0800c04c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c056:	4b23      	ldr	r3, [pc, #140]	; (800c0e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800c058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05a:	4a22      	ldr	r2, [pc, #136]	; (800c0e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800c05c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c060:	6413      	str	r3, [r2, #64]	; 0x40
 800c062:	4b20      	ldr	r3, [pc, #128]	; (800c0e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800c064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c06e:	4b1e      	ldr	r3, [pc, #120]	; (800c0e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a1d      	ldr	r2, [pc, #116]	; (800c0e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c078:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c07a:	f7fe fa23 	bl	800a4c4 <HAL_GetTick>
 800c07e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c080:	e009      	b.n	800c096 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c082:	f7fe fa1f 	bl	800a4c4 <HAL_GetTick>
 800c086:	4602      	mov	r2, r0
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c090:	d901      	bls.n	800c096 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e022      	b.n	800c0dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c096:	4b14      	ldr	r3, [pc, #80]	; (800c0e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c09e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0a2:	d1ee      	bne.n	800c082 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c0a4:	4b10      	ldr	r3, [pc, #64]	; (800c0e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a0f      	ldr	r2, [pc, #60]	; (800c0e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c0aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c0b0:	f7fe fa08 	bl	800a4c4 <HAL_GetTick>
 800c0b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c0b6:	e009      	b.n	800c0cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c0b8:	f7fe fa04 	bl	800a4c4 <HAL_GetTick>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0c6:	d901      	bls.n	800c0cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	e007      	b.n	800c0dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c0cc:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0d8:	d1ee      	bne.n	800c0b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	40023800 	.word	0x40023800
 800c0e8:	40007000 	.word	0x40007000

0800c0ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	e291      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f000 8087 	beq.w	800c21e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c110:	4b96      	ldr	r3, [pc, #600]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	f003 030c 	and.w	r3, r3, #12
 800c118:	2b04      	cmp	r3, #4
 800c11a:	d00c      	beq.n	800c136 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c11c:	4b93      	ldr	r3, [pc, #588]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	f003 030c 	and.w	r3, r3, #12
 800c124:	2b08      	cmp	r3, #8
 800c126:	d112      	bne.n	800c14e <HAL_RCC_OscConfig+0x62>
 800c128:	4b90      	ldr	r3, [pc, #576]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c134:	d10b      	bne.n	800c14e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c136:	4b8d      	ldr	r3, [pc, #564]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d06c      	beq.n	800c21c <HAL_RCC_OscConfig+0x130>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d168      	bne.n	800c21c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e26b      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c156:	d106      	bne.n	800c166 <HAL_RCC_OscConfig+0x7a>
 800c158:	4b84      	ldr	r3, [pc, #528]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a83      	ldr	r2, [pc, #524]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c15e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c162:	6013      	str	r3, [r2, #0]
 800c164:	e02e      	b.n	800c1c4 <HAL_RCC_OscConfig+0xd8>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10c      	bne.n	800c188 <HAL_RCC_OscConfig+0x9c>
 800c16e:	4b7f      	ldr	r3, [pc, #508]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a7e      	ldr	r2, [pc, #504]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c178:	6013      	str	r3, [r2, #0]
 800c17a:	4b7c      	ldr	r3, [pc, #496]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a7b      	ldr	r2, [pc, #492]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	e01d      	b.n	800c1c4 <HAL_RCC_OscConfig+0xd8>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c190:	d10c      	bne.n	800c1ac <HAL_RCC_OscConfig+0xc0>
 800c192:	4b76      	ldr	r3, [pc, #472]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a75      	ldr	r2, [pc, #468]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c19c:	6013      	str	r3, [r2, #0]
 800c19e:	4b73      	ldr	r3, [pc, #460]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a72      	ldr	r2, [pc, #456]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c1a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1a8:	6013      	str	r3, [r2, #0]
 800c1aa:	e00b      	b.n	800c1c4 <HAL_RCC_OscConfig+0xd8>
 800c1ac:	4b6f      	ldr	r3, [pc, #444]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a6e      	ldr	r2, [pc, #440]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c1b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	4b6c      	ldr	r3, [pc, #432]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a6b      	ldr	r2, [pc, #428]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c1be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d013      	beq.n	800c1f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1cc:	f7fe f97a 	bl	800a4c4 <HAL_GetTick>
 800c1d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1d2:	e008      	b.n	800c1e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c1d4:	f7fe f976 	bl	800a4c4 <HAL_GetTick>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	1ad3      	subs	r3, r2, r3
 800c1de:	2b64      	cmp	r3, #100	; 0x64
 800c1e0:	d901      	bls.n	800c1e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	e21f      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1e6:	4b61      	ldr	r3, [pc, #388]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d0f0      	beq.n	800c1d4 <HAL_RCC_OscConfig+0xe8>
 800c1f2:	e014      	b.n	800c21e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1f4:	f7fe f966 	bl	800a4c4 <HAL_GetTick>
 800c1f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c1fa:	e008      	b.n	800c20e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c1fc:	f7fe f962 	bl	800a4c4 <HAL_GetTick>
 800c200:	4602      	mov	r2, r0
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	2b64      	cmp	r3, #100	; 0x64
 800c208:	d901      	bls.n	800c20e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c20a:	2303      	movs	r3, #3
 800c20c:	e20b      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c20e:	4b57      	ldr	r3, [pc, #348]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1f0      	bne.n	800c1fc <HAL_RCC_OscConfig+0x110>
 800c21a:	e000      	b.n	800c21e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c21c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f003 0302 	and.w	r3, r3, #2
 800c226:	2b00      	cmp	r3, #0
 800c228:	d069      	beq.n	800c2fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c22a:	4b50      	ldr	r3, [pc, #320]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	f003 030c 	and.w	r3, r3, #12
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00b      	beq.n	800c24e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c236:	4b4d      	ldr	r3, [pc, #308]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	f003 030c 	and.w	r3, r3, #12
 800c23e:	2b08      	cmp	r3, #8
 800c240:	d11c      	bne.n	800c27c <HAL_RCC_OscConfig+0x190>
 800c242:	4b4a      	ldr	r3, [pc, #296]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d116      	bne.n	800c27c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c24e:	4b47      	ldr	r3, [pc, #284]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f003 0302 	and.w	r3, r3, #2
 800c256:	2b00      	cmp	r3, #0
 800c258:	d005      	beq.n	800c266 <HAL_RCC_OscConfig+0x17a>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d001      	beq.n	800c266 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	e1df      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c266:	4b41      	ldr	r3, [pc, #260]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	00db      	lsls	r3, r3, #3
 800c274:	493d      	ldr	r1, [pc, #244]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c276:	4313      	orrs	r3, r2
 800c278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c27a:	e040      	b.n	800c2fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d023      	beq.n	800c2cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c284:	4b39      	ldr	r3, [pc, #228]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a38      	ldr	r2, [pc, #224]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c28a:	f043 0301 	orr.w	r3, r3, #1
 800c28e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c290:	f7fe f918 	bl	800a4c4 <HAL_GetTick>
 800c294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c296:	e008      	b.n	800c2aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c298:	f7fe f914 	bl	800a4c4 <HAL_GetTick>
 800c29c:	4602      	mov	r2, r0
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	d901      	bls.n	800c2aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	e1bd      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c2aa:	4b30      	ldr	r3, [pc, #192]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f003 0302 	and.w	r3, r3, #2
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d0f0      	beq.n	800c298 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2b6:	4b2d      	ldr	r3, [pc, #180]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	00db      	lsls	r3, r3, #3
 800c2c4:	4929      	ldr	r1, [pc, #164]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	600b      	str	r3, [r1, #0]
 800c2ca:	e018      	b.n	800c2fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c2cc:	4b27      	ldr	r3, [pc, #156]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a26      	ldr	r2, [pc, #152]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c2d2:	f023 0301 	bic.w	r3, r3, #1
 800c2d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2d8:	f7fe f8f4 	bl	800a4c4 <HAL_GetTick>
 800c2dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c2de:	e008      	b.n	800c2f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2e0:	f7fe f8f0 	bl	800a4c4 <HAL_GetTick>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d901      	bls.n	800c2f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	e199      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c2f2:	4b1e      	ldr	r3, [pc, #120]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 0302 	and.w	r3, r3, #2
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1f0      	bne.n	800c2e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f003 0308 	and.w	r3, r3, #8
 800c306:	2b00      	cmp	r3, #0
 800c308:	d038      	beq.n	800c37c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	695b      	ldr	r3, [r3, #20]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d019      	beq.n	800c346 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c312:	4b16      	ldr	r3, [pc, #88]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c316:	4a15      	ldr	r2, [pc, #84]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c318:	f043 0301 	orr.w	r3, r3, #1
 800c31c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c31e:	f7fe f8d1 	bl	800a4c4 <HAL_GetTick>
 800c322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c324:	e008      	b.n	800c338 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c326:	f7fe f8cd 	bl	800a4c4 <HAL_GetTick>
 800c32a:	4602      	mov	r2, r0
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	2b02      	cmp	r3, #2
 800c332:	d901      	bls.n	800c338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c334:	2303      	movs	r3, #3
 800c336:	e176      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c338:	4b0c      	ldr	r3, [pc, #48]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c33c:	f003 0302 	and.w	r3, r3, #2
 800c340:	2b00      	cmp	r3, #0
 800c342:	d0f0      	beq.n	800c326 <HAL_RCC_OscConfig+0x23a>
 800c344:	e01a      	b.n	800c37c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c346:	4b09      	ldr	r3, [pc, #36]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c34a:	4a08      	ldr	r2, [pc, #32]	; (800c36c <HAL_RCC_OscConfig+0x280>)
 800c34c:	f023 0301 	bic.w	r3, r3, #1
 800c350:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c352:	f7fe f8b7 	bl	800a4c4 <HAL_GetTick>
 800c356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c358:	e00a      	b.n	800c370 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c35a:	f7fe f8b3 	bl	800a4c4 <HAL_GetTick>
 800c35e:	4602      	mov	r2, r0
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	2b02      	cmp	r3, #2
 800c366:	d903      	bls.n	800c370 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c368:	2303      	movs	r3, #3
 800c36a:	e15c      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
 800c36c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c370:	4b91      	ldr	r3, [pc, #580]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c374:	f003 0302 	and.w	r3, r3, #2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1ee      	bne.n	800c35a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 0304 	and.w	r3, r3, #4
 800c384:	2b00      	cmp	r3, #0
 800c386:	f000 80a4 	beq.w	800c4d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c38a:	4b8b      	ldr	r3, [pc, #556]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10d      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c396:	4b88      	ldr	r3, [pc, #544]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39a:	4a87      	ldr	r2, [pc, #540]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c39c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3a0:	6413      	str	r3, [r2, #64]	; 0x40
 800c3a2:	4b85      	ldr	r3, [pc, #532]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3aa:	60bb      	str	r3, [r7, #8]
 800c3ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c3b2:	4b82      	ldr	r3, [pc, #520]	; (800c5bc <HAL_RCC_OscConfig+0x4d0>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d118      	bne.n	800c3f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c3be:	4b7f      	ldr	r3, [pc, #508]	; (800c5bc <HAL_RCC_OscConfig+0x4d0>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a7e      	ldr	r2, [pc, #504]	; (800c5bc <HAL_RCC_OscConfig+0x4d0>)
 800c3c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c3ca:	f7fe f87b 	bl	800a4c4 <HAL_GetTick>
 800c3ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c3d0:	e008      	b.n	800c3e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c3d2:	f7fe f877 	bl	800a4c4 <HAL_GetTick>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	2b64      	cmp	r3, #100	; 0x64
 800c3de:	d901      	bls.n	800c3e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	e120      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c3e4:	4b75      	ldr	r3, [pc, #468]	; (800c5bc <HAL_RCC_OscConfig+0x4d0>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d0f0      	beq.n	800c3d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d106      	bne.n	800c406 <HAL_RCC_OscConfig+0x31a>
 800c3f8:	4b6f      	ldr	r3, [pc, #444]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3fc:	4a6e      	ldr	r2, [pc, #440]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c3fe:	f043 0301 	orr.w	r3, r3, #1
 800c402:	6713      	str	r3, [r2, #112]	; 0x70
 800c404:	e02d      	b.n	800c462 <HAL_RCC_OscConfig+0x376>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10c      	bne.n	800c428 <HAL_RCC_OscConfig+0x33c>
 800c40e:	4b6a      	ldr	r3, [pc, #424]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c412:	4a69      	ldr	r2, [pc, #420]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c414:	f023 0301 	bic.w	r3, r3, #1
 800c418:	6713      	str	r3, [r2, #112]	; 0x70
 800c41a:	4b67      	ldr	r3, [pc, #412]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c41e:	4a66      	ldr	r2, [pc, #408]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c420:	f023 0304 	bic.w	r3, r3, #4
 800c424:	6713      	str	r3, [r2, #112]	; 0x70
 800c426:	e01c      	b.n	800c462 <HAL_RCC_OscConfig+0x376>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	2b05      	cmp	r3, #5
 800c42e:	d10c      	bne.n	800c44a <HAL_RCC_OscConfig+0x35e>
 800c430:	4b61      	ldr	r3, [pc, #388]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c434:	4a60      	ldr	r2, [pc, #384]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c436:	f043 0304 	orr.w	r3, r3, #4
 800c43a:	6713      	str	r3, [r2, #112]	; 0x70
 800c43c:	4b5e      	ldr	r3, [pc, #376]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c440:	4a5d      	ldr	r2, [pc, #372]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c442:	f043 0301 	orr.w	r3, r3, #1
 800c446:	6713      	str	r3, [r2, #112]	; 0x70
 800c448:	e00b      	b.n	800c462 <HAL_RCC_OscConfig+0x376>
 800c44a:	4b5b      	ldr	r3, [pc, #364]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c44e:	4a5a      	ldr	r2, [pc, #360]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c450:	f023 0301 	bic.w	r3, r3, #1
 800c454:	6713      	str	r3, [r2, #112]	; 0x70
 800c456:	4b58      	ldr	r3, [pc, #352]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c45a:	4a57      	ldr	r2, [pc, #348]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c45c:	f023 0304 	bic.w	r3, r3, #4
 800c460:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d015      	beq.n	800c496 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c46a:	f7fe f82b 	bl	800a4c4 <HAL_GetTick>
 800c46e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c470:	e00a      	b.n	800c488 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c472:	f7fe f827 	bl	800a4c4 <HAL_GetTick>
 800c476:	4602      	mov	r2, r0
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	1ad3      	subs	r3, r2, r3
 800c47c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c480:	4293      	cmp	r3, r2
 800c482:	d901      	bls.n	800c488 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c484:	2303      	movs	r3, #3
 800c486:	e0ce      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c488:	4b4b      	ldr	r3, [pc, #300]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c48c:	f003 0302 	and.w	r3, r3, #2
 800c490:	2b00      	cmp	r3, #0
 800c492:	d0ee      	beq.n	800c472 <HAL_RCC_OscConfig+0x386>
 800c494:	e014      	b.n	800c4c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c496:	f7fe f815 	bl	800a4c4 <HAL_GetTick>
 800c49a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c49c:	e00a      	b.n	800c4b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c49e:	f7fe f811 	bl	800a4c4 <HAL_GetTick>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d901      	bls.n	800c4b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c4b0:	2303      	movs	r3, #3
 800c4b2:	e0b8      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c4b4:	4b40      	ldr	r3, [pc, #256]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b8:	f003 0302 	and.w	r3, r3, #2
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1ee      	bne.n	800c49e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c4c0:	7dfb      	ldrb	r3, [r7, #23]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d105      	bne.n	800c4d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c4c6:	4b3c      	ldr	r3, [pc, #240]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ca:	4a3b      	ldr	r2, [pc, #236]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c4cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f000 80a4 	beq.w	800c624 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c4dc:	4b36      	ldr	r3, [pc, #216]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	f003 030c 	and.w	r3, r3, #12
 800c4e4:	2b08      	cmp	r3, #8
 800c4e6:	d06b      	beq.n	800c5c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d149      	bne.n	800c584 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c4f0:	4b31      	ldr	r3, [pc, #196]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a30      	ldr	r2, [pc, #192]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c4f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c4fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4fc:	f7fd ffe2 	bl	800a4c4 <HAL_GetTick>
 800c500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c502:	e008      	b.n	800c516 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c504:	f7fd ffde 	bl	800a4c4 <HAL_GetTick>
 800c508:	4602      	mov	r2, r0
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d901      	bls.n	800c516 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c512:	2303      	movs	r3, #3
 800c514:	e087      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c516:	4b28      	ldr	r3, [pc, #160]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1f0      	bne.n	800c504 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	69da      	ldr	r2, [r3, #28]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a1b      	ldr	r3, [r3, #32]
 800c52a:	431a      	orrs	r2, r3
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c530:	019b      	lsls	r3, r3, #6
 800c532:	431a      	orrs	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c538:	085b      	lsrs	r3, r3, #1
 800c53a:	3b01      	subs	r3, #1
 800c53c:	041b      	lsls	r3, r3, #16
 800c53e:	431a      	orrs	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c544:	061b      	lsls	r3, r3, #24
 800c546:	4313      	orrs	r3, r2
 800c548:	4a1b      	ldr	r2, [pc, #108]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c54a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c54e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c550:	4b19      	ldr	r3, [pc, #100]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a18      	ldr	r2, [pc, #96]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c55a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c55c:	f7fd ffb2 	bl	800a4c4 <HAL_GetTick>
 800c560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c562:	e008      	b.n	800c576 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c564:	f7fd ffae 	bl	800a4c4 <HAL_GetTick>
 800c568:	4602      	mov	r2, r0
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	2b02      	cmp	r3, #2
 800c570:	d901      	bls.n	800c576 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c572:	2303      	movs	r3, #3
 800c574:	e057      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c576:	4b10      	ldr	r3, [pc, #64]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0f0      	beq.n	800c564 <HAL_RCC_OscConfig+0x478>
 800c582:	e04f      	b.n	800c624 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c584:	4b0c      	ldr	r3, [pc, #48]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a0b      	ldr	r2, [pc, #44]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c58a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c58e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c590:	f7fd ff98 	bl	800a4c4 <HAL_GetTick>
 800c594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c596:	e008      	b.n	800c5aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c598:	f7fd ff94 	bl	800a4c4 <HAL_GetTick>
 800c59c:	4602      	mov	r2, r0
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d901      	bls.n	800c5aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c5a6:	2303      	movs	r3, #3
 800c5a8:	e03d      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5aa:	4b03      	ldr	r3, [pc, #12]	; (800c5b8 <HAL_RCC_OscConfig+0x4cc>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1f0      	bne.n	800c598 <HAL_RCC_OscConfig+0x4ac>
 800c5b6:	e035      	b.n	800c624 <HAL_RCC_OscConfig+0x538>
 800c5b8:	40023800 	.word	0x40023800
 800c5bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c5c0:	4b1b      	ldr	r3, [pc, #108]	; (800c630 <HAL_RCC_OscConfig+0x544>)
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	699b      	ldr	r3, [r3, #24]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d028      	beq.n	800c620 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d121      	bne.n	800c620 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d11a      	bne.n	800c620 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c5f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d111      	bne.n	800c620 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c606:	085b      	lsrs	r3, r3, #1
 800c608:	3b01      	subs	r3, #1
 800c60a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d107      	bne.n	800c620 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c61a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d001      	beq.n	800c624 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	e000      	b.n	800c626 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3718      	adds	r7, #24
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	40023800 	.word	0x40023800

0800c634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d101      	bne.n	800c64c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e0d0      	b.n	800c7ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c64c:	4b6a      	ldr	r3, [pc, #424]	; (800c7f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 030f 	and.w	r3, r3, #15
 800c654:	683a      	ldr	r2, [r7, #0]
 800c656:	429a      	cmp	r2, r3
 800c658:	d910      	bls.n	800c67c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c65a:	4b67      	ldr	r3, [pc, #412]	; (800c7f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f023 020f 	bic.w	r2, r3, #15
 800c662:	4965      	ldr	r1, [pc, #404]	; (800c7f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	4313      	orrs	r3, r2
 800c668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c66a:	4b63      	ldr	r3, [pc, #396]	; (800c7f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f003 030f 	and.w	r3, r3, #15
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	429a      	cmp	r2, r3
 800c676:	d001      	beq.n	800c67c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	e0b8      	b.n	800c7ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f003 0302 	and.w	r3, r3, #2
 800c684:	2b00      	cmp	r3, #0
 800c686:	d020      	beq.n	800c6ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f003 0304 	and.w	r3, r3, #4
 800c690:	2b00      	cmp	r3, #0
 800c692:	d005      	beq.n	800c6a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c694:	4b59      	ldr	r3, [pc, #356]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	4a58      	ldr	r2, [pc, #352]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c69a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c69e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0308 	and.w	r3, r3, #8
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d005      	beq.n	800c6b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c6ac:	4b53      	ldr	r3, [pc, #332]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	4a52      	ldr	r2, [pc, #328]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c6b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c6b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c6b8:	4b50      	ldr	r3, [pc, #320]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	494d      	ldr	r1, [pc, #308]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d040      	beq.n	800c758 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d107      	bne.n	800c6ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c6de:	4b47      	ldr	r3, [pc, #284]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d115      	bne.n	800c716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	e07f      	b.n	800c7ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d107      	bne.n	800c706 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6f6:	4b41      	ldr	r3, [pc, #260]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d109      	bne.n	800c716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e073      	b.n	800c7ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c706:	4b3d      	ldr	r3, [pc, #244]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	e06b      	b.n	800c7ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c716:	4b39      	ldr	r3, [pc, #228]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	f023 0203 	bic.w	r2, r3, #3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	4936      	ldr	r1, [pc, #216]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c724:	4313      	orrs	r3, r2
 800c726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c728:	f7fd fecc 	bl	800a4c4 <HAL_GetTick>
 800c72c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c72e:	e00a      	b.n	800c746 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c730:	f7fd fec8 	bl	800a4c4 <HAL_GetTick>
 800c734:	4602      	mov	r2, r0
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c73e:	4293      	cmp	r3, r2
 800c740:	d901      	bls.n	800c746 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c742:	2303      	movs	r3, #3
 800c744:	e053      	b.n	800c7ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c746:	4b2d      	ldr	r3, [pc, #180]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	f003 020c 	and.w	r2, r3, #12
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	429a      	cmp	r2, r3
 800c756:	d1eb      	bne.n	800c730 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c758:	4b27      	ldr	r3, [pc, #156]	; (800c7f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 030f 	and.w	r3, r3, #15
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	429a      	cmp	r2, r3
 800c764:	d210      	bcs.n	800c788 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c766:	4b24      	ldr	r3, [pc, #144]	; (800c7f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f023 020f 	bic.w	r2, r3, #15
 800c76e:	4922      	ldr	r1, [pc, #136]	; (800c7f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	4313      	orrs	r3, r2
 800c774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c776:	4b20      	ldr	r3, [pc, #128]	; (800c7f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f003 030f 	and.w	r3, r3, #15
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	429a      	cmp	r2, r3
 800c782:	d001      	beq.n	800c788 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c784:	2301      	movs	r3, #1
 800c786:	e032      	b.n	800c7ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 0304 	and.w	r3, r3, #4
 800c790:	2b00      	cmp	r3, #0
 800c792:	d008      	beq.n	800c7a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c794:	4b19      	ldr	r3, [pc, #100]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	4916      	ldr	r1, [pc, #88]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0308 	and.w	r3, r3, #8
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d009      	beq.n	800c7c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c7b2:	4b12      	ldr	r3, [pc, #72]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	00db      	lsls	r3, r3, #3
 800c7c0:	490e      	ldr	r1, [pc, #56]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c7c6:	f000 f821 	bl	800c80c <HAL_RCC_GetSysClockFreq>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	4b0b      	ldr	r3, [pc, #44]	; (800c7fc <HAL_RCC_ClockConfig+0x1c8>)
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	091b      	lsrs	r3, r3, #4
 800c7d2:	f003 030f 	and.w	r3, r3, #15
 800c7d6:	490a      	ldr	r1, [pc, #40]	; (800c800 <HAL_RCC_ClockConfig+0x1cc>)
 800c7d8:	5ccb      	ldrb	r3, [r1, r3]
 800c7da:	fa22 f303 	lsr.w	r3, r2, r3
 800c7de:	4a09      	ldr	r2, [pc, #36]	; (800c804 <HAL_RCC_ClockConfig+0x1d0>)
 800c7e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c7e2:	4b09      	ldr	r3, [pc, #36]	; (800c808 <HAL_RCC_ClockConfig+0x1d4>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fd fe28 	bl	800a43c <HAL_InitTick>

  return HAL_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	40023c00 	.word	0x40023c00
 800c7fc:	40023800 	.word	0x40023800
 800c800:	08011e10 	.word	0x08011e10
 800c804:	2000001c 	.word	0x2000001c
 800c808:	20000020 	.word	0x20000020

0800c80c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c80c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c810:	b094      	sub	sp, #80	; 0x50
 800c812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	647b      	str	r3, [r7, #68]	; 0x44
 800c818:	2300      	movs	r3, #0
 800c81a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c81c:	2300      	movs	r3, #0
 800c81e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800c820:	2300      	movs	r3, #0
 800c822:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c824:	4b79      	ldr	r3, [pc, #484]	; (800ca0c <HAL_RCC_GetSysClockFreq+0x200>)
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	f003 030c 	and.w	r3, r3, #12
 800c82c:	2b08      	cmp	r3, #8
 800c82e:	d00d      	beq.n	800c84c <HAL_RCC_GetSysClockFreq+0x40>
 800c830:	2b08      	cmp	r3, #8
 800c832:	f200 80e1 	bhi.w	800c9f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <HAL_RCC_GetSysClockFreq+0x34>
 800c83a:	2b04      	cmp	r3, #4
 800c83c:	d003      	beq.n	800c846 <HAL_RCC_GetSysClockFreq+0x3a>
 800c83e:	e0db      	b.n	800c9f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c840:	4b73      	ldr	r3, [pc, #460]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x204>)
 800c842:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c844:	e0db      	b.n	800c9fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c846:	4b73      	ldr	r3, [pc, #460]	; (800ca14 <HAL_RCC_GetSysClockFreq+0x208>)
 800c848:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c84a:	e0d8      	b.n	800c9fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c84c:	4b6f      	ldr	r3, [pc, #444]	; (800ca0c <HAL_RCC_GetSysClockFreq+0x200>)
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c854:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c856:	4b6d      	ldr	r3, [pc, #436]	; (800ca0c <HAL_RCC_GetSysClockFreq+0x200>)
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d063      	beq.n	800c92a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c862:	4b6a      	ldr	r3, [pc, #424]	; (800ca0c <HAL_RCC_GetSysClockFreq+0x200>)
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	099b      	lsrs	r3, r3, #6
 800c868:	2200      	movs	r2, #0
 800c86a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c86c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c874:	633b      	str	r3, [r7, #48]	; 0x30
 800c876:	2300      	movs	r3, #0
 800c878:	637b      	str	r3, [r7, #52]	; 0x34
 800c87a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c87e:	4622      	mov	r2, r4
 800c880:	462b      	mov	r3, r5
 800c882:	f04f 0000 	mov.w	r0, #0
 800c886:	f04f 0100 	mov.w	r1, #0
 800c88a:	0159      	lsls	r1, r3, #5
 800c88c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c890:	0150      	lsls	r0, r2, #5
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	4621      	mov	r1, r4
 800c898:	1a51      	subs	r1, r2, r1
 800c89a:	6139      	str	r1, [r7, #16]
 800c89c:	4629      	mov	r1, r5
 800c89e:	eb63 0301 	sbc.w	r3, r3, r1
 800c8a2:	617b      	str	r3, [r7, #20]
 800c8a4:	f04f 0200 	mov.w	r2, #0
 800c8a8:	f04f 0300 	mov.w	r3, #0
 800c8ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c8b0:	4659      	mov	r1, fp
 800c8b2:	018b      	lsls	r3, r1, #6
 800c8b4:	4651      	mov	r1, sl
 800c8b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c8ba:	4651      	mov	r1, sl
 800c8bc:	018a      	lsls	r2, r1, #6
 800c8be:	4651      	mov	r1, sl
 800c8c0:	ebb2 0801 	subs.w	r8, r2, r1
 800c8c4:	4659      	mov	r1, fp
 800c8c6:	eb63 0901 	sbc.w	r9, r3, r1
 800c8ca:	f04f 0200 	mov.w	r2, #0
 800c8ce:	f04f 0300 	mov.w	r3, #0
 800c8d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c8da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c8de:	4690      	mov	r8, r2
 800c8e0:	4699      	mov	r9, r3
 800c8e2:	4623      	mov	r3, r4
 800c8e4:	eb18 0303 	adds.w	r3, r8, r3
 800c8e8:	60bb      	str	r3, [r7, #8]
 800c8ea:	462b      	mov	r3, r5
 800c8ec:	eb49 0303 	adc.w	r3, r9, r3
 800c8f0:	60fb      	str	r3, [r7, #12]
 800c8f2:	f04f 0200 	mov.w	r2, #0
 800c8f6:	f04f 0300 	mov.w	r3, #0
 800c8fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c8fe:	4629      	mov	r1, r5
 800c900:	024b      	lsls	r3, r1, #9
 800c902:	4621      	mov	r1, r4
 800c904:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c908:	4621      	mov	r1, r4
 800c90a:	024a      	lsls	r2, r1, #9
 800c90c:	4610      	mov	r0, r2
 800c90e:	4619      	mov	r1, r3
 800c910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c912:	2200      	movs	r2, #0
 800c914:	62bb      	str	r3, [r7, #40]	; 0x28
 800c916:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c91c:	f7f4 f954 	bl	8000bc8 <__aeabi_uldivmod>
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	4613      	mov	r3, r2
 800c926:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c928:	e058      	b.n	800c9dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c92a:	4b38      	ldr	r3, [pc, #224]	; (800ca0c <HAL_RCC_GetSysClockFreq+0x200>)
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	099b      	lsrs	r3, r3, #6
 800c930:	2200      	movs	r2, #0
 800c932:	4618      	mov	r0, r3
 800c934:	4611      	mov	r1, r2
 800c936:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c93a:	623b      	str	r3, [r7, #32]
 800c93c:	2300      	movs	r3, #0
 800c93e:	627b      	str	r3, [r7, #36]	; 0x24
 800c940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c944:	4642      	mov	r2, r8
 800c946:	464b      	mov	r3, r9
 800c948:	f04f 0000 	mov.w	r0, #0
 800c94c:	f04f 0100 	mov.w	r1, #0
 800c950:	0159      	lsls	r1, r3, #5
 800c952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c956:	0150      	lsls	r0, r2, #5
 800c958:	4602      	mov	r2, r0
 800c95a:	460b      	mov	r3, r1
 800c95c:	4641      	mov	r1, r8
 800c95e:	ebb2 0a01 	subs.w	sl, r2, r1
 800c962:	4649      	mov	r1, r9
 800c964:	eb63 0b01 	sbc.w	fp, r3, r1
 800c968:	f04f 0200 	mov.w	r2, #0
 800c96c:	f04f 0300 	mov.w	r3, #0
 800c970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c97c:	ebb2 040a 	subs.w	r4, r2, sl
 800c980:	eb63 050b 	sbc.w	r5, r3, fp
 800c984:	f04f 0200 	mov.w	r2, #0
 800c988:	f04f 0300 	mov.w	r3, #0
 800c98c:	00eb      	lsls	r3, r5, #3
 800c98e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c992:	00e2      	lsls	r2, r4, #3
 800c994:	4614      	mov	r4, r2
 800c996:	461d      	mov	r5, r3
 800c998:	4643      	mov	r3, r8
 800c99a:	18e3      	adds	r3, r4, r3
 800c99c:	603b      	str	r3, [r7, #0]
 800c99e:	464b      	mov	r3, r9
 800c9a0:	eb45 0303 	adc.w	r3, r5, r3
 800c9a4:	607b      	str	r3, [r7, #4]
 800c9a6:	f04f 0200 	mov.w	r2, #0
 800c9aa:	f04f 0300 	mov.w	r3, #0
 800c9ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	028b      	lsls	r3, r1, #10
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c9bc:	4621      	mov	r1, r4
 800c9be:	028a      	lsls	r2, r1, #10
 800c9c0:	4610      	mov	r0, r2
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	61bb      	str	r3, [r7, #24]
 800c9ca:	61fa      	str	r2, [r7, #28]
 800c9cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c9d0:	f7f4 f8fa 	bl	8000bc8 <__aeabi_uldivmod>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	4613      	mov	r3, r2
 800c9da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c9dc:	4b0b      	ldr	r3, [pc, #44]	; (800ca0c <HAL_RCC_GetSysClockFreq+0x200>)
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	0c1b      	lsrs	r3, r3, #16
 800c9e2:	f003 0303 	and.w	r3, r3, #3
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800c9ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c9f6:	e002      	b.n	800c9fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c9f8:	4b05      	ldr	r3, [pc, #20]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x204>)
 800c9fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c9fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c9fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3750      	adds	r7, #80	; 0x50
 800ca04:	46bd      	mov	sp, r7
 800ca06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca0a:	bf00      	nop
 800ca0c:	40023800 	.word	0x40023800
 800ca10:	00f42400 	.word	0x00f42400
 800ca14:	007a1200 	.word	0x007a1200

0800ca18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ca1c:	4b03      	ldr	r3, [pc, #12]	; (800ca2c <HAL_RCC_GetHCLKFreq+0x14>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	2000001c 	.word	0x2000001c

0800ca30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ca34:	f7ff fff0 	bl	800ca18 <HAL_RCC_GetHCLKFreq>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	4b05      	ldr	r3, [pc, #20]	; (800ca50 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	0a9b      	lsrs	r3, r3, #10
 800ca40:	f003 0307 	and.w	r3, r3, #7
 800ca44:	4903      	ldr	r1, [pc, #12]	; (800ca54 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ca46:	5ccb      	ldrb	r3, [r1, r3]
 800ca48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	40023800 	.word	0x40023800
 800ca54:	08011e20 	.word	0x08011e20

0800ca58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ca5c:	f7ff ffdc 	bl	800ca18 <HAL_RCC_GetHCLKFreq>
 800ca60:	4602      	mov	r2, r0
 800ca62:	4b05      	ldr	r3, [pc, #20]	; (800ca78 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	0b5b      	lsrs	r3, r3, #13
 800ca68:	f003 0307 	and.w	r3, r3, #7
 800ca6c:	4903      	ldr	r1, [pc, #12]	; (800ca7c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca6e:	5ccb      	ldrb	r3, [r1, r3]
 800ca70:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	40023800 	.word	0x40023800
 800ca7c:	08011e20 	.word	0x08011e20

0800ca80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f003 0301 	and.w	r3, r3, #1
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d012      	beq.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800caa8:	4b69      	ldr	r3, [pc, #420]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	4a68      	ldr	r2, [pc, #416]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800caae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cab2:	6093      	str	r3, [r2, #8]
 800cab4:	4b66      	ldr	r3, [pc, #408]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cab6:	689a      	ldr	r2, [r3, #8]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cabc:	4964      	ldr	r1, [pc, #400]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cabe:	4313      	orrs	r3, r2
 800cac0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d101      	bne.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800caca:	2301      	movs	r3, #1
 800cacc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d017      	beq.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cada:	4b5d      	ldr	r3, [pc, #372]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cadc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cae8:	4959      	ldr	r1, [pc, #356]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800caea:	4313      	orrs	r3, r2
 800caec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800caf8:	d101      	bne.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cafa:	2301      	movs	r3, #1
 800cafc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d101      	bne.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cb06:	2301      	movs	r3, #1
 800cb08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d017      	beq.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cb16:	4b4e      	ldr	r3, [pc, #312]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb24:	494a      	ldr	r1, [pc, #296]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb26:	4313      	orrs	r3, r2
 800cb28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb34:	d101      	bne.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cb36:	2301      	movs	r3, #1
 800cb38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d101      	bne.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800cb42:	2301      	movs	r3, #1
 800cb44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d001      	beq.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800cb52:	2301      	movs	r3, #1
 800cb54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 0320 	and.w	r3, r3, #32
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 808b 	beq.w	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cb64:	4b3a      	ldr	r3, [pc, #232]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb68:	4a39      	ldr	r2, [pc, #228]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb6e:	6413      	str	r3, [r2, #64]	; 0x40
 800cb70:	4b37      	ldr	r3, [pc, #220]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb78:	60bb      	str	r3, [r7, #8]
 800cb7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cb7c:	4b35      	ldr	r3, [pc, #212]	; (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a34      	ldr	r2, [pc, #208]	; (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cb82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb88:	f7fd fc9c 	bl	800a4c4 <HAL_GetTick>
 800cb8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cb8e:	e008      	b.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cb90:	f7fd fc98 	bl	800a4c4 <HAL_GetTick>
 800cb94:	4602      	mov	r2, r0
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	2b64      	cmp	r3, #100	; 0x64
 800cb9c:	d901      	bls.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	e31f      	b.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cba2:	4b2c      	ldr	r3, [pc, #176]	; (800cc54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d0f0      	beq.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cbae:	4b28      	ldr	r3, [pc, #160]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d035      	beq.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d02e      	beq.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cbcc:	4b20      	ldr	r3, [pc, #128]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cbd6:	4b1e      	ldr	r3, [pc, #120]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbda:	4a1d      	ldr	r2, [pc, #116]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbe0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cbe2:	4b1b      	ldr	r3, [pc, #108]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbe6:	4a1a      	ldr	r2, [pc, #104]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cbee:	4a18      	ldr	r2, [pc, #96]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cbf4:	4b16      	ldr	r3, [pc, #88]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d114      	bne.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc00:	f7fd fc60 	bl	800a4c4 <HAL_GetTick>
 800cc04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc06:	e00a      	b.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cc08:	f7fd fc5c 	bl	800a4c4 <HAL_GetTick>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d901      	bls.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	e2e1      	b.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc1e:	4b0c      	ldr	r3, [pc, #48]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc22:	f003 0302 	and.w	r3, r3, #2
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d0ee      	beq.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc36:	d111      	bne.n	800cc5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cc38:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cc44:	4b04      	ldr	r3, [pc, #16]	; (800cc58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800cc46:	400b      	ands	r3, r1
 800cc48:	4901      	ldr	r1, [pc, #4]	; (800cc50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	608b      	str	r3, [r1, #8]
 800cc4e:	e00b      	b.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800cc50:	40023800 	.word	0x40023800
 800cc54:	40007000 	.word	0x40007000
 800cc58:	0ffffcff 	.word	0x0ffffcff
 800cc5c:	4ba8      	ldr	r3, [pc, #672]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	4aa7      	ldr	r2, [pc, #668]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cc62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cc66:	6093      	str	r3, [r2, #8]
 800cc68:	4ba5      	ldr	r3, [pc, #660]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cc6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc74:	49a2      	ldr	r1, [pc, #648]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cc76:	4313      	orrs	r3, r2
 800cc78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f003 0310 	and.w	r3, r3, #16
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d010      	beq.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc86:	4b9e      	ldr	r3, [pc, #632]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cc88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc8c:	4a9c      	ldr	r2, [pc, #624]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cc8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cc96:	4b9a      	ldr	r3, [pc, #616]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cc98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca0:	4997      	ldr	r1, [pc, #604]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cca2:	4313      	orrs	r3, r2
 800cca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00a      	beq.n	800ccca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ccb4:	4b92      	ldr	r3, [pc, #584]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ccb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccc2:	498f      	ldr	r1, [pc, #572]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00a      	beq.n	800ccec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ccd6:	4b8a      	ldr	r3, [pc, #552]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ccd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cce4:	4986      	ldr	r1, [pc, #536]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cce6:	4313      	orrs	r3, r2
 800cce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d00a      	beq.n	800cd0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ccf8:	4b81      	ldr	r3, [pc, #516]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ccfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd06:	497e      	ldr	r1, [pc, #504]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00a      	beq.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cd1a:	4b79      	ldr	r3, [pc, #484]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cd1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd28:	4975      	ldr	r1, [pc, #468]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00a      	beq.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cd3c:	4b70      	ldr	r3, [pc, #448]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cd3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd42:	f023 0203 	bic.w	r2, r3, #3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd4a:	496d      	ldr	r1, [pc, #436]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00a      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cd5e:	4b68      	ldr	r3, [pc, #416]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cd60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd64:	f023 020c 	bic.w	r2, r3, #12
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd6c:	4964      	ldr	r1, [pc, #400]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00a      	beq.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cd80:	4b5f      	ldr	r3, [pc, #380]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd8e:	495c      	ldr	r1, [pc, #368]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cd90:	4313      	orrs	r3, r2
 800cd92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00a      	beq.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cda2:	4b57      	ldr	r3, [pc, #348]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cda4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cda8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdb0:	4953      	ldr	r1, [pc, #332]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00a      	beq.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cdc4:	4b4e      	ldr	r3, [pc, #312]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cdc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdd2:	494b      	ldr	r1, [pc, #300]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00a      	beq.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800cde6:	4b46      	ldr	r3, [pc, #280]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cde8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdf4:	4942      	ldr	r1, [pc, #264]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00a      	beq.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ce08:	4b3d      	ldr	r3, [pc, #244]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ce0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce16:	493a      	ldr	r1, [pc, #232]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00a      	beq.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ce2a:	4b35      	ldr	r3, [pc, #212]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ce2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce38:	4931      	ldr	r1, [pc, #196]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00a      	beq.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ce4c:	4b2c      	ldr	r3, [pc, #176]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ce4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce5a:	4929      	ldr	r1, [pc, #164]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d011      	beq.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ce6e:	4b24      	ldr	r3, [pc, #144]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ce70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce7c:	4920      	ldr	r1, [pc, #128]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce8c:	d101      	bne.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00a      	beq.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ce9e:	4b18      	ldr	r3, [pc, #96]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cea4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceac:	4914      	ldr	r1, [pc, #80]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00b      	beq.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cec0:	4b0f      	ldr	r3, [pc, #60]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cec6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ced0:	490b      	ldr	r1, [pc, #44]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ced2:	4313      	orrs	r3, r2
 800ced4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d006      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x46c>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f000 80d8 	beq.w	800d09c <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ceec:	4b04      	ldr	r3, [pc, #16]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a03      	ldr	r2, [pc, #12]	; (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800cef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cef8:	f7fd fae4 	bl	800a4c4 <HAL_GetTick>
 800cefc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cefe:	e00a      	b.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800cf00:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800cf04:	f7fd fade 	bl	800a4c4 <HAL_GetTick>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	2b64      	cmp	r3, #100	; 0x64
 800cf10:	d901      	bls.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	e165      	b.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cf16:	4ba9      	ldr	r3, [pc, #676]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d1f0      	bne.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d021      	beq.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d11d      	bne.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cf36:	4ba1      	ldr	r3, [pc, #644]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800cf38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf3c:	0c1b      	lsrs	r3, r3, #16
 800cf3e:	f003 0303 	and.w	r3, r3, #3
 800cf42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cf44:	4b9d      	ldr	r3, [pc, #628]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800cf46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf4a:	0e1b      	lsrs	r3, r3, #24
 800cf4c:	f003 030f 	and.w	r3, r3, #15
 800cf50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	019a      	lsls	r2, r3, #6
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	041b      	lsls	r3, r3, #16
 800cf5c:	431a      	orrs	r2, r3
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	061b      	lsls	r3, r3, #24
 800cf62:	431a      	orrs	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	071b      	lsls	r3, r3, #28
 800cf6a:	4994      	ldr	r1, [pc, #592]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d004      	beq.n	800cf88 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf86:	d00a      	beq.n	800cf9e <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d02e      	beq.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf9c:	d129      	bne.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cf9e:	4b87      	ldr	r3, [pc, #540]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800cfa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfa4:	0c1b      	lsrs	r3, r3, #16
 800cfa6:	f003 0303 	and.w	r3, r3, #3
 800cfaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cfac:	4b83      	ldr	r3, [pc, #524]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800cfae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfb2:	0f1b      	lsrs	r3, r3, #28
 800cfb4:	f003 0307 	and.w	r3, r3, #7
 800cfb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	019a      	lsls	r2, r3, #6
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	041b      	lsls	r3, r3, #16
 800cfc4:	431a      	orrs	r2, r3
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	061b      	lsls	r3, r3, #24
 800cfcc:	431a      	orrs	r2, r3
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	071b      	lsls	r3, r3, #28
 800cfd2:	497a      	ldr	r1, [pc, #488]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800cfda:	4b78      	ldr	r3, [pc, #480]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800cfdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfe0:	f023 021f 	bic.w	r2, r3, #31
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	4974      	ldr	r1, [pc, #464]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800cfec:	4313      	orrs	r3, r2
 800cfee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d01d      	beq.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cffe:	4b6f      	ldr	r3, [pc, #444]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d004:	0e1b      	lsrs	r3, r3, #24
 800d006:	f003 030f 	and.w	r3, r3, #15
 800d00a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d00c:	4b6b      	ldr	r3, [pc, #428]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d00e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d012:	0f1b      	lsrs	r3, r3, #28
 800d014:	f003 0307 	and.w	r3, r3, #7
 800d018:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	019a      	lsls	r2, r3, #6
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	041b      	lsls	r3, r3, #16
 800d026:	431a      	orrs	r2, r3
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	061b      	lsls	r3, r3, #24
 800d02c:	431a      	orrs	r2, r3
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	071b      	lsls	r3, r3, #28
 800d032:	4962      	ldr	r1, [pc, #392]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d034:	4313      	orrs	r3, r2
 800d036:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d042:	2b00      	cmp	r3, #0
 800d044:	d011      	beq.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	019a      	lsls	r2, r3, #6
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	041b      	lsls	r3, r3, #16
 800d052:	431a      	orrs	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	061b      	lsls	r3, r3, #24
 800d05a:	431a      	orrs	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	071b      	lsls	r3, r3, #28
 800d062:	4956      	ldr	r1, [pc, #344]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d064:	4313      	orrs	r3, r2
 800d066:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d06a:	4b54      	ldr	r3, [pc, #336]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a53      	ldr	r2, [pc, #332]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d070:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d076:	f7fd fa25 	bl	800a4c4 <HAL_GetTick>
 800d07a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d07c:	e008      	b.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d07e:	f7fd fa21 	bl	800a4c4 <HAL_GetTick>
 800d082:	4602      	mov	r2, r0
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	1ad3      	subs	r3, r2, r3
 800d088:	2b64      	cmp	r3, #100	; 0x64
 800d08a:	d901      	bls.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d08c:	2303      	movs	r3, #3
 800d08e:	e0a8      	b.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d090:	4b4a      	ldr	r3, [pc, #296]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d0f0      	beq.n	800d07e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	f040 809e 	bne.w	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d0a4:	4b45      	ldr	r3, [pc, #276]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a44      	ldr	r2, [pc, #272]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d0aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0b0:	f7fd fa08 	bl	800a4c4 <HAL_GetTick>
 800d0b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d0b6:	e008      	b.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d0b8:	f7fd fa04 	bl	800a4c4 <HAL_GetTick>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	2b64      	cmp	r3, #100	; 0x64
 800d0c4:	d901      	bls.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	e08b      	b.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d0ca:	4b3c      	ldr	r3, [pc, #240]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0d6:	d0ef      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d003      	beq.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d009      	beq.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d02e      	beq.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d12a      	bne.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d100:	4b2e      	ldr	r3, [pc, #184]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d106:	0c1b      	lsrs	r3, r3, #16
 800d108:	f003 0303 	and.w	r3, r3, #3
 800d10c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d10e:	4b2b      	ldr	r3, [pc, #172]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d114:	0f1b      	lsrs	r3, r3, #28
 800d116:	f003 0307 	and.w	r3, r3, #7
 800d11a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	695b      	ldr	r3, [r3, #20]
 800d120:	019a      	lsls	r2, r3, #6
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	041b      	lsls	r3, r3, #16
 800d126:	431a      	orrs	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	061b      	lsls	r3, r3, #24
 800d12e:	431a      	orrs	r2, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	071b      	lsls	r3, r3, #28
 800d134:	4921      	ldr	r1, [pc, #132]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d136:	4313      	orrs	r3, r2
 800d138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d13c:	4b1f      	ldr	r3, [pc, #124]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d13e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d142:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d14a:	3b01      	subs	r3, #1
 800d14c:	021b      	lsls	r3, r3, #8
 800d14e:	491b      	ldr	r1, [pc, #108]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d150:	4313      	orrs	r3, r2
 800d152:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d022      	beq.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d16a:	d11d      	bne.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d16c:	4b13      	ldr	r3, [pc, #76]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d172:	0e1b      	lsrs	r3, r3, #24
 800d174:	f003 030f 	and.w	r3, r3, #15
 800d178:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d17a:	4b10      	ldr	r3, [pc, #64]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d180:	0f1b      	lsrs	r3, r3, #28
 800d182:	f003 0307 	and.w	r3, r3, #7
 800d186:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	695b      	ldr	r3, [r3, #20]
 800d18c:	019a      	lsls	r2, r3, #6
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6a1b      	ldr	r3, [r3, #32]
 800d192:	041b      	lsls	r3, r3, #16
 800d194:	431a      	orrs	r2, r3
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	061b      	lsls	r3, r3, #24
 800d19a:	431a      	orrs	r2, r3
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	071b      	lsls	r3, r3, #28
 800d1a0:	4906      	ldr	r1, [pc, #24]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d1a8:	4b04      	ldr	r3, [pc, #16]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a03      	ldr	r2, [pc, #12]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800d1ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1b4:	f7fd f986 	bl	800a4c4 <HAL_GetTick>
 800d1b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d1ba:	e00a      	b.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x752>
 800d1bc:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d1c0:	f7fd f980 	bl	800a4c4 <HAL_GetTick>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	2b64      	cmp	r3, #100	; 0x64
 800d1cc:	d901      	bls.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	e007      	b.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d1d2:	4b06      	ldr	r3, [pc, #24]	; (800d1ec <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1de:	d1ef      	bne.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 800d1e0:	2300      	movs	r3, #0
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3720      	adds	r7, #32
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	40023800 	.word	0x40023800

0800d1f0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d1fe:	2301      	movs	r3, #1
 800d200:	e01c      	b.n	800d23c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	795b      	ldrb	r3, [r3, #5]
 800d206:	b2db      	uxtb	r3, r3
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d105      	bne.n	800d218 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7fc fa58 	bl	80096c8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2202      	movs	r2, #2
 800d21c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f042 0204 	orr.w	r2, r2, #4
 800d22c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3708      	adds	r7, #8
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d24e:	2300      	movs	r3, #0
 800d250:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	791b      	ldrb	r3, [r3, #4]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d101      	bne.n	800d25e <HAL_RNG_GenerateRandomNumber+0x1a>
 800d25a:	2302      	movs	r3, #2
 800d25c:	e044      	b.n	800d2e8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2201      	movs	r2, #1
 800d262:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	795b      	ldrb	r3, [r3, #5]
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d133      	bne.n	800d2d6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2202      	movs	r2, #2
 800d272:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d274:	f7fd f926 	bl	800a4c4 <HAL_GetTick>
 800d278:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d27a:	e018      	b.n	800d2ae <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d27c:	f7fd f922 	bl	800a4c4 <HAL_GetTick>
 800d280:	4602      	mov	r2, r0
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	2b02      	cmp	r3, #2
 800d288:	d911      	bls.n	800d2ae <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	f003 0301 	and.w	r3, r3, #1
 800d294:	2b01      	cmp	r3, #1
 800d296:	d00a      	beq.n	800d2ae <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2202      	movs	r2, #2
 800d2a2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e01c      	b.n	800d2e8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	f003 0301 	and.w	r3, r3, #1
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d1df      	bne.n	800d27c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	689a      	ldr	r2, [r3, #8]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68da      	ldr	r2, [r3, #12]
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	715a      	strb	r2, [r3, #5]
 800d2d4:	e004      	b.n	800d2e0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2204      	movs	r2, #4
 800d2da:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	711a      	strb	r2, [r3, #4]

  return status;
 800d2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	330c      	adds	r3, #12
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7ff ffa0 	bl	800d244 <HAL_RNG_GenerateRandomNumber>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d102      	bne.n	800d310 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	e000      	b.n	800d312 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800d310:	2300      	movs	r3, #0
  }
}
 800d312:	4618      	mov	r0, r3
 800d314:	3708      	adds	r7, #8
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
	...

0800d31c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d324:	2301      	movs	r3, #1
 800d326:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	e071      	b.n	800d416 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	7f5b      	ldrb	r3, [r3, #29]
 800d336:	b2db      	uxtb	r3, r3
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d105      	bne.n	800d348 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7fc fa02 	bl	800974c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2202      	movs	r2, #2
 800d34c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	f003 0310 	and.w	r3, r3, #16
 800d358:	2b10      	cmp	r3, #16
 800d35a:	d053      	beq.n	800d404 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	22ca      	movs	r2, #202	; 0xca
 800d362:	625a      	str	r2, [r3, #36]	; 0x24
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2253      	movs	r2, #83	; 0x53
 800d36a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 fa4d 	bl	800d80c <RTC_EnterInitMode>
 800d372:	4603      	mov	r3, r0
 800d374:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d376:	7bfb      	ldrb	r3, [r7, #15]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d12a      	bne.n	800d3d2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6899      	ldr	r1, [r3, #8]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	4b26      	ldr	r3, [pc, #152]	; (800d420 <HAL_RTC_Init+0x104>)
 800d388:	400b      	ands	r3, r1
 800d38a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6899      	ldr	r1, [r3, #8]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	685a      	ldr	r2, [r3, #4]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	691b      	ldr	r3, [r3, #16]
 800d39a:	431a      	orrs	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	695b      	ldr	r3, [r3, #20]
 800d3a0:	431a      	orrs	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	430a      	orrs	r2, r1
 800d3a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	68d2      	ldr	r2, [r2, #12]
 800d3b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6919      	ldr	r1, [r3, #16]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	041a      	lsls	r2, r3, #16
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	430a      	orrs	r2, r1
 800d3c6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 fa56 	bl	800d87a <RTC_ExitInitMode>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d110      	bne.n	800d3fa <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f022 0208 	bic.w	r2, r2, #8
 800d3e6:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	699a      	ldr	r2, [r3, #24]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	430a      	orrs	r2, r1
 800d3f8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	22ff      	movs	r2, #255	; 0xff
 800d400:	625a      	str	r2, [r3, #36]	; 0x24
 800d402:	e001      	b.n	800d408 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800d404:	2300      	movs	r3, #0
 800d406:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d408:	7bfb      	ldrb	r3, [r7, #15]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d102      	bne.n	800d414 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800d414:	7bfb      	ldrb	r3, [r7, #15]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	ff8fffbf 	.word	0xff8fffbf

0800d424 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d424:	b590      	push	{r4, r7, lr}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d430:	2300      	movs	r3, #0
 800d432:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	7f1b      	ldrb	r3, [r3, #28]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d101      	bne.n	800d440 <HAL_RTC_SetTime+0x1c>
 800d43c:	2302      	movs	r3, #2
 800d43e:	e085      	b.n	800d54c <HAL_RTC_SetTime+0x128>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2201      	movs	r2, #1
 800d444:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2202      	movs	r2, #2
 800d44a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d126      	bne.n	800d4a0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d102      	bne.n	800d466 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	2200      	movs	r2, #0
 800d464:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f000 fa2a 	bl	800d8c4 <RTC_ByteToBcd2>
 800d470:	4603      	mov	r3, r0
 800d472:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	785b      	ldrb	r3, [r3, #1]
 800d478:	4618      	mov	r0, r3
 800d47a:	f000 fa23 	bl	800d8c4 <RTC_ByteToBcd2>
 800d47e:	4603      	mov	r3, r0
 800d480:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d482:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	789b      	ldrb	r3, [r3, #2]
 800d488:	4618      	mov	r0, r3
 800d48a:	f000 fa1b 	bl	800d8c4 <RTC_ByteToBcd2>
 800d48e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d490:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	78db      	ldrb	r3, [r3, #3]
 800d498:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d49a:	4313      	orrs	r3, r2
 800d49c:	617b      	str	r3, [r7, #20]
 800d49e:	e018      	b.n	800d4d2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d102      	bne.n	800d4b4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	785b      	ldrb	r3, [r3, #1]
 800d4be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d4c0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800d4c6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	78db      	ldrb	r3, [r3, #3]
 800d4cc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	22ca      	movs	r2, #202	; 0xca
 800d4d8:	625a      	str	r2, [r3, #36]	; 0x24
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2253      	movs	r2, #83	; 0x53
 800d4e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f000 f992 	bl	800d80c <RTC_EnterInitMode>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800d4ec:	7cfb      	ldrb	r3, [r7, #19]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d11e      	bne.n	800d530 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	6979      	ldr	r1, [r7, #20]
 800d4f8:	4b16      	ldr	r3, [pc, #88]	; (800d554 <HAL_RTC_SetTime+0x130>)
 800d4fa:	400b      	ands	r3, r1
 800d4fc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	689a      	ldr	r2, [r3, #8]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d50c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	6899      	ldr	r1, [r3, #8]
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	68da      	ldr	r2, [r3, #12]
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	431a      	orrs	r2, r3
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	430a      	orrs	r2, r1
 800d524:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f000 f9a7 	bl	800d87a <RTC_ExitInitMode>
 800d52c:	4603      	mov	r3, r0
 800d52e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800d530:	7cfb      	ldrb	r3, [r7, #19]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d102      	bne.n	800d53c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2201      	movs	r2, #1
 800d53a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	22ff      	movs	r2, #255	; 0xff
 800d542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	771a      	strb	r2, [r3, #28]

  return status;
 800d54a:	7cfb      	ldrb	r3, [r7, #19]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	371c      	adds	r7, #28
 800d550:	46bd      	mov	sp, r7
 800d552:	bd90      	pop	{r4, r7, pc}
 800d554:	007f7f7f 	.word	0x007f7f7f

0800d558 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b086      	sub	sp, #24
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d564:	2300      	movs	r3, #0
 800d566:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	4b22      	ldr	r3, [pc, #136]	; (800d610 <HAL_RTC_GetTime+0xb8>)
 800d588:	4013      	ands	r3, r2
 800d58a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	0c1b      	lsrs	r3, r3, #16
 800d590:	b2db      	uxtb	r3, r3
 800d592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d596:	b2da      	uxtb	r2, r3
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	0a1b      	lsrs	r3, r3, #8
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5a6:	b2da      	uxtb	r2, r3
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5b4:	b2da      	uxtb	r2, r3
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	0d9b      	lsrs	r3, r3, #22
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	f003 0301 	and.w	r3, r3, #1
 800d5c4:	b2da      	uxtb	r2, r3
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d11a      	bne.n	800d606 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 f993 	bl	800d900 <RTC_Bcd2ToByte>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	461a      	mov	r2, r3
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	785b      	ldrb	r3, [r3, #1]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f000 f98a 	bl	800d900 <RTC_Bcd2ToByte>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	789b      	ldrb	r3, [r3, #2]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f000 f981 	bl	800d900 <RTC_Bcd2ToByte>
 800d5fe:	4603      	mov	r3, r0
 800d600:	461a      	mov	r2, r3
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3718      	adds	r7, #24
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	007f7f7f 	.word	0x007f7f7f

0800d614 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d614:	b590      	push	{r4, r7, lr}
 800d616:	b087      	sub	sp, #28
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d620:	2300      	movs	r3, #0
 800d622:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	7f1b      	ldrb	r3, [r3, #28]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d101      	bne.n	800d630 <HAL_RTC_SetDate+0x1c>
 800d62c:	2302      	movs	r3, #2
 800d62e:	e06f      	b.n	800d710 <HAL_RTC_SetDate+0xfc>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2201      	movs	r2, #1
 800d634:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2202      	movs	r2, #2
 800d63a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10e      	bne.n	800d660 <HAL_RTC_SetDate+0x4c>
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	785b      	ldrb	r3, [r3, #1]
 800d646:	f003 0310 	and.w	r3, r3, #16
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d008      	beq.n	800d660 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	785b      	ldrb	r3, [r3, #1]
 800d652:	f023 0310 	bic.w	r3, r3, #16
 800d656:	b2db      	uxtb	r3, r3
 800d658:	330a      	adds	r3, #10
 800d65a:	b2da      	uxtb	r2, r3
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d11c      	bne.n	800d6a0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	78db      	ldrb	r3, [r3, #3]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f000 f92a 	bl	800d8c4 <RTC_ByteToBcd2>
 800d670:	4603      	mov	r3, r0
 800d672:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	785b      	ldrb	r3, [r3, #1]
 800d678:	4618      	mov	r0, r3
 800d67a:	f000 f923 	bl	800d8c4 <RTC_ByteToBcd2>
 800d67e:	4603      	mov	r3, r0
 800d680:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d682:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	789b      	ldrb	r3, [r3, #2]
 800d688:	4618      	mov	r0, r3
 800d68a:	f000 f91b 	bl	800d8c4 <RTC_ByteToBcd2>
 800d68e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d690:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d69a:	4313      	orrs	r3, r2
 800d69c:	617b      	str	r3, [r7, #20]
 800d69e:	e00e      	b.n	800d6be <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	78db      	ldrb	r3, [r3, #3]
 800d6a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	785b      	ldrb	r3, [r3, #1]
 800d6aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d6ac:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d6b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	22ca      	movs	r2, #202	; 0xca
 800d6c4:	625a      	str	r2, [r3, #36]	; 0x24
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2253      	movs	r2, #83	; 0x53
 800d6cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f000 f89c 	bl	800d80c <RTC_EnterInitMode>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800d6d8:	7cfb      	ldrb	r3, [r7, #19]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10a      	bne.n	800d6f4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	6979      	ldr	r1, [r7, #20]
 800d6e4:	4b0c      	ldr	r3, [pc, #48]	; (800d718 <HAL_RTC_SetDate+0x104>)
 800d6e6:	400b      	ands	r3, r1
 800d6e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f000 f8c5 	bl	800d87a <RTC_ExitInitMode>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800d6f4:	7cfb      	ldrb	r3, [r7, #19]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d102      	bne.n	800d700 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	22ff      	movs	r2, #255	; 0xff
 800d706:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2200      	movs	r2, #0
 800d70c:	771a      	strb	r2, [r3, #28]

  return status;
 800d70e:	7cfb      	ldrb	r3, [r7, #19]
}
 800d710:	4618      	mov	r0, r3
 800d712:	371c      	adds	r7, #28
 800d714:	46bd      	mov	sp, r7
 800d716:	bd90      	pop	{r4, r7, pc}
 800d718:	00ffff3f 	.word	0x00ffff3f

0800d71c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d728:	2300      	movs	r3, #0
 800d72a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	685a      	ldr	r2, [r3, #4]
 800d732:	4b21      	ldr	r3, [pc, #132]	; (800d7b8 <HAL_RTC_GetDate+0x9c>)
 800d734:	4013      	ands	r3, r2
 800d736:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	0c1b      	lsrs	r3, r3, #16
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	0a1b      	lsrs	r3, r3, #8
 800d746:	b2db      	uxtb	r3, r3
 800d748:	f003 031f 	and.w	r3, r3, #31
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	b2db      	uxtb	r3, r3
 800d756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	0b5b      	lsrs	r3, r3, #13
 800d764:	b2db      	uxtb	r3, r3
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	b2da      	uxtb	r2, r3
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d11a      	bne.n	800d7ac <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	78db      	ldrb	r3, [r3, #3]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 f8c0 	bl	800d900 <RTC_Bcd2ToByte>
 800d780:	4603      	mov	r3, r0
 800d782:	461a      	mov	r2, r3
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	785b      	ldrb	r3, [r3, #1]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 f8b7 	bl	800d900 <RTC_Bcd2ToByte>
 800d792:	4603      	mov	r3, r0
 800d794:	461a      	mov	r2, r3
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	789b      	ldrb	r3, [r3, #2]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 f8ae 	bl	800d900 <RTC_Bcd2ToByte>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	00ffff3f 	.word	0x00ffff3f

0800d7bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	68da      	ldr	r2, [r3, #12]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d7d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d7d8:	f7fc fe74 	bl	800a4c4 <HAL_GetTick>
 800d7dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d7de:	e009      	b.n	800d7f4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d7e0:	f7fc fe70 	bl	800a4c4 <HAL_GetTick>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	1ad3      	subs	r3, r2, r3
 800d7ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7ee:	d901      	bls.n	800d7f4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d7f0:	2303      	movs	r3, #3
 800d7f2:	e007      	b.n	800d804 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	f003 0320 	and.w	r3, r3, #32
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d0ee      	beq.n	800d7e0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d802:	2300      	movs	r3, #0
}
 800d804:	4618      	mov	r0, r3
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d814:	2300      	movs	r3, #0
 800d816:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d818:	2300      	movs	r3, #0
 800d81a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d826:	2b00      	cmp	r3, #0
 800d828:	d122      	bne.n	800d870 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	68da      	ldr	r2, [r3, #12]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d838:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d83a:	f7fc fe43 	bl	800a4c4 <HAL_GetTick>
 800d83e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d840:	e00c      	b.n	800d85c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d842:	f7fc fe3f 	bl	800a4c4 <HAL_GetTick>
 800d846:	4602      	mov	r2, r0
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d850:	d904      	bls.n	800d85c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2204      	movs	r2, #4
 800d856:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800d858:	2301      	movs	r3, #1
 800d85a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d866:	2b00      	cmp	r3, #0
 800d868:	d102      	bne.n	800d870 <RTC_EnterInitMode+0x64>
 800d86a:	7bfb      	ldrb	r3, [r7, #15]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d1e8      	bne.n	800d842 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800d870:	7bfb      	ldrb	r3, [r7, #15]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b084      	sub	sp, #16
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d882:	2300      	movs	r3, #0
 800d884:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68da      	ldr	r2, [r3, #12]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d894:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	f003 0320 	and.w	r3, r3, #32
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10a      	bne.n	800d8ba <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff ff89 	bl	800d7bc <HAL_RTC_WaitForSynchro>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d004      	beq.n	800d8ba <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2204      	movs	r2, #4
 800d8b4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800d8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800d8d2:	e005      	b.n	800d8e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800d8da:	79fb      	ldrb	r3, [r7, #7]
 800d8dc:	3b0a      	subs	r3, #10
 800d8de:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800d8e0:	79fb      	ldrb	r3, [r7, #7]
 800d8e2:	2b09      	cmp	r3, #9
 800d8e4:	d8f6      	bhi.n	800d8d4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	011b      	lsls	r3, r3, #4
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	79fb      	ldrb	r3, [r7, #7]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	b2db      	uxtb	r3, r3
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3714      	adds	r7, #20
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800d900:	b480      	push	{r7}
 800d902:	b085      	sub	sp, #20
 800d904:	af00      	add	r7, sp, #0
 800d906:	4603      	mov	r3, r0
 800d908:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800d90a:	2300      	movs	r3, #0
 800d90c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800d90e:	79fb      	ldrb	r3, [r7, #7]
 800d910:	091b      	lsrs	r3, r3, #4
 800d912:	b2db      	uxtb	r3, r3
 800d914:	461a      	mov	r2, r3
 800d916:	4613      	mov	r3, r2
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	4413      	add	r3, r2
 800d91c:	005b      	lsls	r3, r3, #1
 800d91e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	b2da      	uxtb	r2, r3
 800d924:	79fb      	ldrb	r3, [r7, #7]
 800d926:	f003 030f 	and.w	r3, r3, #15
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	4413      	add	r3, r2
 800d92e:	b2db      	uxtb	r3, r3
}
 800d930:	4618      	mov	r0, r3
 800d932:	3714      	adds	r7, #20
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b087      	sub	sp, #28
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800d948:	2300      	movs	r3, #0
 800d94a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	3350      	adds	r3, #80	; 0x50
 800d952:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	697a      	ldr	r2, [r7, #20]
 800d95a:	4413      	add	r3, r2
 800d95c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	601a      	str	r2, [r3, #0]
}
 800d964:	bf00      	nop
 800d966:	371c      	adds	r7, #28
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800d970:	b480      	push	{r7}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800d97a:	2300      	movs	r3, #0
 800d97c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	3350      	adds	r3, #80	; 0x50
 800d984:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	68fa      	ldr	r2, [r7, #12]
 800d98c:	4413      	add	r3, r2
 800d98e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
}
 800d994:	4618      	mov	r0, r3
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d101      	bne.n	800d9b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e049      	b.n	800da46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7fb feee 	bl	80097a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2202      	movs	r2, #2
 800d9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	3304      	adds	r3, #4
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4610      	mov	r0, r2
 800d9e0:	f000 fb30 	bl	800e044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2201      	movs	r2, #1
 800da08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2201      	movs	r2, #1
 800da10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
	...

0800da50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	2b01      	cmp	r3, #1
 800da62:	d001      	beq.n	800da68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800da64:	2301      	movs	r3, #1
 800da66:	e04c      	b.n	800db02 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2202      	movs	r2, #2
 800da6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a26      	ldr	r2, [pc, #152]	; (800db10 <HAL_TIM_Base_Start+0xc0>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d022      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da82:	d01d      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a22      	ldr	r2, [pc, #136]	; (800db14 <HAL_TIM_Base_Start+0xc4>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d018      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a21      	ldr	r2, [pc, #132]	; (800db18 <HAL_TIM_Base_Start+0xc8>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d013      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a1f      	ldr	r2, [pc, #124]	; (800db1c <HAL_TIM_Base_Start+0xcc>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d00e      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a1e      	ldr	r2, [pc, #120]	; (800db20 <HAL_TIM_Base_Start+0xd0>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d009      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a1c      	ldr	r2, [pc, #112]	; (800db24 <HAL_TIM_Base_Start+0xd4>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d004      	beq.n	800dac0 <HAL_TIM_Base_Start+0x70>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4a1b      	ldr	r2, [pc, #108]	; (800db28 <HAL_TIM_Base_Start+0xd8>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d115      	bne.n	800daec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	689a      	ldr	r2, [r3, #8]
 800dac6:	4b19      	ldr	r3, [pc, #100]	; (800db2c <HAL_TIM_Base_Start+0xdc>)
 800dac8:	4013      	ands	r3, r2
 800daca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2b06      	cmp	r3, #6
 800dad0:	d015      	beq.n	800dafe <HAL_TIM_Base_Start+0xae>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dad8:	d011      	beq.n	800dafe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f042 0201 	orr.w	r2, r2, #1
 800dae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daea:	e008      	b.n	800dafe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f042 0201 	orr.w	r2, r2, #1
 800dafa:	601a      	str	r2, [r3, #0]
 800dafc:	e000      	b.n	800db00 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dafe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3714      	adds	r7, #20
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	40010000 	.word	0x40010000
 800db14:	40000400 	.word	0x40000400
 800db18:	40000800 	.word	0x40000800
 800db1c:	40000c00 	.word	0x40000c00
 800db20:	40010400 	.word	0x40010400
 800db24:	40014000 	.word	0x40014000
 800db28:	40001800 	.word	0x40001800
 800db2c:	00010007 	.word	0x00010007

0800db30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db30:	b480      	push	{r7}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	2b01      	cmp	r3, #1
 800db42:	d001      	beq.n	800db48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db44:	2301      	movs	r3, #1
 800db46:	e054      	b.n	800dbf2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2202      	movs	r2, #2
 800db4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68da      	ldr	r2, [r3, #12]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f042 0201 	orr.w	r2, r2, #1
 800db5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a26      	ldr	r2, [pc, #152]	; (800dc00 <HAL_TIM_Base_Start_IT+0xd0>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d022      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db72:	d01d      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a22      	ldr	r2, [pc, #136]	; (800dc04 <HAL_TIM_Base_Start_IT+0xd4>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d018      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a21      	ldr	r2, [pc, #132]	; (800dc08 <HAL_TIM_Base_Start_IT+0xd8>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d013      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a1f      	ldr	r2, [pc, #124]	; (800dc0c <HAL_TIM_Base_Start_IT+0xdc>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d00e      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	4a1e      	ldr	r2, [pc, #120]	; (800dc10 <HAL_TIM_Base_Start_IT+0xe0>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d009      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a1c      	ldr	r2, [pc, #112]	; (800dc14 <HAL_TIM_Base_Start_IT+0xe4>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d004      	beq.n	800dbb0 <HAL_TIM_Base_Start_IT+0x80>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a1b      	ldr	r2, [pc, #108]	; (800dc18 <HAL_TIM_Base_Start_IT+0xe8>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d115      	bne.n	800dbdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	689a      	ldr	r2, [r3, #8]
 800dbb6:	4b19      	ldr	r3, [pc, #100]	; (800dc1c <HAL_TIM_Base_Start_IT+0xec>)
 800dbb8:	4013      	ands	r3, r2
 800dbba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2b06      	cmp	r3, #6
 800dbc0:	d015      	beq.n	800dbee <HAL_TIM_Base_Start_IT+0xbe>
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbc8:	d011      	beq.n	800dbee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f042 0201 	orr.w	r2, r2, #1
 800dbd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbda:	e008      	b.n	800dbee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f042 0201 	orr.w	r2, r2, #1
 800dbea:	601a      	str	r2, [r3, #0]
 800dbec:	e000      	b.n	800dbf0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3714      	adds	r7, #20
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	40010000 	.word	0x40010000
 800dc04:	40000400 	.word	0x40000400
 800dc08:	40000800 	.word	0x40000800
 800dc0c:	40000c00 	.word	0x40000c00
 800dc10:	40010400 	.word	0x40010400
 800dc14:	40014000 	.word	0x40014000
 800dc18:	40001800 	.word	0x40001800
 800dc1c:	00010007 	.word	0x00010007

0800dc20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	691b      	ldr	r3, [r3, #16]
 800dc2e:	f003 0302 	and.w	r3, r3, #2
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d122      	bne.n	800dc7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	f003 0302 	and.w	r3, r3, #2
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	d11b      	bne.n	800dc7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f06f 0202 	mvn.w	r2, #2
 800dc4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2201      	movs	r2, #1
 800dc52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	699b      	ldr	r3, [r3, #24]
 800dc5a:	f003 0303 	and.w	r3, r3, #3
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d003      	beq.n	800dc6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 f9d0 	bl	800e008 <HAL_TIM_IC_CaptureCallback>
 800dc68:	e005      	b.n	800dc76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f9c2 	bl	800dff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 f9d3 	bl	800e01c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	691b      	ldr	r3, [r3, #16]
 800dc82:	f003 0304 	and.w	r3, r3, #4
 800dc86:	2b04      	cmp	r3, #4
 800dc88:	d122      	bne.n	800dcd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	f003 0304 	and.w	r3, r3, #4
 800dc94:	2b04      	cmp	r3, #4
 800dc96:	d11b      	bne.n	800dcd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f06f 0204 	mvn.w	r2, #4
 800dca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2202      	movs	r2, #2
 800dca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d003      	beq.n	800dcbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 f9a6 	bl	800e008 <HAL_TIM_IC_CaptureCallback>
 800dcbc:	e005      	b.n	800dcca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f998 	bl	800dff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f9a9 	bl	800e01c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2200      	movs	r2, #0
 800dcce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	691b      	ldr	r3, [r3, #16]
 800dcd6:	f003 0308 	and.w	r3, r3, #8
 800dcda:	2b08      	cmp	r3, #8
 800dcdc:	d122      	bne.n	800dd24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	f003 0308 	and.w	r3, r3, #8
 800dce8:	2b08      	cmp	r3, #8
 800dcea:	d11b      	bne.n	800dd24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f06f 0208 	mvn.w	r2, #8
 800dcf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2204      	movs	r2, #4
 800dcfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	69db      	ldr	r3, [r3, #28]
 800dd02:	f003 0303 	and.w	r3, r3, #3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d003      	beq.n	800dd12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f97c 	bl	800e008 <HAL_TIM_IC_CaptureCallback>
 800dd10:	e005      	b.n	800dd1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 f96e 	bl	800dff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 f97f 	bl	800e01c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	691b      	ldr	r3, [r3, #16]
 800dd2a:	f003 0310 	and.w	r3, r3, #16
 800dd2e:	2b10      	cmp	r3, #16
 800dd30:	d122      	bne.n	800dd78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	f003 0310 	and.w	r3, r3, #16
 800dd3c:	2b10      	cmp	r3, #16
 800dd3e:	d11b      	bne.n	800dd78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f06f 0210 	mvn.w	r2, #16
 800dd48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2208      	movs	r2, #8
 800dd4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	69db      	ldr	r3, [r3, #28]
 800dd56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d003      	beq.n	800dd66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f952 	bl	800e008 <HAL_TIM_IC_CaptureCallback>
 800dd64:	e005      	b.n	800dd72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f944 	bl	800dff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 f955 	bl	800e01c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	691b      	ldr	r3, [r3, #16]
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	d10e      	bne.n	800dda4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d107      	bne.n	800dda4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f06f 0201 	mvn.w	r2, #1
 800dd9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7f8 fb00 	bl	80063a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddae:	2b80      	cmp	r3, #128	; 0x80
 800ddb0:	d10e      	bne.n	800ddd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddbc:	2b80      	cmp	r3, #128	; 0x80
 800ddbe:	d107      	bne.n	800ddd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ddc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fb0c 	bl	800e3e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddde:	d10e      	bne.n	800ddfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddea:	2b80      	cmp	r3, #128	; 0x80
 800ddec:	d107      	bne.n	800ddfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ddf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 faff 	bl	800e3fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	691b      	ldr	r3, [r3, #16]
 800de04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de08:	2b40      	cmp	r3, #64	; 0x40
 800de0a:	d10e      	bne.n	800de2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de16:	2b40      	cmp	r3, #64	; 0x40
 800de18:	d107      	bne.n	800de2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800de22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 f903 	bl	800e030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	691b      	ldr	r3, [r3, #16]
 800de30:	f003 0320 	and.w	r3, r3, #32
 800de34:	2b20      	cmp	r3, #32
 800de36:	d10e      	bne.n	800de56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	f003 0320 	and.w	r3, r3, #32
 800de42:	2b20      	cmp	r3, #32
 800de44:	d107      	bne.n	800de56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f06f 0220 	mvn.w	r2, #32
 800de4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 fabf 	bl	800e3d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de56:	bf00      	nop
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
	...

0800de60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800de6a:	2300      	movs	r3, #0
 800de6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de74:	2b01      	cmp	r3, #1
 800de76:	d101      	bne.n	800de7c <HAL_TIM_ConfigClockSource+0x1c>
 800de78:	2302      	movs	r3, #2
 800de7a:	e0b4      	b.n	800dfe6 <HAL_TIM_ConfigClockSource+0x186>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2201      	movs	r2, #1
 800de80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2202      	movs	r2, #2
 800de88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	4b56      	ldr	r3, [pc, #344]	; (800dff0 <HAL_TIM_ConfigClockSource+0x190>)
 800de98:	4013      	ands	r3, r2
 800de9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800deb4:	d03e      	beq.n	800df34 <HAL_TIM_ConfigClockSource+0xd4>
 800deb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800deba:	f200 8087 	bhi.w	800dfcc <HAL_TIM_ConfigClockSource+0x16c>
 800debe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dec2:	f000 8086 	beq.w	800dfd2 <HAL_TIM_ConfigClockSource+0x172>
 800dec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800deca:	d87f      	bhi.n	800dfcc <HAL_TIM_ConfigClockSource+0x16c>
 800decc:	2b70      	cmp	r3, #112	; 0x70
 800dece:	d01a      	beq.n	800df06 <HAL_TIM_ConfigClockSource+0xa6>
 800ded0:	2b70      	cmp	r3, #112	; 0x70
 800ded2:	d87b      	bhi.n	800dfcc <HAL_TIM_ConfigClockSource+0x16c>
 800ded4:	2b60      	cmp	r3, #96	; 0x60
 800ded6:	d050      	beq.n	800df7a <HAL_TIM_ConfigClockSource+0x11a>
 800ded8:	2b60      	cmp	r3, #96	; 0x60
 800deda:	d877      	bhi.n	800dfcc <HAL_TIM_ConfigClockSource+0x16c>
 800dedc:	2b50      	cmp	r3, #80	; 0x50
 800dede:	d03c      	beq.n	800df5a <HAL_TIM_ConfigClockSource+0xfa>
 800dee0:	2b50      	cmp	r3, #80	; 0x50
 800dee2:	d873      	bhi.n	800dfcc <HAL_TIM_ConfigClockSource+0x16c>
 800dee4:	2b40      	cmp	r3, #64	; 0x40
 800dee6:	d058      	beq.n	800df9a <HAL_TIM_ConfigClockSource+0x13a>
 800dee8:	2b40      	cmp	r3, #64	; 0x40
 800deea:	d86f      	bhi.n	800dfcc <HAL_TIM_ConfigClockSource+0x16c>
 800deec:	2b30      	cmp	r3, #48	; 0x30
 800deee:	d064      	beq.n	800dfba <HAL_TIM_ConfigClockSource+0x15a>
 800def0:	2b30      	cmp	r3, #48	; 0x30
 800def2:	d86b      	bhi.n	800dfcc <HAL_TIM_ConfigClockSource+0x16c>
 800def4:	2b20      	cmp	r3, #32
 800def6:	d060      	beq.n	800dfba <HAL_TIM_ConfigClockSource+0x15a>
 800def8:	2b20      	cmp	r3, #32
 800defa:	d867      	bhi.n	800dfcc <HAL_TIM_ConfigClockSource+0x16c>
 800defc:	2b00      	cmp	r3, #0
 800defe:	d05c      	beq.n	800dfba <HAL_TIM_ConfigClockSource+0x15a>
 800df00:	2b10      	cmp	r3, #16
 800df02:	d05a      	beq.n	800dfba <HAL_TIM_ConfigClockSource+0x15a>
 800df04:	e062      	b.n	800dfcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6818      	ldr	r0, [r3, #0]
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	6899      	ldr	r1, [r3, #8]
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	685a      	ldr	r2, [r3, #4]
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	f000 f9af 	bl	800e278 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800df28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	609a      	str	r2, [r3, #8]
      break;
 800df32:	e04f      	b.n	800dfd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6818      	ldr	r0, [r3, #0]
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	6899      	ldr	r1, [r3, #8]
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	685a      	ldr	r2, [r3, #4]
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	f000 f998 	bl	800e278 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	689a      	ldr	r2, [r3, #8]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df56:	609a      	str	r2, [r3, #8]
      break;
 800df58:	e03c      	b.n	800dfd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6818      	ldr	r0, [r3, #0]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	6859      	ldr	r1, [r3, #4]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	461a      	mov	r2, r3
 800df68:	f000 f90c 	bl	800e184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2150      	movs	r1, #80	; 0x50
 800df72:	4618      	mov	r0, r3
 800df74:	f000 f965 	bl	800e242 <TIM_ITRx_SetConfig>
      break;
 800df78:	e02c      	b.n	800dfd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6818      	ldr	r0, [r3, #0]
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	6859      	ldr	r1, [r3, #4]
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	461a      	mov	r2, r3
 800df88:	f000 f92b 	bl	800e1e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2160      	movs	r1, #96	; 0x60
 800df92:	4618      	mov	r0, r3
 800df94:	f000 f955 	bl	800e242 <TIM_ITRx_SetConfig>
      break;
 800df98:	e01c      	b.n	800dfd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6818      	ldr	r0, [r3, #0]
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	6859      	ldr	r1, [r3, #4]
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	f000 f8ec 	bl	800e184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2140      	movs	r1, #64	; 0x40
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f000 f945 	bl	800e242 <TIM_ITRx_SetConfig>
      break;
 800dfb8:	e00c      	b.n	800dfd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	4610      	mov	r0, r2
 800dfc6:	f000 f93c 	bl	800e242 <TIM_ITRx_SetConfig>
      break;
 800dfca:	e003      	b.n	800dfd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	73fb      	strb	r3, [r7, #15]
      break;
 800dfd0:	e000      	b.n	800dfd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800dfd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dfe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	fffeff88 	.word	0xfffeff88

0800dff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e024:	bf00      	nop
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e038:	bf00      	nop
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e044:	b480      	push	{r7}
 800e046:	b085      	sub	sp, #20
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4a40      	ldr	r2, [pc, #256]	; (800e158 <TIM_Base_SetConfig+0x114>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d013      	beq.n	800e084 <TIM_Base_SetConfig+0x40>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e062:	d00f      	beq.n	800e084 <TIM_Base_SetConfig+0x40>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	4a3d      	ldr	r2, [pc, #244]	; (800e15c <TIM_Base_SetConfig+0x118>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d00b      	beq.n	800e084 <TIM_Base_SetConfig+0x40>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4a3c      	ldr	r2, [pc, #240]	; (800e160 <TIM_Base_SetConfig+0x11c>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d007      	beq.n	800e084 <TIM_Base_SetConfig+0x40>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	4a3b      	ldr	r2, [pc, #236]	; (800e164 <TIM_Base_SetConfig+0x120>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d003      	beq.n	800e084 <TIM_Base_SetConfig+0x40>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	4a3a      	ldr	r2, [pc, #232]	; (800e168 <TIM_Base_SetConfig+0x124>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d108      	bne.n	800e096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e08a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	4313      	orrs	r3, r2
 800e094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4a2f      	ldr	r2, [pc, #188]	; (800e158 <TIM_Base_SetConfig+0x114>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d02b      	beq.n	800e0f6 <TIM_Base_SetConfig+0xb2>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0a4:	d027      	beq.n	800e0f6 <TIM_Base_SetConfig+0xb2>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4a2c      	ldr	r2, [pc, #176]	; (800e15c <TIM_Base_SetConfig+0x118>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d023      	beq.n	800e0f6 <TIM_Base_SetConfig+0xb2>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4a2b      	ldr	r2, [pc, #172]	; (800e160 <TIM_Base_SetConfig+0x11c>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d01f      	beq.n	800e0f6 <TIM_Base_SetConfig+0xb2>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4a2a      	ldr	r2, [pc, #168]	; (800e164 <TIM_Base_SetConfig+0x120>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d01b      	beq.n	800e0f6 <TIM_Base_SetConfig+0xb2>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4a29      	ldr	r2, [pc, #164]	; (800e168 <TIM_Base_SetConfig+0x124>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d017      	beq.n	800e0f6 <TIM_Base_SetConfig+0xb2>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	4a28      	ldr	r2, [pc, #160]	; (800e16c <TIM_Base_SetConfig+0x128>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d013      	beq.n	800e0f6 <TIM_Base_SetConfig+0xb2>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	4a27      	ldr	r2, [pc, #156]	; (800e170 <TIM_Base_SetConfig+0x12c>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d00f      	beq.n	800e0f6 <TIM_Base_SetConfig+0xb2>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4a26      	ldr	r2, [pc, #152]	; (800e174 <TIM_Base_SetConfig+0x130>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d00b      	beq.n	800e0f6 <TIM_Base_SetConfig+0xb2>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	4a25      	ldr	r2, [pc, #148]	; (800e178 <TIM_Base_SetConfig+0x134>)
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d007      	beq.n	800e0f6 <TIM_Base_SetConfig+0xb2>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	4a24      	ldr	r2, [pc, #144]	; (800e17c <TIM_Base_SetConfig+0x138>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d003      	beq.n	800e0f6 <TIM_Base_SetConfig+0xb2>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4a23      	ldr	r2, [pc, #140]	; (800e180 <TIM_Base_SetConfig+0x13c>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d108      	bne.n	800e108 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	68fa      	ldr	r2, [r7, #12]
 800e104:	4313      	orrs	r3, r2
 800e106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	695b      	ldr	r3, [r3, #20]
 800e112:	4313      	orrs	r3, r2
 800e114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	689a      	ldr	r2, [r3, #8]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a0a      	ldr	r2, [pc, #40]	; (800e158 <TIM_Base_SetConfig+0x114>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d003      	beq.n	800e13c <TIM_Base_SetConfig+0xf8>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a0c      	ldr	r2, [pc, #48]	; (800e168 <TIM_Base_SetConfig+0x124>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d103      	bne.n	800e144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	691a      	ldr	r2, [r3, #16]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2201      	movs	r2, #1
 800e148:	615a      	str	r2, [r3, #20]
}
 800e14a:	bf00      	nop
 800e14c:	3714      	adds	r7, #20
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop
 800e158:	40010000 	.word	0x40010000
 800e15c:	40000400 	.word	0x40000400
 800e160:	40000800 	.word	0x40000800
 800e164:	40000c00 	.word	0x40000c00
 800e168:	40010400 	.word	0x40010400
 800e16c:	40014000 	.word	0x40014000
 800e170:	40014400 	.word	0x40014400
 800e174:	40014800 	.word	0x40014800
 800e178:	40001800 	.word	0x40001800
 800e17c:	40001c00 	.word	0x40001c00
 800e180:	40002000 	.word	0x40002000

0800e184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e184:	b480      	push	{r7}
 800e186:	b087      	sub	sp, #28
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	6a1b      	ldr	r3, [r3, #32]
 800e194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	6a1b      	ldr	r3, [r3, #32]
 800e19a:	f023 0201 	bic.w	r2, r3, #1
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	699b      	ldr	r3, [r3, #24]
 800e1a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e1ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	011b      	lsls	r3, r3, #4
 800e1b4:	693a      	ldr	r2, [r7, #16]
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	f023 030a 	bic.w	r3, r3, #10
 800e1c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e1c2:	697a      	ldr	r2, [r7, #20]
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	693a      	ldr	r2, [r7, #16]
 800e1ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	697a      	ldr	r2, [r7, #20]
 800e1d4:	621a      	str	r2, [r3, #32]
}
 800e1d6:	bf00      	nop
 800e1d8:	371c      	adds	r7, #28
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr

0800e1e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1e2:	b480      	push	{r7}
 800e1e4:	b087      	sub	sp, #28
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	60f8      	str	r0, [r7, #12]
 800e1ea:	60b9      	str	r1, [r7, #8]
 800e1ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	6a1b      	ldr	r3, [r3, #32]
 800e1f2:	f023 0210 	bic.w	r2, r3, #16
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	699b      	ldr	r3, [r3, #24]
 800e1fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6a1b      	ldr	r3, [r3, #32]
 800e204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e20c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	031b      	lsls	r3, r3, #12
 800e212:	697a      	ldr	r2, [r7, #20]
 800e214:	4313      	orrs	r3, r2
 800e216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e21e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	011b      	lsls	r3, r3, #4
 800e224:	693a      	ldr	r2, [r7, #16]
 800e226:	4313      	orrs	r3, r2
 800e228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	697a      	ldr	r2, [r7, #20]
 800e22e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	693a      	ldr	r2, [r7, #16]
 800e234:	621a      	str	r2, [r3, #32]
}
 800e236:	bf00      	nop
 800e238:	371c      	adds	r7, #28
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr

0800e242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e242:	b480      	push	{r7}
 800e244:	b085      	sub	sp, #20
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
 800e24a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e25a:	683a      	ldr	r2, [r7, #0]
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	4313      	orrs	r3, r2
 800e260:	f043 0307 	orr.w	r3, r3, #7
 800e264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	68fa      	ldr	r2, [r7, #12]
 800e26a:	609a      	str	r2, [r3, #8]
}
 800e26c:	bf00      	nop
 800e26e:	3714      	adds	r7, #20
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e278:	b480      	push	{r7}
 800e27a:	b087      	sub	sp, #28
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
 800e284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	021a      	lsls	r2, r3, #8
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	431a      	orrs	r2, r3
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	697a      	ldr	r2, [r7, #20]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	697a      	ldr	r2, [r7, #20]
 800e2aa:	609a      	str	r2, [r3, #8]
}
 800e2ac:	bf00      	nop
 800e2ae:	371c      	adds	r7, #28
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr

0800e2b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b085      	sub	sp, #20
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d101      	bne.n	800e2d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e2cc:	2302      	movs	r3, #2
 800e2ce:	e06d      	b.n	800e3ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2202      	movs	r2, #2
 800e2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a30      	ldr	r2, [pc, #192]	; (800e3b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d004      	beq.n	800e304 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4a2f      	ldr	r2, [pc, #188]	; (800e3bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d108      	bne.n	800e316 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e30a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	4313      	orrs	r3, r2
 800e314:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e31c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	68fa      	ldr	r2, [r7, #12]
 800e324:	4313      	orrs	r3, r2
 800e326:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	68fa      	ldr	r2, [r7, #12]
 800e32e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a20      	ldr	r2, [pc, #128]	; (800e3b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d022      	beq.n	800e380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e342:	d01d      	beq.n	800e380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a1d      	ldr	r2, [pc, #116]	; (800e3c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d018      	beq.n	800e380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a1c      	ldr	r2, [pc, #112]	; (800e3c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d013      	beq.n	800e380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a1a      	ldr	r2, [pc, #104]	; (800e3c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d00e      	beq.n	800e380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4a15      	ldr	r2, [pc, #84]	; (800e3bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d009      	beq.n	800e380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a16      	ldr	r2, [pc, #88]	; (800e3cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d004      	beq.n	800e380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a15      	ldr	r2, [pc, #84]	; (800e3d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d10c      	bne.n	800e39a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e386:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	68ba      	ldr	r2, [r7, #8]
 800e38e:	4313      	orrs	r3, r2
 800e390:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2201      	movs	r2, #1
 800e39e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	40010000 	.word	0x40010000
 800e3bc:	40010400 	.word	0x40010400
 800e3c0:	40000400 	.word	0x40000400
 800e3c4:	40000800 	.word	0x40000800
 800e3c8:	40000c00 	.word	0x40000c00
 800e3cc:	40014000 	.word	0x40014000
 800e3d0:	40001800 	.word	0x40001800

0800e3d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e3dc:	bf00      	nop
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e3f0:	bf00      	nop
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e404:	bf00      	nop
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d101      	bne.n	800e422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e41e:	2301      	movs	r3, #1
 800e420:	e040      	b.n	800e4a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e426:	2b00      	cmp	r3, #0
 800e428:	d106      	bne.n	800e438 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7fb fa32 	bl	800989c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2224      	movs	r2, #36	; 0x24
 800e43c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f022 0201 	bic.w	r2, r2, #1
 800e44c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 fc78 	bl	800ed44 <UART_SetConfig>
 800e454:	4603      	mov	r3, r0
 800e456:	2b01      	cmp	r3, #1
 800e458:	d101      	bne.n	800e45e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e45a:	2301      	movs	r3, #1
 800e45c:	e022      	b.n	800e4a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e462:	2b00      	cmp	r3, #0
 800e464:	d002      	beq.n	800e46c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 fed0 	bl	800f20c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	685a      	ldr	r2, [r3, #4]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e47a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	689a      	ldr	r2, [r3, #8]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e48a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f042 0201 	orr.w	r2, r2, #1
 800e49a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f000 ff57 	bl	800f350 <UART_CheckIdleState>
 800e4a2:	4603      	mov	r3, r0
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3708      	adds	r7, #8
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b08a      	sub	sp, #40	; 0x28
 800e4b0:	af02      	add	r7, sp, #8
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	603b      	str	r3, [r7, #0]
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4c0:	2b20      	cmp	r3, #32
 800e4c2:	d171      	bne.n	800e5a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d002      	beq.n	800e4d0 <HAL_UART_Transmit+0x24>
 800e4ca:	88fb      	ldrh	r3, [r7, #6]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d101      	bne.n	800e4d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	e06a      	b.n	800e5aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2221      	movs	r2, #33	; 0x21
 800e4e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e4e2:	f7fb ffef 	bl	800a4c4 <HAL_GetTick>
 800e4e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	88fa      	ldrh	r2, [r7, #6]
 800e4ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	88fa      	ldrh	r2, [r7, #6]
 800e4f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	689b      	ldr	r3, [r3, #8]
 800e4fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e500:	d108      	bne.n	800e514 <HAL_UART_Transmit+0x68>
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	691b      	ldr	r3, [r3, #16]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d104      	bne.n	800e514 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e50a:	2300      	movs	r3, #0
 800e50c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	61bb      	str	r3, [r7, #24]
 800e512:	e003      	b.n	800e51c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e518:	2300      	movs	r3, #0
 800e51a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e51c:	e02c      	b.n	800e578 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	9300      	str	r3, [sp, #0]
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	2200      	movs	r2, #0
 800e526:	2180      	movs	r1, #128	; 0x80
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f000 ff48 	bl	800f3be <UART_WaitOnFlagUntilTimeout>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d001      	beq.n	800e538 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800e534:	2303      	movs	r3, #3
 800e536:	e038      	b.n	800e5aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10b      	bne.n	800e556 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	881b      	ldrh	r3, [r3, #0]
 800e542:	461a      	mov	r2, r3
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e54c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	3302      	adds	r3, #2
 800e552:	61bb      	str	r3, [r7, #24]
 800e554:	e007      	b.n	800e566 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	781a      	ldrb	r2, [r3, #0]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	3301      	adds	r3, #1
 800e564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	3b01      	subs	r3, #1
 800e570:	b29a      	uxth	r2, r3
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e57e:	b29b      	uxth	r3, r3
 800e580:	2b00      	cmp	r3, #0
 800e582:	d1cc      	bne.n	800e51e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	2200      	movs	r2, #0
 800e58c:	2140      	movs	r1, #64	; 0x40
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	f000 ff15 	bl	800f3be <UART_WaitOnFlagUntilTimeout>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800e59a:	2303      	movs	r3, #3
 800e59c:	e005      	b.n	800e5aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2220      	movs	r2, #32
 800e5a2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	e000      	b.n	800e5aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e5a8:	2302      	movs	r3, #2
  }
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3720      	adds	r7, #32
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b08a      	sub	sp, #40	; 0x28
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	60f8      	str	r0, [r7, #12]
 800e5ba:	60b9      	str	r1, [r7, #8]
 800e5bc:	4613      	mov	r3, r2
 800e5be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5c6:	2b20      	cmp	r3, #32
 800e5c8:	d132      	bne.n	800e630 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d002      	beq.n	800e5d6 <HAL_UART_Receive_DMA+0x24>
 800e5d0:	88fb      	ldrh	r3, [r7, #6]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d101      	bne.n	800e5da <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e02b      	b.n	800e632 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d018      	beq.n	800e620 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	e853 3f00 	ldrex	r3, [r3]
 800e5fa:	613b      	str	r3, [r7, #16]
   return(result);
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e602:	627b      	str	r3, [r7, #36]	; 0x24
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	461a      	mov	r2, r3
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60c:	623b      	str	r3, [r7, #32]
 800e60e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e610:	69f9      	ldr	r1, [r7, #28]
 800e612:	6a3a      	ldr	r2, [r7, #32]
 800e614:	e841 2300 	strex	r3, r2, [r1]
 800e618:	61bb      	str	r3, [r7, #24]
   return(result);
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1e6      	bne.n	800e5ee <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e620:	88fb      	ldrh	r3, [r7, #6]
 800e622:	461a      	mov	r2, r3
 800e624:	68b9      	ldr	r1, [r7, #8]
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f000 ff90 	bl	800f54c <UART_Start_Receive_DMA>
 800e62c:	4603      	mov	r3, r0
 800e62e:	e000      	b.n	800e632 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800e630:	2302      	movs	r3, #2
  }
}
 800e632:	4618      	mov	r0, r3
 800e634:	3728      	adds	r7, #40	; 0x28
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b090      	sub	sp, #64	; 0x40
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e646:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e64e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e65a:	2b80      	cmp	r3, #128	; 0x80
 800e65c:	d139      	bne.n	800e6d2 <HAL_UART_DMAStop+0x98>
 800e65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e660:	2b21      	cmp	r3, #33	; 0x21
 800e662:	d136      	bne.n	800e6d2 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	3308      	adds	r3, #8
 800e66a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e66c:	6a3b      	ldr	r3, [r7, #32]
 800e66e:	e853 3f00 	ldrex	r3, [r3]
 800e672:	61fb      	str	r3, [r7, #28]
   return(result);
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e67a:	637b      	str	r3, [r7, #52]	; 0x34
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	3308      	adds	r3, #8
 800e682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e684:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e68c:	e841 2300 	strex	r3, r2, [r1]
 800e690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e694:	2b00      	cmp	r3, #0
 800e696:	d1e5      	bne.n	800e664 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d015      	beq.n	800e6cc <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7fc fdb7 	bl	800b218 <HAL_DMA_Abort>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d00d      	beq.n	800e6cc <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fc ffcb 	bl	800b650 <HAL_DMA_GetError>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b20      	cmp	r3, #32
 800e6be:	d105      	bne.n	800e6cc <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2210      	movs	r2, #16
 800e6c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e6c8:	2303      	movs	r3, #3
 800e6ca:	e044      	b.n	800e756 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 ffdd 	bl	800f68c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6dc:	2b40      	cmp	r3, #64	; 0x40
 800e6de:	d139      	bne.n	800e754 <HAL_UART_DMAStop+0x11a>
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	2b22      	cmp	r3, #34	; 0x22
 800e6e4:	d136      	bne.n	800e754 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3308      	adds	r3, #8
 800e6ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	e853 3f00 	ldrex	r3, [r3]
 800e6f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6fc:	633b      	str	r3, [r7, #48]	; 0x30
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	3308      	adds	r3, #8
 800e704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e706:	61ba      	str	r2, [r7, #24]
 800e708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70a:	6979      	ldr	r1, [r7, #20]
 800e70c:	69ba      	ldr	r2, [r7, #24]
 800e70e:	e841 2300 	strex	r3, r2, [r1]
 800e712:	613b      	str	r3, [r7, #16]
   return(result);
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d1e5      	bne.n	800e6e6 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d015      	beq.n	800e74e <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e726:	4618      	mov	r0, r3
 800e728:	f7fc fd76 	bl	800b218 <HAL_DMA_Abort>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00d      	beq.n	800e74e <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e736:	4618      	mov	r0, r3
 800e738:	f7fc ff8a 	bl	800b650 <HAL_DMA_GetError>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b20      	cmp	r3, #32
 800e740:	d105      	bne.n	800e74e <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2210      	movs	r2, #16
 800e746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e74a:	2303      	movs	r3, #3
 800e74c:	e003      	b.n	800e756 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 ffc2 	bl	800f6d8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e754:	2300      	movs	r3, #0
}
 800e756:	4618      	mov	r0, r3
 800e758:	3740      	adds	r7, #64	; 0x40
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
	...

0800e760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b0ba      	sub	sp, #232	; 0xe8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	69db      	ldr	r3, [r3, #28]
 800e76e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	689b      	ldr	r3, [r3, #8]
 800e782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e78a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e78e:	4013      	ands	r3, r2
 800e790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d115      	bne.n	800e7c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7a0:	f003 0320 	and.w	r3, r3, #32
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d00f      	beq.n	800e7c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7ac:	f003 0320 	and.w	r3, r3, #32
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d009      	beq.n	800e7c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f000 8297 	beq.w	800ecec <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	4798      	blx	r3
      }
      return;
 800e7c6:	e291      	b.n	800ecec <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e7c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f000 8117 	beq.w	800ea00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e7d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7d6:	f003 0301 	and.w	r3, r3, #1
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d106      	bne.n	800e7ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e7de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e7e2:	4b85      	ldr	r3, [pc, #532]	; (800e9f8 <HAL_UART_IRQHandler+0x298>)
 800e7e4:	4013      	ands	r3, r2
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	f000 810a 	beq.w	800ea00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7f0:	f003 0301 	and.w	r3, r3, #1
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d011      	beq.n	800e81c <HAL_UART_IRQHandler+0xbc>
 800e7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e800:	2b00      	cmp	r3, #0
 800e802:	d00b      	beq.n	800e81c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2201      	movs	r2, #1
 800e80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e812:	f043 0201 	orr.w	r2, r3, #1
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e820:	f003 0302 	and.w	r3, r3, #2
 800e824:	2b00      	cmp	r3, #0
 800e826:	d011      	beq.n	800e84c <HAL_UART_IRQHandler+0xec>
 800e828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e82c:	f003 0301 	and.w	r3, r3, #1
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00b      	beq.n	800e84c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2202      	movs	r2, #2
 800e83a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e842:	f043 0204 	orr.w	r2, r3, #4
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e850:	f003 0304 	and.w	r3, r3, #4
 800e854:	2b00      	cmp	r3, #0
 800e856:	d011      	beq.n	800e87c <HAL_UART_IRQHandler+0x11c>
 800e858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e85c:	f003 0301 	and.w	r3, r3, #1
 800e860:	2b00      	cmp	r3, #0
 800e862:	d00b      	beq.n	800e87c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2204      	movs	r2, #4
 800e86a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e872:	f043 0202 	orr.w	r2, r3, #2
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e880:	f003 0308 	and.w	r3, r3, #8
 800e884:	2b00      	cmp	r3, #0
 800e886:	d017      	beq.n	800e8b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e88c:	f003 0320 	and.w	r3, r3, #32
 800e890:	2b00      	cmp	r3, #0
 800e892:	d105      	bne.n	800e8a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e898:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00b      	beq.n	800e8b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	2208      	movs	r2, #8
 800e8a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8ae:	f043 0208 	orr.w	r2, r3, #8
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e8b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d012      	beq.n	800e8ea <HAL_UART_IRQHandler+0x18a>
 800e8c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00c      	beq.n	800e8ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8e0:	f043 0220 	orr.w	r2, r3, #32
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f000 81fd 	beq.w	800ecf0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8fa:	f003 0320 	and.w	r3, r3, #32
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00d      	beq.n	800e91e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e906:	f003 0320 	and.w	r3, r3, #32
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d007      	beq.n	800e91e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e912:	2b00      	cmp	r3, #0
 800e914:	d003      	beq.n	800e91e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e924:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e932:	2b40      	cmp	r3, #64	; 0x40
 800e934:	d005      	beq.n	800e942 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e93a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d04f      	beq.n	800e9e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 fec8 	bl	800f6d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e952:	2b40      	cmp	r3, #64	; 0x40
 800e954:	d141      	bne.n	800e9da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	3308      	adds	r3, #8
 800e95c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e964:	e853 3f00 	ldrex	r3, [r3]
 800e968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e96c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	3308      	adds	r3, #8
 800e97e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e982:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e98a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e98e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e992:	e841 2300 	strex	r3, r2, [r1]
 800e996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e99a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1d9      	bne.n	800e956 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d013      	beq.n	800e9d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9ae:	4a13      	ldr	r2, [pc, #76]	; (800e9fc <HAL_UART_IRQHandler+0x29c>)
 800e9b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7fc fc9e 	bl	800b2f8 <HAL_DMA_Abort_IT>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d017      	beq.n	800e9f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9d0:	e00f      	b.n	800e9f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 f9a0 	bl	800ed18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9d8:	e00b      	b.n	800e9f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 f99c 	bl	800ed18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9e0:	e007      	b.n	800e9f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 f998 	bl	800ed18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800e9f0:	e17e      	b.n	800ecf0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9f2:	bf00      	nop
    return;
 800e9f4:	e17c      	b.n	800ecf0 <HAL_UART_IRQHandler+0x590>
 800e9f6:	bf00      	nop
 800e9f8:	04000120 	.word	0x04000120
 800e9fc:	0800f985 	.word	0x0800f985

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	f040 814c 	bne.w	800eca2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ea0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea0e:	f003 0310 	and.w	r3, r3, #16
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f000 8145 	beq.w	800eca2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ea18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea1c:	f003 0310 	and.w	r3, r3, #16
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f000 813e 	beq.w	800eca2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2210      	movs	r2, #16
 800ea2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea38:	2b40      	cmp	r3, #64	; 0x40
 800ea3a:	f040 80b6 	bne.w	800ebaa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ea4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f000 8150 	beq.w	800ecf4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ea5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	f080 8148 	bcs.w	800ecf4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ea6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea72:	69db      	ldr	r3, [r3, #28]
 800ea74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea78:	f000 8086 	beq.w	800eb88 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ea88:	e853 3f00 	ldrex	r3, [r3]
 800ea8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ea90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eaa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800eaaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800eab6:	e841 2300 	strex	r3, r2, [r1]
 800eaba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800eabe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1da      	bne.n	800ea7c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	3308      	adds	r3, #8
 800eacc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ead0:	e853 3f00 	ldrex	r3, [r3]
 800ead4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ead6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ead8:	f023 0301 	bic.w	r3, r3, #1
 800eadc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	3308      	adds	r3, #8
 800eae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800eaea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800eaee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800eaf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eaf6:	e841 2300 	strex	r3, r2, [r1]
 800eafa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800eafc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d1e1      	bne.n	800eac6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	3308      	adds	r3, #8
 800eb08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb0c:	e853 3f00 	ldrex	r3, [r3]
 800eb10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eb12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	3308      	adds	r3, #8
 800eb22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eb26:	66fa      	str	r2, [r7, #108]	; 0x6c
 800eb28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eb2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eb2e:	e841 2300 	strex	r3, r2, [r1]
 800eb32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eb34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d1e3      	bne.n	800eb02 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2220      	movs	r2, #32
 800eb3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb50:	e853 3f00 	ldrex	r3, [r3]
 800eb54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eb56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb58:	f023 0310 	bic.w	r3, r3, #16
 800eb5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	461a      	mov	r2, r3
 800eb66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eb6a:	65bb      	str	r3, [r7, #88]	; 0x58
 800eb6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eb70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb72:	e841 2300 	strex	r3, r2, [r1]
 800eb76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eb78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1e4      	bne.n	800eb48 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7fc fb48 	bl	800b218 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	1ad3      	subs	r3, r2, r3
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	4619      	mov	r1, r3
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 f8c2 	bl	800ed2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eba8:	e0a4      	b.n	800ecf4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	f000 8096 	beq.w	800ecf8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800ebcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f000 8091 	beq.w	800ecf8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebde:	e853 3f00 	ldrex	r3, [r3]
 800ebe2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ebe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ebf8:	647b      	str	r3, [r7, #68]	; 0x44
 800ebfa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ebfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec00:	e841 2300 	strex	r3, r2, [r1]
 800ec04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1e4      	bne.n	800ebd6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	3308      	adds	r3, #8
 800ec12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec16:	e853 3f00 	ldrex	r3, [r3]
 800ec1a:	623b      	str	r3, [r7, #32]
   return(result);
 800ec1c:	6a3b      	ldr	r3, [r7, #32]
 800ec1e:	f023 0301 	bic.w	r3, r3, #1
 800ec22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	3308      	adds	r3, #8
 800ec2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ec30:	633a      	str	r2, [r7, #48]	; 0x30
 800ec32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec38:	e841 2300 	strex	r3, r2, [r1]
 800ec3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d1e3      	bne.n	800ec0c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2220      	movs	r2, #32
 800ec48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2200      	movs	r2, #0
 800ec56:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	e853 3f00 	ldrex	r3, [r3]
 800ec64:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f023 0310 	bic.w	r3, r3, #16
 800ec6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	461a      	mov	r2, r3
 800ec76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ec7a:	61fb      	str	r3, [r7, #28]
 800ec7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec7e:	69b9      	ldr	r1, [r7, #24]
 800ec80:	69fa      	ldr	r2, [r7, #28]
 800ec82:	e841 2300 	strex	r3, r2, [r1]
 800ec86:	617b      	str	r3, [r7, #20]
   return(result);
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1e4      	bne.n	800ec58 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2202      	movs	r2, #2
 800ec92:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ec94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ec98:	4619      	mov	r1, r3
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 f846 	bl	800ed2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eca0:	e02a      	b.n	800ecf8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800eca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d00e      	beq.n	800eccc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ecae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d008      	beq.n	800eccc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d01c      	beq.n	800ecfc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	4798      	blx	r3
    }
    return;
 800ecca:	e017      	b.n	800ecfc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d012      	beq.n	800ecfe <HAL_UART_IRQHandler+0x59e>
 800ecd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00c      	beq.n	800ecfe <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f000 fe63 	bl	800f9b0 <UART_EndTransmit_IT>
    return;
 800ecea:	e008      	b.n	800ecfe <HAL_UART_IRQHandler+0x59e>
      return;
 800ecec:	bf00      	nop
 800ecee:	e006      	b.n	800ecfe <HAL_UART_IRQHandler+0x59e>
    return;
 800ecf0:	bf00      	nop
 800ecf2:	e004      	b.n	800ecfe <HAL_UART_IRQHandler+0x59e>
      return;
 800ecf4:	bf00      	nop
 800ecf6:	e002      	b.n	800ecfe <HAL_UART_IRQHandler+0x59e>
      return;
 800ecf8:	bf00      	nop
 800ecfa:	e000      	b.n	800ecfe <HAL_UART_IRQHandler+0x59e>
    return;
 800ecfc:	bf00      	nop
  }

}
 800ecfe:	37e8      	adds	r7, #232	; 0xe8
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ed0c:	bf00      	nop
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ed20:	bf00      	nop
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	460b      	mov	r3, r1
 800ed36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ed38:	bf00      	nop
 800ed3a:	370c      	adds	r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b088      	sub	sp, #32
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	689a      	ldr	r2, [r3, #8]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	431a      	orrs	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	695b      	ldr	r3, [r3, #20]
 800ed5e:	431a      	orrs	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	69db      	ldr	r3, [r3, #28]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	4ba6      	ldr	r3, [pc, #664]	; (800f008 <UART_SetConfig+0x2c4>)
 800ed70:	4013      	ands	r3, r2
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	6812      	ldr	r2, [r2, #0]
 800ed76:	6979      	ldr	r1, [r7, #20]
 800ed78:	430b      	orrs	r3, r1
 800ed7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	68da      	ldr	r2, [r3, #12]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	430a      	orrs	r2, r1
 800ed90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	699b      	ldr	r3, [r3, #24]
 800ed96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6a1b      	ldr	r3, [r3, #32]
 800ed9c:	697a      	ldr	r2, [r7, #20]
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	689b      	ldr	r3, [r3, #8]
 800eda8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	697a      	ldr	r2, [r7, #20]
 800edb2:	430a      	orrs	r2, r1
 800edb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a94      	ldr	r2, [pc, #592]	; (800f00c <UART_SetConfig+0x2c8>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d120      	bne.n	800ee02 <UART_SetConfig+0xbe>
 800edc0:	4b93      	ldr	r3, [pc, #588]	; (800f010 <UART_SetConfig+0x2cc>)
 800edc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edc6:	f003 0303 	and.w	r3, r3, #3
 800edca:	2b03      	cmp	r3, #3
 800edcc:	d816      	bhi.n	800edfc <UART_SetConfig+0xb8>
 800edce:	a201      	add	r2, pc, #4	; (adr r2, 800edd4 <UART_SetConfig+0x90>)
 800edd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd4:	0800ede5 	.word	0x0800ede5
 800edd8:	0800edf1 	.word	0x0800edf1
 800eddc:	0800edeb 	.word	0x0800edeb
 800ede0:	0800edf7 	.word	0x0800edf7
 800ede4:	2301      	movs	r3, #1
 800ede6:	77fb      	strb	r3, [r7, #31]
 800ede8:	e150      	b.n	800f08c <UART_SetConfig+0x348>
 800edea:	2302      	movs	r3, #2
 800edec:	77fb      	strb	r3, [r7, #31]
 800edee:	e14d      	b.n	800f08c <UART_SetConfig+0x348>
 800edf0:	2304      	movs	r3, #4
 800edf2:	77fb      	strb	r3, [r7, #31]
 800edf4:	e14a      	b.n	800f08c <UART_SetConfig+0x348>
 800edf6:	2308      	movs	r3, #8
 800edf8:	77fb      	strb	r3, [r7, #31]
 800edfa:	e147      	b.n	800f08c <UART_SetConfig+0x348>
 800edfc:	2310      	movs	r3, #16
 800edfe:	77fb      	strb	r3, [r7, #31]
 800ee00:	e144      	b.n	800f08c <UART_SetConfig+0x348>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4a83      	ldr	r2, [pc, #524]	; (800f014 <UART_SetConfig+0x2d0>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d132      	bne.n	800ee72 <UART_SetConfig+0x12e>
 800ee0c:	4b80      	ldr	r3, [pc, #512]	; (800f010 <UART_SetConfig+0x2cc>)
 800ee0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee12:	f003 030c 	and.w	r3, r3, #12
 800ee16:	2b0c      	cmp	r3, #12
 800ee18:	d828      	bhi.n	800ee6c <UART_SetConfig+0x128>
 800ee1a:	a201      	add	r2, pc, #4	; (adr r2, 800ee20 <UART_SetConfig+0xdc>)
 800ee1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee20:	0800ee55 	.word	0x0800ee55
 800ee24:	0800ee6d 	.word	0x0800ee6d
 800ee28:	0800ee6d 	.word	0x0800ee6d
 800ee2c:	0800ee6d 	.word	0x0800ee6d
 800ee30:	0800ee61 	.word	0x0800ee61
 800ee34:	0800ee6d 	.word	0x0800ee6d
 800ee38:	0800ee6d 	.word	0x0800ee6d
 800ee3c:	0800ee6d 	.word	0x0800ee6d
 800ee40:	0800ee5b 	.word	0x0800ee5b
 800ee44:	0800ee6d 	.word	0x0800ee6d
 800ee48:	0800ee6d 	.word	0x0800ee6d
 800ee4c:	0800ee6d 	.word	0x0800ee6d
 800ee50:	0800ee67 	.word	0x0800ee67
 800ee54:	2300      	movs	r3, #0
 800ee56:	77fb      	strb	r3, [r7, #31]
 800ee58:	e118      	b.n	800f08c <UART_SetConfig+0x348>
 800ee5a:	2302      	movs	r3, #2
 800ee5c:	77fb      	strb	r3, [r7, #31]
 800ee5e:	e115      	b.n	800f08c <UART_SetConfig+0x348>
 800ee60:	2304      	movs	r3, #4
 800ee62:	77fb      	strb	r3, [r7, #31]
 800ee64:	e112      	b.n	800f08c <UART_SetConfig+0x348>
 800ee66:	2308      	movs	r3, #8
 800ee68:	77fb      	strb	r3, [r7, #31]
 800ee6a:	e10f      	b.n	800f08c <UART_SetConfig+0x348>
 800ee6c:	2310      	movs	r3, #16
 800ee6e:	77fb      	strb	r3, [r7, #31]
 800ee70:	e10c      	b.n	800f08c <UART_SetConfig+0x348>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	4a68      	ldr	r2, [pc, #416]	; (800f018 <UART_SetConfig+0x2d4>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d120      	bne.n	800eebe <UART_SetConfig+0x17a>
 800ee7c:	4b64      	ldr	r3, [pc, #400]	; (800f010 <UART_SetConfig+0x2cc>)
 800ee7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ee86:	2b30      	cmp	r3, #48	; 0x30
 800ee88:	d013      	beq.n	800eeb2 <UART_SetConfig+0x16e>
 800ee8a:	2b30      	cmp	r3, #48	; 0x30
 800ee8c:	d814      	bhi.n	800eeb8 <UART_SetConfig+0x174>
 800ee8e:	2b20      	cmp	r3, #32
 800ee90:	d009      	beq.n	800eea6 <UART_SetConfig+0x162>
 800ee92:	2b20      	cmp	r3, #32
 800ee94:	d810      	bhi.n	800eeb8 <UART_SetConfig+0x174>
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d002      	beq.n	800eea0 <UART_SetConfig+0x15c>
 800ee9a:	2b10      	cmp	r3, #16
 800ee9c:	d006      	beq.n	800eeac <UART_SetConfig+0x168>
 800ee9e:	e00b      	b.n	800eeb8 <UART_SetConfig+0x174>
 800eea0:	2300      	movs	r3, #0
 800eea2:	77fb      	strb	r3, [r7, #31]
 800eea4:	e0f2      	b.n	800f08c <UART_SetConfig+0x348>
 800eea6:	2302      	movs	r3, #2
 800eea8:	77fb      	strb	r3, [r7, #31]
 800eeaa:	e0ef      	b.n	800f08c <UART_SetConfig+0x348>
 800eeac:	2304      	movs	r3, #4
 800eeae:	77fb      	strb	r3, [r7, #31]
 800eeb0:	e0ec      	b.n	800f08c <UART_SetConfig+0x348>
 800eeb2:	2308      	movs	r3, #8
 800eeb4:	77fb      	strb	r3, [r7, #31]
 800eeb6:	e0e9      	b.n	800f08c <UART_SetConfig+0x348>
 800eeb8:	2310      	movs	r3, #16
 800eeba:	77fb      	strb	r3, [r7, #31]
 800eebc:	e0e6      	b.n	800f08c <UART_SetConfig+0x348>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4a56      	ldr	r2, [pc, #344]	; (800f01c <UART_SetConfig+0x2d8>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d120      	bne.n	800ef0a <UART_SetConfig+0x1c6>
 800eec8:	4b51      	ldr	r3, [pc, #324]	; (800f010 <UART_SetConfig+0x2cc>)
 800eeca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eece:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eed2:	2bc0      	cmp	r3, #192	; 0xc0
 800eed4:	d013      	beq.n	800eefe <UART_SetConfig+0x1ba>
 800eed6:	2bc0      	cmp	r3, #192	; 0xc0
 800eed8:	d814      	bhi.n	800ef04 <UART_SetConfig+0x1c0>
 800eeda:	2b80      	cmp	r3, #128	; 0x80
 800eedc:	d009      	beq.n	800eef2 <UART_SetConfig+0x1ae>
 800eede:	2b80      	cmp	r3, #128	; 0x80
 800eee0:	d810      	bhi.n	800ef04 <UART_SetConfig+0x1c0>
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d002      	beq.n	800eeec <UART_SetConfig+0x1a8>
 800eee6:	2b40      	cmp	r3, #64	; 0x40
 800eee8:	d006      	beq.n	800eef8 <UART_SetConfig+0x1b4>
 800eeea:	e00b      	b.n	800ef04 <UART_SetConfig+0x1c0>
 800eeec:	2300      	movs	r3, #0
 800eeee:	77fb      	strb	r3, [r7, #31]
 800eef0:	e0cc      	b.n	800f08c <UART_SetConfig+0x348>
 800eef2:	2302      	movs	r3, #2
 800eef4:	77fb      	strb	r3, [r7, #31]
 800eef6:	e0c9      	b.n	800f08c <UART_SetConfig+0x348>
 800eef8:	2304      	movs	r3, #4
 800eefa:	77fb      	strb	r3, [r7, #31]
 800eefc:	e0c6      	b.n	800f08c <UART_SetConfig+0x348>
 800eefe:	2308      	movs	r3, #8
 800ef00:	77fb      	strb	r3, [r7, #31]
 800ef02:	e0c3      	b.n	800f08c <UART_SetConfig+0x348>
 800ef04:	2310      	movs	r3, #16
 800ef06:	77fb      	strb	r3, [r7, #31]
 800ef08:	e0c0      	b.n	800f08c <UART_SetConfig+0x348>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a44      	ldr	r2, [pc, #272]	; (800f020 <UART_SetConfig+0x2dc>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d125      	bne.n	800ef60 <UART_SetConfig+0x21c>
 800ef14:	4b3e      	ldr	r3, [pc, #248]	; (800f010 <UART_SetConfig+0x2cc>)
 800ef16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef22:	d017      	beq.n	800ef54 <UART_SetConfig+0x210>
 800ef24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef28:	d817      	bhi.n	800ef5a <UART_SetConfig+0x216>
 800ef2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef2e:	d00b      	beq.n	800ef48 <UART_SetConfig+0x204>
 800ef30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef34:	d811      	bhi.n	800ef5a <UART_SetConfig+0x216>
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d003      	beq.n	800ef42 <UART_SetConfig+0x1fe>
 800ef3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef3e:	d006      	beq.n	800ef4e <UART_SetConfig+0x20a>
 800ef40:	e00b      	b.n	800ef5a <UART_SetConfig+0x216>
 800ef42:	2300      	movs	r3, #0
 800ef44:	77fb      	strb	r3, [r7, #31]
 800ef46:	e0a1      	b.n	800f08c <UART_SetConfig+0x348>
 800ef48:	2302      	movs	r3, #2
 800ef4a:	77fb      	strb	r3, [r7, #31]
 800ef4c:	e09e      	b.n	800f08c <UART_SetConfig+0x348>
 800ef4e:	2304      	movs	r3, #4
 800ef50:	77fb      	strb	r3, [r7, #31]
 800ef52:	e09b      	b.n	800f08c <UART_SetConfig+0x348>
 800ef54:	2308      	movs	r3, #8
 800ef56:	77fb      	strb	r3, [r7, #31]
 800ef58:	e098      	b.n	800f08c <UART_SetConfig+0x348>
 800ef5a:	2310      	movs	r3, #16
 800ef5c:	77fb      	strb	r3, [r7, #31]
 800ef5e:	e095      	b.n	800f08c <UART_SetConfig+0x348>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a2f      	ldr	r2, [pc, #188]	; (800f024 <UART_SetConfig+0x2e0>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d125      	bne.n	800efb6 <UART_SetConfig+0x272>
 800ef6a:	4b29      	ldr	r3, [pc, #164]	; (800f010 <UART_SetConfig+0x2cc>)
 800ef6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ef74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ef78:	d017      	beq.n	800efaa <UART_SetConfig+0x266>
 800ef7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ef7e:	d817      	bhi.n	800efb0 <UART_SetConfig+0x26c>
 800ef80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef84:	d00b      	beq.n	800ef9e <UART_SetConfig+0x25a>
 800ef86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef8a:	d811      	bhi.n	800efb0 <UART_SetConfig+0x26c>
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d003      	beq.n	800ef98 <UART_SetConfig+0x254>
 800ef90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef94:	d006      	beq.n	800efa4 <UART_SetConfig+0x260>
 800ef96:	e00b      	b.n	800efb0 <UART_SetConfig+0x26c>
 800ef98:	2301      	movs	r3, #1
 800ef9a:	77fb      	strb	r3, [r7, #31]
 800ef9c:	e076      	b.n	800f08c <UART_SetConfig+0x348>
 800ef9e:	2302      	movs	r3, #2
 800efa0:	77fb      	strb	r3, [r7, #31]
 800efa2:	e073      	b.n	800f08c <UART_SetConfig+0x348>
 800efa4:	2304      	movs	r3, #4
 800efa6:	77fb      	strb	r3, [r7, #31]
 800efa8:	e070      	b.n	800f08c <UART_SetConfig+0x348>
 800efaa:	2308      	movs	r3, #8
 800efac:	77fb      	strb	r3, [r7, #31]
 800efae:	e06d      	b.n	800f08c <UART_SetConfig+0x348>
 800efb0:	2310      	movs	r3, #16
 800efb2:	77fb      	strb	r3, [r7, #31]
 800efb4:	e06a      	b.n	800f08c <UART_SetConfig+0x348>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4a1b      	ldr	r2, [pc, #108]	; (800f028 <UART_SetConfig+0x2e4>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d138      	bne.n	800f032 <UART_SetConfig+0x2ee>
 800efc0:	4b13      	ldr	r3, [pc, #76]	; (800f010 <UART_SetConfig+0x2cc>)
 800efc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800efca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800efce:	d017      	beq.n	800f000 <UART_SetConfig+0x2bc>
 800efd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800efd4:	d82a      	bhi.n	800f02c <UART_SetConfig+0x2e8>
 800efd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efda:	d00b      	beq.n	800eff4 <UART_SetConfig+0x2b0>
 800efdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efe0:	d824      	bhi.n	800f02c <UART_SetConfig+0x2e8>
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d003      	beq.n	800efee <UART_SetConfig+0x2aa>
 800efe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efea:	d006      	beq.n	800effa <UART_SetConfig+0x2b6>
 800efec:	e01e      	b.n	800f02c <UART_SetConfig+0x2e8>
 800efee:	2300      	movs	r3, #0
 800eff0:	77fb      	strb	r3, [r7, #31]
 800eff2:	e04b      	b.n	800f08c <UART_SetConfig+0x348>
 800eff4:	2302      	movs	r3, #2
 800eff6:	77fb      	strb	r3, [r7, #31]
 800eff8:	e048      	b.n	800f08c <UART_SetConfig+0x348>
 800effa:	2304      	movs	r3, #4
 800effc:	77fb      	strb	r3, [r7, #31]
 800effe:	e045      	b.n	800f08c <UART_SetConfig+0x348>
 800f000:	2308      	movs	r3, #8
 800f002:	77fb      	strb	r3, [r7, #31]
 800f004:	e042      	b.n	800f08c <UART_SetConfig+0x348>
 800f006:	bf00      	nop
 800f008:	efff69f3 	.word	0xefff69f3
 800f00c:	40011000 	.word	0x40011000
 800f010:	40023800 	.word	0x40023800
 800f014:	40004400 	.word	0x40004400
 800f018:	40004800 	.word	0x40004800
 800f01c:	40004c00 	.word	0x40004c00
 800f020:	40005000 	.word	0x40005000
 800f024:	40011400 	.word	0x40011400
 800f028:	40007800 	.word	0x40007800
 800f02c:	2310      	movs	r3, #16
 800f02e:	77fb      	strb	r3, [r7, #31]
 800f030:	e02c      	b.n	800f08c <UART_SetConfig+0x348>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4a72      	ldr	r2, [pc, #456]	; (800f200 <UART_SetConfig+0x4bc>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d125      	bne.n	800f088 <UART_SetConfig+0x344>
 800f03c:	4b71      	ldr	r3, [pc, #452]	; (800f204 <UART_SetConfig+0x4c0>)
 800f03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f042:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f046:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f04a:	d017      	beq.n	800f07c <UART_SetConfig+0x338>
 800f04c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f050:	d817      	bhi.n	800f082 <UART_SetConfig+0x33e>
 800f052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f056:	d00b      	beq.n	800f070 <UART_SetConfig+0x32c>
 800f058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f05c:	d811      	bhi.n	800f082 <UART_SetConfig+0x33e>
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d003      	beq.n	800f06a <UART_SetConfig+0x326>
 800f062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f066:	d006      	beq.n	800f076 <UART_SetConfig+0x332>
 800f068:	e00b      	b.n	800f082 <UART_SetConfig+0x33e>
 800f06a:	2300      	movs	r3, #0
 800f06c:	77fb      	strb	r3, [r7, #31]
 800f06e:	e00d      	b.n	800f08c <UART_SetConfig+0x348>
 800f070:	2302      	movs	r3, #2
 800f072:	77fb      	strb	r3, [r7, #31]
 800f074:	e00a      	b.n	800f08c <UART_SetConfig+0x348>
 800f076:	2304      	movs	r3, #4
 800f078:	77fb      	strb	r3, [r7, #31]
 800f07a:	e007      	b.n	800f08c <UART_SetConfig+0x348>
 800f07c:	2308      	movs	r3, #8
 800f07e:	77fb      	strb	r3, [r7, #31]
 800f080:	e004      	b.n	800f08c <UART_SetConfig+0x348>
 800f082:	2310      	movs	r3, #16
 800f084:	77fb      	strb	r3, [r7, #31]
 800f086:	e001      	b.n	800f08c <UART_SetConfig+0x348>
 800f088:	2310      	movs	r3, #16
 800f08a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	69db      	ldr	r3, [r3, #28]
 800f090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f094:	d15b      	bne.n	800f14e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800f096:	7ffb      	ldrb	r3, [r7, #31]
 800f098:	2b08      	cmp	r3, #8
 800f09a:	d828      	bhi.n	800f0ee <UART_SetConfig+0x3aa>
 800f09c:	a201      	add	r2, pc, #4	; (adr r2, 800f0a4 <UART_SetConfig+0x360>)
 800f09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a2:	bf00      	nop
 800f0a4:	0800f0c9 	.word	0x0800f0c9
 800f0a8:	0800f0d1 	.word	0x0800f0d1
 800f0ac:	0800f0d9 	.word	0x0800f0d9
 800f0b0:	0800f0ef 	.word	0x0800f0ef
 800f0b4:	0800f0df 	.word	0x0800f0df
 800f0b8:	0800f0ef 	.word	0x0800f0ef
 800f0bc:	0800f0ef 	.word	0x0800f0ef
 800f0c0:	0800f0ef 	.word	0x0800f0ef
 800f0c4:	0800f0e7 	.word	0x0800f0e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0c8:	f7fd fcb2 	bl	800ca30 <HAL_RCC_GetPCLK1Freq>
 800f0cc:	61b8      	str	r0, [r7, #24]
        break;
 800f0ce:	e013      	b.n	800f0f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0d0:	f7fd fcc2 	bl	800ca58 <HAL_RCC_GetPCLK2Freq>
 800f0d4:	61b8      	str	r0, [r7, #24]
        break;
 800f0d6:	e00f      	b.n	800f0f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f0d8:	4b4b      	ldr	r3, [pc, #300]	; (800f208 <UART_SetConfig+0x4c4>)
 800f0da:	61bb      	str	r3, [r7, #24]
        break;
 800f0dc:	e00c      	b.n	800f0f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0de:	f7fd fb95 	bl	800c80c <HAL_RCC_GetSysClockFreq>
 800f0e2:	61b8      	str	r0, [r7, #24]
        break;
 800f0e4:	e008      	b.n	800f0f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0ea:	61bb      	str	r3, [r7, #24]
        break;
 800f0ec:	e004      	b.n	800f0f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	77bb      	strb	r3, [r7, #30]
        break;
 800f0f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d074      	beq.n	800f1e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	005a      	lsls	r2, r3, #1
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	085b      	lsrs	r3, r3, #1
 800f108:	441a      	add	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f112:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	2b0f      	cmp	r3, #15
 800f118:	d916      	bls.n	800f148 <UART_SetConfig+0x404>
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f120:	d212      	bcs.n	800f148 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	b29b      	uxth	r3, r3
 800f126:	f023 030f 	bic.w	r3, r3, #15
 800f12a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	085b      	lsrs	r3, r3, #1
 800f130:	b29b      	uxth	r3, r3
 800f132:	f003 0307 	and.w	r3, r3, #7
 800f136:	b29a      	uxth	r2, r3
 800f138:	89fb      	ldrh	r3, [r7, #14]
 800f13a:	4313      	orrs	r3, r2
 800f13c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	89fa      	ldrh	r2, [r7, #14]
 800f144:	60da      	str	r2, [r3, #12]
 800f146:	e04f      	b.n	800f1e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f148:	2301      	movs	r3, #1
 800f14a:	77bb      	strb	r3, [r7, #30]
 800f14c:	e04c      	b.n	800f1e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f14e:	7ffb      	ldrb	r3, [r7, #31]
 800f150:	2b08      	cmp	r3, #8
 800f152:	d828      	bhi.n	800f1a6 <UART_SetConfig+0x462>
 800f154:	a201      	add	r2, pc, #4	; (adr r2, 800f15c <UART_SetConfig+0x418>)
 800f156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15a:	bf00      	nop
 800f15c:	0800f181 	.word	0x0800f181
 800f160:	0800f189 	.word	0x0800f189
 800f164:	0800f191 	.word	0x0800f191
 800f168:	0800f1a7 	.word	0x0800f1a7
 800f16c:	0800f197 	.word	0x0800f197
 800f170:	0800f1a7 	.word	0x0800f1a7
 800f174:	0800f1a7 	.word	0x0800f1a7
 800f178:	0800f1a7 	.word	0x0800f1a7
 800f17c:	0800f19f 	.word	0x0800f19f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f180:	f7fd fc56 	bl	800ca30 <HAL_RCC_GetPCLK1Freq>
 800f184:	61b8      	str	r0, [r7, #24]
        break;
 800f186:	e013      	b.n	800f1b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f188:	f7fd fc66 	bl	800ca58 <HAL_RCC_GetPCLK2Freq>
 800f18c:	61b8      	str	r0, [r7, #24]
        break;
 800f18e:	e00f      	b.n	800f1b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f190:	4b1d      	ldr	r3, [pc, #116]	; (800f208 <UART_SetConfig+0x4c4>)
 800f192:	61bb      	str	r3, [r7, #24]
        break;
 800f194:	e00c      	b.n	800f1b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f196:	f7fd fb39 	bl	800c80c <HAL_RCC_GetSysClockFreq>
 800f19a:	61b8      	str	r0, [r7, #24]
        break;
 800f19c:	e008      	b.n	800f1b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f19e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1a2:	61bb      	str	r3, [r7, #24]
        break;
 800f1a4:	e004      	b.n	800f1b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	77bb      	strb	r3, [r7, #30]
        break;
 800f1ae:	bf00      	nop
    }

    if (pclk != 0U)
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d018      	beq.n	800f1e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	085a      	lsrs	r2, r3, #1
 800f1bc:	69bb      	ldr	r3, [r7, #24]
 800f1be:	441a      	add	r2, r3
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	2b0f      	cmp	r3, #15
 800f1ce:	d909      	bls.n	800f1e4 <UART_SetConfig+0x4a0>
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1d6:	d205      	bcs.n	800f1e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	60da      	str	r2, [r3, #12]
 800f1e2:	e001      	b.n	800f1e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800f1f4:	7fbb      	ldrb	r3, [r7, #30]
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3720      	adds	r7, #32
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	40007c00 	.word	0x40007c00
 800f204:	40023800 	.word	0x40023800
 800f208:	00f42400 	.word	0x00f42400

0800f20c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f20c:	b480      	push	{r7}
 800f20e:	b083      	sub	sp, #12
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f218:	f003 0301 	and.w	r3, r3, #1
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00a      	beq.n	800f236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	430a      	orrs	r2, r1
 800f234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f23a:	f003 0302 	and.w	r3, r3, #2
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d00a      	beq.n	800f258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	430a      	orrs	r2, r1
 800f256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25c:	f003 0304 	and.w	r3, r3, #4
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00a      	beq.n	800f27a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	685b      	ldr	r3, [r3, #4]
 800f26a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	430a      	orrs	r2, r1
 800f278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27e:	f003 0308 	and.w	r3, r3, #8
 800f282:	2b00      	cmp	r3, #0
 800f284:	d00a      	beq.n	800f29c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	430a      	orrs	r2, r1
 800f29a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a0:	f003 0310 	and.w	r3, r3, #16
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00a      	beq.n	800f2be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	430a      	orrs	r2, r1
 800f2bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c2:	f003 0320 	and.w	r3, r3, #32
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00a      	beq.n	800f2e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	430a      	orrs	r2, r1
 800f2de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d01a      	beq.n	800f322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	430a      	orrs	r2, r1
 800f300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f30a:	d10a      	bne.n	800f322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	430a      	orrs	r2, r1
 800f320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00a      	beq.n	800f344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	430a      	orrs	r2, r1
 800f342:	605a      	str	r2, [r3, #4]
  }
}
 800f344:	bf00      	nop
 800f346:	370c      	adds	r7, #12
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b086      	sub	sp, #24
 800f354:	af02      	add	r7, sp, #8
 800f356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f360:	f7fb f8b0 	bl	800a4c4 <HAL_GetTick>
 800f364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f003 0308 	and.w	r3, r3, #8
 800f370:	2b08      	cmp	r3, #8
 800f372:	d10e      	bne.n	800f392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2200      	movs	r2, #0
 800f37e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f81b 	bl	800f3be <UART_WaitOnFlagUntilTimeout>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d001      	beq.n	800f392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f38e:	2303      	movs	r3, #3
 800f390:	e011      	b.n	800f3b6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2220      	movs	r2, #32
 800f396:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2220      	movs	r2, #32
 800f39c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800f3b4:	2300      	movs	r3, #0
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b09c      	sub	sp, #112	; 0x70
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	60f8      	str	r0, [r7, #12]
 800f3c6:	60b9      	str	r1, [r7, #8]
 800f3c8:	603b      	str	r3, [r7, #0]
 800f3ca:	4613      	mov	r3, r2
 800f3cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3ce:	e0a7      	b.n	800f520 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3d6:	f000 80a3 	beq.w	800f520 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3da:	f7fb f873 	bl	800a4c4 <HAL_GetTick>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	1ad3      	subs	r3, r2, r3
 800f3e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d302      	bcc.n	800f3f0 <UART_WaitOnFlagUntilTimeout+0x32>
 800f3ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d13f      	bne.n	800f470 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3f8:	e853 3f00 	ldrex	r3, [r3]
 800f3fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f404:	667b      	str	r3, [r7, #100]	; 0x64
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	461a      	mov	r2, r3
 800f40c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f40e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f410:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f416:	e841 2300 	strex	r3, r2, [r1]
 800f41a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d1e6      	bne.n	800f3f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	3308      	adds	r3, #8
 800f428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f42c:	e853 3f00 	ldrex	r3, [r3]
 800f430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f434:	f023 0301 	bic.w	r3, r3, #1
 800f438:	663b      	str	r3, [r7, #96]	; 0x60
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	3308      	adds	r3, #8
 800f440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f442:	64ba      	str	r2, [r7, #72]	; 0x48
 800f444:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f44a:	e841 2300 	strex	r3, r2, [r1]
 800f44e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f452:	2b00      	cmp	r3, #0
 800f454:	d1e5      	bne.n	800f422 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2220      	movs	r2, #32
 800f45a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2220      	movs	r2, #32
 800f460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2200      	movs	r2, #0
 800f468:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800f46c:	2303      	movs	r3, #3
 800f46e:	e068      	b.n	800f542 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f003 0304 	and.w	r3, r3, #4
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d050      	beq.n	800f520 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	69db      	ldr	r3, [r3, #28]
 800f484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f48c:	d148      	bne.n	800f520 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f496:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a0:	e853 3f00 	ldrex	r3, [r3]
 800f4a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f4ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4b6:	637b      	str	r3, [r7, #52]	; 0x34
 800f4b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f4bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4be:	e841 2300 	strex	r3, r2, [r1]
 800f4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1e6      	bne.n	800f498 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	3308      	adds	r3, #8
 800f4d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	e853 3f00 	ldrex	r3, [r3]
 800f4d8:	613b      	str	r3, [r7, #16]
   return(result);
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	f023 0301 	bic.w	r3, r3, #1
 800f4e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	3308      	adds	r3, #8
 800f4e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4ea:	623a      	str	r2, [r7, #32]
 800f4ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ee:	69f9      	ldr	r1, [r7, #28]
 800f4f0:	6a3a      	ldr	r2, [r7, #32]
 800f4f2:	e841 2300 	strex	r3, r2, [r1]
 800f4f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4f8:	69bb      	ldr	r3, [r7, #24]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d1e5      	bne.n	800f4ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2220      	movs	r2, #32
 800f502:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2220      	movs	r2, #32
 800f508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2220      	movs	r2, #32
 800f510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2200      	movs	r2, #0
 800f518:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800f51c:	2303      	movs	r3, #3
 800f51e:	e010      	b.n	800f542 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	69da      	ldr	r2, [r3, #28]
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	4013      	ands	r3, r2
 800f52a:	68ba      	ldr	r2, [r7, #8]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	bf0c      	ite	eq
 800f530:	2301      	moveq	r3, #1
 800f532:	2300      	movne	r3, #0
 800f534:	b2db      	uxtb	r3, r3
 800f536:	461a      	mov	r2, r3
 800f538:	79fb      	ldrb	r3, [r7, #7]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	f43f af48 	beq.w	800f3d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f540:	2300      	movs	r3, #0
}
 800f542:	4618      	mov	r0, r3
 800f544:	3770      	adds	r7, #112	; 0x70
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
	...

0800f54c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b096      	sub	sp, #88	; 0x58
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	4613      	mov	r3, r2
 800f558:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	68ba      	ldr	r2, [r7, #8]
 800f55e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	88fa      	ldrh	r2, [r7, #6]
 800f564:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2200      	movs	r2, #0
 800f56c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2222      	movs	r2, #34	; 0x22
 800f574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d028      	beq.n	800f5d2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f584:	4a3e      	ldr	r2, [pc, #248]	; (800f680 <UART_Start_Receive_DMA+0x134>)
 800f586:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f58c:	4a3d      	ldr	r2, [pc, #244]	; (800f684 <UART_Start_Receive_DMA+0x138>)
 800f58e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f594:	4a3c      	ldr	r2, [pc, #240]	; (800f688 <UART_Start_Receive_DMA+0x13c>)
 800f596:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f59c:	2200      	movs	r2, #0
 800f59e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	3324      	adds	r3, #36	; 0x24
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	88fb      	ldrh	r3, [r7, #6]
 800f5b4:	f7fb fdd0 	bl	800b158 <HAL_DMA_Start_IT>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d009      	beq.n	800f5d2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2210      	movs	r2, #16
 800f5c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2220      	movs	r2, #32
 800f5ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	e051      	b.n	800f676 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	691b      	ldr	r3, [r3, #16]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d018      	beq.n	800f60c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e2:	e853 3f00 	ldrex	r3, [r3]
 800f5e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f5ee:	657b      	str	r3, [r7, #84]	; 0x54
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5fa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f600:	e841 2300 	strex	r3, r2, [r1]
 800f604:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d1e6      	bne.n	800f5da <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	3308      	adds	r3, #8
 800f612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f616:	e853 3f00 	ldrex	r3, [r3]
 800f61a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61e:	f043 0301 	orr.w	r3, r3, #1
 800f622:	653b      	str	r3, [r7, #80]	; 0x50
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	3308      	adds	r3, #8
 800f62a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f62c:	637a      	str	r2, [r7, #52]	; 0x34
 800f62e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f634:	e841 2300 	strex	r3, r2, [r1]
 800f638:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1e5      	bne.n	800f60c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	3308      	adds	r3, #8
 800f646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	e853 3f00 	ldrex	r3, [r3]
 800f64e:	613b      	str	r3, [r7, #16]
   return(result);
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f656:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	3308      	adds	r3, #8
 800f65e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f660:	623a      	str	r2, [r7, #32]
 800f662:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f664:	69f9      	ldr	r1, [r7, #28]
 800f666:	6a3a      	ldr	r2, [r7, #32]
 800f668:	e841 2300 	strex	r3, r2, [r1]
 800f66c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1e5      	bne.n	800f640 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800f674:	2300      	movs	r3, #0
}
 800f676:	4618      	mov	r0, r3
 800f678:	3758      	adds	r7, #88	; 0x58
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	0800f7a1 	.word	0x0800f7a1
 800f684:	0800f8c9 	.word	0x0800f8c9
 800f688:	0800f907 	.word	0x0800f907

0800f68c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b089      	sub	sp, #36	; 0x24
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	e853 3f00 	ldrex	r3, [r3]
 800f6a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f6a8:	61fb      	str	r3, [r7, #28]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	61bb      	str	r3, [r7, #24]
 800f6b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b6:	6979      	ldr	r1, [r7, #20]
 800f6b8:	69ba      	ldr	r2, [r7, #24]
 800f6ba:	e841 2300 	strex	r3, r2, [r1]
 800f6be:	613b      	str	r3, [r7, #16]
   return(result);
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d1e6      	bne.n	800f694 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2220      	movs	r2, #32
 800f6ca:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800f6cc:	bf00      	nop
 800f6ce:	3724      	adds	r7, #36	; 0x24
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b095      	sub	sp, #84	; 0x54
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6e8:	e853 3f00 	ldrex	r3, [r3]
 800f6ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f6f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6fe:	643b      	str	r3, [r7, #64]	; 0x40
 800f700:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f702:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f704:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f706:	e841 2300 	strex	r3, r2, [r1]
 800f70a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d1e6      	bne.n	800f6e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	3308      	adds	r3, #8
 800f718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f71a:	6a3b      	ldr	r3, [r7, #32]
 800f71c:	e853 3f00 	ldrex	r3, [r3]
 800f720:	61fb      	str	r3, [r7, #28]
   return(result);
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	f023 0301 	bic.w	r3, r3, #1
 800f728:	64bb      	str	r3, [r7, #72]	; 0x48
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	3308      	adds	r3, #8
 800f730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f732:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f734:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f73a:	e841 2300 	strex	r3, r2, [r1]
 800f73e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f742:	2b00      	cmp	r3, #0
 800f744:	d1e5      	bne.n	800f712 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	d118      	bne.n	800f780 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	e853 3f00 	ldrex	r3, [r3]
 800f75a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	f023 0310 	bic.w	r3, r3, #16
 800f762:	647b      	str	r3, [r7, #68]	; 0x44
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	461a      	mov	r2, r3
 800f76a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f76c:	61bb      	str	r3, [r7, #24]
 800f76e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f770:	6979      	ldr	r1, [r7, #20]
 800f772:	69ba      	ldr	r2, [r7, #24]
 800f774:	e841 2300 	strex	r3, r2, [r1]
 800f778:	613b      	str	r3, [r7, #16]
   return(result);
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1e6      	bne.n	800f74e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2220      	movs	r2, #32
 800f784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2200      	movs	r2, #0
 800f78c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2200      	movs	r2, #0
 800f792:	669a      	str	r2, [r3, #104]	; 0x68
}
 800f794:	bf00      	nop
 800f796:	3754      	adds	r7, #84	; 0x54
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b09c      	sub	sp, #112	; 0x70
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7ac:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	69db      	ldr	r3, [r3, #28]
 800f7b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7b6:	d071      	beq.n	800f89c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f7b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7c8:	e853 3f00 	ldrex	r3, [r3]
 800f7cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f7ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800f7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f7de:	65bb      	str	r3, [r7, #88]	; 0x58
 800f7e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f7e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7e6:	e841 2300 	strex	r3, r2, [r1]
 800f7ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f7ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d1e6      	bne.n	800f7c0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	3308      	adds	r3, #8
 800f7f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fc:	e853 3f00 	ldrex	r3, [r3]
 800f800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f804:	f023 0301 	bic.w	r3, r3, #1
 800f808:	667b      	str	r3, [r7, #100]	; 0x64
 800f80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	3308      	adds	r3, #8
 800f810:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f812:	647a      	str	r2, [r7, #68]	; 0x44
 800f814:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f81a:	e841 2300 	strex	r3, r2, [r1]
 800f81e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1e5      	bne.n	800f7f2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	3308      	adds	r3, #8
 800f82c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f830:	e853 3f00 	ldrex	r3, [r3]
 800f834:	623b      	str	r3, [r7, #32]
   return(result);
 800f836:	6a3b      	ldr	r3, [r7, #32]
 800f838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f83c:	663b      	str	r3, [r7, #96]	; 0x60
 800f83e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	3308      	adds	r3, #8
 800f844:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f846:	633a      	str	r2, [r7, #48]	; 0x30
 800f848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f84a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f84c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f84e:	e841 2300 	strex	r3, r2, [r1]
 800f852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f856:	2b00      	cmp	r3, #0
 800f858:	d1e5      	bne.n	800f826 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f85a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f85c:	2220      	movs	r2, #32
 800f85e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f866:	2b01      	cmp	r3, #1
 800f868:	d118      	bne.n	800f89c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	e853 3f00 	ldrex	r3, [r3]
 800f876:	60fb      	str	r3, [r7, #12]
   return(result);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f023 0310 	bic.w	r3, r3, #16
 800f87e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	461a      	mov	r2, r3
 800f886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f888:	61fb      	str	r3, [r7, #28]
 800f88a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f88c:	69b9      	ldr	r1, [r7, #24]
 800f88e:	69fa      	ldr	r2, [r7, #28]
 800f890:	e841 2300 	strex	r3, r2, [r1]
 800f894:	617b      	str	r3, [r7, #20]
   return(result);
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d1e6      	bne.n	800f86a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f89c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f89e:	2200      	movs	r2, #0
 800f8a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d107      	bne.n	800f8ba <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f8b4:	f7ff fa3a 	bl	800ed2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f8b8:	e002      	b.n	800f8c0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f8ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f8bc:	f7f3 f808 	bl	80028d0 <HAL_UART_RxCpltCallback>
}
 800f8c0:	bf00      	nop
 800f8c2:	3770      	adds	r7, #112	; 0x70
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2201      	movs	r2, #1
 800f8da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d109      	bne.n	800f8f8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f8ea:	085b      	lsrs	r3, r3, #1
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	f7ff fa1b 	bl	800ed2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f8f6:	e002      	b.n	800f8fe <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f8f8:	68f8      	ldr	r0, [r7, #12]
 800f8fa:	f7ff fa03 	bl	800ed04 <HAL_UART_RxHalfCpltCallback>
}
 800f8fe:	bf00      	nop
 800f900:	3710      	adds	r7, #16
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}

0800f906 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b086      	sub	sp, #24
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f912:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f918:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f920:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f92c:	2b80      	cmp	r3, #128	; 0x80
 800f92e:	d109      	bne.n	800f944 <UART_DMAError+0x3e>
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	2b21      	cmp	r3, #33	; 0x21
 800f934:	d106      	bne.n	800f944 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	2200      	movs	r2, #0
 800f93a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800f93e:	6978      	ldr	r0, [r7, #20]
 800f940:	f7ff fea4 	bl	800f68c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	689b      	ldr	r3, [r3, #8]
 800f94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f94e:	2b40      	cmp	r3, #64	; 0x40
 800f950:	d109      	bne.n	800f966 <UART_DMAError+0x60>
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2b22      	cmp	r3, #34	; 0x22
 800f956:	d106      	bne.n	800f966 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800f960:	6978      	ldr	r0, [r7, #20]
 800f962:	f7ff feb9 	bl	800f6d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f96c:	f043 0210 	orr.w	r2, r3, #16
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f976:	6978      	ldr	r0, [r7, #20]
 800f978:	f7ff f9ce 	bl	800ed18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f97c:	bf00      	nop
 800f97e:	3718      	adds	r7, #24
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2200      	movs	r2, #0
 800f996:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2200      	movs	r2, #0
 800f99e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f7ff f9b8 	bl	800ed18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9a8:	bf00      	nop
 800f9aa:	3710      	adds	r7, #16
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b088      	sub	sp, #32
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	e853 3f00 	ldrex	r3, [r3]
 800f9c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9cc:	61fb      	str	r3, [r7, #28]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	61bb      	str	r3, [r7, #24]
 800f9d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9da:	6979      	ldr	r1, [r7, #20]
 800f9dc:	69ba      	ldr	r2, [r7, #24]
 800f9de:	e841 2300 	strex	r3, r2, [r1]
 800f9e2:	613b      	str	r3, [r7, #16]
   return(result);
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d1e6      	bne.n	800f9b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2220      	movs	r2, #32
 800f9ee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7f3 f946 	bl	8002c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9fc:	bf00      	nop
 800f9fe:	3720      	adds	r7, #32
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b086      	sub	sp, #24
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	607a      	str	r2, [r7, #4]
 800fa10:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d101      	bne.n	800fa1c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800fa18:	2301      	movs	r3, #1
 800fa1a:	e054      	b.n	800fac6 <HAL_RS485Ex_Init+0xc2>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d106      	bne.n	800fa32 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2200      	movs	r2, #0
 800fa28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800fa2c:	68f8      	ldr	r0, [r7, #12]
 800fa2e:	f7f9 ff35 	bl	800989c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2224      	movs	r2, #36	; 0x24
 800fa36:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	681a      	ldr	r2, [r3, #0]
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f022 0201 	bic.w	r2, r2, #1
 800fa46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f7ff f97b 	bl	800ed44 <UART_SetConfig>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d101      	bne.n	800fa58 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 800fa54:	2301      	movs	r3, #1
 800fa56:	e036      	b.n	800fac6 <HAL_RS485Ex_Init+0xc2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d002      	beq.n	800fa66 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800fa60:	68f8      	ldr	r0, [r7, #12]
 800fa62:	f7ff fbd3 	bl	800f20c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	689a      	ldr	r2, [r3, #8]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fa74:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	689b      	ldr	r3, [r3, #8]
 800fa7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	68ba      	ldr	r2, [r7, #8]
 800fa86:	430a      	orrs	r2, r1
 800fa88:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	055b      	lsls	r3, r3, #21
 800fa8e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	041b      	lsls	r3, r3, #16
 800fa94:	697a      	ldr	r2, [r7, #20]
 800fa96:	4313      	orrs	r3, r2
 800fa98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	4b0b      	ldr	r3, [pc, #44]	; (800fad0 <HAL_RS485Ex_Init+0xcc>)
 800faa2:	4013      	ands	r3, r2
 800faa4:	68fa      	ldr	r2, [r7, #12]
 800faa6:	6812      	ldr	r2, [r2, #0]
 800faa8:	6979      	ldr	r1, [r7, #20]
 800faaa:	430b      	orrs	r3, r1
 800faac:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f042 0201 	orr.w	r2, r2, #1
 800fabc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fabe:	68f8      	ldr	r0, [r7, #12]
 800fac0:	f7ff fc46 	bl	800f350 <UART_CheckIdleState>
 800fac4:	4603      	mov	r3, r0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3718      	adds	r7, #24
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	fc00ffff 	.word	0xfc00ffff

0800fad4 <__errno>:
 800fad4:	4b01      	ldr	r3, [pc, #4]	; (800fadc <__errno+0x8>)
 800fad6:	6818      	ldr	r0, [r3, #0]
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	20000028 	.word	0x20000028

0800fae0 <__libc_init_array>:
 800fae0:	b570      	push	{r4, r5, r6, lr}
 800fae2:	4d0d      	ldr	r5, [pc, #52]	; (800fb18 <__libc_init_array+0x38>)
 800fae4:	4c0d      	ldr	r4, [pc, #52]	; (800fb1c <__libc_init_array+0x3c>)
 800fae6:	1b64      	subs	r4, r4, r5
 800fae8:	10a4      	asrs	r4, r4, #2
 800faea:	2600      	movs	r6, #0
 800faec:	42a6      	cmp	r6, r4
 800faee:	d109      	bne.n	800fb04 <__libc_init_array+0x24>
 800faf0:	4d0b      	ldr	r5, [pc, #44]	; (800fb20 <__libc_init_array+0x40>)
 800faf2:	4c0c      	ldr	r4, [pc, #48]	; (800fb24 <__libc_init_array+0x44>)
 800faf4:	f001 ff4e 	bl	8011994 <_init>
 800faf8:	1b64      	subs	r4, r4, r5
 800fafa:	10a4      	asrs	r4, r4, #2
 800fafc:	2600      	movs	r6, #0
 800fafe:	42a6      	cmp	r6, r4
 800fb00:	d105      	bne.n	800fb0e <__libc_init_array+0x2e>
 800fb02:	bd70      	pop	{r4, r5, r6, pc}
 800fb04:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb08:	4798      	blx	r3
 800fb0a:	3601      	adds	r6, #1
 800fb0c:	e7ee      	b.n	800faec <__libc_init_array+0xc>
 800fb0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb12:	4798      	blx	r3
 800fb14:	3601      	adds	r6, #1
 800fb16:	e7f2      	b.n	800fafe <__libc_init_array+0x1e>
 800fb18:	08011f00 	.word	0x08011f00
 800fb1c:	08011f00 	.word	0x08011f00
 800fb20:	08011f00 	.word	0x08011f00
 800fb24:	08011f04 	.word	0x08011f04

0800fb28 <memcpy>:
 800fb28:	440a      	add	r2, r1
 800fb2a:	4291      	cmp	r1, r2
 800fb2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb30:	d100      	bne.n	800fb34 <memcpy+0xc>
 800fb32:	4770      	bx	lr
 800fb34:	b510      	push	{r4, lr}
 800fb36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb3e:	4291      	cmp	r1, r2
 800fb40:	d1f9      	bne.n	800fb36 <memcpy+0xe>
 800fb42:	bd10      	pop	{r4, pc}

0800fb44 <memset>:
 800fb44:	4402      	add	r2, r0
 800fb46:	4603      	mov	r3, r0
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d100      	bne.n	800fb4e <memset+0xa>
 800fb4c:	4770      	bx	lr
 800fb4e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb52:	e7f9      	b.n	800fb48 <memset+0x4>

0800fb54 <iprintf>:
 800fb54:	b40f      	push	{r0, r1, r2, r3}
 800fb56:	4b0a      	ldr	r3, [pc, #40]	; (800fb80 <iprintf+0x2c>)
 800fb58:	b513      	push	{r0, r1, r4, lr}
 800fb5a:	681c      	ldr	r4, [r3, #0]
 800fb5c:	b124      	cbz	r4, 800fb68 <iprintf+0x14>
 800fb5e:	69a3      	ldr	r3, [r4, #24]
 800fb60:	b913      	cbnz	r3, 800fb68 <iprintf+0x14>
 800fb62:	4620      	mov	r0, r4
 800fb64:	f000 fa5e 	bl	8010024 <__sinit>
 800fb68:	ab05      	add	r3, sp, #20
 800fb6a:	9a04      	ldr	r2, [sp, #16]
 800fb6c:	68a1      	ldr	r1, [r4, #8]
 800fb6e:	9301      	str	r3, [sp, #4]
 800fb70:	4620      	mov	r0, r4
 800fb72:	f000 fc67 	bl	8010444 <_vfiprintf_r>
 800fb76:	b002      	add	sp, #8
 800fb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb7c:	b004      	add	sp, #16
 800fb7e:	4770      	bx	lr
 800fb80:	20000028 	.word	0x20000028

0800fb84 <_puts_r>:
 800fb84:	b570      	push	{r4, r5, r6, lr}
 800fb86:	460e      	mov	r6, r1
 800fb88:	4605      	mov	r5, r0
 800fb8a:	b118      	cbz	r0, 800fb94 <_puts_r+0x10>
 800fb8c:	6983      	ldr	r3, [r0, #24]
 800fb8e:	b90b      	cbnz	r3, 800fb94 <_puts_r+0x10>
 800fb90:	f000 fa48 	bl	8010024 <__sinit>
 800fb94:	69ab      	ldr	r3, [r5, #24]
 800fb96:	68ac      	ldr	r4, [r5, #8]
 800fb98:	b913      	cbnz	r3, 800fba0 <_puts_r+0x1c>
 800fb9a:	4628      	mov	r0, r5
 800fb9c:	f000 fa42 	bl	8010024 <__sinit>
 800fba0:	4b2c      	ldr	r3, [pc, #176]	; (800fc54 <_puts_r+0xd0>)
 800fba2:	429c      	cmp	r4, r3
 800fba4:	d120      	bne.n	800fbe8 <_puts_r+0x64>
 800fba6:	686c      	ldr	r4, [r5, #4]
 800fba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbaa:	07db      	lsls	r3, r3, #31
 800fbac:	d405      	bmi.n	800fbba <_puts_r+0x36>
 800fbae:	89a3      	ldrh	r3, [r4, #12]
 800fbb0:	0598      	lsls	r0, r3, #22
 800fbb2:	d402      	bmi.n	800fbba <_puts_r+0x36>
 800fbb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbb6:	f000 fad3 	bl	8010160 <__retarget_lock_acquire_recursive>
 800fbba:	89a3      	ldrh	r3, [r4, #12]
 800fbbc:	0719      	lsls	r1, r3, #28
 800fbbe:	d51d      	bpl.n	800fbfc <_puts_r+0x78>
 800fbc0:	6923      	ldr	r3, [r4, #16]
 800fbc2:	b1db      	cbz	r3, 800fbfc <_puts_r+0x78>
 800fbc4:	3e01      	subs	r6, #1
 800fbc6:	68a3      	ldr	r3, [r4, #8]
 800fbc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fbcc:	3b01      	subs	r3, #1
 800fbce:	60a3      	str	r3, [r4, #8]
 800fbd0:	bb39      	cbnz	r1, 800fc22 <_puts_r+0x9e>
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	da38      	bge.n	800fc48 <_puts_r+0xc4>
 800fbd6:	4622      	mov	r2, r4
 800fbd8:	210a      	movs	r1, #10
 800fbda:	4628      	mov	r0, r5
 800fbdc:	f000 f848 	bl	800fc70 <__swbuf_r>
 800fbe0:	3001      	adds	r0, #1
 800fbe2:	d011      	beq.n	800fc08 <_puts_r+0x84>
 800fbe4:	250a      	movs	r5, #10
 800fbe6:	e011      	b.n	800fc0c <_puts_r+0x88>
 800fbe8:	4b1b      	ldr	r3, [pc, #108]	; (800fc58 <_puts_r+0xd4>)
 800fbea:	429c      	cmp	r4, r3
 800fbec:	d101      	bne.n	800fbf2 <_puts_r+0x6e>
 800fbee:	68ac      	ldr	r4, [r5, #8]
 800fbf0:	e7da      	b.n	800fba8 <_puts_r+0x24>
 800fbf2:	4b1a      	ldr	r3, [pc, #104]	; (800fc5c <_puts_r+0xd8>)
 800fbf4:	429c      	cmp	r4, r3
 800fbf6:	bf08      	it	eq
 800fbf8:	68ec      	ldreq	r4, [r5, #12]
 800fbfa:	e7d5      	b.n	800fba8 <_puts_r+0x24>
 800fbfc:	4621      	mov	r1, r4
 800fbfe:	4628      	mov	r0, r5
 800fc00:	f000 f888 	bl	800fd14 <__swsetup_r>
 800fc04:	2800      	cmp	r0, #0
 800fc06:	d0dd      	beq.n	800fbc4 <_puts_r+0x40>
 800fc08:	f04f 35ff 	mov.w	r5, #4294967295
 800fc0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc0e:	07da      	lsls	r2, r3, #31
 800fc10:	d405      	bmi.n	800fc1e <_puts_r+0x9a>
 800fc12:	89a3      	ldrh	r3, [r4, #12]
 800fc14:	059b      	lsls	r3, r3, #22
 800fc16:	d402      	bmi.n	800fc1e <_puts_r+0x9a>
 800fc18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc1a:	f000 faa2 	bl	8010162 <__retarget_lock_release_recursive>
 800fc1e:	4628      	mov	r0, r5
 800fc20:	bd70      	pop	{r4, r5, r6, pc}
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	da04      	bge.n	800fc30 <_puts_r+0xac>
 800fc26:	69a2      	ldr	r2, [r4, #24]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	dc06      	bgt.n	800fc3a <_puts_r+0xb6>
 800fc2c:	290a      	cmp	r1, #10
 800fc2e:	d004      	beq.n	800fc3a <_puts_r+0xb6>
 800fc30:	6823      	ldr	r3, [r4, #0]
 800fc32:	1c5a      	adds	r2, r3, #1
 800fc34:	6022      	str	r2, [r4, #0]
 800fc36:	7019      	strb	r1, [r3, #0]
 800fc38:	e7c5      	b.n	800fbc6 <_puts_r+0x42>
 800fc3a:	4622      	mov	r2, r4
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	f000 f817 	bl	800fc70 <__swbuf_r>
 800fc42:	3001      	adds	r0, #1
 800fc44:	d1bf      	bne.n	800fbc6 <_puts_r+0x42>
 800fc46:	e7df      	b.n	800fc08 <_puts_r+0x84>
 800fc48:	6823      	ldr	r3, [r4, #0]
 800fc4a:	250a      	movs	r5, #10
 800fc4c:	1c5a      	adds	r2, r3, #1
 800fc4e:	6022      	str	r2, [r4, #0]
 800fc50:	701d      	strb	r5, [r3, #0]
 800fc52:	e7db      	b.n	800fc0c <_puts_r+0x88>
 800fc54:	08011e54 	.word	0x08011e54
 800fc58:	08011e74 	.word	0x08011e74
 800fc5c:	08011e34 	.word	0x08011e34

0800fc60 <puts>:
 800fc60:	4b02      	ldr	r3, [pc, #8]	; (800fc6c <puts+0xc>)
 800fc62:	4601      	mov	r1, r0
 800fc64:	6818      	ldr	r0, [r3, #0]
 800fc66:	f7ff bf8d 	b.w	800fb84 <_puts_r>
 800fc6a:	bf00      	nop
 800fc6c:	20000028 	.word	0x20000028

0800fc70 <__swbuf_r>:
 800fc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc72:	460e      	mov	r6, r1
 800fc74:	4614      	mov	r4, r2
 800fc76:	4605      	mov	r5, r0
 800fc78:	b118      	cbz	r0, 800fc82 <__swbuf_r+0x12>
 800fc7a:	6983      	ldr	r3, [r0, #24]
 800fc7c:	b90b      	cbnz	r3, 800fc82 <__swbuf_r+0x12>
 800fc7e:	f000 f9d1 	bl	8010024 <__sinit>
 800fc82:	4b21      	ldr	r3, [pc, #132]	; (800fd08 <__swbuf_r+0x98>)
 800fc84:	429c      	cmp	r4, r3
 800fc86:	d12b      	bne.n	800fce0 <__swbuf_r+0x70>
 800fc88:	686c      	ldr	r4, [r5, #4]
 800fc8a:	69a3      	ldr	r3, [r4, #24]
 800fc8c:	60a3      	str	r3, [r4, #8]
 800fc8e:	89a3      	ldrh	r3, [r4, #12]
 800fc90:	071a      	lsls	r2, r3, #28
 800fc92:	d52f      	bpl.n	800fcf4 <__swbuf_r+0x84>
 800fc94:	6923      	ldr	r3, [r4, #16]
 800fc96:	b36b      	cbz	r3, 800fcf4 <__swbuf_r+0x84>
 800fc98:	6923      	ldr	r3, [r4, #16]
 800fc9a:	6820      	ldr	r0, [r4, #0]
 800fc9c:	1ac0      	subs	r0, r0, r3
 800fc9e:	6963      	ldr	r3, [r4, #20]
 800fca0:	b2f6      	uxtb	r6, r6
 800fca2:	4283      	cmp	r3, r0
 800fca4:	4637      	mov	r7, r6
 800fca6:	dc04      	bgt.n	800fcb2 <__swbuf_r+0x42>
 800fca8:	4621      	mov	r1, r4
 800fcaa:	4628      	mov	r0, r5
 800fcac:	f000 f926 	bl	800fefc <_fflush_r>
 800fcb0:	bb30      	cbnz	r0, 800fd00 <__swbuf_r+0x90>
 800fcb2:	68a3      	ldr	r3, [r4, #8]
 800fcb4:	3b01      	subs	r3, #1
 800fcb6:	60a3      	str	r3, [r4, #8]
 800fcb8:	6823      	ldr	r3, [r4, #0]
 800fcba:	1c5a      	adds	r2, r3, #1
 800fcbc:	6022      	str	r2, [r4, #0]
 800fcbe:	701e      	strb	r6, [r3, #0]
 800fcc0:	6963      	ldr	r3, [r4, #20]
 800fcc2:	3001      	adds	r0, #1
 800fcc4:	4283      	cmp	r3, r0
 800fcc6:	d004      	beq.n	800fcd2 <__swbuf_r+0x62>
 800fcc8:	89a3      	ldrh	r3, [r4, #12]
 800fcca:	07db      	lsls	r3, r3, #31
 800fccc:	d506      	bpl.n	800fcdc <__swbuf_r+0x6c>
 800fcce:	2e0a      	cmp	r6, #10
 800fcd0:	d104      	bne.n	800fcdc <__swbuf_r+0x6c>
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	4628      	mov	r0, r5
 800fcd6:	f000 f911 	bl	800fefc <_fflush_r>
 800fcda:	b988      	cbnz	r0, 800fd00 <__swbuf_r+0x90>
 800fcdc:	4638      	mov	r0, r7
 800fcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fce0:	4b0a      	ldr	r3, [pc, #40]	; (800fd0c <__swbuf_r+0x9c>)
 800fce2:	429c      	cmp	r4, r3
 800fce4:	d101      	bne.n	800fcea <__swbuf_r+0x7a>
 800fce6:	68ac      	ldr	r4, [r5, #8]
 800fce8:	e7cf      	b.n	800fc8a <__swbuf_r+0x1a>
 800fcea:	4b09      	ldr	r3, [pc, #36]	; (800fd10 <__swbuf_r+0xa0>)
 800fcec:	429c      	cmp	r4, r3
 800fcee:	bf08      	it	eq
 800fcf0:	68ec      	ldreq	r4, [r5, #12]
 800fcf2:	e7ca      	b.n	800fc8a <__swbuf_r+0x1a>
 800fcf4:	4621      	mov	r1, r4
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	f000 f80c 	bl	800fd14 <__swsetup_r>
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	d0cb      	beq.n	800fc98 <__swbuf_r+0x28>
 800fd00:	f04f 37ff 	mov.w	r7, #4294967295
 800fd04:	e7ea      	b.n	800fcdc <__swbuf_r+0x6c>
 800fd06:	bf00      	nop
 800fd08:	08011e54 	.word	0x08011e54
 800fd0c:	08011e74 	.word	0x08011e74
 800fd10:	08011e34 	.word	0x08011e34

0800fd14 <__swsetup_r>:
 800fd14:	4b32      	ldr	r3, [pc, #200]	; (800fde0 <__swsetup_r+0xcc>)
 800fd16:	b570      	push	{r4, r5, r6, lr}
 800fd18:	681d      	ldr	r5, [r3, #0]
 800fd1a:	4606      	mov	r6, r0
 800fd1c:	460c      	mov	r4, r1
 800fd1e:	b125      	cbz	r5, 800fd2a <__swsetup_r+0x16>
 800fd20:	69ab      	ldr	r3, [r5, #24]
 800fd22:	b913      	cbnz	r3, 800fd2a <__swsetup_r+0x16>
 800fd24:	4628      	mov	r0, r5
 800fd26:	f000 f97d 	bl	8010024 <__sinit>
 800fd2a:	4b2e      	ldr	r3, [pc, #184]	; (800fde4 <__swsetup_r+0xd0>)
 800fd2c:	429c      	cmp	r4, r3
 800fd2e:	d10f      	bne.n	800fd50 <__swsetup_r+0x3c>
 800fd30:	686c      	ldr	r4, [r5, #4]
 800fd32:	89a3      	ldrh	r3, [r4, #12]
 800fd34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd38:	0719      	lsls	r1, r3, #28
 800fd3a:	d42c      	bmi.n	800fd96 <__swsetup_r+0x82>
 800fd3c:	06dd      	lsls	r5, r3, #27
 800fd3e:	d411      	bmi.n	800fd64 <__swsetup_r+0x50>
 800fd40:	2309      	movs	r3, #9
 800fd42:	6033      	str	r3, [r6, #0]
 800fd44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd48:	81a3      	strh	r3, [r4, #12]
 800fd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd4e:	e03e      	b.n	800fdce <__swsetup_r+0xba>
 800fd50:	4b25      	ldr	r3, [pc, #148]	; (800fde8 <__swsetup_r+0xd4>)
 800fd52:	429c      	cmp	r4, r3
 800fd54:	d101      	bne.n	800fd5a <__swsetup_r+0x46>
 800fd56:	68ac      	ldr	r4, [r5, #8]
 800fd58:	e7eb      	b.n	800fd32 <__swsetup_r+0x1e>
 800fd5a:	4b24      	ldr	r3, [pc, #144]	; (800fdec <__swsetup_r+0xd8>)
 800fd5c:	429c      	cmp	r4, r3
 800fd5e:	bf08      	it	eq
 800fd60:	68ec      	ldreq	r4, [r5, #12]
 800fd62:	e7e6      	b.n	800fd32 <__swsetup_r+0x1e>
 800fd64:	0758      	lsls	r0, r3, #29
 800fd66:	d512      	bpl.n	800fd8e <__swsetup_r+0x7a>
 800fd68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd6a:	b141      	cbz	r1, 800fd7e <__swsetup_r+0x6a>
 800fd6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd70:	4299      	cmp	r1, r3
 800fd72:	d002      	beq.n	800fd7a <__swsetup_r+0x66>
 800fd74:	4630      	mov	r0, r6
 800fd76:	f000 fa5b 	bl	8010230 <_free_r>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	6363      	str	r3, [r4, #52]	; 0x34
 800fd7e:	89a3      	ldrh	r3, [r4, #12]
 800fd80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd84:	81a3      	strh	r3, [r4, #12]
 800fd86:	2300      	movs	r3, #0
 800fd88:	6063      	str	r3, [r4, #4]
 800fd8a:	6923      	ldr	r3, [r4, #16]
 800fd8c:	6023      	str	r3, [r4, #0]
 800fd8e:	89a3      	ldrh	r3, [r4, #12]
 800fd90:	f043 0308 	orr.w	r3, r3, #8
 800fd94:	81a3      	strh	r3, [r4, #12]
 800fd96:	6923      	ldr	r3, [r4, #16]
 800fd98:	b94b      	cbnz	r3, 800fdae <__swsetup_r+0x9a>
 800fd9a:	89a3      	ldrh	r3, [r4, #12]
 800fd9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fda0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fda4:	d003      	beq.n	800fdae <__swsetup_r+0x9a>
 800fda6:	4621      	mov	r1, r4
 800fda8:	4630      	mov	r0, r6
 800fdaa:	f000 fa01 	bl	80101b0 <__smakebuf_r>
 800fdae:	89a0      	ldrh	r0, [r4, #12]
 800fdb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fdb4:	f010 0301 	ands.w	r3, r0, #1
 800fdb8:	d00a      	beq.n	800fdd0 <__swsetup_r+0xbc>
 800fdba:	2300      	movs	r3, #0
 800fdbc:	60a3      	str	r3, [r4, #8]
 800fdbe:	6963      	ldr	r3, [r4, #20]
 800fdc0:	425b      	negs	r3, r3
 800fdc2:	61a3      	str	r3, [r4, #24]
 800fdc4:	6923      	ldr	r3, [r4, #16]
 800fdc6:	b943      	cbnz	r3, 800fdda <__swsetup_r+0xc6>
 800fdc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fdcc:	d1ba      	bne.n	800fd44 <__swsetup_r+0x30>
 800fdce:	bd70      	pop	{r4, r5, r6, pc}
 800fdd0:	0781      	lsls	r1, r0, #30
 800fdd2:	bf58      	it	pl
 800fdd4:	6963      	ldrpl	r3, [r4, #20]
 800fdd6:	60a3      	str	r3, [r4, #8]
 800fdd8:	e7f4      	b.n	800fdc4 <__swsetup_r+0xb0>
 800fdda:	2000      	movs	r0, #0
 800fddc:	e7f7      	b.n	800fdce <__swsetup_r+0xba>
 800fdde:	bf00      	nop
 800fde0:	20000028 	.word	0x20000028
 800fde4:	08011e54 	.word	0x08011e54
 800fde8:	08011e74 	.word	0x08011e74
 800fdec:	08011e34 	.word	0x08011e34

0800fdf0 <__sflush_r>:
 800fdf0:	898a      	ldrh	r2, [r1, #12]
 800fdf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf6:	4605      	mov	r5, r0
 800fdf8:	0710      	lsls	r0, r2, #28
 800fdfa:	460c      	mov	r4, r1
 800fdfc:	d458      	bmi.n	800feb0 <__sflush_r+0xc0>
 800fdfe:	684b      	ldr	r3, [r1, #4]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	dc05      	bgt.n	800fe10 <__sflush_r+0x20>
 800fe04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	dc02      	bgt.n	800fe10 <__sflush_r+0x20>
 800fe0a:	2000      	movs	r0, #0
 800fe0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe12:	2e00      	cmp	r6, #0
 800fe14:	d0f9      	beq.n	800fe0a <__sflush_r+0x1a>
 800fe16:	2300      	movs	r3, #0
 800fe18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe1c:	682f      	ldr	r7, [r5, #0]
 800fe1e:	602b      	str	r3, [r5, #0]
 800fe20:	d032      	beq.n	800fe88 <__sflush_r+0x98>
 800fe22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe24:	89a3      	ldrh	r3, [r4, #12]
 800fe26:	075a      	lsls	r2, r3, #29
 800fe28:	d505      	bpl.n	800fe36 <__sflush_r+0x46>
 800fe2a:	6863      	ldr	r3, [r4, #4]
 800fe2c:	1ac0      	subs	r0, r0, r3
 800fe2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe30:	b10b      	cbz	r3, 800fe36 <__sflush_r+0x46>
 800fe32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe34:	1ac0      	subs	r0, r0, r3
 800fe36:	2300      	movs	r3, #0
 800fe38:	4602      	mov	r2, r0
 800fe3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe3c:	6a21      	ldr	r1, [r4, #32]
 800fe3e:	4628      	mov	r0, r5
 800fe40:	47b0      	blx	r6
 800fe42:	1c43      	adds	r3, r0, #1
 800fe44:	89a3      	ldrh	r3, [r4, #12]
 800fe46:	d106      	bne.n	800fe56 <__sflush_r+0x66>
 800fe48:	6829      	ldr	r1, [r5, #0]
 800fe4a:	291d      	cmp	r1, #29
 800fe4c:	d82c      	bhi.n	800fea8 <__sflush_r+0xb8>
 800fe4e:	4a2a      	ldr	r2, [pc, #168]	; (800fef8 <__sflush_r+0x108>)
 800fe50:	40ca      	lsrs	r2, r1
 800fe52:	07d6      	lsls	r6, r2, #31
 800fe54:	d528      	bpl.n	800fea8 <__sflush_r+0xb8>
 800fe56:	2200      	movs	r2, #0
 800fe58:	6062      	str	r2, [r4, #4]
 800fe5a:	04d9      	lsls	r1, r3, #19
 800fe5c:	6922      	ldr	r2, [r4, #16]
 800fe5e:	6022      	str	r2, [r4, #0]
 800fe60:	d504      	bpl.n	800fe6c <__sflush_r+0x7c>
 800fe62:	1c42      	adds	r2, r0, #1
 800fe64:	d101      	bne.n	800fe6a <__sflush_r+0x7a>
 800fe66:	682b      	ldr	r3, [r5, #0]
 800fe68:	b903      	cbnz	r3, 800fe6c <__sflush_r+0x7c>
 800fe6a:	6560      	str	r0, [r4, #84]	; 0x54
 800fe6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe6e:	602f      	str	r7, [r5, #0]
 800fe70:	2900      	cmp	r1, #0
 800fe72:	d0ca      	beq.n	800fe0a <__sflush_r+0x1a>
 800fe74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe78:	4299      	cmp	r1, r3
 800fe7a:	d002      	beq.n	800fe82 <__sflush_r+0x92>
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	f000 f9d7 	bl	8010230 <_free_r>
 800fe82:	2000      	movs	r0, #0
 800fe84:	6360      	str	r0, [r4, #52]	; 0x34
 800fe86:	e7c1      	b.n	800fe0c <__sflush_r+0x1c>
 800fe88:	6a21      	ldr	r1, [r4, #32]
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	47b0      	blx	r6
 800fe90:	1c41      	adds	r1, r0, #1
 800fe92:	d1c7      	bne.n	800fe24 <__sflush_r+0x34>
 800fe94:	682b      	ldr	r3, [r5, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d0c4      	beq.n	800fe24 <__sflush_r+0x34>
 800fe9a:	2b1d      	cmp	r3, #29
 800fe9c:	d001      	beq.n	800fea2 <__sflush_r+0xb2>
 800fe9e:	2b16      	cmp	r3, #22
 800fea0:	d101      	bne.n	800fea6 <__sflush_r+0xb6>
 800fea2:	602f      	str	r7, [r5, #0]
 800fea4:	e7b1      	b.n	800fe0a <__sflush_r+0x1a>
 800fea6:	89a3      	ldrh	r3, [r4, #12]
 800fea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800feac:	81a3      	strh	r3, [r4, #12]
 800feae:	e7ad      	b.n	800fe0c <__sflush_r+0x1c>
 800feb0:	690f      	ldr	r7, [r1, #16]
 800feb2:	2f00      	cmp	r7, #0
 800feb4:	d0a9      	beq.n	800fe0a <__sflush_r+0x1a>
 800feb6:	0793      	lsls	r3, r2, #30
 800feb8:	680e      	ldr	r6, [r1, #0]
 800feba:	bf08      	it	eq
 800febc:	694b      	ldreq	r3, [r1, #20]
 800febe:	600f      	str	r7, [r1, #0]
 800fec0:	bf18      	it	ne
 800fec2:	2300      	movne	r3, #0
 800fec4:	eba6 0807 	sub.w	r8, r6, r7
 800fec8:	608b      	str	r3, [r1, #8]
 800feca:	f1b8 0f00 	cmp.w	r8, #0
 800fece:	dd9c      	ble.n	800fe0a <__sflush_r+0x1a>
 800fed0:	6a21      	ldr	r1, [r4, #32]
 800fed2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fed4:	4643      	mov	r3, r8
 800fed6:	463a      	mov	r2, r7
 800fed8:	4628      	mov	r0, r5
 800feda:	47b0      	blx	r6
 800fedc:	2800      	cmp	r0, #0
 800fede:	dc06      	bgt.n	800feee <__sflush_r+0xfe>
 800fee0:	89a3      	ldrh	r3, [r4, #12]
 800fee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fee6:	81a3      	strh	r3, [r4, #12]
 800fee8:	f04f 30ff 	mov.w	r0, #4294967295
 800feec:	e78e      	b.n	800fe0c <__sflush_r+0x1c>
 800feee:	4407      	add	r7, r0
 800fef0:	eba8 0800 	sub.w	r8, r8, r0
 800fef4:	e7e9      	b.n	800feca <__sflush_r+0xda>
 800fef6:	bf00      	nop
 800fef8:	20400001 	.word	0x20400001

0800fefc <_fflush_r>:
 800fefc:	b538      	push	{r3, r4, r5, lr}
 800fefe:	690b      	ldr	r3, [r1, #16]
 800ff00:	4605      	mov	r5, r0
 800ff02:	460c      	mov	r4, r1
 800ff04:	b913      	cbnz	r3, 800ff0c <_fflush_r+0x10>
 800ff06:	2500      	movs	r5, #0
 800ff08:	4628      	mov	r0, r5
 800ff0a:	bd38      	pop	{r3, r4, r5, pc}
 800ff0c:	b118      	cbz	r0, 800ff16 <_fflush_r+0x1a>
 800ff0e:	6983      	ldr	r3, [r0, #24]
 800ff10:	b90b      	cbnz	r3, 800ff16 <_fflush_r+0x1a>
 800ff12:	f000 f887 	bl	8010024 <__sinit>
 800ff16:	4b14      	ldr	r3, [pc, #80]	; (800ff68 <_fflush_r+0x6c>)
 800ff18:	429c      	cmp	r4, r3
 800ff1a:	d11b      	bne.n	800ff54 <_fflush_r+0x58>
 800ff1c:	686c      	ldr	r4, [r5, #4]
 800ff1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d0ef      	beq.n	800ff06 <_fflush_r+0xa>
 800ff26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff28:	07d0      	lsls	r0, r2, #31
 800ff2a:	d404      	bmi.n	800ff36 <_fflush_r+0x3a>
 800ff2c:	0599      	lsls	r1, r3, #22
 800ff2e:	d402      	bmi.n	800ff36 <_fflush_r+0x3a>
 800ff30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff32:	f000 f915 	bl	8010160 <__retarget_lock_acquire_recursive>
 800ff36:	4628      	mov	r0, r5
 800ff38:	4621      	mov	r1, r4
 800ff3a:	f7ff ff59 	bl	800fdf0 <__sflush_r>
 800ff3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff40:	07da      	lsls	r2, r3, #31
 800ff42:	4605      	mov	r5, r0
 800ff44:	d4e0      	bmi.n	800ff08 <_fflush_r+0xc>
 800ff46:	89a3      	ldrh	r3, [r4, #12]
 800ff48:	059b      	lsls	r3, r3, #22
 800ff4a:	d4dd      	bmi.n	800ff08 <_fflush_r+0xc>
 800ff4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff4e:	f000 f908 	bl	8010162 <__retarget_lock_release_recursive>
 800ff52:	e7d9      	b.n	800ff08 <_fflush_r+0xc>
 800ff54:	4b05      	ldr	r3, [pc, #20]	; (800ff6c <_fflush_r+0x70>)
 800ff56:	429c      	cmp	r4, r3
 800ff58:	d101      	bne.n	800ff5e <_fflush_r+0x62>
 800ff5a:	68ac      	ldr	r4, [r5, #8]
 800ff5c:	e7df      	b.n	800ff1e <_fflush_r+0x22>
 800ff5e:	4b04      	ldr	r3, [pc, #16]	; (800ff70 <_fflush_r+0x74>)
 800ff60:	429c      	cmp	r4, r3
 800ff62:	bf08      	it	eq
 800ff64:	68ec      	ldreq	r4, [r5, #12]
 800ff66:	e7da      	b.n	800ff1e <_fflush_r+0x22>
 800ff68:	08011e54 	.word	0x08011e54
 800ff6c:	08011e74 	.word	0x08011e74
 800ff70:	08011e34 	.word	0x08011e34

0800ff74 <std>:
 800ff74:	2300      	movs	r3, #0
 800ff76:	b510      	push	{r4, lr}
 800ff78:	4604      	mov	r4, r0
 800ff7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ff7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff82:	6083      	str	r3, [r0, #8]
 800ff84:	8181      	strh	r1, [r0, #12]
 800ff86:	6643      	str	r3, [r0, #100]	; 0x64
 800ff88:	81c2      	strh	r2, [r0, #14]
 800ff8a:	6183      	str	r3, [r0, #24]
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	2208      	movs	r2, #8
 800ff90:	305c      	adds	r0, #92	; 0x5c
 800ff92:	f7ff fdd7 	bl	800fb44 <memset>
 800ff96:	4b05      	ldr	r3, [pc, #20]	; (800ffac <std+0x38>)
 800ff98:	6263      	str	r3, [r4, #36]	; 0x24
 800ff9a:	4b05      	ldr	r3, [pc, #20]	; (800ffb0 <std+0x3c>)
 800ff9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff9e:	4b05      	ldr	r3, [pc, #20]	; (800ffb4 <std+0x40>)
 800ffa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ffa2:	4b05      	ldr	r3, [pc, #20]	; (800ffb8 <std+0x44>)
 800ffa4:	6224      	str	r4, [r4, #32]
 800ffa6:	6323      	str	r3, [r4, #48]	; 0x30
 800ffa8:	bd10      	pop	{r4, pc}
 800ffaa:	bf00      	nop
 800ffac:	080109ed 	.word	0x080109ed
 800ffb0:	08010a0f 	.word	0x08010a0f
 800ffb4:	08010a47 	.word	0x08010a47
 800ffb8:	08010a6b 	.word	0x08010a6b

0800ffbc <_cleanup_r>:
 800ffbc:	4901      	ldr	r1, [pc, #4]	; (800ffc4 <_cleanup_r+0x8>)
 800ffbe:	f000 b8af 	b.w	8010120 <_fwalk_reent>
 800ffc2:	bf00      	nop
 800ffc4:	0800fefd 	.word	0x0800fefd

0800ffc8 <__sfmoreglue>:
 800ffc8:	b570      	push	{r4, r5, r6, lr}
 800ffca:	2268      	movs	r2, #104	; 0x68
 800ffcc:	1e4d      	subs	r5, r1, #1
 800ffce:	4355      	muls	r5, r2
 800ffd0:	460e      	mov	r6, r1
 800ffd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ffd6:	f000 f997 	bl	8010308 <_malloc_r>
 800ffda:	4604      	mov	r4, r0
 800ffdc:	b140      	cbz	r0, 800fff0 <__sfmoreglue+0x28>
 800ffde:	2100      	movs	r1, #0
 800ffe0:	e9c0 1600 	strd	r1, r6, [r0]
 800ffe4:	300c      	adds	r0, #12
 800ffe6:	60a0      	str	r0, [r4, #8]
 800ffe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ffec:	f7ff fdaa 	bl	800fb44 <memset>
 800fff0:	4620      	mov	r0, r4
 800fff2:	bd70      	pop	{r4, r5, r6, pc}

0800fff4 <__sfp_lock_acquire>:
 800fff4:	4801      	ldr	r0, [pc, #4]	; (800fffc <__sfp_lock_acquire+0x8>)
 800fff6:	f000 b8b3 	b.w	8010160 <__retarget_lock_acquire_recursive>
 800fffa:	bf00      	nop
 800fffc:	2000c6f1 	.word	0x2000c6f1

08010000 <__sfp_lock_release>:
 8010000:	4801      	ldr	r0, [pc, #4]	; (8010008 <__sfp_lock_release+0x8>)
 8010002:	f000 b8ae 	b.w	8010162 <__retarget_lock_release_recursive>
 8010006:	bf00      	nop
 8010008:	2000c6f1 	.word	0x2000c6f1

0801000c <__sinit_lock_acquire>:
 801000c:	4801      	ldr	r0, [pc, #4]	; (8010014 <__sinit_lock_acquire+0x8>)
 801000e:	f000 b8a7 	b.w	8010160 <__retarget_lock_acquire_recursive>
 8010012:	bf00      	nop
 8010014:	2000c6f2 	.word	0x2000c6f2

08010018 <__sinit_lock_release>:
 8010018:	4801      	ldr	r0, [pc, #4]	; (8010020 <__sinit_lock_release+0x8>)
 801001a:	f000 b8a2 	b.w	8010162 <__retarget_lock_release_recursive>
 801001e:	bf00      	nop
 8010020:	2000c6f2 	.word	0x2000c6f2

08010024 <__sinit>:
 8010024:	b510      	push	{r4, lr}
 8010026:	4604      	mov	r4, r0
 8010028:	f7ff fff0 	bl	801000c <__sinit_lock_acquire>
 801002c:	69a3      	ldr	r3, [r4, #24]
 801002e:	b11b      	cbz	r3, 8010038 <__sinit+0x14>
 8010030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010034:	f7ff bff0 	b.w	8010018 <__sinit_lock_release>
 8010038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801003c:	6523      	str	r3, [r4, #80]	; 0x50
 801003e:	4b13      	ldr	r3, [pc, #76]	; (801008c <__sinit+0x68>)
 8010040:	4a13      	ldr	r2, [pc, #76]	; (8010090 <__sinit+0x6c>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	62a2      	str	r2, [r4, #40]	; 0x28
 8010046:	42a3      	cmp	r3, r4
 8010048:	bf04      	itt	eq
 801004a:	2301      	moveq	r3, #1
 801004c:	61a3      	streq	r3, [r4, #24]
 801004e:	4620      	mov	r0, r4
 8010050:	f000 f820 	bl	8010094 <__sfp>
 8010054:	6060      	str	r0, [r4, #4]
 8010056:	4620      	mov	r0, r4
 8010058:	f000 f81c 	bl	8010094 <__sfp>
 801005c:	60a0      	str	r0, [r4, #8]
 801005e:	4620      	mov	r0, r4
 8010060:	f000 f818 	bl	8010094 <__sfp>
 8010064:	2200      	movs	r2, #0
 8010066:	60e0      	str	r0, [r4, #12]
 8010068:	2104      	movs	r1, #4
 801006a:	6860      	ldr	r0, [r4, #4]
 801006c:	f7ff ff82 	bl	800ff74 <std>
 8010070:	68a0      	ldr	r0, [r4, #8]
 8010072:	2201      	movs	r2, #1
 8010074:	2109      	movs	r1, #9
 8010076:	f7ff ff7d 	bl	800ff74 <std>
 801007a:	68e0      	ldr	r0, [r4, #12]
 801007c:	2202      	movs	r2, #2
 801007e:	2112      	movs	r1, #18
 8010080:	f7ff ff78 	bl	800ff74 <std>
 8010084:	2301      	movs	r3, #1
 8010086:	61a3      	str	r3, [r4, #24]
 8010088:	e7d2      	b.n	8010030 <__sinit+0xc>
 801008a:	bf00      	nop
 801008c:	08011e30 	.word	0x08011e30
 8010090:	0800ffbd 	.word	0x0800ffbd

08010094 <__sfp>:
 8010094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010096:	4607      	mov	r7, r0
 8010098:	f7ff ffac 	bl	800fff4 <__sfp_lock_acquire>
 801009c:	4b1e      	ldr	r3, [pc, #120]	; (8010118 <__sfp+0x84>)
 801009e:	681e      	ldr	r6, [r3, #0]
 80100a0:	69b3      	ldr	r3, [r6, #24]
 80100a2:	b913      	cbnz	r3, 80100aa <__sfp+0x16>
 80100a4:	4630      	mov	r0, r6
 80100a6:	f7ff ffbd 	bl	8010024 <__sinit>
 80100aa:	3648      	adds	r6, #72	; 0x48
 80100ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80100b0:	3b01      	subs	r3, #1
 80100b2:	d503      	bpl.n	80100bc <__sfp+0x28>
 80100b4:	6833      	ldr	r3, [r6, #0]
 80100b6:	b30b      	cbz	r3, 80100fc <__sfp+0x68>
 80100b8:	6836      	ldr	r6, [r6, #0]
 80100ba:	e7f7      	b.n	80100ac <__sfp+0x18>
 80100bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80100c0:	b9d5      	cbnz	r5, 80100f8 <__sfp+0x64>
 80100c2:	4b16      	ldr	r3, [pc, #88]	; (801011c <__sfp+0x88>)
 80100c4:	60e3      	str	r3, [r4, #12]
 80100c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80100ca:	6665      	str	r5, [r4, #100]	; 0x64
 80100cc:	f000 f847 	bl	801015e <__retarget_lock_init_recursive>
 80100d0:	f7ff ff96 	bl	8010000 <__sfp_lock_release>
 80100d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80100d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80100dc:	6025      	str	r5, [r4, #0]
 80100de:	61a5      	str	r5, [r4, #24]
 80100e0:	2208      	movs	r2, #8
 80100e2:	4629      	mov	r1, r5
 80100e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80100e8:	f7ff fd2c 	bl	800fb44 <memset>
 80100ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80100f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80100f4:	4620      	mov	r0, r4
 80100f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100f8:	3468      	adds	r4, #104	; 0x68
 80100fa:	e7d9      	b.n	80100b0 <__sfp+0x1c>
 80100fc:	2104      	movs	r1, #4
 80100fe:	4638      	mov	r0, r7
 8010100:	f7ff ff62 	bl	800ffc8 <__sfmoreglue>
 8010104:	4604      	mov	r4, r0
 8010106:	6030      	str	r0, [r6, #0]
 8010108:	2800      	cmp	r0, #0
 801010a:	d1d5      	bne.n	80100b8 <__sfp+0x24>
 801010c:	f7ff ff78 	bl	8010000 <__sfp_lock_release>
 8010110:	230c      	movs	r3, #12
 8010112:	603b      	str	r3, [r7, #0]
 8010114:	e7ee      	b.n	80100f4 <__sfp+0x60>
 8010116:	bf00      	nop
 8010118:	08011e30 	.word	0x08011e30
 801011c:	ffff0001 	.word	0xffff0001

08010120 <_fwalk_reent>:
 8010120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010124:	4606      	mov	r6, r0
 8010126:	4688      	mov	r8, r1
 8010128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801012c:	2700      	movs	r7, #0
 801012e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010132:	f1b9 0901 	subs.w	r9, r9, #1
 8010136:	d505      	bpl.n	8010144 <_fwalk_reent+0x24>
 8010138:	6824      	ldr	r4, [r4, #0]
 801013a:	2c00      	cmp	r4, #0
 801013c:	d1f7      	bne.n	801012e <_fwalk_reent+0xe>
 801013e:	4638      	mov	r0, r7
 8010140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010144:	89ab      	ldrh	r3, [r5, #12]
 8010146:	2b01      	cmp	r3, #1
 8010148:	d907      	bls.n	801015a <_fwalk_reent+0x3a>
 801014a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801014e:	3301      	adds	r3, #1
 8010150:	d003      	beq.n	801015a <_fwalk_reent+0x3a>
 8010152:	4629      	mov	r1, r5
 8010154:	4630      	mov	r0, r6
 8010156:	47c0      	blx	r8
 8010158:	4307      	orrs	r7, r0
 801015a:	3568      	adds	r5, #104	; 0x68
 801015c:	e7e9      	b.n	8010132 <_fwalk_reent+0x12>

0801015e <__retarget_lock_init_recursive>:
 801015e:	4770      	bx	lr

08010160 <__retarget_lock_acquire_recursive>:
 8010160:	4770      	bx	lr

08010162 <__retarget_lock_release_recursive>:
 8010162:	4770      	bx	lr

08010164 <__swhatbuf_r>:
 8010164:	b570      	push	{r4, r5, r6, lr}
 8010166:	460e      	mov	r6, r1
 8010168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801016c:	2900      	cmp	r1, #0
 801016e:	b096      	sub	sp, #88	; 0x58
 8010170:	4614      	mov	r4, r2
 8010172:	461d      	mov	r5, r3
 8010174:	da08      	bge.n	8010188 <__swhatbuf_r+0x24>
 8010176:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801017a:	2200      	movs	r2, #0
 801017c:	602a      	str	r2, [r5, #0]
 801017e:	061a      	lsls	r2, r3, #24
 8010180:	d410      	bmi.n	80101a4 <__swhatbuf_r+0x40>
 8010182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010186:	e00e      	b.n	80101a6 <__swhatbuf_r+0x42>
 8010188:	466a      	mov	r2, sp
 801018a:	f000 fc95 	bl	8010ab8 <_fstat_r>
 801018e:	2800      	cmp	r0, #0
 8010190:	dbf1      	blt.n	8010176 <__swhatbuf_r+0x12>
 8010192:	9a01      	ldr	r2, [sp, #4]
 8010194:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010198:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801019c:	425a      	negs	r2, r3
 801019e:	415a      	adcs	r2, r3
 80101a0:	602a      	str	r2, [r5, #0]
 80101a2:	e7ee      	b.n	8010182 <__swhatbuf_r+0x1e>
 80101a4:	2340      	movs	r3, #64	; 0x40
 80101a6:	2000      	movs	r0, #0
 80101a8:	6023      	str	r3, [r4, #0]
 80101aa:	b016      	add	sp, #88	; 0x58
 80101ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080101b0 <__smakebuf_r>:
 80101b0:	898b      	ldrh	r3, [r1, #12]
 80101b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101b4:	079d      	lsls	r5, r3, #30
 80101b6:	4606      	mov	r6, r0
 80101b8:	460c      	mov	r4, r1
 80101ba:	d507      	bpl.n	80101cc <__smakebuf_r+0x1c>
 80101bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80101c0:	6023      	str	r3, [r4, #0]
 80101c2:	6123      	str	r3, [r4, #16]
 80101c4:	2301      	movs	r3, #1
 80101c6:	6163      	str	r3, [r4, #20]
 80101c8:	b002      	add	sp, #8
 80101ca:	bd70      	pop	{r4, r5, r6, pc}
 80101cc:	ab01      	add	r3, sp, #4
 80101ce:	466a      	mov	r2, sp
 80101d0:	f7ff ffc8 	bl	8010164 <__swhatbuf_r>
 80101d4:	9900      	ldr	r1, [sp, #0]
 80101d6:	4605      	mov	r5, r0
 80101d8:	4630      	mov	r0, r6
 80101da:	f000 f895 	bl	8010308 <_malloc_r>
 80101de:	b948      	cbnz	r0, 80101f4 <__smakebuf_r+0x44>
 80101e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101e4:	059a      	lsls	r2, r3, #22
 80101e6:	d4ef      	bmi.n	80101c8 <__smakebuf_r+0x18>
 80101e8:	f023 0303 	bic.w	r3, r3, #3
 80101ec:	f043 0302 	orr.w	r3, r3, #2
 80101f0:	81a3      	strh	r3, [r4, #12]
 80101f2:	e7e3      	b.n	80101bc <__smakebuf_r+0xc>
 80101f4:	4b0d      	ldr	r3, [pc, #52]	; (801022c <__smakebuf_r+0x7c>)
 80101f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80101f8:	89a3      	ldrh	r3, [r4, #12]
 80101fa:	6020      	str	r0, [r4, #0]
 80101fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010200:	81a3      	strh	r3, [r4, #12]
 8010202:	9b00      	ldr	r3, [sp, #0]
 8010204:	6163      	str	r3, [r4, #20]
 8010206:	9b01      	ldr	r3, [sp, #4]
 8010208:	6120      	str	r0, [r4, #16]
 801020a:	b15b      	cbz	r3, 8010224 <__smakebuf_r+0x74>
 801020c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010210:	4630      	mov	r0, r6
 8010212:	f000 fc63 	bl	8010adc <_isatty_r>
 8010216:	b128      	cbz	r0, 8010224 <__smakebuf_r+0x74>
 8010218:	89a3      	ldrh	r3, [r4, #12]
 801021a:	f023 0303 	bic.w	r3, r3, #3
 801021e:	f043 0301 	orr.w	r3, r3, #1
 8010222:	81a3      	strh	r3, [r4, #12]
 8010224:	89a0      	ldrh	r0, [r4, #12]
 8010226:	4305      	orrs	r5, r0
 8010228:	81a5      	strh	r5, [r4, #12]
 801022a:	e7cd      	b.n	80101c8 <__smakebuf_r+0x18>
 801022c:	0800ffbd 	.word	0x0800ffbd

08010230 <_free_r>:
 8010230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010232:	2900      	cmp	r1, #0
 8010234:	d044      	beq.n	80102c0 <_free_r+0x90>
 8010236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801023a:	9001      	str	r0, [sp, #4]
 801023c:	2b00      	cmp	r3, #0
 801023e:	f1a1 0404 	sub.w	r4, r1, #4
 8010242:	bfb8      	it	lt
 8010244:	18e4      	addlt	r4, r4, r3
 8010246:	f000 fc6b 	bl	8010b20 <__malloc_lock>
 801024a:	4a1e      	ldr	r2, [pc, #120]	; (80102c4 <_free_r+0x94>)
 801024c:	9801      	ldr	r0, [sp, #4]
 801024e:	6813      	ldr	r3, [r2, #0]
 8010250:	b933      	cbnz	r3, 8010260 <_free_r+0x30>
 8010252:	6063      	str	r3, [r4, #4]
 8010254:	6014      	str	r4, [r2, #0]
 8010256:	b003      	add	sp, #12
 8010258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801025c:	f000 bc66 	b.w	8010b2c <__malloc_unlock>
 8010260:	42a3      	cmp	r3, r4
 8010262:	d908      	bls.n	8010276 <_free_r+0x46>
 8010264:	6825      	ldr	r5, [r4, #0]
 8010266:	1961      	adds	r1, r4, r5
 8010268:	428b      	cmp	r3, r1
 801026a:	bf01      	itttt	eq
 801026c:	6819      	ldreq	r1, [r3, #0]
 801026e:	685b      	ldreq	r3, [r3, #4]
 8010270:	1949      	addeq	r1, r1, r5
 8010272:	6021      	streq	r1, [r4, #0]
 8010274:	e7ed      	b.n	8010252 <_free_r+0x22>
 8010276:	461a      	mov	r2, r3
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	b10b      	cbz	r3, 8010280 <_free_r+0x50>
 801027c:	42a3      	cmp	r3, r4
 801027e:	d9fa      	bls.n	8010276 <_free_r+0x46>
 8010280:	6811      	ldr	r1, [r2, #0]
 8010282:	1855      	adds	r5, r2, r1
 8010284:	42a5      	cmp	r5, r4
 8010286:	d10b      	bne.n	80102a0 <_free_r+0x70>
 8010288:	6824      	ldr	r4, [r4, #0]
 801028a:	4421      	add	r1, r4
 801028c:	1854      	adds	r4, r2, r1
 801028e:	42a3      	cmp	r3, r4
 8010290:	6011      	str	r1, [r2, #0]
 8010292:	d1e0      	bne.n	8010256 <_free_r+0x26>
 8010294:	681c      	ldr	r4, [r3, #0]
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	6053      	str	r3, [r2, #4]
 801029a:	4421      	add	r1, r4
 801029c:	6011      	str	r1, [r2, #0]
 801029e:	e7da      	b.n	8010256 <_free_r+0x26>
 80102a0:	d902      	bls.n	80102a8 <_free_r+0x78>
 80102a2:	230c      	movs	r3, #12
 80102a4:	6003      	str	r3, [r0, #0]
 80102a6:	e7d6      	b.n	8010256 <_free_r+0x26>
 80102a8:	6825      	ldr	r5, [r4, #0]
 80102aa:	1961      	adds	r1, r4, r5
 80102ac:	428b      	cmp	r3, r1
 80102ae:	bf04      	itt	eq
 80102b0:	6819      	ldreq	r1, [r3, #0]
 80102b2:	685b      	ldreq	r3, [r3, #4]
 80102b4:	6063      	str	r3, [r4, #4]
 80102b6:	bf04      	itt	eq
 80102b8:	1949      	addeq	r1, r1, r5
 80102ba:	6021      	streq	r1, [r4, #0]
 80102bc:	6054      	str	r4, [r2, #4]
 80102be:	e7ca      	b.n	8010256 <_free_r+0x26>
 80102c0:	b003      	add	sp, #12
 80102c2:	bd30      	pop	{r4, r5, pc}
 80102c4:	2000c6f4 	.word	0x2000c6f4

080102c8 <sbrk_aligned>:
 80102c8:	b570      	push	{r4, r5, r6, lr}
 80102ca:	4e0e      	ldr	r6, [pc, #56]	; (8010304 <sbrk_aligned+0x3c>)
 80102cc:	460c      	mov	r4, r1
 80102ce:	6831      	ldr	r1, [r6, #0]
 80102d0:	4605      	mov	r5, r0
 80102d2:	b911      	cbnz	r1, 80102da <sbrk_aligned+0x12>
 80102d4:	f000 fb7a 	bl	80109cc <_sbrk_r>
 80102d8:	6030      	str	r0, [r6, #0]
 80102da:	4621      	mov	r1, r4
 80102dc:	4628      	mov	r0, r5
 80102de:	f000 fb75 	bl	80109cc <_sbrk_r>
 80102e2:	1c43      	adds	r3, r0, #1
 80102e4:	d00a      	beq.n	80102fc <sbrk_aligned+0x34>
 80102e6:	1cc4      	adds	r4, r0, #3
 80102e8:	f024 0403 	bic.w	r4, r4, #3
 80102ec:	42a0      	cmp	r0, r4
 80102ee:	d007      	beq.n	8010300 <sbrk_aligned+0x38>
 80102f0:	1a21      	subs	r1, r4, r0
 80102f2:	4628      	mov	r0, r5
 80102f4:	f000 fb6a 	bl	80109cc <_sbrk_r>
 80102f8:	3001      	adds	r0, #1
 80102fa:	d101      	bne.n	8010300 <sbrk_aligned+0x38>
 80102fc:	f04f 34ff 	mov.w	r4, #4294967295
 8010300:	4620      	mov	r0, r4
 8010302:	bd70      	pop	{r4, r5, r6, pc}
 8010304:	2000c6f8 	.word	0x2000c6f8

08010308 <_malloc_r>:
 8010308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801030c:	1ccd      	adds	r5, r1, #3
 801030e:	f025 0503 	bic.w	r5, r5, #3
 8010312:	3508      	adds	r5, #8
 8010314:	2d0c      	cmp	r5, #12
 8010316:	bf38      	it	cc
 8010318:	250c      	movcc	r5, #12
 801031a:	2d00      	cmp	r5, #0
 801031c:	4607      	mov	r7, r0
 801031e:	db01      	blt.n	8010324 <_malloc_r+0x1c>
 8010320:	42a9      	cmp	r1, r5
 8010322:	d905      	bls.n	8010330 <_malloc_r+0x28>
 8010324:	230c      	movs	r3, #12
 8010326:	603b      	str	r3, [r7, #0]
 8010328:	2600      	movs	r6, #0
 801032a:	4630      	mov	r0, r6
 801032c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010330:	4e2e      	ldr	r6, [pc, #184]	; (80103ec <_malloc_r+0xe4>)
 8010332:	f000 fbf5 	bl	8010b20 <__malloc_lock>
 8010336:	6833      	ldr	r3, [r6, #0]
 8010338:	461c      	mov	r4, r3
 801033a:	bb34      	cbnz	r4, 801038a <_malloc_r+0x82>
 801033c:	4629      	mov	r1, r5
 801033e:	4638      	mov	r0, r7
 8010340:	f7ff ffc2 	bl	80102c8 <sbrk_aligned>
 8010344:	1c43      	adds	r3, r0, #1
 8010346:	4604      	mov	r4, r0
 8010348:	d14d      	bne.n	80103e6 <_malloc_r+0xde>
 801034a:	6834      	ldr	r4, [r6, #0]
 801034c:	4626      	mov	r6, r4
 801034e:	2e00      	cmp	r6, #0
 8010350:	d140      	bne.n	80103d4 <_malloc_r+0xcc>
 8010352:	6823      	ldr	r3, [r4, #0]
 8010354:	4631      	mov	r1, r6
 8010356:	4638      	mov	r0, r7
 8010358:	eb04 0803 	add.w	r8, r4, r3
 801035c:	f000 fb36 	bl	80109cc <_sbrk_r>
 8010360:	4580      	cmp	r8, r0
 8010362:	d13a      	bne.n	80103da <_malloc_r+0xd2>
 8010364:	6821      	ldr	r1, [r4, #0]
 8010366:	3503      	adds	r5, #3
 8010368:	1a6d      	subs	r5, r5, r1
 801036a:	f025 0503 	bic.w	r5, r5, #3
 801036e:	3508      	adds	r5, #8
 8010370:	2d0c      	cmp	r5, #12
 8010372:	bf38      	it	cc
 8010374:	250c      	movcc	r5, #12
 8010376:	4629      	mov	r1, r5
 8010378:	4638      	mov	r0, r7
 801037a:	f7ff ffa5 	bl	80102c8 <sbrk_aligned>
 801037e:	3001      	adds	r0, #1
 8010380:	d02b      	beq.n	80103da <_malloc_r+0xd2>
 8010382:	6823      	ldr	r3, [r4, #0]
 8010384:	442b      	add	r3, r5
 8010386:	6023      	str	r3, [r4, #0]
 8010388:	e00e      	b.n	80103a8 <_malloc_r+0xa0>
 801038a:	6822      	ldr	r2, [r4, #0]
 801038c:	1b52      	subs	r2, r2, r5
 801038e:	d41e      	bmi.n	80103ce <_malloc_r+0xc6>
 8010390:	2a0b      	cmp	r2, #11
 8010392:	d916      	bls.n	80103c2 <_malloc_r+0xba>
 8010394:	1961      	adds	r1, r4, r5
 8010396:	42a3      	cmp	r3, r4
 8010398:	6025      	str	r5, [r4, #0]
 801039a:	bf18      	it	ne
 801039c:	6059      	strne	r1, [r3, #4]
 801039e:	6863      	ldr	r3, [r4, #4]
 80103a0:	bf08      	it	eq
 80103a2:	6031      	streq	r1, [r6, #0]
 80103a4:	5162      	str	r2, [r4, r5]
 80103a6:	604b      	str	r3, [r1, #4]
 80103a8:	4638      	mov	r0, r7
 80103aa:	f104 060b 	add.w	r6, r4, #11
 80103ae:	f000 fbbd 	bl	8010b2c <__malloc_unlock>
 80103b2:	f026 0607 	bic.w	r6, r6, #7
 80103b6:	1d23      	adds	r3, r4, #4
 80103b8:	1af2      	subs	r2, r6, r3
 80103ba:	d0b6      	beq.n	801032a <_malloc_r+0x22>
 80103bc:	1b9b      	subs	r3, r3, r6
 80103be:	50a3      	str	r3, [r4, r2]
 80103c0:	e7b3      	b.n	801032a <_malloc_r+0x22>
 80103c2:	6862      	ldr	r2, [r4, #4]
 80103c4:	42a3      	cmp	r3, r4
 80103c6:	bf0c      	ite	eq
 80103c8:	6032      	streq	r2, [r6, #0]
 80103ca:	605a      	strne	r2, [r3, #4]
 80103cc:	e7ec      	b.n	80103a8 <_malloc_r+0xa0>
 80103ce:	4623      	mov	r3, r4
 80103d0:	6864      	ldr	r4, [r4, #4]
 80103d2:	e7b2      	b.n	801033a <_malloc_r+0x32>
 80103d4:	4634      	mov	r4, r6
 80103d6:	6876      	ldr	r6, [r6, #4]
 80103d8:	e7b9      	b.n	801034e <_malloc_r+0x46>
 80103da:	230c      	movs	r3, #12
 80103dc:	603b      	str	r3, [r7, #0]
 80103de:	4638      	mov	r0, r7
 80103e0:	f000 fba4 	bl	8010b2c <__malloc_unlock>
 80103e4:	e7a1      	b.n	801032a <_malloc_r+0x22>
 80103e6:	6025      	str	r5, [r4, #0]
 80103e8:	e7de      	b.n	80103a8 <_malloc_r+0xa0>
 80103ea:	bf00      	nop
 80103ec:	2000c6f4 	.word	0x2000c6f4

080103f0 <__sfputc_r>:
 80103f0:	6893      	ldr	r3, [r2, #8]
 80103f2:	3b01      	subs	r3, #1
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	b410      	push	{r4}
 80103f8:	6093      	str	r3, [r2, #8]
 80103fa:	da08      	bge.n	801040e <__sfputc_r+0x1e>
 80103fc:	6994      	ldr	r4, [r2, #24]
 80103fe:	42a3      	cmp	r3, r4
 8010400:	db01      	blt.n	8010406 <__sfputc_r+0x16>
 8010402:	290a      	cmp	r1, #10
 8010404:	d103      	bne.n	801040e <__sfputc_r+0x1e>
 8010406:	f85d 4b04 	ldr.w	r4, [sp], #4
 801040a:	f7ff bc31 	b.w	800fc70 <__swbuf_r>
 801040e:	6813      	ldr	r3, [r2, #0]
 8010410:	1c58      	adds	r0, r3, #1
 8010412:	6010      	str	r0, [r2, #0]
 8010414:	7019      	strb	r1, [r3, #0]
 8010416:	4608      	mov	r0, r1
 8010418:	f85d 4b04 	ldr.w	r4, [sp], #4
 801041c:	4770      	bx	lr

0801041e <__sfputs_r>:
 801041e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010420:	4606      	mov	r6, r0
 8010422:	460f      	mov	r7, r1
 8010424:	4614      	mov	r4, r2
 8010426:	18d5      	adds	r5, r2, r3
 8010428:	42ac      	cmp	r4, r5
 801042a:	d101      	bne.n	8010430 <__sfputs_r+0x12>
 801042c:	2000      	movs	r0, #0
 801042e:	e007      	b.n	8010440 <__sfputs_r+0x22>
 8010430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010434:	463a      	mov	r2, r7
 8010436:	4630      	mov	r0, r6
 8010438:	f7ff ffda 	bl	80103f0 <__sfputc_r>
 801043c:	1c43      	adds	r3, r0, #1
 801043e:	d1f3      	bne.n	8010428 <__sfputs_r+0xa>
 8010440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010444 <_vfiprintf_r>:
 8010444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010448:	460d      	mov	r5, r1
 801044a:	b09d      	sub	sp, #116	; 0x74
 801044c:	4614      	mov	r4, r2
 801044e:	4698      	mov	r8, r3
 8010450:	4606      	mov	r6, r0
 8010452:	b118      	cbz	r0, 801045c <_vfiprintf_r+0x18>
 8010454:	6983      	ldr	r3, [r0, #24]
 8010456:	b90b      	cbnz	r3, 801045c <_vfiprintf_r+0x18>
 8010458:	f7ff fde4 	bl	8010024 <__sinit>
 801045c:	4b89      	ldr	r3, [pc, #548]	; (8010684 <_vfiprintf_r+0x240>)
 801045e:	429d      	cmp	r5, r3
 8010460:	d11b      	bne.n	801049a <_vfiprintf_r+0x56>
 8010462:	6875      	ldr	r5, [r6, #4]
 8010464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010466:	07d9      	lsls	r1, r3, #31
 8010468:	d405      	bmi.n	8010476 <_vfiprintf_r+0x32>
 801046a:	89ab      	ldrh	r3, [r5, #12]
 801046c:	059a      	lsls	r2, r3, #22
 801046e:	d402      	bmi.n	8010476 <_vfiprintf_r+0x32>
 8010470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010472:	f7ff fe75 	bl	8010160 <__retarget_lock_acquire_recursive>
 8010476:	89ab      	ldrh	r3, [r5, #12]
 8010478:	071b      	lsls	r3, r3, #28
 801047a:	d501      	bpl.n	8010480 <_vfiprintf_r+0x3c>
 801047c:	692b      	ldr	r3, [r5, #16]
 801047e:	b9eb      	cbnz	r3, 80104bc <_vfiprintf_r+0x78>
 8010480:	4629      	mov	r1, r5
 8010482:	4630      	mov	r0, r6
 8010484:	f7ff fc46 	bl	800fd14 <__swsetup_r>
 8010488:	b1c0      	cbz	r0, 80104bc <_vfiprintf_r+0x78>
 801048a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801048c:	07dc      	lsls	r4, r3, #31
 801048e:	d50e      	bpl.n	80104ae <_vfiprintf_r+0x6a>
 8010490:	f04f 30ff 	mov.w	r0, #4294967295
 8010494:	b01d      	add	sp, #116	; 0x74
 8010496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801049a:	4b7b      	ldr	r3, [pc, #492]	; (8010688 <_vfiprintf_r+0x244>)
 801049c:	429d      	cmp	r5, r3
 801049e:	d101      	bne.n	80104a4 <_vfiprintf_r+0x60>
 80104a0:	68b5      	ldr	r5, [r6, #8]
 80104a2:	e7df      	b.n	8010464 <_vfiprintf_r+0x20>
 80104a4:	4b79      	ldr	r3, [pc, #484]	; (801068c <_vfiprintf_r+0x248>)
 80104a6:	429d      	cmp	r5, r3
 80104a8:	bf08      	it	eq
 80104aa:	68f5      	ldreq	r5, [r6, #12]
 80104ac:	e7da      	b.n	8010464 <_vfiprintf_r+0x20>
 80104ae:	89ab      	ldrh	r3, [r5, #12]
 80104b0:	0598      	lsls	r0, r3, #22
 80104b2:	d4ed      	bmi.n	8010490 <_vfiprintf_r+0x4c>
 80104b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104b6:	f7ff fe54 	bl	8010162 <__retarget_lock_release_recursive>
 80104ba:	e7e9      	b.n	8010490 <_vfiprintf_r+0x4c>
 80104bc:	2300      	movs	r3, #0
 80104be:	9309      	str	r3, [sp, #36]	; 0x24
 80104c0:	2320      	movs	r3, #32
 80104c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80104ca:	2330      	movs	r3, #48	; 0x30
 80104cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010690 <_vfiprintf_r+0x24c>
 80104d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104d4:	f04f 0901 	mov.w	r9, #1
 80104d8:	4623      	mov	r3, r4
 80104da:	469a      	mov	sl, r3
 80104dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104e0:	b10a      	cbz	r2, 80104e6 <_vfiprintf_r+0xa2>
 80104e2:	2a25      	cmp	r2, #37	; 0x25
 80104e4:	d1f9      	bne.n	80104da <_vfiprintf_r+0x96>
 80104e6:	ebba 0b04 	subs.w	fp, sl, r4
 80104ea:	d00b      	beq.n	8010504 <_vfiprintf_r+0xc0>
 80104ec:	465b      	mov	r3, fp
 80104ee:	4622      	mov	r2, r4
 80104f0:	4629      	mov	r1, r5
 80104f2:	4630      	mov	r0, r6
 80104f4:	f7ff ff93 	bl	801041e <__sfputs_r>
 80104f8:	3001      	adds	r0, #1
 80104fa:	f000 80aa 	beq.w	8010652 <_vfiprintf_r+0x20e>
 80104fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010500:	445a      	add	r2, fp
 8010502:	9209      	str	r2, [sp, #36]	; 0x24
 8010504:	f89a 3000 	ldrb.w	r3, [sl]
 8010508:	2b00      	cmp	r3, #0
 801050a:	f000 80a2 	beq.w	8010652 <_vfiprintf_r+0x20e>
 801050e:	2300      	movs	r3, #0
 8010510:	f04f 32ff 	mov.w	r2, #4294967295
 8010514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010518:	f10a 0a01 	add.w	sl, sl, #1
 801051c:	9304      	str	r3, [sp, #16]
 801051e:	9307      	str	r3, [sp, #28]
 8010520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010524:	931a      	str	r3, [sp, #104]	; 0x68
 8010526:	4654      	mov	r4, sl
 8010528:	2205      	movs	r2, #5
 801052a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801052e:	4858      	ldr	r0, [pc, #352]	; (8010690 <_vfiprintf_r+0x24c>)
 8010530:	f7ef fe6e 	bl	8000210 <memchr>
 8010534:	9a04      	ldr	r2, [sp, #16]
 8010536:	b9d8      	cbnz	r0, 8010570 <_vfiprintf_r+0x12c>
 8010538:	06d1      	lsls	r1, r2, #27
 801053a:	bf44      	itt	mi
 801053c:	2320      	movmi	r3, #32
 801053e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010542:	0713      	lsls	r3, r2, #28
 8010544:	bf44      	itt	mi
 8010546:	232b      	movmi	r3, #43	; 0x2b
 8010548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801054c:	f89a 3000 	ldrb.w	r3, [sl]
 8010550:	2b2a      	cmp	r3, #42	; 0x2a
 8010552:	d015      	beq.n	8010580 <_vfiprintf_r+0x13c>
 8010554:	9a07      	ldr	r2, [sp, #28]
 8010556:	4654      	mov	r4, sl
 8010558:	2000      	movs	r0, #0
 801055a:	f04f 0c0a 	mov.w	ip, #10
 801055e:	4621      	mov	r1, r4
 8010560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010564:	3b30      	subs	r3, #48	; 0x30
 8010566:	2b09      	cmp	r3, #9
 8010568:	d94e      	bls.n	8010608 <_vfiprintf_r+0x1c4>
 801056a:	b1b0      	cbz	r0, 801059a <_vfiprintf_r+0x156>
 801056c:	9207      	str	r2, [sp, #28]
 801056e:	e014      	b.n	801059a <_vfiprintf_r+0x156>
 8010570:	eba0 0308 	sub.w	r3, r0, r8
 8010574:	fa09 f303 	lsl.w	r3, r9, r3
 8010578:	4313      	orrs	r3, r2
 801057a:	9304      	str	r3, [sp, #16]
 801057c:	46a2      	mov	sl, r4
 801057e:	e7d2      	b.n	8010526 <_vfiprintf_r+0xe2>
 8010580:	9b03      	ldr	r3, [sp, #12]
 8010582:	1d19      	adds	r1, r3, #4
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	9103      	str	r1, [sp, #12]
 8010588:	2b00      	cmp	r3, #0
 801058a:	bfbb      	ittet	lt
 801058c:	425b      	neglt	r3, r3
 801058e:	f042 0202 	orrlt.w	r2, r2, #2
 8010592:	9307      	strge	r3, [sp, #28]
 8010594:	9307      	strlt	r3, [sp, #28]
 8010596:	bfb8      	it	lt
 8010598:	9204      	strlt	r2, [sp, #16]
 801059a:	7823      	ldrb	r3, [r4, #0]
 801059c:	2b2e      	cmp	r3, #46	; 0x2e
 801059e:	d10c      	bne.n	80105ba <_vfiprintf_r+0x176>
 80105a0:	7863      	ldrb	r3, [r4, #1]
 80105a2:	2b2a      	cmp	r3, #42	; 0x2a
 80105a4:	d135      	bne.n	8010612 <_vfiprintf_r+0x1ce>
 80105a6:	9b03      	ldr	r3, [sp, #12]
 80105a8:	1d1a      	adds	r2, r3, #4
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	9203      	str	r2, [sp, #12]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	bfb8      	it	lt
 80105b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80105b6:	3402      	adds	r4, #2
 80105b8:	9305      	str	r3, [sp, #20]
 80105ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80106a0 <_vfiprintf_r+0x25c>
 80105be:	7821      	ldrb	r1, [r4, #0]
 80105c0:	2203      	movs	r2, #3
 80105c2:	4650      	mov	r0, sl
 80105c4:	f7ef fe24 	bl	8000210 <memchr>
 80105c8:	b140      	cbz	r0, 80105dc <_vfiprintf_r+0x198>
 80105ca:	2340      	movs	r3, #64	; 0x40
 80105cc:	eba0 000a 	sub.w	r0, r0, sl
 80105d0:	fa03 f000 	lsl.w	r0, r3, r0
 80105d4:	9b04      	ldr	r3, [sp, #16]
 80105d6:	4303      	orrs	r3, r0
 80105d8:	3401      	adds	r4, #1
 80105da:	9304      	str	r3, [sp, #16]
 80105dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105e0:	482c      	ldr	r0, [pc, #176]	; (8010694 <_vfiprintf_r+0x250>)
 80105e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105e6:	2206      	movs	r2, #6
 80105e8:	f7ef fe12 	bl	8000210 <memchr>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d03f      	beq.n	8010670 <_vfiprintf_r+0x22c>
 80105f0:	4b29      	ldr	r3, [pc, #164]	; (8010698 <_vfiprintf_r+0x254>)
 80105f2:	bb1b      	cbnz	r3, 801063c <_vfiprintf_r+0x1f8>
 80105f4:	9b03      	ldr	r3, [sp, #12]
 80105f6:	3307      	adds	r3, #7
 80105f8:	f023 0307 	bic.w	r3, r3, #7
 80105fc:	3308      	adds	r3, #8
 80105fe:	9303      	str	r3, [sp, #12]
 8010600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010602:	443b      	add	r3, r7
 8010604:	9309      	str	r3, [sp, #36]	; 0x24
 8010606:	e767      	b.n	80104d8 <_vfiprintf_r+0x94>
 8010608:	fb0c 3202 	mla	r2, ip, r2, r3
 801060c:	460c      	mov	r4, r1
 801060e:	2001      	movs	r0, #1
 8010610:	e7a5      	b.n	801055e <_vfiprintf_r+0x11a>
 8010612:	2300      	movs	r3, #0
 8010614:	3401      	adds	r4, #1
 8010616:	9305      	str	r3, [sp, #20]
 8010618:	4619      	mov	r1, r3
 801061a:	f04f 0c0a 	mov.w	ip, #10
 801061e:	4620      	mov	r0, r4
 8010620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010624:	3a30      	subs	r2, #48	; 0x30
 8010626:	2a09      	cmp	r2, #9
 8010628:	d903      	bls.n	8010632 <_vfiprintf_r+0x1ee>
 801062a:	2b00      	cmp	r3, #0
 801062c:	d0c5      	beq.n	80105ba <_vfiprintf_r+0x176>
 801062e:	9105      	str	r1, [sp, #20]
 8010630:	e7c3      	b.n	80105ba <_vfiprintf_r+0x176>
 8010632:	fb0c 2101 	mla	r1, ip, r1, r2
 8010636:	4604      	mov	r4, r0
 8010638:	2301      	movs	r3, #1
 801063a:	e7f0      	b.n	801061e <_vfiprintf_r+0x1da>
 801063c:	ab03      	add	r3, sp, #12
 801063e:	9300      	str	r3, [sp, #0]
 8010640:	462a      	mov	r2, r5
 8010642:	4b16      	ldr	r3, [pc, #88]	; (801069c <_vfiprintf_r+0x258>)
 8010644:	a904      	add	r1, sp, #16
 8010646:	4630      	mov	r0, r6
 8010648:	f3af 8000 	nop.w
 801064c:	4607      	mov	r7, r0
 801064e:	1c78      	adds	r0, r7, #1
 8010650:	d1d6      	bne.n	8010600 <_vfiprintf_r+0x1bc>
 8010652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010654:	07d9      	lsls	r1, r3, #31
 8010656:	d405      	bmi.n	8010664 <_vfiprintf_r+0x220>
 8010658:	89ab      	ldrh	r3, [r5, #12]
 801065a:	059a      	lsls	r2, r3, #22
 801065c:	d402      	bmi.n	8010664 <_vfiprintf_r+0x220>
 801065e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010660:	f7ff fd7f 	bl	8010162 <__retarget_lock_release_recursive>
 8010664:	89ab      	ldrh	r3, [r5, #12]
 8010666:	065b      	lsls	r3, r3, #25
 8010668:	f53f af12 	bmi.w	8010490 <_vfiprintf_r+0x4c>
 801066c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801066e:	e711      	b.n	8010494 <_vfiprintf_r+0x50>
 8010670:	ab03      	add	r3, sp, #12
 8010672:	9300      	str	r3, [sp, #0]
 8010674:	462a      	mov	r2, r5
 8010676:	4b09      	ldr	r3, [pc, #36]	; (801069c <_vfiprintf_r+0x258>)
 8010678:	a904      	add	r1, sp, #16
 801067a:	4630      	mov	r0, r6
 801067c:	f000 f880 	bl	8010780 <_printf_i>
 8010680:	e7e4      	b.n	801064c <_vfiprintf_r+0x208>
 8010682:	bf00      	nop
 8010684:	08011e54 	.word	0x08011e54
 8010688:	08011e74 	.word	0x08011e74
 801068c:	08011e34 	.word	0x08011e34
 8010690:	08011e94 	.word	0x08011e94
 8010694:	08011e9e 	.word	0x08011e9e
 8010698:	00000000 	.word	0x00000000
 801069c:	0801041f 	.word	0x0801041f
 80106a0:	08011e9a 	.word	0x08011e9a

080106a4 <_printf_common>:
 80106a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106a8:	4616      	mov	r6, r2
 80106aa:	4699      	mov	r9, r3
 80106ac:	688a      	ldr	r2, [r1, #8]
 80106ae:	690b      	ldr	r3, [r1, #16]
 80106b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80106b4:	4293      	cmp	r3, r2
 80106b6:	bfb8      	it	lt
 80106b8:	4613      	movlt	r3, r2
 80106ba:	6033      	str	r3, [r6, #0]
 80106bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80106c0:	4607      	mov	r7, r0
 80106c2:	460c      	mov	r4, r1
 80106c4:	b10a      	cbz	r2, 80106ca <_printf_common+0x26>
 80106c6:	3301      	adds	r3, #1
 80106c8:	6033      	str	r3, [r6, #0]
 80106ca:	6823      	ldr	r3, [r4, #0]
 80106cc:	0699      	lsls	r1, r3, #26
 80106ce:	bf42      	ittt	mi
 80106d0:	6833      	ldrmi	r3, [r6, #0]
 80106d2:	3302      	addmi	r3, #2
 80106d4:	6033      	strmi	r3, [r6, #0]
 80106d6:	6825      	ldr	r5, [r4, #0]
 80106d8:	f015 0506 	ands.w	r5, r5, #6
 80106dc:	d106      	bne.n	80106ec <_printf_common+0x48>
 80106de:	f104 0a19 	add.w	sl, r4, #25
 80106e2:	68e3      	ldr	r3, [r4, #12]
 80106e4:	6832      	ldr	r2, [r6, #0]
 80106e6:	1a9b      	subs	r3, r3, r2
 80106e8:	42ab      	cmp	r3, r5
 80106ea:	dc26      	bgt.n	801073a <_printf_common+0x96>
 80106ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80106f0:	1e13      	subs	r3, r2, #0
 80106f2:	6822      	ldr	r2, [r4, #0]
 80106f4:	bf18      	it	ne
 80106f6:	2301      	movne	r3, #1
 80106f8:	0692      	lsls	r2, r2, #26
 80106fa:	d42b      	bmi.n	8010754 <_printf_common+0xb0>
 80106fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010700:	4649      	mov	r1, r9
 8010702:	4638      	mov	r0, r7
 8010704:	47c0      	blx	r8
 8010706:	3001      	adds	r0, #1
 8010708:	d01e      	beq.n	8010748 <_printf_common+0xa4>
 801070a:	6823      	ldr	r3, [r4, #0]
 801070c:	68e5      	ldr	r5, [r4, #12]
 801070e:	6832      	ldr	r2, [r6, #0]
 8010710:	f003 0306 	and.w	r3, r3, #6
 8010714:	2b04      	cmp	r3, #4
 8010716:	bf08      	it	eq
 8010718:	1aad      	subeq	r5, r5, r2
 801071a:	68a3      	ldr	r3, [r4, #8]
 801071c:	6922      	ldr	r2, [r4, #16]
 801071e:	bf0c      	ite	eq
 8010720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010724:	2500      	movne	r5, #0
 8010726:	4293      	cmp	r3, r2
 8010728:	bfc4      	itt	gt
 801072a:	1a9b      	subgt	r3, r3, r2
 801072c:	18ed      	addgt	r5, r5, r3
 801072e:	2600      	movs	r6, #0
 8010730:	341a      	adds	r4, #26
 8010732:	42b5      	cmp	r5, r6
 8010734:	d11a      	bne.n	801076c <_printf_common+0xc8>
 8010736:	2000      	movs	r0, #0
 8010738:	e008      	b.n	801074c <_printf_common+0xa8>
 801073a:	2301      	movs	r3, #1
 801073c:	4652      	mov	r2, sl
 801073e:	4649      	mov	r1, r9
 8010740:	4638      	mov	r0, r7
 8010742:	47c0      	blx	r8
 8010744:	3001      	adds	r0, #1
 8010746:	d103      	bne.n	8010750 <_printf_common+0xac>
 8010748:	f04f 30ff 	mov.w	r0, #4294967295
 801074c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010750:	3501      	adds	r5, #1
 8010752:	e7c6      	b.n	80106e2 <_printf_common+0x3e>
 8010754:	18e1      	adds	r1, r4, r3
 8010756:	1c5a      	adds	r2, r3, #1
 8010758:	2030      	movs	r0, #48	; 0x30
 801075a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801075e:	4422      	add	r2, r4
 8010760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010768:	3302      	adds	r3, #2
 801076a:	e7c7      	b.n	80106fc <_printf_common+0x58>
 801076c:	2301      	movs	r3, #1
 801076e:	4622      	mov	r2, r4
 8010770:	4649      	mov	r1, r9
 8010772:	4638      	mov	r0, r7
 8010774:	47c0      	blx	r8
 8010776:	3001      	adds	r0, #1
 8010778:	d0e6      	beq.n	8010748 <_printf_common+0xa4>
 801077a:	3601      	adds	r6, #1
 801077c:	e7d9      	b.n	8010732 <_printf_common+0x8e>
	...

08010780 <_printf_i>:
 8010780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010784:	7e0f      	ldrb	r7, [r1, #24]
 8010786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010788:	2f78      	cmp	r7, #120	; 0x78
 801078a:	4691      	mov	r9, r2
 801078c:	4680      	mov	r8, r0
 801078e:	460c      	mov	r4, r1
 8010790:	469a      	mov	sl, r3
 8010792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010796:	d807      	bhi.n	80107a8 <_printf_i+0x28>
 8010798:	2f62      	cmp	r7, #98	; 0x62
 801079a:	d80a      	bhi.n	80107b2 <_printf_i+0x32>
 801079c:	2f00      	cmp	r7, #0
 801079e:	f000 80d8 	beq.w	8010952 <_printf_i+0x1d2>
 80107a2:	2f58      	cmp	r7, #88	; 0x58
 80107a4:	f000 80a3 	beq.w	80108ee <_printf_i+0x16e>
 80107a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80107b0:	e03a      	b.n	8010828 <_printf_i+0xa8>
 80107b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80107b6:	2b15      	cmp	r3, #21
 80107b8:	d8f6      	bhi.n	80107a8 <_printf_i+0x28>
 80107ba:	a101      	add	r1, pc, #4	; (adr r1, 80107c0 <_printf_i+0x40>)
 80107bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107c0:	08010819 	.word	0x08010819
 80107c4:	0801082d 	.word	0x0801082d
 80107c8:	080107a9 	.word	0x080107a9
 80107cc:	080107a9 	.word	0x080107a9
 80107d0:	080107a9 	.word	0x080107a9
 80107d4:	080107a9 	.word	0x080107a9
 80107d8:	0801082d 	.word	0x0801082d
 80107dc:	080107a9 	.word	0x080107a9
 80107e0:	080107a9 	.word	0x080107a9
 80107e4:	080107a9 	.word	0x080107a9
 80107e8:	080107a9 	.word	0x080107a9
 80107ec:	08010939 	.word	0x08010939
 80107f0:	0801085d 	.word	0x0801085d
 80107f4:	0801091b 	.word	0x0801091b
 80107f8:	080107a9 	.word	0x080107a9
 80107fc:	080107a9 	.word	0x080107a9
 8010800:	0801095b 	.word	0x0801095b
 8010804:	080107a9 	.word	0x080107a9
 8010808:	0801085d 	.word	0x0801085d
 801080c:	080107a9 	.word	0x080107a9
 8010810:	080107a9 	.word	0x080107a9
 8010814:	08010923 	.word	0x08010923
 8010818:	682b      	ldr	r3, [r5, #0]
 801081a:	1d1a      	adds	r2, r3, #4
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	602a      	str	r2, [r5, #0]
 8010820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010828:	2301      	movs	r3, #1
 801082a:	e0a3      	b.n	8010974 <_printf_i+0x1f4>
 801082c:	6820      	ldr	r0, [r4, #0]
 801082e:	6829      	ldr	r1, [r5, #0]
 8010830:	0606      	lsls	r6, r0, #24
 8010832:	f101 0304 	add.w	r3, r1, #4
 8010836:	d50a      	bpl.n	801084e <_printf_i+0xce>
 8010838:	680e      	ldr	r6, [r1, #0]
 801083a:	602b      	str	r3, [r5, #0]
 801083c:	2e00      	cmp	r6, #0
 801083e:	da03      	bge.n	8010848 <_printf_i+0xc8>
 8010840:	232d      	movs	r3, #45	; 0x2d
 8010842:	4276      	negs	r6, r6
 8010844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010848:	485e      	ldr	r0, [pc, #376]	; (80109c4 <_printf_i+0x244>)
 801084a:	230a      	movs	r3, #10
 801084c:	e019      	b.n	8010882 <_printf_i+0x102>
 801084e:	680e      	ldr	r6, [r1, #0]
 8010850:	602b      	str	r3, [r5, #0]
 8010852:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010856:	bf18      	it	ne
 8010858:	b236      	sxthne	r6, r6
 801085a:	e7ef      	b.n	801083c <_printf_i+0xbc>
 801085c:	682b      	ldr	r3, [r5, #0]
 801085e:	6820      	ldr	r0, [r4, #0]
 8010860:	1d19      	adds	r1, r3, #4
 8010862:	6029      	str	r1, [r5, #0]
 8010864:	0601      	lsls	r1, r0, #24
 8010866:	d501      	bpl.n	801086c <_printf_i+0xec>
 8010868:	681e      	ldr	r6, [r3, #0]
 801086a:	e002      	b.n	8010872 <_printf_i+0xf2>
 801086c:	0646      	lsls	r6, r0, #25
 801086e:	d5fb      	bpl.n	8010868 <_printf_i+0xe8>
 8010870:	881e      	ldrh	r6, [r3, #0]
 8010872:	4854      	ldr	r0, [pc, #336]	; (80109c4 <_printf_i+0x244>)
 8010874:	2f6f      	cmp	r7, #111	; 0x6f
 8010876:	bf0c      	ite	eq
 8010878:	2308      	moveq	r3, #8
 801087a:	230a      	movne	r3, #10
 801087c:	2100      	movs	r1, #0
 801087e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010882:	6865      	ldr	r5, [r4, #4]
 8010884:	60a5      	str	r5, [r4, #8]
 8010886:	2d00      	cmp	r5, #0
 8010888:	bfa2      	ittt	ge
 801088a:	6821      	ldrge	r1, [r4, #0]
 801088c:	f021 0104 	bicge.w	r1, r1, #4
 8010890:	6021      	strge	r1, [r4, #0]
 8010892:	b90e      	cbnz	r6, 8010898 <_printf_i+0x118>
 8010894:	2d00      	cmp	r5, #0
 8010896:	d04d      	beq.n	8010934 <_printf_i+0x1b4>
 8010898:	4615      	mov	r5, r2
 801089a:	fbb6 f1f3 	udiv	r1, r6, r3
 801089e:	fb03 6711 	mls	r7, r3, r1, r6
 80108a2:	5dc7      	ldrb	r7, [r0, r7]
 80108a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80108a8:	4637      	mov	r7, r6
 80108aa:	42bb      	cmp	r3, r7
 80108ac:	460e      	mov	r6, r1
 80108ae:	d9f4      	bls.n	801089a <_printf_i+0x11a>
 80108b0:	2b08      	cmp	r3, #8
 80108b2:	d10b      	bne.n	80108cc <_printf_i+0x14c>
 80108b4:	6823      	ldr	r3, [r4, #0]
 80108b6:	07de      	lsls	r6, r3, #31
 80108b8:	d508      	bpl.n	80108cc <_printf_i+0x14c>
 80108ba:	6923      	ldr	r3, [r4, #16]
 80108bc:	6861      	ldr	r1, [r4, #4]
 80108be:	4299      	cmp	r1, r3
 80108c0:	bfde      	ittt	le
 80108c2:	2330      	movle	r3, #48	; 0x30
 80108c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80108c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80108cc:	1b52      	subs	r2, r2, r5
 80108ce:	6122      	str	r2, [r4, #16]
 80108d0:	f8cd a000 	str.w	sl, [sp]
 80108d4:	464b      	mov	r3, r9
 80108d6:	aa03      	add	r2, sp, #12
 80108d8:	4621      	mov	r1, r4
 80108da:	4640      	mov	r0, r8
 80108dc:	f7ff fee2 	bl	80106a4 <_printf_common>
 80108e0:	3001      	adds	r0, #1
 80108e2:	d14c      	bne.n	801097e <_printf_i+0x1fe>
 80108e4:	f04f 30ff 	mov.w	r0, #4294967295
 80108e8:	b004      	add	sp, #16
 80108ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ee:	4835      	ldr	r0, [pc, #212]	; (80109c4 <_printf_i+0x244>)
 80108f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80108f4:	6829      	ldr	r1, [r5, #0]
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80108fc:	6029      	str	r1, [r5, #0]
 80108fe:	061d      	lsls	r5, r3, #24
 8010900:	d514      	bpl.n	801092c <_printf_i+0x1ac>
 8010902:	07df      	lsls	r7, r3, #31
 8010904:	bf44      	itt	mi
 8010906:	f043 0320 	orrmi.w	r3, r3, #32
 801090a:	6023      	strmi	r3, [r4, #0]
 801090c:	b91e      	cbnz	r6, 8010916 <_printf_i+0x196>
 801090e:	6823      	ldr	r3, [r4, #0]
 8010910:	f023 0320 	bic.w	r3, r3, #32
 8010914:	6023      	str	r3, [r4, #0]
 8010916:	2310      	movs	r3, #16
 8010918:	e7b0      	b.n	801087c <_printf_i+0xfc>
 801091a:	6823      	ldr	r3, [r4, #0]
 801091c:	f043 0320 	orr.w	r3, r3, #32
 8010920:	6023      	str	r3, [r4, #0]
 8010922:	2378      	movs	r3, #120	; 0x78
 8010924:	4828      	ldr	r0, [pc, #160]	; (80109c8 <_printf_i+0x248>)
 8010926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801092a:	e7e3      	b.n	80108f4 <_printf_i+0x174>
 801092c:	0659      	lsls	r1, r3, #25
 801092e:	bf48      	it	mi
 8010930:	b2b6      	uxthmi	r6, r6
 8010932:	e7e6      	b.n	8010902 <_printf_i+0x182>
 8010934:	4615      	mov	r5, r2
 8010936:	e7bb      	b.n	80108b0 <_printf_i+0x130>
 8010938:	682b      	ldr	r3, [r5, #0]
 801093a:	6826      	ldr	r6, [r4, #0]
 801093c:	6961      	ldr	r1, [r4, #20]
 801093e:	1d18      	adds	r0, r3, #4
 8010940:	6028      	str	r0, [r5, #0]
 8010942:	0635      	lsls	r5, r6, #24
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	d501      	bpl.n	801094c <_printf_i+0x1cc>
 8010948:	6019      	str	r1, [r3, #0]
 801094a:	e002      	b.n	8010952 <_printf_i+0x1d2>
 801094c:	0670      	lsls	r0, r6, #25
 801094e:	d5fb      	bpl.n	8010948 <_printf_i+0x1c8>
 8010950:	8019      	strh	r1, [r3, #0]
 8010952:	2300      	movs	r3, #0
 8010954:	6123      	str	r3, [r4, #16]
 8010956:	4615      	mov	r5, r2
 8010958:	e7ba      	b.n	80108d0 <_printf_i+0x150>
 801095a:	682b      	ldr	r3, [r5, #0]
 801095c:	1d1a      	adds	r2, r3, #4
 801095e:	602a      	str	r2, [r5, #0]
 8010960:	681d      	ldr	r5, [r3, #0]
 8010962:	6862      	ldr	r2, [r4, #4]
 8010964:	2100      	movs	r1, #0
 8010966:	4628      	mov	r0, r5
 8010968:	f7ef fc52 	bl	8000210 <memchr>
 801096c:	b108      	cbz	r0, 8010972 <_printf_i+0x1f2>
 801096e:	1b40      	subs	r0, r0, r5
 8010970:	6060      	str	r0, [r4, #4]
 8010972:	6863      	ldr	r3, [r4, #4]
 8010974:	6123      	str	r3, [r4, #16]
 8010976:	2300      	movs	r3, #0
 8010978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801097c:	e7a8      	b.n	80108d0 <_printf_i+0x150>
 801097e:	6923      	ldr	r3, [r4, #16]
 8010980:	462a      	mov	r2, r5
 8010982:	4649      	mov	r1, r9
 8010984:	4640      	mov	r0, r8
 8010986:	47d0      	blx	sl
 8010988:	3001      	adds	r0, #1
 801098a:	d0ab      	beq.n	80108e4 <_printf_i+0x164>
 801098c:	6823      	ldr	r3, [r4, #0]
 801098e:	079b      	lsls	r3, r3, #30
 8010990:	d413      	bmi.n	80109ba <_printf_i+0x23a>
 8010992:	68e0      	ldr	r0, [r4, #12]
 8010994:	9b03      	ldr	r3, [sp, #12]
 8010996:	4298      	cmp	r0, r3
 8010998:	bfb8      	it	lt
 801099a:	4618      	movlt	r0, r3
 801099c:	e7a4      	b.n	80108e8 <_printf_i+0x168>
 801099e:	2301      	movs	r3, #1
 80109a0:	4632      	mov	r2, r6
 80109a2:	4649      	mov	r1, r9
 80109a4:	4640      	mov	r0, r8
 80109a6:	47d0      	blx	sl
 80109a8:	3001      	adds	r0, #1
 80109aa:	d09b      	beq.n	80108e4 <_printf_i+0x164>
 80109ac:	3501      	adds	r5, #1
 80109ae:	68e3      	ldr	r3, [r4, #12]
 80109b0:	9903      	ldr	r1, [sp, #12]
 80109b2:	1a5b      	subs	r3, r3, r1
 80109b4:	42ab      	cmp	r3, r5
 80109b6:	dcf2      	bgt.n	801099e <_printf_i+0x21e>
 80109b8:	e7eb      	b.n	8010992 <_printf_i+0x212>
 80109ba:	2500      	movs	r5, #0
 80109bc:	f104 0619 	add.w	r6, r4, #25
 80109c0:	e7f5      	b.n	80109ae <_printf_i+0x22e>
 80109c2:	bf00      	nop
 80109c4:	08011ea5 	.word	0x08011ea5
 80109c8:	08011eb6 	.word	0x08011eb6

080109cc <_sbrk_r>:
 80109cc:	b538      	push	{r3, r4, r5, lr}
 80109ce:	4d06      	ldr	r5, [pc, #24]	; (80109e8 <_sbrk_r+0x1c>)
 80109d0:	2300      	movs	r3, #0
 80109d2:	4604      	mov	r4, r0
 80109d4:	4608      	mov	r0, r1
 80109d6:	602b      	str	r3, [r5, #0]
 80109d8:	f7f9 fcb2 	bl	800a340 <_sbrk>
 80109dc:	1c43      	adds	r3, r0, #1
 80109de:	d102      	bne.n	80109e6 <_sbrk_r+0x1a>
 80109e0:	682b      	ldr	r3, [r5, #0]
 80109e2:	b103      	cbz	r3, 80109e6 <_sbrk_r+0x1a>
 80109e4:	6023      	str	r3, [r4, #0]
 80109e6:	bd38      	pop	{r3, r4, r5, pc}
 80109e8:	2000c6fc 	.word	0x2000c6fc

080109ec <__sread>:
 80109ec:	b510      	push	{r4, lr}
 80109ee:	460c      	mov	r4, r1
 80109f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109f4:	f000 f8a0 	bl	8010b38 <_read_r>
 80109f8:	2800      	cmp	r0, #0
 80109fa:	bfab      	itete	ge
 80109fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80109fe:	89a3      	ldrhlt	r3, [r4, #12]
 8010a00:	181b      	addge	r3, r3, r0
 8010a02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a06:	bfac      	ite	ge
 8010a08:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a0a:	81a3      	strhlt	r3, [r4, #12]
 8010a0c:	bd10      	pop	{r4, pc}

08010a0e <__swrite>:
 8010a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a12:	461f      	mov	r7, r3
 8010a14:	898b      	ldrh	r3, [r1, #12]
 8010a16:	05db      	lsls	r3, r3, #23
 8010a18:	4605      	mov	r5, r0
 8010a1a:	460c      	mov	r4, r1
 8010a1c:	4616      	mov	r6, r2
 8010a1e:	d505      	bpl.n	8010a2c <__swrite+0x1e>
 8010a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a24:	2302      	movs	r3, #2
 8010a26:	2200      	movs	r2, #0
 8010a28:	f000 f868 	bl	8010afc <_lseek_r>
 8010a2c:	89a3      	ldrh	r3, [r4, #12]
 8010a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a36:	81a3      	strh	r3, [r4, #12]
 8010a38:	4632      	mov	r2, r6
 8010a3a:	463b      	mov	r3, r7
 8010a3c:	4628      	mov	r0, r5
 8010a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a42:	f000 b817 	b.w	8010a74 <_write_r>

08010a46 <__sseek>:
 8010a46:	b510      	push	{r4, lr}
 8010a48:	460c      	mov	r4, r1
 8010a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a4e:	f000 f855 	bl	8010afc <_lseek_r>
 8010a52:	1c43      	adds	r3, r0, #1
 8010a54:	89a3      	ldrh	r3, [r4, #12]
 8010a56:	bf15      	itete	ne
 8010a58:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a62:	81a3      	strheq	r3, [r4, #12]
 8010a64:	bf18      	it	ne
 8010a66:	81a3      	strhne	r3, [r4, #12]
 8010a68:	bd10      	pop	{r4, pc}

08010a6a <__sclose>:
 8010a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a6e:	f000 b813 	b.w	8010a98 <_close_r>
	...

08010a74 <_write_r>:
 8010a74:	b538      	push	{r3, r4, r5, lr}
 8010a76:	4d07      	ldr	r5, [pc, #28]	; (8010a94 <_write_r+0x20>)
 8010a78:	4604      	mov	r4, r0
 8010a7a:	4608      	mov	r0, r1
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	2200      	movs	r2, #0
 8010a80:	602a      	str	r2, [r5, #0]
 8010a82:	461a      	mov	r2, r3
 8010a84:	f7f9 fc0b 	bl	800a29e <_write>
 8010a88:	1c43      	adds	r3, r0, #1
 8010a8a:	d102      	bne.n	8010a92 <_write_r+0x1e>
 8010a8c:	682b      	ldr	r3, [r5, #0]
 8010a8e:	b103      	cbz	r3, 8010a92 <_write_r+0x1e>
 8010a90:	6023      	str	r3, [r4, #0]
 8010a92:	bd38      	pop	{r3, r4, r5, pc}
 8010a94:	2000c6fc 	.word	0x2000c6fc

08010a98 <_close_r>:
 8010a98:	b538      	push	{r3, r4, r5, lr}
 8010a9a:	4d06      	ldr	r5, [pc, #24]	; (8010ab4 <_close_r+0x1c>)
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	4608      	mov	r0, r1
 8010aa2:	602b      	str	r3, [r5, #0]
 8010aa4:	f7f9 fc17 	bl	800a2d6 <_close>
 8010aa8:	1c43      	adds	r3, r0, #1
 8010aaa:	d102      	bne.n	8010ab2 <_close_r+0x1a>
 8010aac:	682b      	ldr	r3, [r5, #0]
 8010aae:	b103      	cbz	r3, 8010ab2 <_close_r+0x1a>
 8010ab0:	6023      	str	r3, [r4, #0]
 8010ab2:	bd38      	pop	{r3, r4, r5, pc}
 8010ab4:	2000c6fc 	.word	0x2000c6fc

08010ab8 <_fstat_r>:
 8010ab8:	b538      	push	{r3, r4, r5, lr}
 8010aba:	4d07      	ldr	r5, [pc, #28]	; (8010ad8 <_fstat_r+0x20>)
 8010abc:	2300      	movs	r3, #0
 8010abe:	4604      	mov	r4, r0
 8010ac0:	4608      	mov	r0, r1
 8010ac2:	4611      	mov	r1, r2
 8010ac4:	602b      	str	r3, [r5, #0]
 8010ac6:	f7f9 fc12 	bl	800a2ee <_fstat>
 8010aca:	1c43      	adds	r3, r0, #1
 8010acc:	d102      	bne.n	8010ad4 <_fstat_r+0x1c>
 8010ace:	682b      	ldr	r3, [r5, #0]
 8010ad0:	b103      	cbz	r3, 8010ad4 <_fstat_r+0x1c>
 8010ad2:	6023      	str	r3, [r4, #0]
 8010ad4:	bd38      	pop	{r3, r4, r5, pc}
 8010ad6:	bf00      	nop
 8010ad8:	2000c6fc 	.word	0x2000c6fc

08010adc <_isatty_r>:
 8010adc:	b538      	push	{r3, r4, r5, lr}
 8010ade:	4d06      	ldr	r5, [pc, #24]	; (8010af8 <_isatty_r+0x1c>)
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	4604      	mov	r4, r0
 8010ae4:	4608      	mov	r0, r1
 8010ae6:	602b      	str	r3, [r5, #0]
 8010ae8:	f7f9 fc11 	bl	800a30e <_isatty>
 8010aec:	1c43      	adds	r3, r0, #1
 8010aee:	d102      	bne.n	8010af6 <_isatty_r+0x1a>
 8010af0:	682b      	ldr	r3, [r5, #0]
 8010af2:	b103      	cbz	r3, 8010af6 <_isatty_r+0x1a>
 8010af4:	6023      	str	r3, [r4, #0]
 8010af6:	bd38      	pop	{r3, r4, r5, pc}
 8010af8:	2000c6fc 	.word	0x2000c6fc

08010afc <_lseek_r>:
 8010afc:	b538      	push	{r3, r4, r5, lr}
 8010afe:	4d07      	ldr	r5, [pc, #28]	; (8010b1c <_lseek_r+0x20>)
 8010b00:	4604      	mov	r4, r0
 8010b02:	4608      	mov	r0, r1
 8010b04:	4611      	mov	r1, r2
 8010b06:	2200      	movs	r2, #0
 8010b08:	602a      	str	r2, [r5, #0]
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	f7f9 fc0a 	bl	800a324 <_lseek>
 8010b10:	1c43      	adds	r3, r0, #1
 8010b12:	d102      	bne.n	8010b1a <_lseek_r+0x1e>
 8010b14:	682b      	ldr	r3, [r5, #0]
 8010b16:	b103      	cbz	r3, 8010b1a <_lseek_r+0x1e>
 8010b18:	6023      	str	r3, [r4, #0]
 8010b1a:	bd38      	pop	{r3, r4, r5, pc}
 8010b1c:	2000c6fc 	.word	0x2000c6fc

08010b20 <__malloc_lock>:
 8010b20:	4801      	ldr	r0, [pc, #4]	; (8010b28 <__malloc_lock+0x8>)
 8010b22:	f7ff bb1d 	b.w	8010160 <__retarget_lock_acquire_recursive>
 8010b26:	bf00      	nop
 8010b28:	2000c6f0 	.word	0x2000c6f0

08010b2c <__malloc_unlock>:
 8010b2c:	4801      	ldr	r0, [pc, #4]	; (8010b34 <__malloc_unlock+0x8>)
 8010b2e:	f7ff bb18 	b.w	8010162 <__retarget_lock_release_recursive>
 8010b32:	bf00      	nop
 8010b34:	2000c6f0 	.word	0x2000c6f0

08010b38 <_read_r>:
 8010b38:	b538      	push	{r3, r4, r5, lr}
 8010b3a:	4d07      	ldr	r5, [pc, #28]	; (8010b58 <_read_r+0x20>)
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	4608      	mov	r0, r1
 8010b40:	4611      	mov	r1, r2
 8010b42:	2200      	movs	r2, #0
 8010b44:	602a      	str	r2, [r5, #0]
 8010b46:	461a      	mov	r2, r3
 8010b48:	f7f9 fb8c 	bl	800a264 <_read>
 8010b4c:	1c43      	adds	r3, r0, #1
 8010b4e:	d102      	bne.n	8010b56 <_read_r+0x1e>
 8010b50:	682b      	ldr	r3, [r5, #0]
 8010b52:	b103      	cbz	r3, 8010b56 <_read_r+0x1e>
 8010b54:	6023      	str	r3, [r4, #0]
 8010b56:	bd38      	pop	{r3, r4, r5, pc}
 8010b58:	2000c6fc 	.word	0x2000c6fc

08010b5c <pow>:
 8010b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b5e:	ed2d 8b02 	vpush	{d8}
 8010b62:	eeb0 8a40 	vmov.f32	s16, s0
 8010b66:	eef0 8a60 	vmov.f32	s17, s1
 8010b6a:	ec55 4b11 	vmov	r4, r5, d1
 8010b6e:	f000 f867 	bl	8010c40 <__ieee754_pow>
 8010b72:	4622      	mov	r2, r4
 8010b74:	462b      	mov	r3, r5
 8010b76:	4620      	mov	r0, r4
 8010b78:	4629      	mov	r1, r5
 8010b7a:	ec57 6b10 	vmov	r6, r7, d0
 8010b7e:	f7ef ffed 	bl	8000b5c <__aeabi_dcmpun>
 8010b82:	2800      	cmp	r0, #0
 8010b84:	d13b      	bne.n	8010bfe <pow+0xa2>
 8010b86:	ec51 0b18 	vmov	r0, r1, d8
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	f7ef ffb3 	bl	8000af8 <__aeabi_dcmpeq>
 8010b92:	b1b8      	cbz	r0, 8010bc4 <pow+0x68>
 8010b94:	2200      	movs	r2, #0
 8010b96:	2300      	movs	r3, #0
 8010b98:	4620      	mov	r0, r4
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	f7ef ffac 	bl	8000af8 <__aeabi_dcmpeq>
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	d146      	bne.n	8010c32 <pow+0xd6>
 8010ba4:	ec45 4b10 	vmov	d0, r4, r5
 8010ba8:	f000 fe63 	bl	8011872 <finite>
 8010bac:	b338      	cbz	r0, 8010bfe <pow+0xa2>
 8010bae:	2200      	movs	r2, #0
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	4620      	mov	r0, r4
 8010bb4:	4629      	mov	r1, r5
 8010bb6:	f7ef ffa9 	bl	8000b0c <__aeabi_dcmplt>
 8010bba:	b300      	cbz	r0, 8010bfe <pow+0xa2>
 8010bbc:	f7fe ff8a 	bl	800fad4 <__errno>
 8010bc0:	2322      	movs	r3, #34	; 0x22
 8010bc2:	e01b      	b.n	8010bfc <pow+0xa0>
 8010bc4:	ec47 6b10 	vmov	d0, r6, r7
 8010bc8:	f000 fe53 	bl	8011872 <finite>
 8010bcc:	b9e0      	cbnz	r0, 8010c08 <pow+0xac>
 8010bce:	eeb0 0a48 	vmov.f32	s0, s16
 8010bd2:	eef0 0a68 	vmov.f32	s1, s17
 8010bd6:	f000 fe4c 	bl	8011872 <finite>
 8010bda:	b1a8      	cbz	r0, 8010c08 <pow+0xac>
 8010bdc:	ec45 4b10 	vmov	d0, r4, r5
 8010be0:	f000 fe47 	bl	8011872 <finite>
 8010be4:	b180      	cbz	r0, 8010c08 <pow+0xac>
 8010be6:	4632      	mov	r2, r6
 8010be8:	463b      	mov	r3, r7
 8010bea:	4630      	mov	r0, r6
 8010bec:	4639      	mov	r1, r7
 8010bee:	f7ef ffb5 	bl	8000b5c <__aeabi_dcmpun>
 8010bf2:	2800      	cmp	r0, #0
 8010bf4:	d0e2      	beq.n	8010bbc <pow+0x60>
 8010bf6:	f7fe ff6d 	bl	800fad4 <__errno>
 8010bfa:	2321      	movs	r3, #33	; 0x21
 8010bfc:	6003      	str	r3, [r0, #0]
 8010bfe:	ecbd 8b02 	vpop	{d8}
 8010c02:	ec47 6b10 	vmov	d0, r6, r7
 8010c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c08:	2200      	movs	r2, #0
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	4639      	mov	r1, r7
 8010c10:	f7ef ff72 	bl	8000af8 <__aeabi_dcmpeq>
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d0f2      	beq.n	8010bfe <pow+0xa2>
 8010c18:	eeb0 0a48 	vmov.f32	s0, s16
 8010c1c:	eef0 0a68 	vmov.f32	s1, s17
 8010c20:	f000 fe27 	bl	8011872 <finite>
 8010c24:	2800      	cmp	r0, #0
 8010c26:	d0ea      	beq.n	8010bfe <pow+0xa2>
 8010c28:	ec45 4b10 	vmov	d0, r4, r5
 8010c2c:	f000 fe21 	bl	8011872 <finite>
 8010c30:	e7c3      	b.n	8010bba <pow+0x5e>
 8010c32:	4f01      	ldr	r7, [pc, #4]	; (8010c38 <pow+0xdc>)
 8010c34:	2600      	movs	r6, #0
 8010c36:	e7e2      	b.n	8010bfe <pow+0xa2>
 8010c38:	3ff00000 	.word	0x3ff00000
 8010c3c:	00000000 	.word	0x00000000

08010c40 <__ieee754_pow>:
 8010c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c44:	ed2d 8b06 	vpush	{d8-d10}
 8010c48:	b089      	sub	sp, #36	; 0x24
 8010c4a:	ed8d 1b00 	vstr	d1, [sp]
 8010c4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010c52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010c56:	ea58 0102 	orrs.w	r1, r8, r2
 8010c5a:	ec57 6b10 	vmov	r6, r7, d0
 8010c5e:	d115      	bne.n	8010c8c <__ieee754_pow+0x4c>
 8010c60:	19b3      	adds	r3, r6, r6
 8010c62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010c66:	4152      	adcs	r2, r2
 8010c68:	4299      	cmp	r1, r3
 8010c6a:	4b89      	ldr	r3, [pc, #548]	; (8010e90 <__ieee754_pow+0x250>)
 8010c6c:	4193      	sbcs	r3, r2
 8010c6e:	f080 84d2 	bcs.w	8011616 <__ieee754_pow+0x9d6>
 8010c72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c76:	4630      	mov	r0, r6
 8010c78:	4639      	mov	r1, r7
 8010c7a:	f7ef fb1f 	bl	80002bc <__adddf3>
 8010c7e:	ec41 0b10 	vmov	d0, r0, r1
 8010c82:	b009      	add	sp, #36	; 0x24
 8010c84:	ecbd 8b06 	vpop	{d8-d10}
 8010c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c8c:	4b81      	ldr	r3, [pc, #516]	; (8010e94 <__ieee754_pow+0x254>)
 8010c8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010c92:	429c      	cmp	r4, r3
 8010c94:	ee10 aa10 	vmov	sl, s0
 8010c98:	463d      	mov	r5, r7
 8010c9a:	dc06      	bgt.n	8010caa <__ieee754_pow+0x6a>
 8010c9c:	d101      	bne.n	8010ca2 <__ieee754_pow+0x62>
 8010c9e:	2e00      	cmp	r6, #0
 8010ca0:	d1e7      	bne.n	8010c72 <__ieee754_pow+0x32>
 8010ca2:	4598      	cmp	r8, r3
 8010ca4:	dc01      	bgt.n	8010caa <__ieee754_pow+0x6a>
 8010ca6:	d10f      	bne.n	8010cc8 <__ieee754_pow+0x88>
 8010ca8:	b172      	cbz	r2, 8010cc8 <__ieee754_pow+0x88>
 8010caa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010cae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010cb2:	ea55 050a 	orrs.w	r5, r5, sl
 8010cb6:	d1dc      	bne.n	8010c72 <__ieee754_pow+0x32>
 8010cb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010cbc:	18db      	adds	r3, r3, r3
 8010cbe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010cc2:	4152      	adcs	r2, r2
 8010cc4:	429d      	cmp	r5, r3
 8010cc6:	e7d0      	b.n	8010c6a <__ieee754_pow+0x2a>
 8010cc8:	2d00      	cmp	r5, #0
 8010cca:	da3b      	bge.n	8010d44 <__ieee754_pow+0x104>
 8010ccc:	4b72      	ldr	r3, [pc, #456]	; (8010e98 <__ieee754_pow+0x258>)
 8010cce:	4598      	cmp	r8, r3
 8010cd0:	dc51      	bgt.n	8010d76 <__ieee754_pow+0x136>
 8010cd2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010cd6:	4598      	cmp	r8, r3
 8010cd8:	f340 84ac 	ble.w	8011634 <__ieee754_pow+0x9f4>
 8010cdc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010ce0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010ce4:	2b14      	cmp	r3, #20
 8010ce6:	dd0f      	ble.n	8010d08 <__ieee754_pow+0xc8>
 8010ce8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010cec:	fa22 f103 	lsr.w	r1, r2, r3
 8010cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	f040 849d 	bne.w	8011634 <__ieee754_pow+0x9f4>
 8010cfa:	f001 0101 	and.w	r1, r1, #1
 8010cfe:	f1c1 0302 	rsb	r3, r1, #2
 8010d02:	9304      	str	r3, [sp, #16]
 8010d04:	b182      	cbz	r2, 8010d28 <__ieee754_pow+0xe8>
 8010d06:	e05f      	b.n	8010dc8 <__ieee754_pow+0x188>
 8010d08:	2a00      	cmp	r2, #0
 8010d0a:	d15b      	bne.n	8010dc4 <__ieee754_pow+0x184>
 8010d0c:	f1c3 0314 	rsb	r3, r3, #20
 8010d10:	fa48 f103 	asr.w	r1, r8, r3
 8010d14:	fa01 f303 	lsl.w	r3, r1, r3
 8010d18:	4543      	cmp	r3, r8
 8010d1a:	f040 8488 	bne.w	801162e <__ieee754_pow+0x9ee>
 8010d1e:	f001 0101 	and.w	r1, r1, #1
 8010d22:	f1c1 0302 	rsb	r3, r1, #2
 8010d26:	9304      	str	r3, [sp, #16]
 8010d28:	4b5c      	ldr	r3, [pc, #368]	; (8010e9c <__ieee754_pow+0x25c>)
 8010d2a:	4598      	cmp	r8, r3
 8010d2c:	d132      	bne.n	8010d94 <__ieee754_pow+0x154>
 8010d2e:	f1b9 0f00 	cmp.w	r9, #0
 8010d32:	f280 8478 	bge.w	8011626 <__ieee754_pow+0x9e6>
 8010d36:	4959      	ldr	r1, [pc, #356]	; (8010e9c <__ieee754_pow+0x25c>)
 8010d38:	4632      	mov	r2, r6
 8010d3a:	463b      	mov	r3, r7
 8010d3c:	2000      	movs	r0, #0
 8010d3e:	f7ef fd9d 	bl	800087c <__aeabi_ddiv>
 8010d42:	e79c      	b.n	8010c7e <__ieee754_pow+0x3e>
 8010d44:	2300      	movs	r3, #0
 8010d46:	9304      	str	r3, [sp, #16]
 8010d48:	2a00      	cmp	r2, #0
 8010d4a:	d13d      	bne.n	8010dc8 <__ieee754_pow+0x188>
 8010d4c:	4b51      	ldr	r3, [pc, #324]	; (8010e94 <__ieee754_pow+0x254>)
 8010d4e:	4598      	cmp	r8, r3
 8010d50:	d1ea      	bne.n	8010d28 <__ieee754_pow+0xe8>
 8010d52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010d56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010d5a:	ea53 030a 	orrs.w	r3, r3, sl
 8010d5e:	f000 845a 	beq.w	8011616 <__ieee754_pow+0x9d6>
 8010d62:	4b4f      	ldr	r3, [pc, #316]	; (8010ea0 <__ieee754_pow+0x260>)
 8010d64:	429c      	cmp	r4, r3
 8010d66:	dd08      	ble.n	8010d7a <__ieee754_pow+0x13a>
 8010d68:	f1b9 0f00 	cmp.w	r9, #0
 8010d6c:	f2c0 8457 	blt.w	801161e <__ieee754_pow+0x9de>
 8010d70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d74:	e783      	b.n	8010c7e <__ieee754_pow+0x3e>
 8010d76:	2302      	movs	r3, #2
 8010d78:	e7e5      	b.n	8010d46 <__ieee754_pow+0x106>
 8010d7a:	f1b9 0f00 	cmp.w	r9, #0
 8010d7e:	f04f 0000 	mov.w	r0, #0
 8010d82:	f04f 0100 	mov.w	r1, #0
 8010d86:	f6bf af7a 	bge.w	8010c7e <__ieee754_pow+0x3e>
 8010d8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010d8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010d92:	e774      	b.n	8010c7e <__ieee754_pow+0x3e>
 8010d94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010d98:	d106      	bne.n	8010da8 <__ieee754_pow+0x168>
 8010d9a:	4632      	mov	r2, r6
 8010d9c:	463b      	mov	r3, r7
 8010d9e:	4630      	mov	r0, r6
 8010da0:	4639      	mov	r1, r7
 8010da2:	f7ef fc41 	bl	8000628 <__aeabi_dmul>
 8010da6:	e76a      	b.n	8010c7e <__ieee754_pow+0x3e>
 8010da8:	4b3e      	ldr	r3, [pc, #248]	; (8010ea4 <__ieee754_pow+0x264>)
 8010daa:	4599      	cmp	r9, r3
 8010dac:	d10c      	bne.n	8010dc8 <__ieee754_pow+0x188>
 8010dae:	2d00      	cmp	r5, #0
 8010db0:	db0a      	blt.n	8010dc8 <__ieee754_pow+0x188>
 8010db2:	ec47 6b10 	vmov	d0, r6, r7
 8010db6:	b009      	add	sp, #36	; 0x24
 8010db8:	ecbd 8b06 	vpop	{d8-d10}
 8010dbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc0:	f000 bc6c 	b.w	801169c <__ieee754_sqrt>
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	9304      	str	r3, [sp, #16]
 8010dc8:	ec47 6b10 	vmov	d0, r6, r7
 8010dcc:	f000 fd48 	bl	8011860 <fabs>
 8010dd0:	ec51 0b10 	vmov	r0, r1, d0
 8010dd4:	f1ba 0f00 	cmp.w	sl, #0
 8010dd8:	d129      	bne.n	8010e2e <__ieee754_pow+0x1ee>
 8010dda:	b124      	cbz	r4, 8010de6 <__ieee754_pow+0x1a6>
 8010ddc:	4b2f      	ldr	r3, [pc, #188]	; (8010e9c <__ieee754_pow+0x25c>)
 8010dde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d123      	bne.n	8010e2e <__ieee754_pow+0x1ee>
 8010de6:	f1b9 0f00 	cmp.w	r9, #0
 8010dea:	da05      	bge.n	8010df8 <__ieee754_pow+0x1b8>
 8010dec:	4602      	mov	r2, r0
 8010dee:	460b      	mov	r3, r1
 8010df0:	2000      	movs	r0, #0
 8010df2:	492a      	ldr	r1, [pc, #168]	; (8010e9c <__ieee754_pow+0x25c>)
 8010df4:	f7ef fd42 	bl	800087c <__aeabi_ddiv>
 8010df8:	2d00      	cmp	r5, #0
 8010dfa:	f6bf af40 	bge.w	8010c7e <__ieee754_pow+0x3e>
 8010dfe:	9b04      	ldr	r3, [sp, #16]
 8010e00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010e04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010e08:	4323      	orrs	r3, r4
 8010e0a:	d108      	bne.n	8010e1e <__ieee754_pow+0x1de>
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	460b      	mov	r3, r1
 8010e10:	4610      	mov	r0, r2
 8010e12:	4619      	mov	r1, r3
 8010e14:	f7ef fa50 	bl	80002b8 <__aeabi_dsub>
 8010e18:	4602      	mov	r2, r0
 8010e1a:	460b      	mov	r3, r1
 8010e1c:	e78f      	b.n	8010d3e <__ieee754_pow+0xfe>
 8010e1e:	9b04      	ldr	r3, [sp, #16]
 8010e20:	2b01      	cmp	r3, #1
 8010e22:	f47f af2c 	bne.w	8010c7e <__ieee754_pow+0x3e>
 8010e26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	e727      	b.n	8010c7e <__ieee754_pow+0x3e>
 8010e2e:	0feb      	lsrs	r3, r5, #31
 8010e30:	3b01      	subs	r3, #1
 8010e32:	9306      	str	r3, [sp, #24]
 8010e34:	9a06      	ldr	r2, [sp, #24]
 8010e36:	9b04      	ldr	r3, [sp, #16]
 8010e38:	4313      	orrs	r3, r2
 8010e3a:	d102      	bne.n	8010e42 <__ieee754_pow+0x202>
 8010e3c:	4632      	mov	r2, r6
 8010e3e:	463b      	mov	r3, r7
 8010e40:	e7e6      	b.n	8010e10 <__ieee754_pow+0x1d0>
 8010e42:	4b19      	ldr	r3, [pc, #100]	; (8010ea8 <__ieee754_pow+0x268>)
 8010e44:	4598      	cmp	r8, r3
 8010e46:	f340 80fb 	ble.w	8011040 <__ieee754_pow+0x400>
 8010e4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010e4e:	4598      	cmp	r8, r3
 8010e50:	4b13      	ldr	r3, [pc, #76]	; (8010ea0 <__ieee754_pow+0x260>)
 8010e52:	dd0c      	ble.n	8010e6e <__ieee754_pow+0x22e>
 8010e54:	429c      	cmp	r4, r3
 8010e56:	dc0f      	bgt.n	8010e78 <__ieee754_pow+0x238>
 8010e58:	f1b9 0f00 	cmp.w	r9, #0
 8010e5c:	da0f      	bge.n	8010e7e <__ieee754_pow+0x23e>
 8010e5e:	2000      	movs	r0, #0
 8010e60:	b009      	add	sp, #36	; 0x24
 8010e62:	ecbd 8b06 	vpop	{d8-d10}
 8010e66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6a:	f000 bcf0 	b.w	801184e <__math_oflow>
 8010e6e:	429c      	cmp	r4, r3
 8010e70:	dbf2      	blt.n	8010e58 <__ieee754_pow+0x218>
 8010e72:	4b0a      	ldr	r3, [pc, #40]	; (8010e9c <__ieee754_pow+0x25c>)
 8010e74:	429c      	cmp	r4, r3
 8010e76:	dd19      	ble.n	8010eac <__ieee754_pow+0x26c>
 8010e78:	f1b9 0f00 	cmp.w	r9, #0
 8010e7c:	dcef      	bgt.n	8010e5e <__ieee754_pow+0x21e>
 8010e7e:	2000      	movs	r0, #0
 8010e80:	b009      	add	sp, #36	; 0x24
 8010e82:	ecbd 8b06 	vpop	{d8-d10}
 8010e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8a:	f000 bcd7 	b.w	801183c <__math_uflow>
 8010e8e:	bf00      	nop
 8010e90:	fff00000 	.word	0xfff00000
 8010e94:	7ff00000 	.word	0x7ff00000
 8010e98:	433fffff 	.word	0x433fffff
 8010e9c:	3ff00000 	.word	0x3ff00000
 8010ea0:	3fefffff 	.word	0x3fefffff
 8010ea4:	3fe00000 	.word	0x3fe00000
 8010ea8:	41e00000 	.word	0x41e00000
 8010eac:	4b60      	ldr	r3, [pc, #384]	; (8011030 <__ieee754_pow+0x3f0>)
 8010eae:	2200      	movs	r2, #0
 8010eb0:	f7ef fa02 	bl	80002b8 <__aeabi_dsub>
 8010eb4:	a354      	add	r3, pc, #336	; (adr r3, 8011008 <__ieee754_pow+0x3c8>)
 8010eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eba:	4604      	mov	r4, r0
 8010ebc:	460d      	mov	r5, r1
 8010ebe:	f7ef fbb3 	bl	8000628 <__aeabi_dmul>
 8010ec2:	a353      	add	r3, pc, #332	; (adr r3, 8011010 <__ieee754_pow+0x3d0>)
 8010ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec8:	4606      	mov	r6, r0
 8010eca:	460f      	mov	r7, r1
 8010ecc:	4620      	mov	r0, r4
 8010ece:	4629      	mov	r1, r5
 8010ed0:	f7ef fbaa 	bl	8000628 <__aeabi_dmul>
 8010ed4:	4b57      	ldr	r3, [pc, #348]	; (8011034 <__ieee754_pow+0x3f4>)
 8010ed6:	4682      	mov	sl, r0
 8010ed8:	468b      	mov	fp, r1
 8010eda:	2200      	movs	r2, #0
 8010edc:	4620      	mov	r0, r4
 8010ede:	4629      	mov	r1, r5
 8010ee0:	f7ef fba2 	bl	8000628 <__aeabi_dmul>
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	a14b      	add	r1, pc, #300	; (adr r1, 8011018 <__ieee754_pow+0x3d8>)
 8010eea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010eee:	f7ef f9e3 	bl	80002b8 <__aeabi_dsub>
 8010ef2:	4622      	mov	r2, r4
 8010ef4:	462b      	mov	r3, r5
 8010ef6:	f7ef fb97 	bl	8000628 <__aeabi_dmul>
 8010efa:	4602      	mov	r2, r0
 8010efc:	460b      	mov	r3, r1
 8010efe:	2000      	movs	r0, #0
 8010f00:	494d      	ldr	r1, [pc, #308]	; (8011038 <__ieee754_pow+0x3f8>)
 8010f02:	f7ef f9d9 	bl	80002b8 <__aeabi_dsub>
 8010f06:	4622      	mov	r2, r4
 8010f08:	4680      	mov	r8, r0
 8010f0a:	4689      	mov	r9, r1
 8010f0c:	462b      	mov	r3, r5
 8010f0e:	4620      	mov	r0, r4
 8010f10:	4629      	mov	r1, r5
 8010f12:	f7ef fb89 	bl	8000628 <__aeabi_dmul>
 8010f16:	4602      	mov	r2, r0
 8010f18:	460b      	mov	r3, r1
 8010f1a:	4640      	mov	r0, r8
 8010f1c:	4649      	mov	r1, r9
 8010f1e:	f7ef fb83 	bl	8000628 <__aeabi_dmul>
 8010f22:	a33f      	add	r3, pc, #252	; (adr r3, 8011020 <__ieee754_pow+0x3e0>)
 8010f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f28:	f7ef fb7e 	bl	8000628 <__aeabi_dmul>
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	460b      	mov	r3, r1
 8010f30:	4650      	mov	r0, sl
 8010f32:	4659      	mov	r1, fp
 8010f34:	f7ef f9c0 	bl	80002b8 <__aeabi_dsub>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	4680      	mov	r8, r0
 8010f3e:	4689      	mov	r9, r1
 8010f40:	4630      	mov	r0, r6
 8010f42:	4639      	mov	r1, r7
 8010f44:	f7ef f9ba 	bl	80002bc <__adddf3>
 8010f48:	2000      	movs	r0, #0
 8010f4a:	4632      	mov	r2, r6
 8010f4c:	463b      	mov	r3, r7
 8010f4e:	4604      	mov	r4, r0
 8010f50:	460d      	mov	r5, r1
 8010f52:	f7ef f9b1 	bl	80002b8 <__aeabi_dsub>
 8010f56:	4602      	mov	r2, r0
 8010f58:	460b      	mov	r3, r1
 8010f5a:	4640      	mov	r0, r8
 8010f5c:	4649      	mov	r1, r9
 8010f5e:	f7ef f9ab 	bl	80002b8 <__aeabi_dsub>
 8010f62:	9b04      	ldr	r3, [sp, #16]
 8010f64:	9a06      	ldr	r2, [sp, #24]
 8010f66:	3b01      	subs	r3, #1
 8010f68:	4313      	orrs	r3, r2
 8010f6a:	4682      	mov	sl, r0
 8010f6c:	468b      	mov	fp, r1
 8010f6e:	f040 81e7 	bne.w	8011340 <__ieee754_pow+0x700>
 8010f72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011028 <__ieee754_pow+0x3e8>
 8010f76:	eeb0 8a47 	vmov.f32	s16, s14
 8010f7a:	eef0 8a67 	vmov.f32	s17, s15
 8010f7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010f82:	2600      	movs	r6, #0
 8010f84:	4632      	mov	r2, r6
 8010f86:	463b      	mov	r3, r7
 8010f88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f8c:	f7ef f994 	bl	80002b8 <__aeabi_dsub>
 8010f90:	4622      	mov	r2, r4
 8010f92:	462b      	mov	r3, r5
 8010f94:	f7ef fb48 	bl	8000628 <__aeabi_dmul>
 8010f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f9c:	4680      	mov	r8, r0
 8010f9e:	4689      	mov	r9, r1
 8010fa0:	4650      	mov	r0, sl
 8010fa2:	4659      	mov	r1, fp
 8010fa4:	f7ef fb40 	bl	8000628 <__aeabi_dmul>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	460b      	mov	r3, r1
 8010fac:	4640      	mov	r0, r8
 8010fae:	4649      	mov	r1, r9
 8010fb0:	f7ef f984 	bl	80002bc <__adddf3>
 8010fb4:	4632      	mov	r2, r6
 8010fb6:	463b      	mov	r3, r7
 8010fb8:	4680      	mov	r8, r0
 8010fba:	4689      	mov	r9, r1
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	4629      	mov	r1, r5
 8010fc0:	f7ef fb32 	bl	8000628 <__aeabi_dmul>
 8010fc4:	460b      	mov	r3, r1
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	460d      	mov	r5, r1
 8010fca:	4602      	mov	r2, r0
 8010fcc:	4649      	mov	r1, r9
 8010fce:	4640      	mov	r0, r8
 8010fd0:	f7ef f974 	bl	80002bc <__adddf3>
 8010fd4:	4b19      	ldr	r3, [pc, #100]	; (801103c <__ieee754_pow+0x3fc>)
 8010fd6:	4299      	cmp	r1, r3
 8010fd8:	ec45 4b19 	vmov	d9, r4, r5
 8010fdc:	4606      	mov	r6, r0
 8010fde:	460f      	mov	r7, r1
 8010fe0:	468b      	mov	fp, r1
 8010fe2:	f340 82f1 	ble.w	80115c8 <__ieee754_pow+0x988>
 8010fe6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010fea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010fee:	4303      	orrs	r3, r0
 8010ff0:	f000 81e4 	beq.w	80113bc <__ieee754_pow+0x77c>
 8010ff4:	ec51 0b18 	vmov	r0, r1, d8
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	f7ef fd86 	bl	8000b0c <__aeabi_dcmplt>
 8011000:	3800      	subs	r0, #0
 8011002:	bf18      	it	ne
 8011004:	2001      	movne	r0, #1
 8011006:	e72b      	b.n	8010e60 <__ieee754_pow+0x220>
 8011008:	60000000 	.word	0x60000000
 801100c:	3ff71547 	.word	0x3ff71547
 8011010:	f85ddf44 	.word	0xf85ddf44
 8011014:	3e54ae0b 	.word	0x3e54ae0b
 8011018:	55555555 	.word	0x55555555
 801101c:	3fd55555 	.word	0x3fd55555
 8011020:	652b82fe 	.word	0x652b82fe
 8011024:	3ff71547 	.word	0x3ff71547
 8011028:	00000000 	.word	0x00000000
 801102c:	bff00000 	.word	0xbff00000
 8011030:	3ff00000 	.word	0x3ff00000
 8011034:	3fd00000 	.word	0x3fd00000
 8011038:	3fe00000 	.word	0x3fe00000
 801103c:	408fffff 	.word	0x408fffff
 8011040:	4bd5      	ldr	r3, [pc, #852]	; (8011398 <__ieee754_pow+0x758>)
 8011042:	402b      	ands	r3, r5
 8011044:	2200      	movs	r2, #0
 8011046:	b92b      	cbnz	r3, 8011054 <__ieee754_pow+0x414>
 8011048:	4bd4      	ldr	r3, [pc, #848]	; (801139c <__ieee754_pow+0x75c>)
 801104a:	f7ef faed 	bl	8000628 <__aeabi_dmul>
 801104e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011052:	460c      	mov	r4, r1
 8011054:	1523      	asrs	r3, r4, #20
 8011056:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801105a:	4413      	add	r3, r2
 801105c:	9305      	str	r3, [sp, #20]
 801105e:	4bd0      	ldr	r3, [pc, #832]	; (80113a0 <__ieee754_pow+0x760>)
 8011060:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011064:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011068:	429c      	cmp	r4, r3
 801106a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801106e:	dd08      	ble.n	8011082 <__ieee754_pow+0x442>
 8011070:	4bcc      	ldr	r3, [pc, #816]	; (80113a4 <__ieee754_pow+0x764>)
 8011072:	429c      	cmp	r4, r3
 8011074:	f340 8162 	ble.w	801133c <__ieee754_pow+0x6fc>
 8011078:	9b05      	ldr	r3, [sp, #20]
 801107a:	3301      	adds	r3, #1
 801107c:	9305      	str	r3, [sp, #20]
 801107e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011082:	2400      	movs	r4, #0
 8011084:	00e3      	lsls	r3, r4, #3
 8011086:	9307      	str	r3, [sp, #28]
 8011088:	4bc7      	ldr	r3, [pc, #796]	; (80113a8 <__ieee754_pow+0x768>)
 801108a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801108e:	ed93 7b00 	vldr	d7, [r3]
 8011092:	4629      	mov	r1, r5
 8011094:	ec53 2b17 	vmov	r2, r3, d7
 8011098:	eeb0 9a47 	vmov.f32	s18, s14
 801109c:	eef0 9a67 	vmov.f32	s19, s15
 80110a0:	4682      	mov	sl, r0
 80110a2:	f7ef f909 	bl	80002b8 <__aeabi_dsub>
 80110a6:	4652      	mov	r2, sl
 80110a8:	4606      	mov	r6, r0
 80110aa:	460f      	mov	r7, r1
 80110ac:	462b      	mov	r3, r5
 80110ae:	ec51 0b19 	vmov	r0, r1, d9
 80110b2:	f7ef f903 	bl	80002bc <__adddf3>
 80110b6:	4602      	mov	r2, r0
 80110b8:	460b      	mov	r3, r1
 80110ba:	2000      	movs	r0, #0
 80110bc:	49bb      	ldr	r1, [pc, #748]	; (80113ac <__ieee754_pow+0x76c>)
 80110be:	f7ef fbdd 	bl	800087c <__aeabi_ddiv>
 80110c2:	ec41 0b1a 	vmov	d10, r0, r1
 80110c6:	4602      	mov	r2, r0
 80110c8:	460b      	mov	r3, r1
 80110ca:	4630      	mov	r0, r6
 80110cc:	4639      	mov	r1, r7
 80110ce:	f7ef faab 	bl	8000628 <__aeabi_dmul>
 80110d2:	2300      	movs	r3, #0
 80110d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110d8:	9302      	str	r3, [sp, #8]
 80110da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80110de:	46ab      	mov	fp, r5
 80110e0:	106d      	asrs	r5, r5, #1
 80110e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80110e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80110ea:	ec41 0b18 	vmov	d8, r0, r1
 80110ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80110f2:	2200      	movs	r2, #0
 80110f4:	4640      	mov	r0, r8
 80110f6:	4649      	mov	r1, r9
 80110f8:	4614      	mov	r4, r2
 80110fa:	461d      	mov	r5, r3
 80110fc:	f7ef fa94 	bl	8000628 <__aeabi_dmul>
 8011100:	4602      	mov	r2, r0
 8011102:	460b      	mov	r3, r1
 8011104:	4630      	mov	r0, r6
 8011106:	4639      	mov	r1, r7
 8011108:	f7ef f8d6 	bl	80002b8 <__aeabi_dsub>
 801110c:	ec53 2b19 	vmov	r2, r3, d9
 8011110:	4606      	mov	r6, r0
 8011112:	460f      	mov	r7, r1
 8011114:	4620      	mov	r0, r4
 8011116:	4629      	mov	r1, r5
 8011118:	f7ef f8ce 	bl	80002b8 <__aeabi_dsub>
 801111c:	4602      	mov	r2, r0
 801111e:	460b      	mov	r3, r1
 8011120:	4650      	mov	r0, sl
 8011122:	4659      	mov	r1, fp
 8011124:	f7ef f8c8 	bl	80002b8 <__aeabi_dsub>
 8011128:	4642      	mov	r2, r8
 801112a:	464b      	mov	r3, r9
 801112c:	f7ef fa7c 	bl	8000628 <__aeabi_dmul>
 8011130:	4602      	mov	r2, r0
 8011132:	460b      	mov	r3, r1
 8011134:	4630      	mov	r0, r6
 8011136:	4639      	mov	r1, r7
 8011138:	f7ef f8be 	bl	80002b8 <__aeabi_dsub>
 801113c:	ec53 2b1a 	vmov	r2, r3, d10
 8011140:	f7ef fa72 	bl	8000628 <__aeabi_dmul>
 8011144:	ec53 2b18 	vmov	r2, r3, d8
 8011148:	ec41 0b19 	vmov	d9, r0, r1
 801114c:	ec51 0b18 	vmov	r0, r1, d8
 8011150:	f7ef fa6a 	bl	8000628 <__aeabi_dmul>
 8011154:	a37c      	add	r3, pc, #496	; (adr r3, 8011348 <__ieee754_pow+0x708>)
 8011156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115a:	4604      	mov	r4, r0
 801115c:	460d      	mov	r5, r1
 801115e:	f7ef fa63 	bl	8000628 <__aeabi_dmul>
 8011162:	a37b      	add	r3, pc, #492	; (adr r3, 8011350 <__ieee754_pow+0x710>)
 8011164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011168:	f7ef f8a8 	bl	80002bc <__adddf3>
 801116c:	4622      	mov	r2, r4
 801116e:	462b      	mov	r3, r5
 8011170:	f7ef fa5a 	bl	8000628 <__aeabi_dmul>
 8011174:	a378      	add	r3, pc, #480	; (adr r3, 8011358 <__ieee754_pow+0x718>)
 8011176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117a:	f7ef f89f 	bl	80002bc <__adddf3>
 801117e:	4622      	mov	r2, r4
 8011180:	462b      	mov	r3, r5
 8011182:	f7ef fa51 	bl	8000628 <__aeabi_dmul>
 8011186:	a376      	add	r3, pc, #472	; (adr r3, 8011360 <__ieee754_pow+0x720>)
 8011188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118c:	f7ef f896 	bl	80002bc <__adddf3>
 8011190:	4622      	mov	r2, r4
 8011192:	462b      	mov	r3, r5
 8011194:	f7ef fa48 	bl	8000628 <__aeabi_dmul>
 8011198:	a373      	add	r3, pc, #460	; (adr r3, 8011368 <__ieee754_pow+0x728>)
 801119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119e:	f7ef f88d 	bl	80002bc <__adddf3>
 80111a2:	4622      	mov	r2, r4
 80111a4:	462b      	mov	r3, r5
 80111a6:	f7ef fa3f 	bl	8000628 <__aeabi_dmul>
 80111aa:	a371      	add	r3, pc, #452	; (adr r3, 8011370 <__ieee754_pow+0x730>)
 80111ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b0:	f7ef f884 	bl	80002bc <__adddf3>
 80111b4:	4622      	mov	r2, r4
 80111b6:	4606      	mov	r6, r0
 80111b8:	460f      	mov	r7, r1
 80111ba:	462b      	mov	r3, r5
 80111bc:	4620      	mov	r0, r4
 80111be:	4629      	mov	r1, r5
 80111c0:	f7ef fa32 	bl	8000628 <__aeabi_dmul>
 80111c4:	4602      	mov	r2, r0
 80111c6:	460b      	mov	r3, r1
 80111c8:	4630      	mov	r0, r6
 80111ca:	4639      	mov	r1, r7
 80111cc:	f7ef fa2c 	bl	8000628 <__aeabi_dmul>
 80111d0:	4642      	mov	r2, r8
 80111d2:	4604      	mov	r4, r0
 80111d4:	460d      	mov	r5, r1
 80111d6:	464b      	mov	r3, r9
 80111d8:	ec51 0b18 	vmov	r0, r1, d8
 80111dc:	f7ef f86e 	bl	80002bc <__adddf3>
 80111e0:	ec53 2b19 	vmov	r2, r3, d9
 80111e4:	f7ef fa20 	bl	8000628 <__aeabi_dmul>
 80111e8:	4622      	mov	r2, r4
 80111ea:	462b      	mov	r3, r5
 80111ec:	f7ef f866 	bl	80002bc <__adddf3>
 80111f0:	4642      	mov	r2, r8
 80111f2:	4682      	mov	sl, r0
 80111f4:	468b      	mov	fp, r1
 80111f6:	464b      	mov	r3, r9
 80111f8:	4640      	mov	r0, r8
 80111fa:	4649      	mov	r1, r9
 80111fc:	f7ef fa14 	bl	8000628 <__aeabi_dmul>
 8011200:	4b6b      	ldr	r3, [pc, #428]	; (80113b0 <__ieee754_pow+0x770>)
 8011202:	2200      	movs	r2, #0
 8011204:	4606      	mov	r6, r0
 8011206:	460f      	mov	r7, r1
 8011208:	f7ef f858 	bl	80002bc <__adddf3>
 801120c:	4652      	mov	r2, sl
 801120e:	465b      	mov	r3, fp
 8011210:	f7ef f854 	bl	80002bc <__adddf3>
 8011214:	2000      	movs	r0, #0
 8011216:	4604      	mov	r4, r0
 8011218:	460d      	mov	r5, r1
 801121a:	4602      	mov	r2, r0
 801121c:	460b      	mov	r3, r1
 801121e:	4640      	mov	r0, r8
 8011220:	4649      	mov	r1, r9
 8011222:	f7ef fa01 	bl	8000628 <__aeabi_dmul>
 8011226:	4b62      	ldr	r3, [pc, #392]	; (80113b0 <__ieee754_pow+0x770>)
 8011228:	4680      	mov	r8, r0
 801122a:	4689      	mov	r9, r1
 801122c:	2200      	movs	r2, #0
 801122e:	4620      	mov	r0, r4
 8011230:	4629      	mov	r1, r5
 8011232:	f7ef f841 	bl	80002b8 <__aeabi_dsub>
 8011236:	4632      	mov	r2, r6
 8011238:	463b      	mov	r3, r7
 801123a:	f7ef f83d 	bl	80002b8 <__aeabi_dsub>
 801123e:	4602      	mov	r2, r0
 8011240:	460b      	mov	r3, r1
 8011242:	4650      	mov	r0, sl
 8011244:	4659      	mov	r1, fp
 8011246:	f7ef f837 	bl	80002b8 <__aeabi_dsub>
 801124a:	ec53 2b18 	vmov	r2, r3, d8
 801124e:	f7ef f9eb 	bl	8000628 <__aeabi_dmul>
 8011252:	4622      	mov	r2, r4
 8011254:	4606      	mov	r6, r0
 8011256:	460f      	mov	r7, r1
 8011258:	462b      	mov	r3, r5
 801125a:	ec51 0b19 	vmov	r0, r1, d9
 801125e:	f7ef f9e3 	bl	8000628 <__aeabi_dmul>
 8011262:	4602      	mov	r2, r0
 8011264:	460b      	mov	r3, r1
 8011266:	4630      	mov	r0, r6
 8011268:	4639      	mov	r1, r7
 801126a:	f7ef f827 	bl	80002bc <__adddf3>
 801126e:	4606      	mov	r6, r0
 8011270:	460f      	mov	r7, r1
 8011272:	4602      	mov	r2, r0
 8011274:	460b      	mov	r3, r1
 8011276:	4640      	mov	r0, r8
 8011278:	4649      	mov	r1, r9
 801127a:	f7ef f81f 	bl	80002bc <__adddf3>
 801127e:	a33e      	add	r3, pc, #248	; (adr r3, 8011378 <__ieee754_pow+0x738>)
 8011280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011284:	2000      	movs	r0, #0
 8011286:	4604      	mov	r4, r0
 8011288:	460d      	mov	r5, r1
 801128a:	f7ef f9cd 	bl	8000628 <__aeabi_dmul>
 801128e:	4642      	mov	r2, r8
 8011290:	ec41 0b18 	vmov	d8, r0, r1
 8011294:	464b      	mov	r3, r9
 8011296:	4620      	mov	r0, r4
 8011298:	4629      	mov	r1, r5
 801129a:	f7ef f80d 	bl	80002b8 <__aeabi_dsub>
 801129e:	4602      	mov	r2, r0
 80112a0:	460b      	mov	r3, r1
 80112a2:	4630      	mov	r0, r6
 80112a4:	4639      	mov	r1, r7
 80112a6:	f7ef f807 	bl	80002b8 <__aeabi_dsub>
 80112aa:	a335      	add	r3, pc, #212	; (adr r3, 8011380 <__ieee754_pow+0x740>)
 80112ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b0:	f7ef f9ba 	bl	8000628 <__aeabi_dmul>
 80112b4:	a334      	add	r3, pc, #208	; (adr r3, 8011388 <__ieee754_pow+0x748>)
 80112b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ba:	4606      	mov	r6, r0
 80112bc:	460f      	mov	r7, r1
 80112be:	4620      	mov	r0, r4
 80112c0:	4629      	mov	r1, r5
 80112c2:	f7ef f9b1 	bl	8000628 <__aeabi_dmul>
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	4630      	mov	r0, r6
 80112cc:	4639      	mov	r1, r7
 80112ce:	f7ee fff5 	bl	80002bc <__adddf3>
 80112d2:	9a07      	ldr	r2, [sp, #28]
 80112d4:	4b37      	ldr	r3, [pc, #220]	; (80113b4 <__ieee754_pow+0x774>)
 80112d6:	4413      	add	r3, r2
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	f7ee ffee 	bl	80002bc <__adddf3>
 80112e0:	4682      	mov	sl, r0
 80112e2:	9805      	ldr	r0, [sp, #20]
 80112e4:	468b      	mov	fp, r1
 80112e6:	f7ef f935 	bl	8000554 <__aeabi_i2d>
 80112ea:	9a07      	ldr	r2, [sp, #28]
 80112ec:	4b32      	ldr	r3, [pc, #200]	; (80113b8 <__ieee754_pow+0x778>)
 80112ee:	4413      	add	r3, r2
 80112f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80112f4:	4606      	mov	r6, r0
 80112f6:	460f      	mov	r7, r1
 80112f8:	4652      	mov	r2, sl
 80112fa:	465b      	mov	r3, fp
 80112fc:	ec51 0b18 	vmov	r0, r1, d8
 8011300:	f7ee ffdc 	bl	80002bc <__adddf3>
 8011304:	4642      	mov	r2, r8
 8011306:	464b      	mov	r3, r9
 8011308:	f7ee ffd8 	bl	80002bc <__adddf3>
 801130c:	4632      	mov	r2, r6
 801130e:	463b      	mov	r3, r7
 8011310:	f7ee ffd4 	bl	80002bc <__adddf3>
 8011314:	2000      	movs	r0, #0
 8011316:	4632      	mov	r2, r6
 8011318:	463b      	mov	r3, r7
 801131a:	4604      	mov	r4, r0
 801131c:	460d      	mov	r5, r1
 801131e:	f7ee ffcb 	bl	80002b8 <__aeabi_dsub>
 8011322:	4642      	mov	r2, r8
 8011324:	464b      	mov	r3, r9
 8011326:	f7ee ffc7 	bl	80002b8 <__aeabi_dsub>
 801132a:	ec53 2b18 	vmov	r2, r3, d8
 801132e:	f7ee ffc3 	bl	80002b8 <__aeabi_dsub>
 8011332:	4602      	mov	r2, r0
 8011334:	460b      	mov	r3, r1
 8011336:	4650      	mov	r0, sl
 8011338:	4659      	mov	r1, fp
 801133a:	e610      	b.n	8010f5e <__ieee754_pow+0x31e>
 801133c:	2401      	movs	r4, #1
 801133e:	e6a1      	b.n	8011084 <__ieee754_pow+0x444>
 8011340:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011390 <__ieee754_pow+0x750>
 8011344:	e617      	b.n	8010f76 <__ieee754_pow+0x336>
 8011346:	bf00      	nop
 8011348:	4a454eef 	.word	0x4a454eef
 801134c:	3fca7e28 	.word	0x3fca7e28
 8011350:	93c9db65 	.word	0x93c9db65
 8011354:	3fcd864a 	.word	0x3fcd864a
 8011358:	a91d4101 	.word	0xa91d4101
 801135c:	3fd17460 	.word	0x3fd17460
 8011360:	518f264d 	.word	0x518f264d
 8011364:	3fd55555 	.word	0x3fd55555
 8011368:	db6fabff 	.word	0xdb6fabff
 801136c:	3fdb6db6 	.word	0x3fdb6db6
 8011370:	33333303 	.word	0x33333303
 8011374:	3fe33333 	.word	0x3fe33333
 8011378:	e0000000 	.word	0xe0000000
 801137c:	3feec709 	.word	0x3feec709
 8011380:	dc3a03fd 	.word	0xdc3a03fd
 8011384:	3feec709 	.word	0x3feec709
 8011388:	145b01f5 	.word	0x145b01f5
 801138c:	be3e2fe0 	.word	0xbe3e2fe0
 8011390:	00000000 	.word	0x00000000
 8011394:	3ff00000 	.word	0x3ff00000
 8011398:	7ff00000 	.word	0x7ff00000
 801139c:	43400000 	.word	0x43400000
 80113a0:	0003988e 	.word	0x0003988e
 80113a4:	000bb679 	.word	0x000bb679
 80113a8:	08011ec8 	.word	0x08011ec8
 80113ac:	3ff00000 	.word	0x3ff00000
 80113b0:	40080000 	.word	0x40080000
 80113b4:	08011ee8 	.word	0x08011ee8
 80113b8:	08011ed8 	.word	0x08011ed8
 80113bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8011694 <__ieee754_pow+0xa54>)
 80113be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c2:	4640      	mov	r0, r8
 80113c4:	4649      	mov	r1, r9
 80113c6:	f7ee ff79 	bl	80002bc <__adddf3>
 80113ca:	4622      	mov	r2, r4
 80113cc:	ec41 0b1a 	vmov	d10, r0, r1
 80113d0:	462b      	mov	r3, r5
 80113d2:	4630      	mov	r0, r6
 80113d4:	4639      	mov	r1, r7
 80113d6:	f7ee ff6f 	bl	80002b8 <__aeabi_dsub>
 80113da:	4602      	mov	r2, r0
 80113dc:	460b      	mov	r3, r1
 80113de:	ec51 0b1a 	vmov	r0, r1, d10
 80113e2:	f7ef fbb1 	bl	8000b48 <__aeabi_dcmpgt>
 80113e6:	2800      	cmp	r0, #0
 80113e8:	f47f ae04 	bne.w	8010ff4 <__ieee754_pow+0x3b4>
 80113ec:	4aa4      	ldr	r2, [pc, #656]	; (8011680 <__ieee754_pow+0xa40>)
 80113ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80113f2:	4293      	cmp	r3, r2
 80113f4:	f340 8108 	ble.w	8011608 <__ieee754_pow+0x9c8>
 80113f8:	151b      	asrs	r3, r3, #20
 80113fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80113fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011402:	fa4a f303 	asr.w	r3, sl, r3
 8011406:	445b      	add	r3, fp
 8011408:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801140c:	4e9d      	ldr	r6, [pc, #628]	; (8011684 <__ieee754_pow+0xa44>)
 801140e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011412:	4116      	asrs	r6, r2
 8011414:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011418:	2000      	movs	r0, #0
 801141a:	ea23 0106 	bic.w	r1, r3, r6
 801141e:	f1c2 0214 	rsb	r2, r2, #20
 8011422:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011426:	fa4a fa02 	asr.w	sl, sl, r2
 801142a:	f1bb 0f00 	cmp.w	fp, #0
 801142e:	4602      	mov	r2, r0
 8011430:	460b      	mov	r3, r1
 8011432:	4620      	mov	r0, r4
 8011434:	4629      	mov	r1, r5
 8011436:	bfb8      	it	lt
 8011438:	f1ca 0a00 	rsblt	sl, sl, #0
 801143c:	f7ee ff3c 	bl	80002b8 <__aeabi_dsub>
 8011440:	ec41 0b19 	vmov	d9, r0, r1
 8011444:	4642      	mov	r2, r8
 8011446:	464b      	mov	r3, r9
 8011448:	ec51 0b19 	vmov	r0, r1, d9
 801144c:	f7ee ff36 	bl	80002bc <__adddf3>
 8011450:	a37b      	add	r3, pc, #492	; (adr r3, 8011640 <__ieee754_pow+0xa00>)
 8011452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011456:	2000      	movs	r0, #0
 8011458:	4604      	mov	r4, r0
 801145a:	460d      	mov	r5, r1
 801145c:	f7ef f8e4 	bl	8000628 <__aeabi_dmul>
 8011460:	ec53 2b19 	vmov	r2, r3, d9
 8011464:	4606      	mov	r6, r0
 8011466:	460f      	mov	r7, r1
 8011468:	4620      	mov	r0, r4
 801146a:	4629      	mov	r1, r5
 801146c:	f7ee ff24 	bl	80002b8 <__aeabi_dsub>
 8011470:	4602      	mov	r2, r0
 8011472:	460b      	mov	r3, r1
 8011474:	4640      	mov	r0, r8
 8011476:	4649      	mov	r1, r9
 8011478:	f7ee ff1e 	bl	80002b8 <__aeabi_dsub>
 801147c:	a372      	add	r3, pc, #456	; (adr r3, 8011648 <__ieee754_pow+0xa08>)
 801147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011482:	f7ef f8d1 	bl	8000628 <__aeabi_dmul>
 8011486:	a372      	add	r3, pc, #456	; (adr r3, 8011650 <__ieee754_pow+0xa10>)
 8011488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148c:	4680      	mov	r8, r0
 801148e:	4689      	mov	r9, r1
 8011490:	4620      	mov	r0, r4
 8011492:	4629      	mov	r1, r5
 8011494:	f7ef f8c8 	bl	8000628 <__aeabi_dmul>
 8011498:	4602      	mov	r2, r0
 801149a:	460b      	mov	r3, r1
 801149c:	4640      	mov	r0, r8
 801149e:	4649      	mov	r1, r9
 80114a0:	f7ee ff0c 	bl	80002bc <__adddf3>
 80114a4:	4604      	mov	r4, r0
 80114a6:	460d      	mov	r5, r1
 80114a8:	4602      	mov	r2, r0
 80114aa:	460b      	mov	r3, r1
 80114ac:	4630      	mov	r0, r6
 80114ae:	4639      	mov	r1, r7
 80114b0:	f7ee ff04 	bl	80002bc <__adddf3>
 80114b4:	4632      	mov	r2, r6
 80114b6:	463b      	mov	r3, r7
 80114b8:	4680      	mov	r8, r0
 80114ba:	4689      	mov	r9, r1
 80114bc:	f7ee fefc 	bl	80002b8 <__aeabi_dsub>
 80114c0:	4602      	mov	r2, r0
 80114c2:	460b      	mov	r3, r1
 80114c4:	4620      	mov	r0, r4
 80114c6:	4629      	mov	r1, r5
 80114c8:	f7ee fef6 	bl	80002b8 <__aeabi_dsub>
 80114cc:	4642      	mov	r2, r8
 80114ce:	4606      	mov	r6, r0
 80114d0:	460f      	mov	r7, r1
 80114d2:	464b      	mov	r3, r9
 80114d4:	4640      	mov	r0, r8
 80114d6:	4649      	mov	r1, r9
 80114d8:	f7ef f8a6 	bl	8000628 <__aeabi_dmul>
 80114dc:	a35e      	add	r3, pc, #376	; (adr r3, 8011658 <__ieee754_pow+0xa18>)
 80114de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e2:	4604      	mov	r4, r0
 80114e4:	460d      	mov	r5, r1
 80114e6:	f7ef f89f 	bl	8000628 <__aeabi_dmul>
 80114ea:	a35d      	add	r3, pc, #372	; (adr r3, 8011660 <__ieee754_pow+0xa20>)
 80114ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f0:	f7ee fee2 	bl	80002b8 <__aeabi_dsub>
 80114f4:	4622      	mov	r2, r4
 80114f6:	462b      	mov	r3, r5
 80114f8:	f7ef f896 	bl	8000628 <__aeabi_dmul>
 80114fc:	a35a      	add	r3, pc, #360	; (adr r3, 8011668 <__ieee754_pow+0xa28>)
 80114fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011502:	f7ee fedb 	bl	80002bc <__adddf3>
 8011506:	4622      	mov	r2, r4
 8011508:	462b      	mov	r3, r5
 801150a:	f7ef f88d 	bl	8000628 <__aeabi_dmul>
 801150e:	a358      	add	r3, pc, #352	; (adr r3, 8011670 <__ieee754_pow+0xa30>)
 8011510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011514:	f7ee fed0 	bl	80002b8 <__aeabi_dsub>
 8011518:	4622      	mov	r2, r4
 801151a:	462b      	mov	r3, r5
 801151c:	f7ef f884 	bl	8000628 <__aeabi_dmul>
 8011520:	a355      	add	r3, pc, #340	; (adr r3, 8011678 <__ieee754_pow+0xa38>)
 8011522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011526:	f7ee fec9 	bl	80002bc <__adddf3>
 801152a:	4622      	mov	r2, r4
 801152c:	462b      	mov	r3, r5
 801152e:	f7ef f87b 	bl	8000628 <__aeabi_dmul>
 8011532:	4602      	mov	r2, r0
 8011534:	460b      	mov	r3, r1
 8011536:	4640      	mov	r0, r8
 8011538:	4649      	mov	r1, r9
 801153a:	f7ee febd 	bl	80002b8 <__aeabi_dsub>
 801153e:	4604      	mov	r4, r0
 8011540:	460d      	mov	r5, r1
 8011542:	4602      	mov	r2, r0
 8011544:	460b      	mov	r3, r1
 8011546:	4640      	mov	r0, r8
 8011548:	4649      	mov	r1, r9
 801154a:	f7ef f86d 	bl	8000628 <__aeabi_dmul>
 801154e:	2200      	movs	r2, #0
 8011550:	ec41 0b19 	vmov	d9, r0, r1
 8011554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011558:	4620      	mov	r0, r4
 801155a:	4629      	mov	r1, r5
 801155c:	f7ee feac 	bl	80002b8 <__aeabi_dsub>
 8011560:	4602      	mov	r2, r0
 8011562:	460b      	mov	r3, r1
 8011564:	ec51 0b19 	vmov	r0, r1, d9
 8011568:	f7ef f988 	bl	800087c <__aeabi_ddiv>
 801156c:	4632      	mov	r2, r6
 801156e:	4604      	mov	r4, r0
 8011570:	460d      	mov	r5, r1
 8011572:	463b      	mov	r3, r7
 8011574:	4640      	mov	r0, r8
 8011576:	4649      	mov	r1, r9
 8011578:	f7ef f856 	bl	8000628 <__aeabi_dmul>
 801157c:	4632      	mov	r2, r6
 801157e:	463b      	mov	r3, r7
 8011580:	f7ee fe9c 	bl	80002bc <__adddf3>
 8011584:	4602      	mov	r2, r0
 8011586:	460b      	mov	r3, r1
 8011588:	4620      	mov	r0, r4
 801158a:	4629      	mov	r1, r5
 801158c:	f7ee fe94 	bl	80002b8 <__aeabi_dsub>
 8011590:	4642      	mov	r2, r8
 8011592:	464b      	mov	r3, r9
 8011594:	f7ee fe90 	bl	80002b8 <__aeabi_dsub>
 8011598:	460b      	mov	r3, r1
 801159a:	4602      	mov	r2, r0
 801159c:	493a      	ldr	r1, [pc, #232]	; (8011688 <__ieee754_pow+0xa48>)
 801159e:	2000      	movs	r0, #0
 80115a0:	f7ee fe8a 	bl	80002b8 <__aeabi_dsub>
 80115a4:	ec41 0b10 	vmov	d0, r0, r1
 80115a8:	ee10 3a90 	vmov	r3, s1
 80115ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80115b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115b4:	da2b      	bge.n	801160e <__ieee754_pow+0x9ce>
 80115b6:	4650      	mov	r0, sl
 80115b8:	f000 f966 	bl	8011888 <scalbn>
 80115bc:	ec51 0b10 	vmov	r0, r1, d0
 80115c0:	ec53 2b18 	vmov	r2, r3, d8
 80115c4:	f7ff bbed 	b.w	8010da2 <__ieee754_pow+0x162>
 80115c8:	4b30      	ldr	r3, [pc, #192]	; (801168c <__ieee754_pow+0xa4c>)
 80115ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80115ce:	429e      	cmp	r6, r3
 80115d0:	f77f af0c 	ble.w	80113ec <__ieee754_pow+0x7ac>
 80115d4:	4b2e      	ldr	r3, [pc, #184]	; (8011690 <__ieee754_pow+0xa50>)
 80115d6:	440b      	add	r3, r1
 80115d8:	4303      	orrs	r3, r0
 80115da:	d009      	beq.n	80115f0 <__ieee754_pow+0x9b0>
 80115dc:	ec51 0b18 	vmov	r0, r1, d8
 80115e0:	2200      	movs	r2, #0
 80115e2:	2300      	movs	r3, #0
 80115e4:	f7ef fa92 	bl	8000b0c <__aeabi_dcmplt>
 80115e8:	3800      	subs	r0, #0
 80115ea:	bf18      	it	ne
 80115ec:	2001      	movne	r0, #1
 80115ee:	e447      	b.n	8010e80 <__ieee754_pow+0x240>
 80115f0:	4622      	mov	r2, r4
 80115f2:	462b      	mov	r3, r5
 80115f4:	f7ee fe60 	bl	80002b8 <__aeabi_dsub>
 80115f8:	4642      	mov	r2, r8
 80115fa:	464b      	mov	r3, r9
 80115fc:	f7ef fa9a 	bl	8000b34 <__aeabi_dcmpge>
 8011600:	2800      	cmp	r0, #0
 8011602:	f43f aef3 	beq.w	80113ec <__ieee754_pow+0x7ac>
 8011606:	e7e9      	b.n	80115dc <__ieee754_pow+0x99c>
 8011608:	f04f 0a00 	mov.w	sl, #0
 801160c:	e71a      	b.n	8011444 <__ieee754_pow+0x804>
 801160e:	ec51 0b10 	vmov	r0, r1, d0
 8011612:	4619      	mov	r1, r3
 8011614:	e7d4      	b.n	80115c0 <__ieee754_pow+0x980>
 8011616:	491c      	ldr	r1, [pc, #112]	; (8011688 <__ieee754_pow+0xa48>)
 8011618:	2000      	movs	r0, #0
 801161a:	f7ff bb30 	b.w	8010c7e <__ieee754_pow+0x3e>
 801161e:	2000      	movs	r0, #0
 8011620:	2100      	movs	r1, #0
 8011622:	f7ff bb2c 	b.w	8010c7e <__ieee754_pow+0x3e>
 8011626:	4630      	mov	r0, r6
 8011628:	4639      	mov	r1, r7
 801162a:	f7ff bb28 	b.w	8010c7e <__ieee754_pow+0x3e>
 801162e:	9204      	str	r2, [sp, #16]
 8011630:	f7ff bb7a 	b.w	8010d28 <__ieee754_pow+0xe8>
 8011634:	2300      	movs	r3, #0
 8011636:	f7ff bb64 	b.w	8010d02 <__ieee754_pow+0xc2>
 801163a:	bf00      	nop
 801163c:	f3af 8000 	nop.w
 8011640:	00000000 	.word	0x00000000
 8011644:	3fe62e43 	.word	0x3fe62e43
 8011648:	fefa39ef 	.word	0xfefa39ef
 801164c:	3fe62e42 	.word	0x3fe62e42
 8011650:	0ca86c39 	.word	0x0ca86c39
 8011654:	be205c61 	.word	0xbe205c61
 8011658:	72bea4d0 	.word	0x72bea4d0
 801165c:	3e663769 	.word	0x3e663769
 8011660:	c5d26bf1 	.word	0xc5d26bf1
 8011664:	3ebbbd41 	.word	0x3ebbbd41
 8011668:	af25de2c 	.word	0xaf25de2c
 801166c:	3f11566a 	.word	0x3f11566a
 8011670:	16bebd93 	.word	0x16bebd93
 8011674:	3f66c16c 	.word	0x3f66c16c
 8011678:	5555553e 	.word	0x5555553e
 801167c:	3fc55555 	.word	0x3fc55555
 8011680:	3fe00000 	.word	0x3fe00000
 8011684:	000fffff 	.word	0x000fffff
 8011688:	3ff00000 	.word	0x3ff00000
 801168c:	4090cbff 	.word	0x4090cbff
 8011690:	3f6f3400 	.word	0x3f6f3400
 8011694:	652b82fe 	.word	0x652b82fe
 8011698:	3c971547 	.word	0x3c971547

0801169c <__ieee754_sqrt>:
 801169c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116a0:	ec55 4b10 	vmov	r4, r5, d0
 80116a4:	4e55      	ldr	r6, [pc, #340]	; (80117fc <__ieee754_sqrt+0x160>)
 80116a6:	43ae      	bics	r6, r5
 80116a8:	ee10 0a10 	vmov	r0, s0
 80116ac:	ee10 3a10 	vmov	r3, s0
 80116b0:	462a      	mov	r2, r5
 80116b2:	4629      	mov	r1, r5
 80116b4:	d110      	bne.n	80116d8 <__ieee754_sqrt+0x3c>
 80116b6:	ee10 2a10 	vmov	r2, s0
 80116ba:	462b      	mov	r3, r5
 80116bc:	f7ee ffb4 	bl	8000628 <__aeabi_dmul>
 80116c0:	4602      	mov	r2, r0
 80116c2:	460b      	mov	r3, r1
 80116c4:	4620      	mov	r0, r4
 80116c6:	4629      	mov	r1, r5
 80116c8:	f7ee fdf8 	bl	80002bc <__adddf3>
 80116cc:	4604      	mov	r4, r0
 80116ce:	460d      	mov	r5, r1
 80116d0:	ec45 4b10 	vmov	d0, r4, r5
 80116d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d8:	2d00      	cmp	r5, #0
 80116da:	dc10      	bgt.n	80116fe <__ieee754_sqrt+0x62>
 80116dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80116e0:	4330      	orrs	r0, r6
 80116e2:	d0f5      	beq.n	80116d0 <__ieee754_sqrt+0x34>
 80116e4:	b15d      	cbz	r5, 80116fe <__ieee754_sqrt+0x62>
 80116e6:	ee10 2a10 	vmov	r2, s0
 80116ea:	462b      	mov	r3, r5
 80116ec:	ee10 0a10 	vmov	r0, s0
 80116f0:	f7ee fde2 	bl	80002b8 <__aeabi_dsub>
 80116f4:	4602      	mov	r2, r0
 80116f6:	460b      	mov	r3, r1
 80116f8:	f7ef f8c0 	bl	800087c <__aeabi_ddiv>
 80116fc:	e7e6      	b.n	80116cc <__ieee754_sqrt+0x30>
 80116fe:	1512      	asrs	r2, r2, #20
 8011700:	d074      	beq.n	80117ec <__ieee754_sqrt+0x150>
 8011702:	07d4      	lsls	r4, r2, #31
 8011704:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011708:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801170c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011710:	bf5e      	ittt	pl
 8011712:	0fda      	lsrpl	r2, r3, #31
 8011714:	005b      	lslpl	r3, r3, #1
 8011716:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801171a:	2400      	movs	r4, #0
 801171c:	0fda      	lsrs	r2, r3, #31
 801171e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011722:	107f      	asrs	r7, r7, #1
 8011724:	005b      	lsls	r3, r3, #1
 8011726:	2516      	movs	r5, #22
 8011728:	4620      	mov	r0, r4
 801172a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801172e:	1886      	adds	r6, r0, r2
 8011730:	428e      	cmp	r6, r1
 8011732:	bfde      	ittt	le
 8011734:	1b89      	suble	r1, r1, r6
 8011736:	18b0      	addle	r0, r6, r2
 8011738:	18a4      	addle	r4, r4, r2
 801173a:	0049      	lsls	r1, r1, #1
 801173c:	3d01      	subs	r5, #1
 801173e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8011742:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011746:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801174a:	d1f0      	bne.n	801172e <__ieee754_sqrt+0x92>
 801174c:	462a      	mov	r2, r5
 801174e:	f04f 0e20 	mov.w	lr, #32
 8011752:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011756:	4281      	cmp	r1, r0
 8011758:	eb06 0c05 	add.w	ip, r6, r5
 801175c:	dc02      	bgt.n	8011764 <__ieee754_sqrt+0xc8>
 801175e:	d113      	bne.n	8011788 <__ieee754_sqrt+0xec>
 8011760:	459c      	cmp	ip, r3
 8011762:	d811      	bhi.n	8011788 <__ieee754_sqrt+0xec>
 8011764:	f1bc 0f00 	cmp.w	ip, #0
 8011768:	eb0c 0506 	add.w	r5, ip, r6
 801176c:	da43      	bge.n	80117f6 <__ieee754_sqrt+0x15a>
 801176e:	2d00      	cmp	r5, #0
 8011770:	db41      	blt.n	80117f6 <__ieee754_sqrt+0x15a>
 8011772:	f100 0801 	add.w	r8, r0, #1
 8011776:	1a09      	subs	r1, r1, r0
 8011778:	459c      	cmp	ip, r3
 801177a:	bf88      	it	hi
 801177c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011780:	eba3 030c 	sub.w	r3, r3, ip
 8011784:	4432      	add	r2, r6
 8011786:	4640      	mov	r0, r8
 8011788:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801178c:	f1be 0e01 	subs.w	lr, lr, #1
 8011790:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8011794:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011798:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801179c:	d1db      	bne.n	8011756 <__ieee754_sqrt+0xba>
 801179e:	430b      	orrs	r3, r1
 80117a0:	d006      	beq.n	80117b0 <__ieee754_sqrt+0x114>
 80117a2:	1c50      	adds	r0, r2, #1
 80117a4:	bf13      	iteet	ne
 80117a6:	3201      	addne	r2, #1
 80117a8:	3401      	addeq	r4, #1
 80117aa:	4672      	moveq	r2, lr
 80117ac:	f022 0201 	bicne.w	r2, r2, #1
 80117b0:	1063      	asrs	r3, r4, #1
 80117b2:	0852      	lsrs	r2, r2, #1
 80117b4:	07e1      	lsls	r1, r4, #31
 80117b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80117ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80117be:	bf48      	it	mi
 80117c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80117c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80117c8:	4614      	mov	r4, r2
 80117ca:	e781      	b.n	80116d0 <__ieee754_sqrt+0x34>
 80117cc:	0ad9      	lsrs	r1, r3, #11
 80117ce:	3815      	subs	r0, #21
 80117d0:	055b      	lsls	r3, r3, #21
 80117d2:	2900      	cmp	r1, #0
 80117d4:	d0fa      	beq.n	80117cc <__ieee754_sqrt+0x130>
 80117d6:	02cd      	lsls	r5, r1, #11
 80117d8:	d50a      	bpl.n	80117f0 <__ieee754_sqrt+0x154>
 80117da:	f1c2 0420 	rsb	r4, r2, #32
 80117de:	fa23 f404 	lsr.w	r4, r3, r4
 80117e2:	1e55      	subs	r5, r2, #1
 80117e4:	4093      	lsls	r3, r2
 80117e6:	4321      	orrs	r1, r4
 80117e8:	1b42      	subs	r2, r0, r5
 80117ea:	e78a      	b.n	8011702 <__ieee754_sqrt+0x66>
 80117ec:	4610      	mov	r0, r2
 80117ee:	e7f0      	b.n	80117d2 <__ieee754_sqrt+0x136>
 80117f0:	0049      	lsls	r1, r1, #1
 80117f2:	3201      	adds	r2, #1
 80117f4:	e7ef      	b.n	80117d6 <__ieee754_sqrt+0x13a>
 80117f6:	4680      	mov	r8, r0
 80117f8:	e7bd      	b.n	8011776 <__ieee754_sqrt+0xda>
 80117fa:	bf00      	nop
 80117fc:	7ff00000 	.word	0x7ff00000

08011800 <with_errno>:
 8011800:	b570      	push	{r4, r5, r6, lr}
 8011802:	4604      	mov	r4, r0
 8011804:	460d      	mov	r5, r1
 8011806:	4616      	mov	r6, r2
 8011808:	f7fe f964 	bl	800fad4 <__errno>
 801180c:	4629      	mov	r1, r5
 801180e:	6006      	str	r6, [r0, #0]
 8011810:	4620      	mov	r0, r4
 8011812:	bd70      	pop	{r4, r5, r6, pc}

08011814 <xflow>:
 8011814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011816:	4614      	mov	r4, r2
 8011818:	461d      	mov	r5, r3
 801181a:	b108      	cbz	r0, 8011820 <xflow+0xc>
 801181c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011820:	e9cd 2300 	strd	r2, r3, [sp]
 8011824:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011828:	4620      	mov	r0, r4
 801182a:	4629      	mov	r1, r5
 801182c:	f7ee fefc 	bl	8000628 <__aeabi_dmul>
 8011830:	2222      	movs	r2, #34	; 0x22
 8011832:	b003      	add	sp, #12
 8011834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011838:	f7ff bfe2 	b.w	8011800 <with_errno>

0801183c <__math_uflow>:
 801183c:	b508      	push	{r3, lr}
 801183e:	2200      	movs	r2, #0
 8011840:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011844:	f7ff ffe6 	bl	8011814 <xflow>
 8011848:	ec41 0b10 	vmov	d0, r0, r1
 801184c:	bd08      	pop	{r3, pc}

0801184e <__math_oflow>:
 801184e:	b508      	push	{r3, lr}
 8011850:	2200      	movs	r2, #0
 8011852:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011856:	f7ff ffdd 	bl	8011814 <xflow>
 801185a:	ec41 0b10 	vmov	d0, r0, r1
 801185e:	bd08      	pop	{r3, pc}

08011860 <fabs>:
 8011860:	ec51 0b10 	vmov	r0, r1, d0
 8011864:	ee10 2a10 	vmov	r2, s0
 8011868:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801186c:	ec43 2b10 	vmov	d0, r2, r3
 8011870:	4770      	bx	lr

08011872 <finite>:
 8011872:	b082      	sub	sp, #8
 8011874:	ed8d 0b00 	vstr	d0, [sp]
 8011878:	9801      	ldr	r0, [sp, #4]
 801187a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801187e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011882:	0fc0      	lsrs	r0, r0, #31
 8011884:	b002      	add	sp, #8
 8011886:	4770      	bx	lr

08011888 <scalbn>:
 8011888:	b570      	push	{r4, r5, r6, lr}
 801188a:	ec55 4b10 	vmov	r4, r5, d0
 801188e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011892:	4606      	mov	r6, r0
 8011894:	462b      	mov	r3, r5
 8011896:	b99a      	cbnz	r2, 80118c0 <scalbn+0x38>
 8011898:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801189c:	4323      	orrs	r3, r4
 801189e:	d036      	beq.n	801190e <scalbn+0x86>
 80118a0:	4b39      	ldr	r3, [pc, #228]	; (8011988 <scalbn+0x100>)
 80118a2:	4629      	mov	r1, r5
 80118a4:	ee10 0a10 	vmov	r0, s0
 80118a8:	2200      	movs	r2, #0
 80118aa:	f7ee febd 	bl	8000628 <__aeabi_dmul>
 80118ae:	4b37      	ldr	r3, [pc, #220]	; (801198c <scalbn+0x104>)
 80118b0:	429e      	cmp	r6, r3
 80118b2:	4604      	mov	r4, r0
 80118b4:	460d      	mov	r5, r1
 80118b6:	da10      	bge.n	80118da <scalbn+0x52>
 80118b8:	a32b      	add	r3, pc, #172	; (adr r3, 8011968 <scalbn+0xe0>)
 80118ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118be:	e03a      	b.n	8011936 <scalbn+0xae>
 80118c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80118c4:	428a      	cmp	r2, r1
 80118c6:	d10c      	bne.n	80118e2 <scalbn+0x5a>
 80118c8:	ee10 2a10 	vmov	r2, s0
 80118cc:	4620      	mov	r0, r4
 80118ce:	4629      	mov	r1, r5
 80118d0:	f7ee fcf4 	bl	80002bc <__adddf3>
 80118d4:	4604      	mov	r4, r0
 80118d6:	460d      	mov	r5, r1
 80118d8:	e019      	b.n	801190e <scalbn+0x86>
 80118da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80118de:	460b      	mov	r3, r1
 80118e0:	3a36      	subs	r2, #54	; 0x36
 80118e2:	4432      	add	r2, r6
 80118e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80118e8:	428a      	cmp	r2, r1
 80118ea:	dd08      	ble.n	80118fe <scalbn+0x76>
 80118ec:	2d00      	cmp	r5, #0
 80118ee:	a120      	add	r1, pc, #128	; (adr r1, 8011970 <scalbn+0xe8>)
 80118f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118f4:	da1c      	bge.n	8011930 <scalbn+0xa8>
 80118f6:	a120      	add	r1, pc, #128	; (adr r1, 8011978 <scalbn+0xf0>)
 80118f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118fc:	e018      	b.n	8011930 <scalbn+0xa8>
 80118fe:	2a00      	cmp	r2, #0
 8011900:	dd08      	ble.n	8011914 <scalbn+0x8c>
 8011902:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011906:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801190a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801190e:	ec45 4b10 	vmov	d0, r4, r5
 8011912:	bd70      	pop	{r4, r5, r6, pc}
 8011914:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011918:	da19      	bge.n	801194e <scalbn+0xc6>
 801191a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801191e:	429e      	cmp	r6, r3
 8011920:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011924:	dd0a      	ble.n	801193c <scalbn+0xb4>
 8011926:	a112      	add	r1, pc, #72	; (adr r1, 8011970 <scalbn+0xe8>)
 8011928:	e9d1 0100 	ldrd	r0, r1, [r1]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d1e2      	bne.n	80118f6 <scalbn+0x6e>
 8011930:	a30f      	add	r3, pc, #60	; (adr r3, 8011970 <scalbn+0xe8>)
 8011932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011936:	f7ee fe77 	bl	8000628 <__aeabi_dmul>
 801193a:	e7cb      	b.n	80118d4 <scalbn+0x4c>
 801193c:	a10a      	add	r1, pc, #40	; (adr r1, 8011968 <scalbn+0xe0>)
 801193e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d0b8      	beq.n	80118b8 <scalbn+0x30>
 8011946:	a10e      	add	r1, pc, #56	; (adr r1, 8011980 <scalbn+0xf8>)
 8011948:	e9d1 0100 	ldrd	r0, r1, [r1]
 801194c:	e7b4      	b.n	80118b8 <scalbn+0x30>
 801194e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011952:	3236      	adds	r2, #54	; 0x36
 8011954:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011958:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801195c:	4620      	mov	r0, r4
 801195e:	4b0c      	ldr	r3, [pc, #48]	; (8011990 <scalbn+0x108>)
 8011960:	2200      	movs	r2, #0
 8011962:	e7e8      	b.n	8011936 <scalbn+0xae>
 8011964:	f3af 8000 	nop.w
 8011968:	c2f8f359 	.word	0xc2f8f359
 801196c:	01a56e1f 	.word	0x01a56e1f
 8011970:	8800759c 	.word	0x8800759c
 8011974:	7e37e43c 	.word	0x7e37e43c
 8011978:	8800759c 	.word	0x8800759c
 801197c:	fe37e43c 	.word	0xfe37e43c
 8011980:	c2f8f359 	.word	0xc2f8f359
 8011984:	81a56e1f 	.word	0x81a56e1f
 8011988:	43500000 	.word	0x43500000
 801198c:	ffff3cb0 	.word	0xffff3cb0
 8011990:	3c900000 	.word	0x3c900000

08011994 <_init>:
 8011994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011996:	bf00      	nop
 8011998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801199a:	bc08      	pop	{r3}
 801199c:	469e      	mov	lr, r3
 801199e:	4770      	bx	lr

080119a0 <_fini>:
 80119a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119a2:	bf00      	nop
 80119a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119a6:	bc08      	pop	{r3}
 80119a8:	469e      	mov	lr, r3
 80119aa:	4770      	bx	lr
